// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sum_engine_1 (
        ap_clk,
        ap_rst,
        t0_V,
        t1_V,
        t2_V,
        t3_V,
        t4_V,
        t5_V,
        t6_V,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [8:0] t0_V;
input  [8:0] t1_V;
input  [8:0] t2_V;
input  [8:0] t3_V;
input  [8:0] t4_V;
input  [8:0] t5_V;
input  [8:0] t6_V;
output  [13:0] ap_return;

wire   [10:0] add_ln1192_fu_138_p2;
reg   [10:0] add_ln1192_reg_182;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] ret_V_3_fu_156_p2;
reg   [12:0] ret_V_3_reg_187;
wire    ap_block_pp0_stage0;
wire  signed [9:0] lhs_V_fu_76_p1;
wire  signed [9:0] rhs_V_fu_80_p1;
wire  signed [9:0] lhs_V_1_fu_90_p1;
wire  signed [9:0] rhs_V_1_fu_94_p1;
wire  signed [9:0] lhs_V_2_fu_104_p1;
wire  signed [9:0] rhs_V_2_fu_108_p1;
wire   [9:0] ret_V_2_fu_112_p2;
wire   [11:0] add2_V_fu_118_p3;
wire   [9:0] ret_V_1_fu_98_p2;
wire   [9:0] ret_V_fu_84_p2;
wire  signed [10:0] p_cast2_fu_130_p1;
wire  signed [10:0] sext_ln1192_fu_134_p1;
wire   [10:0] rhs_V_3_fu_144_p3;
wire  signed [12:0] sext_ln728_fu_126_p1;
wire  signed [12:0] sext_ln728_1_fu_152_p1;
wire   [12:0] tmp_fu_162_p3;
wire  signed [13:0] p_Val2_6_fu_169_p1;
wire  signed [13:0] add4_V_fu_173_p1;

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln1192_reg_182 <= add_ln1192_fu_138_p2;
        ret_V_3_reg_187[12 : 2] <= ret_V_3_fu_156_p2[12 : 2];
    end
end

assign add2_V_fu_118_p3 = {{ret_V_2_fu_112_p2}, {2'd0}};

assign add4_V_fu_173_p1 = $signed(ret_V_3_reg_187);

assign add_ln1192_fu_138_p2 = ($signed(p_cast2_fu_130_p1) + $signed(sext_ln1192_fu_134_p1));

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = ($signed(p_Val2_6_fu_169_p1) + $signed(add4_V_fu_173_p1));

assign lhs_V_1_fu_90_p1 = $signed(t2_V);

assign lhs_V_2_fu_104_p1 = $signed(t4_V);

assign lhs_V_fu_76_p1 = $signed(t0_V);

assign p_Val2_6_fu_169_p1 = $signed(tmp_fu_162_p3);

assign p_cast2_fu_130_p1 = $signed(ret_V_1_fu_98_p2);

assign ret_V_1_fu_98_p2 = ($signed(lhs_V_1_fu_90_p1) + $signed(rhs_V_1_fu_94_p1));

assign ret_V_2_fu_112_p2 = ($signed(lhs_V_2_fu_104_p1) + $signed(rhs_V_2_fu_108_p1));

assign ret_V_3_fu_156_p2 = ($signed(sext_ln728_fu_126_p1) + $signed(sext_ln728_1_fu_152_p1));

assign ret_V_fu_84_p2 = ($signed(lhs_V_fu_76_p1) + $signed(rhs_V_fu_80_p1));

assign rhs_V_1_fu_94_p1 = $signed(t3_V);

assign rhs_V_2_fu_108_p1 = $signed(t5_V);

assign rhs_V_3_fu_144_p3 = {{t6_V}, {2'd0}};

assign rhs_V_fu_80_p1 = $signed(t1_V);

assign sext_ln1192_fu_134_p1 = $signed(ret_V_fu_84_p2);

assign sext_ln728_1_fu_152_p1 = $signed(rhs_V_3_fu_144_p3);

assign sext_ln728_fu_126_p1 = $signed(add2_V_fu_118_p3);

assign tmp_fu_162_p3 = {{add_ln1192_reg_182}, {2'd0}};

always @ (posedge ap_clk) begin
    ret_V_3_reg_187[1:0] <= 2'b00;
end

endmodule //sum_engine_1
