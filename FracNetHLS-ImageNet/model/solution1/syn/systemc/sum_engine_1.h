// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sum_engine_1_HH_
#define _sum_engine_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sum_engine_1 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<9> > t0_V;
    sc_in< sc_lv<9> > t1_V;
    sc_in< sc_lv<9> > t2_V;
    sc_in< sc_lv<9> > t3_V;
    sc_in< sc_lv<9> > t4_V;
    sc_in< sc_lv<9> > t5_V;
    sc_in< sc_lv<9> > t6_V;
    sc_out< sc_lv<14> > ap_return;


    // Module declarations
    sum_engine_1(sc_module_name name);
    SC_HAS_PROCESS(sum_engine_1);

    ~sum_engine_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<11> > add_ln1192_fu_138_p2;
    sc_signal< sc_lv<11> > add_ln1192_reg_182;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<13> > ret_V_3_fu_156_p2;
    sc_signal< sc_lv<13> > ret_V_3_reg_187;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<10> > lhs_V_fu_76_p1;
    sc_signal< sc_lv<10> > rhs_V_fu_80_p1;
    sc_signal< sc_lv<10> > lhs_V_1_fu_90_p1;
    sc_signal< sc_lv<10> > rhs_V_1_fu_94_p1;
    sc_signal< sc_lv<10> > lhs_V_2_fu_104_p1;
    sc_signal< sc_lv<10> > rhs_V_2_fu_108_p1;
    sc_signal< sc_lv<10> > ret_V_2_fu_112_p2;
    sc_signal< sc_lv<12> > add2_V_fu_118_p3;
    sc_signal< sc_lv<10> > ret_V_1_fu_98_p2;
    sc_signal< sc_lv<10> > ret_V_fu_84_p2;
    sc_signal< sc_lv<11> > p_cast2_fu_130_p1;
    sc_signal< sc_lv<11> > sext_ln1192_fu_134_p1;
    sc_signal< sc_lv<11> > rhs_V_3_fu_144_p3;
    sc_signal< sc_lv<13> > sext_ln728_fu_126_p1;
    sc_signal< sc_lv<13> > sext_ln728_1_fu_152_p1;
    sc_signal< sc_lv<13> > tmp_fu_162_p3;
    sc_signal< sc_lv<14> > p_Val2_6_fu_169_p1;
    sc_signal< sc_lv<14> > add4_V_fu_173_p1;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add2_V_fu_118_p3();
    void thread_add4_V_fu_173_p1();
    void thread_add_ln1192_fu_138_p2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_return();
    void thread_lhs_V_1_fu_90_p1();
    void thread_lhs_V_2_fu_104_p1();
    void thread_lhs_V_fu_76_p1();
    void thread_p_Val2_6_fu_169_p1();
    void thread_p_cast2_fu_130_p1();
    void thread_ret_V_1_fu_98_p2();
    void thread_ret_V_2_fu_112_p2();
    void thread_ret_V_3_fu_156_p2();
    void thread_ret_V_fu_84_p2();
    void thread_rhs_V_1_fu_94_p1();
    void thread_rhs_V_2_fu_108_p1();
    void thread_rhs_V_3_fu_144_p3();
    void thread_rhs_V_fu_80_p1();
    void thread_sext_ln1192_fu_134_p1();
    void thread_sext_ln728_1_fu_152_p1();
    void thread_sext_ln728_fu_126_p1();
    void thread_tmp_fu_162_p3();
};

}

using namespace ap_rtl;

#endif
