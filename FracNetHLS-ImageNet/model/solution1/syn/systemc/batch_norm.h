// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _batch_norm_HH_
#define _batch_norm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "FracNet_mul_mul_8fYi.h"

namespace ap_rtl {

struct batch_norm : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > sum_V;
    sc_in< sc_lv<11> > weight_V;
    sc_in< sc_lv<11> > bias_V;
    sc_out< sc_lv<14> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    batch_norm(sc_module_name name);
    SC_HAS_PROCESS(batch_norm);

    ~batch_norm();

    sc_trace_file* mVcdFile;

    FracNet_mul_mul_8fYi<1,1,8,11,19>* FracNet_mul_mul_8fYi_U25;
    sc_signal< sc_lv<11> > bias_V_read_reg_295;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<11> > bias_V_read_reg_295_pp0_iter1_reg;
    sc_signal< sc_lv<19> > r_V_4_fu_286_p2;
    sc_signal< sc_lv<19> > r_V_4_reg_300;
    sc_signal< sc_lv<1> > p_Result_s_reg_305;
    sc_signal< sc_lv<13> > trunc_ln731_fu_75_p1;
    sc_signal< sc_lv<13> > trunc_ln731_reg_311;
    sc_signal< sc_lv<1> > p_Result_7_reg_316;
    sc_signal< sc_lv<14> > p_Val2_18_fu_179_p3;
    sc_signal< sc_lv<14> > p_Val2_18_reg_322;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<6> > p_Result_s_52_fu_92_p4;
    sc_signal< sc_lv<1> > icmp_ln785_fu_101_p2;
    sc_signal< sc_lv<1> > or_ln785_fu_107_p2;
    sc_signal< sc_lv<1> > xor_ln785_fu_112_p2;
    sc_signal< sc_lv<1> > icmp_ln786_fu_128_p2;
    sc_signal< sc_lv<1> > xor_ln786_fu_123_p2;
    sc_signal< sc_lv<1> > or_ln786_fu_134_p2;
    sc_signal< sc_lv<1> > underflow_fu_140_p2;
    sc_signal< sc_lv<1> > overflow_fu_117_p2;
    sc_signal< sc_lv<1> > xor_ln340_fu_151_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_145_p2;
    sc_signal< sc_lv<14> > sw_V_fu_85_p3;
    sc_signal< sc_lv<1> > or_ln340_35_fu_157_p2;
    sc_signal< sc_lv<14> > select_ln340_fu_163_p3;
    sc_signal< sc_lv<14> > select_ln388_fu_171_p3;
    sc_signal< sc_lv<12> > rhs_V_fu_190_p3;
    sc_signal< sc_lv<15> > lhs_V_fu_187_p1;
    sc_signal< sc_lv<15> > sext_ln728_fu_197_p1;
    sc_signal< sc_lv<15> > ret_V_fu_205_p2;
    sc_signal< sc_lv<14> > sext_ln1192_fu_201_p1;
    sc_signal< sc_lv<14> > p_Val2_20_fu_219_p2;
    sc_signal< sc_lv<1> > p_Result_9_fu_224_p3;
    sc_signal< sc_lv<1> > p_Result_8_fu_211_p3;
    sc_signal< sc_lv<1> > xor_ln786_9_fu_232_p2;
    sc_signal< sc_lv<1> > xor_ln340_174_fu_250_p2;
    sc_signal< sc_lv<1> > xor_ln340_316_fu_244_p2;
    sc_signal< sc_lv<1> > underflow_3_fu_238_p2;
    sc_signal< sc_lv<1> > or_ln340_444_fu_256_p2;
    sc_signal< sc_lv<14> > select_ln340_492_fu_262_p3;
    sc_signal< sc_lv<14> > select_ln388_173_fu_270_p3;
    sc_signal< sc_lv<8> > r_V_4_fu_286_p0;
    sc_signal< sc_lv<14> > select_ln340_525_fu_278_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<8> > sum_V_int_reg;
    sc_signal< sc_lv<11> > weight_V_int_reg;
    sc_signal< sc_lv<11> > bias_V_int_reg;
    sc_signal< sc_lv<14> > ap_return_int_reg;
    sc_signal< sc_lv<19> > r_V_4_fu_286_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<14> ap_const_lv14_1FFF;
    static const sc_lv<14> ap_const_lv14_2000;
    static const sc_lv<32> ap_const_lv32_E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_return();
    void thread_icmp_ln785_fu_101_p2();
    void thread_icmp_ln786_fu_128_p2();
    void thread_lhs_V_fu_187_p1();
    void thread_or_ln340_35_fu_157_p2();
    void thread_or_ln340_444_fu_256_p2();
    void thread_or_ln340_fu_145_p2();
    void thread_or_ln785_fu_107_p2();
    void thread_or_ln786_fu_134_p2();
    void thread_overflow_fu_117_p2();
    void thread_p_Result_8_fu_211_p3();
    void thread_p_Result_9_fu_224_p3();
    void thread_p_Result_s_52_fu_92_p4();
    void thread_p_Val2_18_fu_179_p3();
    void thread_p_Val2_20_fu_219_p2();
    void thread_r_V_4_fu_286_p0();
    void thread_r_V_4_fu_286_p00();
    void thread_ret_V_fu_205_p2();
    void thread_rhs_V_fu_190_p3();
    void thread_select_ln340_492_fu_262_p3();
    void thread_select_ln340_525_fu_278_p3();
    void thread_select_ln340_fu_163_p3();
    void thread_select_ln388_173_fu_270_p3();
    void thread_select_ln388_fu_171_p3();
    void thread_sext_ln1192_fu_201_p1();
    void thread_sext_ln728_fu_197_p1();
    void thread_sw_V_fu_85_p3();
    void thread_trunc_ln731_fu_75_p1();
    void thread_underflow_3_fu_238_p2();
    void thread_underflow_fu_140_p2();
    void thread_xor_ln340_174_fu_250_p2();
    void thread_xor_ln340_316_fu_244_p2();
    void thread_xor_ln340_fu_151_p2();
    void thread_xor_ln785_fu_112_p2();
    void thread_xor_ln786_9_fu_232_p2();
    void thread_xor_ln786_fu_123_p2();
};

}

using namespace ap_rtl;

#endif
