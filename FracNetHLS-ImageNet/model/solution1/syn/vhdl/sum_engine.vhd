-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sum_engine is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    t0_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t1_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t2_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t3_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t4_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t5_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t6_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t7_V : IN STD_LOGIC_VECTOR (5 downto 0);
    t8_V : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of sum_engine is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal t8_V_read_reg_152 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add0_V_fu_84_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add0_V_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal add1_V_fu_90_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add1_V_reg_162 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln68_1_fu_116_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_1_reg_167 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add2_V_fu_96_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add3_V_fu_102_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_3_fu_108_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_4_fu_112_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_fu_125_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_fu_122_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln68_fu_128_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add6_V_fu_134_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_4_fu_139_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_5_fu_143_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_146_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return_int_reg : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add0_V_reg_157 <= add0_V_fu_84_p2;
                add1_V_reg_162 <= add1_V_fu_90_p2;
                add_ln68_1_reg_167 <= add_ln68_1_fu_116_p2;
                t8_V_read_reg_152 <= t8_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= ret_V_fu_146_p2;
            end if;
        end if;
    end process;
    add0_V_fu_84_p2 <= std_logic_vector(unsigned(t1_V) + unsigned(t0_V));
    add1_V_fu_90_p2 <= std_logic_vector(unsigned(t3_V) + unsigned(t2_V));
    add2_V_fu_96_p2 <= std_logic_vector(unsigned(t5_V) + unsigned(t4_V));
    add3_V_fu_102_p2 <= std_logic_vector(unsigned(t7_V) + unsigned(t6_V));
    add6_V_fu_134_p2 <= std_logic_vector(unsigned(add_ln68_1_reg_167) + unsigned(add_ln68_fu_128_p2));
    add_ln68_1_fu_116_p2 <= std_logic_vector(signed(lhs_V_3_fu_108_p1) + signed(rhs_V_4_fu_112_p1));
    add_ln68_fu_128_p2 <= std_logic_vector(signed(rhs_V_fu_125_p1) + signed(lhs_V_fu_122_p1));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(ret_V_fu_146_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= ret_V_fu_146_p2;
        end if; 
    end process;

        lhs_V_3_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add2_V_fu_96_p2),7));

        lhs_V_4_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add6_V_fu_134_p2),8));

        lhs_V_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add0_V_reg_157),7));

    ret_V_fu_146_p2 <= std_logic_vector(signed(lhs_V_4_fu_139_p1) + signed(rhs_V_5_fu_143_p1));
        rhs_V_4_fu_112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add3_V_fu_102_p2),7));

    rhs_V_5_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t8_V_read_reg_152),8));
        rhs_V_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add1_V_reg_162),7));

end behav;
