-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row : IN STD_LOGIC_VECTOR (4 downto 0);
    col : IN STD_LOGIC_VECTOR (4 downto 0);
    c : IN STD_LOGIC_VECTOR (2 downto 0);
    buf_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_we0 : OUT STD_LOGIC;
    buf_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_img_V_AWVALID : OUT STD_LOGIC;
    m_axi_img_V_AWREADY : IN STD_LOGIC;
    m_axi_img_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_WVALID : OUT STD_LOGIC;
    m_axi_img_V_WREADY : IN STD_LOGIC;
    m_axi_img_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_img_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_WLAST : OUT STD_LOGIC;
    m_axi_img_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_ARVALID : OUT STD_LOGIC;
    m_axi_img_V_ARREADY : IN STD_LOGIC;
    m_axi_img_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RVALID : IN STD_LOGIC;
    m_axi_img_V_RREADY : OUT STD_LOGIC;
    m_axi_img_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_img_V_RLAST : IN STD_LOGIC;
    m_axi_img_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_BVALID : IN STD_LOGIC;
    m_axi_img_V_BREADY : OUT STD_LOGIC;
    m_axi_img_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    img_V_offset : IN STD_LOGIC_VECTOR (30 downto 0) );
end;


architecture behav of load_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv20_C784 : STD_LOGIC_VECTOR (19 downto 0) := "00001100011110000100";
    constant ap_const_lv17_E4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000011100100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_40_reg_424 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal icmp_ln356_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_130 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mm_0_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal nn_0_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln365_1_fu_182_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln365_1_reg_357 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln365_fu_208_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln365_reg_362 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_342_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln365_reg_367 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln356_1_fu_217_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln356_1_reg_372 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln356_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln356_reg_377_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln356_2_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln356_2_reg_381 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln356_fu_251_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_reg_386_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_fu_259_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal select_ln356_1_reg_391_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln356_1_reg_391_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln356_fu_271_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln356_reg_398 : STD_LOGIC_VECTOR (8 downto 0);
    signal nn_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal nn_reg_403 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_350_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln356_1_reg_408 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_39_reg_413 : STD_LOGIC_VECTOR (6 downto 0);
    signal img_V_addr_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_V_addr_reg_428 : STD_LOGIC_VECTOR (6 downto 0);
    signal img_V_addr_read_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_134_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_mm_0_phi_fu_146_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_nn_0_phi_fu_158_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_6_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln321_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln365_1_fu_166_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln365_3_fu_174_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln365_4_fu_178_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln365_1_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln365_2_fu_204_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln357_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mm_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln356_fu_267_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln357_fu_285_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln321_2_fu_288_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_311_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln321_fu_308_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_4_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_fu_322_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_5_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_1_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_233_ce : STD_LOGIC;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_342_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component FracNet_urem_7ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component FracNet_mac_muladcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component FracNet_mac_muladdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    FracNet_urem_7ns_bkb_U1 : component FracNet_urem_7ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_134_p4,
        din1 => grp_fu_233_p1,
        ce => grp_fu_233_ce,
        dout => grp_fu_233_p2);

    FracNet_mac_muladcud_U2 : component FracNet_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 17,
        din2_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        din2 => sub_ln365_1_reg_357,
        dout => grp_fu_342_p3);

    FracNet_mac_muladdEe_U3 : component FracNet_mac_muladdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => add_ln356_reg_398,
        din1 => grp_fu_350_p1,
        din2 => add_ln365_reg_367,
        dout => grp_fu_350_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_130 <= add_ln356_2_reg_381;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_130 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    mm_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mm_0_reg_142 <= select_ln356_1_reg_391;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                mm_0_reg_142 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    nn_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                nn_0_reg_154 <= nn_reg_403;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                nn_0_reg_154 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln356_1_reg_408 <= grp_fu_350_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln356_2_reg_381 <= add_ln356_2_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln356_reg_398 <= add_ln356_fu_271_p2;
                select_ln356_reg_386 <= select_ln356_fu_251_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln365_reg_367 <= grp_fu_342_p3;
                sub_ln365_reg_362 <= sub_ln365_fu_208_p2;
                    zext_ln356_1_reg_372(30 downto 0) <= zext_ln356_1_fu_217_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_V_addr_reg_428 <= zext_ln321_6_fu_337_p1(7 - 1 downto 0);
                img_V_addr_read_reg_433 <= m_axi_img_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_39_reg_413 <= grp_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_40_reg_424 <= empty_40_fu_303_p2;
                img_V_addr_reg_418 <= sext_ln321_fu_293_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln356_reg_377 <= icmp_ln356_fu_221_p2;
                icmp_ln356_reg_377_pp0_iter1_reg <= icmp_ln356_reg_377;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln356_reg_377_pp0_iter10_reg <= icmp_ln356_reg_377_pp0_iter9_reg;
                icmp_ln356_reg_377_pp0_iter11_reg <= icmp_ln356_reg_377_pp0_iter10_reg;
                icmp_ln356_reg_377_pp0_iter12_reg <= icmp_ln356_reg_377_pp0_iter11_reg;
                icmp_ln356_reg_377_pp0_iter13_reg <= icmp_ln356_reg_377_pp0_iter12_reg;
                icmp_ln356_reg_377_pp0_iter14_reg <= icmp_ln356_reg_377_pp0_iter13_reg;
                icmp_ln356_reg_377_pp0_iter15_reg <= icmp_ln356_reg_377_pp0_iter14_reg;
                icmp_ln356_reg_377_pp0_iter16_reg <= icmp_ln356_reg_377_pp0_iter15_reg;
                icmp_ln356_reg_377_pp0_iter17_reg <= icmp_ln356_reg_377_pp0_iter16_reg;
                icmp_ln356_reg_377_pp0_iter18_reg <= icmp_ln356_reg_377_pp0_iter17_reg;
                icmp_ln356_reg_377_pp0_iter19_reg <= icmp_ln356_reg_377_pp0_iter18_reg;
                icmp_ln356_reg_377_pp0_iter2_reg <= icmp_ln356_reg_377_pp0_iter1_reg;
                icmp_ln356_reg_377_pp0_iter3_reg <= icmp_ln356_reg_377_pp0_iter2_reg;
                icmp_ln356_reg_377_pp0_iter4_reg <= icmp_ln356_reg_377_pp0_iter3_reg;
                icmp_ln356_reg_377_pp0_iter5_reg <= icmp_ln356_reg_377_pp0_iter4_reg;
                icmp_ln356_reg_377_pp0_iter6_reg <= icmp_ln356_reg_377_pp0_iter5_reg;
                icmp_ln356_reg_377_pp0_iter7_reg <= icmp_ln356_reg_377_pp0_iter6_reg;
                icmp_ln356_reg_377_pp0_iter8_reg <= icmp_ln356_reg_377_pp0_iter7_reg;
                icmp_ln356_reg_377_pp0_iter9_reg <= icmp_ln356_reg_377_pp0_iter8_reg;
                select_ln356_1_reg_391_pp0_iter10_reg <= select_ln356_1_reg_391;
                select_ln356_1_reg_391_pp0_iter11_reg <= select_ln356_1_reg_391_pp0_iter10_reg;
                select_ln356_1_reg_391_pp0_iter12_reg <= select_ln356_1_reg_391_pp0_iter11_reg;
                select_ln356_1_reg_391_pp0_iter13_reg <= select_ln356_1_reg_391_pp0_iter12_reg;
                select_ln356_1_reg_391_pp0_iter14_reg <= select_ln356_1_reg_391_pp0_iter13_reg;
                select_ln356_1_reg_391_pp0_iter15_reg <= select_ln356_1_reg_391_pp0_iter14_reg;
                select_ln356_1_reg_391_pp0_iter16_reg <= select_ln356_1_reg_391_pp0_iter15_reg;
                select_ln356_1_reg_391_pp0_iter17_reg <= select_ln356_1_reg_391_pp0_iter16_reg;
                select_ln356_1_reg_391_pp0_iter18_reg <= select_ln356_1_reg_391_pp0_iter17_reg;
                select_ln356_reg_386_pp0_iter10_reg <= select_ln356_reg_386;
                select_ln356_reg_386_pp0_iter11_reg <= select_ln356_reg_386_pp0_iter10_reg;
                select_ln356_reg_386_pp0_iter12_reg <= select_ln356_reg_386_pp0_iter11_reg;
                select_ln356_reg_386_pp0_iter13_reg <= select_ln356_reg_386_pp0_iter12_reg;
                select_ln356_reg_386_pp0_iter14_reg <= select_ln356_reg_386_pp0_iter13_reg;
                select_ln356_reg_386_pp0_iter15_reg <= select_ln356_reg_386_pp0_iter14_reg;
                select_ln356_reg_386_pp0_iter16_reg <= select_ln356_reg_386_pp0_iter15_reg;
                select_ln356_reg_386_pp0_iter17_reg <= select_ln356_reg_386_pp0_iter16_reg;
                select_ln356_reg_386_pp0_iter18_reg <= select_ln356_reg_386_pp0_iter17_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln356_reg_377_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nn_reg_403 <= nn_fu_276_p2;
                select_ln356_1_reg_391 <= select_ln356_1_fu_259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_ln365_1_reg_357 <= sub_ln365_1_fu_182_p2;
            end if;
        end if;
    end process;
    zext_ln356_1_reg_372(32 downto 31) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter19, icmp_ln356_fu_221_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln356_fu_221_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln356_fu_221_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln321_1_fu_331_p2 <= std_logic_vector(unsigned(add_ln321_fu_322_p2) + unsigned(zext_ln321_5_fu_328_p1));
    add_ln321_2_fu_288_p2 <= std_logic_vector(unsigned(zext_ln356_1_reg_372) + unsigned(sext_ln357_fu_285_p1));
    add_ln321_fu_322_p2 <= std_logic_vector(unsigned(zext_ln321_fu_308_p1) + unsigned(zext_ln321_4_fu_318_p1));
    add_ln356_2_fu_227_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_134_p4) + unsigned(ap_const_lv7_1));
    add_ln356_fu_271_p2 <= std_logic_vector(unsigned(zext_ln356_fu_267_p1) + unsigned(sub_ln365_reg_362));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_img_V_RVALID, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter19, icmp_ln356_reg_377_pp0_iter18_reg, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io)) or ((icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_img_V_RVALID, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter19, icmp_ln356_reg_377_pp0_iter18_reg, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io)) or ((icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(m_axi_img_V_ARREADY, empty_40_reg_424)
    begin
                ap_block_state15_io <= ((empty_40_reg_424 = ap_const_lv1_1) and (m_axi_img_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter19_assign_proc : process(m_axi_img_V_RVALID, icmp_ln356_reg_377_pp0_iter18_reg)
    begin
                ap_block_state22_pp0_stage0_iter19 <= ((icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln356_fu_221_p2)
    begin
        if ((icmp_ln356_fu_221_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_134_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln356_reg_377, indvar_flatten_reg_130, ap_CS_fsm_pp0_stage0, add_ln356_2_reg_381, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln356_reg_377 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_134_p4 <= add_ln356_2_reg_381;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_134_p4 <= indvar_flatten_reg_130;
        end if; 
    end process;


    ap_phi_mux_mm_0_phi_fu_146_p4_assign_proc : process(ap_block_pp0_stage0, mm_0_reg_142, icmp_ln356_reg_377_pp0_iter9_reg, select_ln356_1_reg_391, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_phi_mux_mm_0_phi_fu_146_p4 <= select_ln356_1_reg_391;
        else 
            ap_phi_mux_mm_0_phi_fu_146_p4 <= mm_0_reg_142;
        end if; 
    end process;


    ap_phi_mux_nn_0_phi_fu_158_p4_assign_proc : process(ap_block_pp0_stage0, nn_0_reg_154, icmp_ln356_reg_377_pp0_iter9_reg, nn_reg_403, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln356_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_phi_mux_nn_0_phi_fu_158_p4 <= nn_reg_403;
        else 
            ap_phi_mux_nn_0_phi_fu_158_p4 <= nn_0_reg_154;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_address0 <= buf_V_addr_reg_428;

    buf_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_V_d0 <= img_V_addr_read_reg_433;

    buf_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln356_reg_377_pp0_iter19_reg, ap_enable_reg_pp0_iter20)
    begin
        if (((icmp_ln356_reg_377_pp0_iter19_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_V_we0 <= ap_const_logic_1;
        else 
            buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_40_fu_303_p2 <= "1" when (empty_39_reg_413 = ap_const_lv7_0) else "0";

    grp_fu_233_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_233_ce <= ap_const_logic_1;
        else 
            grp_fu_233_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_233_p1 <= ap_const_lv7_9(5 - 1 downto 0);
    grp_fu_342_p0 <= grp_fu_342_p00(3 - 1 downto 0);
    grp_fu_342_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c),20));
    grp_fu_342_p1 <= ap_const_lv20_C784(17 - 1 downto 0);
    grp_fu_350_p1 <= ap_const_lv17_E4(9 - 1 downto 0);
    icmp_ln356_fu_221_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_134_p4 = ap_const_lv7_51) else "0";
    icmp_ln357_fu_245_p2 <= "1" when (ap_phi_mux_nn_0_phi_fu_158_p4 = ap_const_lv4_9) else "0";

    img_V_blk_n_AR_assign_proc : process(m_axi_img_V_ARREADY, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, empty_40_reg_424)
    begin
        if (((empty_40_reg_424 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            img_V_blk_n_AR <= m_axi_img_V_ARREADY;
        else 
            img_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    img_V_blk_n_R_assign_proc : process(m_axi_img_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln356_reg_377_pp0_iter18_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            img_V_blk_n_R <= m_axi_img_V_RVALID;
        else 
            img_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_img_V_ARADDR <= img_V_addr_reg_418;
    m_axi_img_V_ARBURST <= ap_const_lv2_0;
    m_axi_img_V_ARCACHE <= ap_const_lv4_0;
    m_axi_img_V_ARID <= ap_const_lv1_0;
    m_axi_img_V_ARLEN <= ap_const_lv32_9;
    m_axi_img_V_ARLOCK <= ap_const_lv2_0;
    m_axi_img_V_ARPROT <= ap_const_lv3_0;
    m_axi_img_V_ARQOS <= ap_const_lv4_0;
    m_axi_img_V_ARREGION <= ap_const_lv4_0;
    m_axi_img_V_ARSIZE <= ap_const_lv3_0;
    m_axi_img_V_ARUSER <= ap_const_lv1_0;

    m_axi_img_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter12, empty_40_reg_424, ap_block_pp0_stage0_11001)
    begin
        if (((empty_40_reg_424 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_img_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_img_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_img_V_AWADDR <= ap_const_lv32_0;
    m_axi_img_V_AWBURST <= ap_const_lv2_0;
    m_axi_img_V_AWCACHE <= ap_const_lv4_0;
    m_axi_img_V_AWID <= ap_const_lv1_0;
    m_axi_img_V_AWLEN <= ap_const_lv32_0;
    m_axi_img_V_AWLOCK <= ap_const_lv2_0;
    m_axi_img_V_AWPROT <= ap_const_lv3_0;
    m_axi_img_V_AWQOS <= ap_const_lv4_0;
    m_axi_img_V_AWREGION <= ap_const_lv4_0;
    m_axi_img_V_AWSIZE <= ap_const_lv3_0;
    m_axi_img_V_AWUSER <= ap_const_lv1_0;
    m_axi_img_V_AWVALID <= ap_const_logic_0;
    m_axi_img_V_BREADY <= ap_const_logic_0;

    m_axi_img_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter19, icmp_ln356_reg_377_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln356_reg_377_pp0_iter18_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_img_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_img_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_img_V_WDATA <= ap_const_lv16_0;
    m_axi_img_V_WID <= ap_const_lv1_0;
    m_axi_img_V_WLAST <= ap_const_logic_0;
    m_axi_img_V_WSTRB <= ap_const_lv2_0;
    m_axi_img_V_WUSER <= ap_const_lv1_0;
    m_axi_img_V_WVALID <= ap_const_logic_0;
    mm_fu_239_p2 <= std_logic_vector(unsigned(ap_phi_mux_mm_0_phi_fu_146_p4) + unsigned(ap_const_lv4_1));
    nn_fu_276_p2 <= std_logic_vector(unsigned(select_ln356_fu_251_p3) + unsigned(ap_const_lv4_1));
    select_ln356_1_fu_259_p3 <= 
        mm_fu_239_p2 when (icmp_ln357_fu_245_p2(0) = '1') else 
        ap_phi_mux_mm_0_phi_fu_146_p4;
    select_ln356_fu_251_p3 <= 
        ap_const_lv4_0 when (icmp_ln357_fu_245_p2(0) = '1') else 
        ap_phi_mux_nn_0_phi_fu_158_p4;
        sext_ln321_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_2_fu_288_p2),64));

        sext_ln357_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln356_1_reg_408),33));

    shl_ln365_1_fu_166_p3 <= (row & ap_const_lv3_0);
    shl_ln_fu_192_p3 <= (col & ap_const_lv3_0);
    sub_ln365_1_fu_182_p2 <= std_logic_vector(unsigned(zext_ln365_3_fu_174_p1) - unsigned(zext_ln365_4_fu_178_p1));
    sub_ln365_fu_208_p2 <= std_logic_vector(unsigned(zext_ln365_1_fu_200_p1) - unsigned(zext_ln365_2_fu_204_p1));
    tmp_s_fu_311_p3 <= (select_ln356_1_reg_391_pp0_iter18_reg & ap_const_lv3_0);
    zext_ln321_4_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_311_p3),8));
    zext_ln321_5_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_reg_386_pp0_iter18_reg),8));
    zext_ln321_6_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_331_p2),64));
    zext_ln321_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_1_reg_391_pp0_iter18_reg),8));
    zext_ln356_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_V_offset),33));
    zext_ln356_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln356_1_fu_259_p3),9));
    zext_ln365_1_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_192_p3),9));
    zext_ln365_2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col),9));
    zext_ln365_3_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln365_1_fu_166_p3),9));
    zext_ln365_4_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row),9));
end behav;
