// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="load_weight_3x3_from_axi,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.423000,HLS_SYN_LAT=81,HLS_SYN_TPT=none,HLS_SYN_MEM=15,HLS_SYN_DSP=0,HLS_SYN_FF=836,HLS_SYN_LUT=795,HLS_VERSION=2019_2_1}" *)

module load_weight_3x3_from_axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_0_V_address0,
        dest_0_V_ce0,
        dest_0_V_we0,
        dest_0_V_d0,
        dest_1_V_address0,
        dest_1_V_ce0,
        dest_1_V_we0,
        dest_1_V_d0,
        dest_2_V_address0,
        dest_2_V_ce0,
        dest_2_V_we0,
        dest_2_V_d0,
        dest_3_V_address0,
        dest_3_V_ce0,
        dest_3_V_we0,
        dest_3_V_d0,
        dest_4_V_address0,
        dest_4_V_ce0,
        dest_4_V_we0,
        dest_4_V_d0,
        dest_5_V_address0,
        dest_5_V_ce0,
        dest_5_V_we0,
        dest_5_V_d0,
        dest_6_V_address0,
        dest_6_V_ce0,
        dest_6_V_we0,
        dest_6_V_d0,
        dest_7_V_address0,
        dest_7_V_ce0,
        dest_7_V_we0,
        dest_7_V_d0,
        dest_8_V_address0,
        dest_8_V_ce0,
        dest_8_V_we0,
        dest_8_V_d0,
        dest_9_V_address0,
        dest_9_V_ce0,
        dest_9_V_we0,
        dest_9_V_d0,
        dest_10_V_address0,
        dest_10_V_ce0,
        dest_10_V_we0,
        dest_10_V_d0,
        dest_11_V_address0,
        dest_11_V_ce0,
        dest_11_V_we0,
        dest_11_V_d0,
        dest_12_V_address0,
        dest_12_V_ce0,
        dest_12_V_we0,
        dest_12_V_d0,
        dest_13_V_address0,
        dest_13_V_ce0,
        dest_13_V_we0,
        dest_13_V_d0,
        dest_14_V_address0,
        dest_14_V_ce0,
        dest_14_V_we0,
        dest_14_V_d0,
        dest_15_V_address0,
        dest_15_V_ce0,
        dest_15_V_we0,
        dest_15_V_d0,
        dest_16_V_address0,
        dest_16_V_ce0,
        dest_16_V_we0,
        dest_16_V_d0,
        dest_17_V_address0,
        dest_17_V_ce0,
        dest_17_V_we0,
        dest_17_V_d0,
        dest_18_V_address0,
        dest_18_V_ce0,
        dest_18_V_we0,
        dest_18_V_d0,
        dest_19_V_address0,
        dest_19_V_ce0,
        dest_19_V_we0,
        dest_19_V_d0,
        dest_20_V_address0,
        dest_20_V_ce0,
        dest_20_V_we0,
        dest_20_V_d0,
        dest_21_V_address0,
        dest_21_V_ce0,
        dest_21_V_we0,
        dest_21_V_d0,
        dest_22_V_address0,
        dest_22_V_ce0,
        dest_22_V_we0,
        dest_22_V_d0,
        dest_23_V_address0,
        dest_23_V_ce0,
        dest_23_V_we0,
        dest_23_V_d0,
        dest_24_V_address0,
        dest_24_V_ce0,
        dest_24_V_we0,
        dest_24_V_d0,
        dest_25_V_address0,
        dest_25_V_ce0,
        dest_25_V_we0,
        dest_25_V_d0,
        dest_26_V_address0,
        dest_26_V_ce0,
        dest_26_V_we0,
        dest_26_V_d0,
        dest_27_V_address0,
        dest_27_V_ce0,
        dest_27_V_we0,
        dest_27_V_d0,
        dest_28_V_address0,
        dest_28_V_ce0,
        dest_28_V_we0,
        dest_28_V_d0,
        dest_29_V_address0,
        dest_29_V_ce0,
        dest_29_V_we0,
        dest_29_V_d0,
        dest_30_V_address0,
        dest_30_V_ce0,
        dest_30_V_we0,
        dest_30_V_d0,
        dest_31_V_address0,
        dest_31_V_ce0,
        dest_31_V_we0,
        dest_31_V_d0,
        src_V_address0,
        src_V_ce0,
        src_V_q0,
        index
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state7 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dest_0_V_address0;
output   dest_0_V_ce0;
output   dest_0_V_we0;
output  [63:0] dest_0_V_d0;
output  [3:0] dest_1_V_address0;
output   dest_1_V_ce0;
output   dest_1_V_we0;
output  [63:0] dest_1_V_d0;
output  [3:0] dest_2_V_address0;
output   dest_2_V_ce0;
output   dest_2_V_we0;
output  [63:0] dest_2_V_d0;
output  [3:0] dest_3_V_address0;
output   dest_3_V_ce0;
output   dest_3_V_we0;
output  [63:0] dest_3_V_d0;
output  [3:0] dest_4_V_address0;
output   dest_4_V_ce0;
output   dest_4_V_we0;
output  [63:0] dest_4_V_d0;
output  [3:0] dest_5_V_address0;
output   dest_5_V_ce0;
output   dest_5_V_we0;
output  [63:0] dest_5_V_d0;
output  [3:0] dest_6_V_address0;
output   dest_6_V_ce0;
output   dest_6_V_we0;
output  [63:0] dest_6_V_d0;
output  [3:0] dest_7_V_address0;
output   dest_7_V_ce0;
output   dest_7_V_we0;
output  [63:0] dest_7_V_d0;
output  [3:0] dest_8_V_address0;
output   dest_8_V_ce0;
output   dest_8_V_we0;
output  [63:0] dest_8_V_d0;
output  [3:0] dest_9_V_address0;
output   dest_9_V_ce0;
output   dest_9_V_we0;
output  [63:0] dest_9_V_d0;
output  [3:0] dest_10_V_address0;
output   dest_10_V_ce0;
output   dest_10_V_we0;
output  [63:0] dest_10_V_d0;
output  [3:0] dest_11_V_address0;
output   dest_11_V_ce0;
output   dest_11_V_we0;
output  [63:0] dest_11_V_d0;
output  [3:0] dest_12_V_address0;
output   dest_12_V_ce0;
output   dest_12_V_we0;
output  [63:0] dest_12_V_d0;
output  [3:0] dest_13_V_address0;
output   dest_13_V_ce0;
output   dest_13_V_we0;
output  [63:0] dest_13_V_d0;
output  [3:0] dest_14_V_address0;
output   dest_14_V_ce0;
output   dest_14_V_we0;
output  [63:0] dest_14_V_d0;
output  [3:0] dest_15_V_address0;
output   dest_15_V_ce0;
output   dest_15_V_we0;
output  [63:0] dest_15_V_d0;
output  [3:0] dest_16_V_address0;
output   dest_16_V_ce0;
output   dest_16_V_we0;
output  [63:0] dest_16_V_d0;
output  [3:0] dest_17_V_address0;
output   dest_17_V_ce0;
output   dest_17_V_we0;
output  [63:0] dest_17_V_d0;
output  [3:0] dest_18_V_address0;
output   dest_18_V_ce0;
output   dest_18_V_we0;
output  [63:0] dest_18_V_d0;
output  [3:0] dest_19_V_address0;
output   dest_19_V_ce0;
output   dest_19_V_we0;
output  [63:0] dest_19_V_d0;
output  [3:0] dest_20_V_address0;
output   dest_20_V_ce0;
output   dest_20_V_we0;
output  [63:0] dest_20_V_d0;
output  [3:0] dest_21_V_address0;
output   dest_21_V_ce0;
output   dest_21_V_we0;
output  [63:0] dest_21_V_d0;
output  [3:0] dest_22_V_address0;
output   dest_22_V_ce0;
output   dest_22_V_we0;
output  [63:0] dest_22_V_d0;
output  [3:0] dest_23_V_address0;
output   dest_23_V_ce0;
output   dest_23_V_we0;
output  [63:0] dest_23_V_d0;
output  [3:0] dest_24_V_address0;
output   dest_24_V_ce0;
output   dest_24_V_we0;
output  [63:0] dest_24_V_d0;
output  [3:0] dest_25_V_address0;
output   dest_25_V_ce0;
output   dest_25_V_we0;
output  [63:0] dest_25_V_d0;
output  [3:0] dest_26_V_address0;
output   dest_26_V_ce0;
output   dest_26_V_we0;
output  [63:0] dest_26_V_d0;
output  [3:0] dest_27_V_address0;
output   dest_27_V_ce0;
output   dest_27_V_we0;
output  [63:0] dest_27_V_d0;
output  [3:0] dest_28_V_address0;
output   dest_28_V_ce0;
output   dest_28_V_we0;
output  [63:0] dest_28_V_d0;
output  [3:0] dest_29_V_address0;
output   dest_29_V_ce0;
output   dest_29_V_we0;
output  [63:0] dest_29_V_d0;
output  [3:0] dest_30_V_address0;
output   dest_30_V_ce0;
output   dest_30_V_we0;
output  [63:0] dest_30_V_d0;
output  [3:0] dest_31_V_address0;
output   dest_31_V_ce0;
output   dest_31_V_we0;
output  [63:0] dest_31_V_d0;
output  [13:0] src_V_address0;
output   src_V_ce0;
input  [511:0] src_V_q0;
input  [31:0] index;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dest_0_V_ce0;
reg dest_0_V_we0;
reg dest_1_V_ce0;
reg dest_1_V_we0;
reg dest_2_V_ce0;
reg dest_2_V_we0;
reg dest_3_V_ce0;
reg dest_3_V_we0;
reg dest_4_V_ce0;
reg dest_4_V_we0;
reg dest_5_V_ce0;
reg dest_5_V_we0;
reg dest_6_V_ce0;
reg dest_6_V_we0;
reg dest_7_V_ce0;
reg dest_7_V_we0;
reg dest_8_V_ce0;
reg dest_8_V_we0;
reg dest_9_V_ce0;
reg dest_9_V_we0;
reg dest_10_V_ce0;
reg dest_10_V_we0;
reg dest_11_V_ce0;
reg dest_11_V_we0;
reg dest_12_V_ce0;
reg dest_12_V_we0;
reg dest_13_V_ce0;
reg dest_13_V_we0;
reg dest_14_V_ce0;
reg dest_14_V_we0;
reg dest_15_V_ce0;
reg dest_15_V_we0;
reg dest_16_V_ce0;
reg dest_16_V_we0;
reg dest_17_V_ce0;
reg dest_17_V_we0;
reg dest_18_V_ce0;
reg dest_18_V_we0;
reg dest_19_V_ce0;
reg dest_19_V_we0;
reg dest_20_V_ce0;
reg dest_20_V_we0;
reg dest_21_V_ce0;
reg dest_21_V_we0;
reg dest_22_V_ce0;
reg dest_22_V_we0;
reg dest_23_V_ce0;
reg dest_23_V_we0;
reg dest_24_V_ce0;
reg dest_24_V_we0;
reg dest_25_V_ce0;
reg dest_25_V_we0;
reg dest_26_V_ce0;
reg dest_26_V_we0;
reg dest_27_V_ce0;
reg dest_27_V_we0;
reg dest_28_V_ce0;
reg dest_28_V_we0;
reg dest_29_V_ce0;
reg dest_29_V_we0;
reg dest_30_V_ce0;
reg dest_30_V_we0;
reg dest_31_V_ce0;
reg dest_31_V_we0;
reg src_V_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] indvar_flatten13_reg_634;
reg   [2:0] cc_0_reg_645;
reg   [3:0] indvar_flatten_reg_656;
reg   [1:0] m_0_reg_667;
reg   [1:0] n_0_reg_679;
reg   [5:0] indvar_flatten66_reg_691;
reg   [1:0] m7_0_reg_702;
reg   [4:0] indvar_flatten52_reg_714;
reg   [1:0] n8_0_reg_725;
reg   [2:0] cc9_0_reg_737;
wire   [0:0] icmp_ln147_fu_748_p2;
reg   [0:0] icmp_ln147_reg_1323;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln147_reg_1323_pp0_iter1_reg;
reg   [0:0] icmp_ln147_reg_1323_pp0_iter2_reg;
reg   [0:0] icmp_ln147_reg_1323_pp0_iter3_reg;
wire   [5:0] add_ln147_1_fu_754_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln148_fu_766_p2;
reg   [0:0] icmp_ln148_reg_1332;
wire   [2:0] select_ln147_1_fu_772_p3;
reg   [2:0] select_ln147_1_reg_1339;
wire   [3:0] select_ln148_fu_786_p3;
wire   [1:0] select_ln152_fu_883_p3;
reg   [1:0] select_ln152_reg_1352;
wire   [1:0] select_ln152_1_fu_891_p3;
reg   [1:0] select_ln152_1_reg_1358;
reg    ap_enable_reg_pp0_iter1;
wire   [14:0] trunc_ln647_fu_913_p1;
reg   [14:0] trunc_ln647_reg_1363;
wire   [12:0] trunc_ln647_1_fu_917_p1;
reg   [12:0] trunc_ln647_1_reg_1368;
wire   [6:0] add_ln321_fu_921_p2;
reg   [6:0] add_ln321_reg_1373;
wire   [1:0] n_fu_927_p2;
reg   [1:0] n_reg_1379;
wire   [6:0] add_ln321_1_fu_972_p2;
reg   [6:0] add_ln321_1_reg_1389;
reg   [6:0] add_ln321_1_reg_1389_pp0_iter3_reg;
reg   [511:0] p_Val2_1_reg_1394;
wire   [0:0] icmp_ln157_fu_982_p2;
reg   [0:0] icmp_ln157_reg_1399;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln157_reg_1399_pp1_iter1_reg;
wire   [5:0] add_ln157_fu_988_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln158_fu_994_p2;
reg   [0:0] icmp_ln158_reg_1408;
wire   [0:0] and_ln161_fu_1012_p2;
reg   [0:0] and_ln161_reg_1414;
wire   [2:0] select_ln161_2_fu_1024_p3;
reg   [2:0] select_ln161_2_reg_1419;
wire   [1:0] trunc_ln321_fu_1032_p1;
reg   [1:0] trunc_ln321_reg_1425;
reg   [1:0] trunc_ln321_reg_1425_pp1_iter1_reg;
reg   [1:0] trunc_ln321_reg_1425_pp1_iter2_reg;
wire   [2:0] cc_1_fu_1036_p2;
wire   [4:0] select_ln158_fu_1048_p3;
wire   [1:0] select_ln161_1_fu_1069_p3;
reg   [1:0] select_ln161_1_reg_1439;
reg    ap_enable_reg_pp1_iter1;
reg   [1:0] select_ln161_1_reg_1439_pp1_iter2_reg;
wire   [1:0] select_ln161_3_fu_1086_p3;
reg   [1:0] select_ln161_3_reg_1446;
reg   [1:0] select_ln161_3_reg_1446_pp1_iter2_reg;
wire   [6:0] add_ln161_fu_1117_p2;
reg   [6:0] add_ln161_reg_1453;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [5:0] src_buf_V_address0;
reg    src_buf_V_ce0;
reg    src_buf_V_we0;
wire   [511:0] src_buf_V_q0;
reg   [2:0] ap_phi_mux_cc_0_phi_fu_649_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_m_0_phi_fu_671_p4;
reg   [1:0] ap_phi_mux_n_0_phi_fu_683_p4;
reg   [1:0] ap_phi_mux_m7_0_phi_fu_706_p4;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_n8_0_phi_fu_729_p4;
wire   [63:0] zext_ln647_2_fu_967_p1;
wire   [63:0] zext_ln321_2_fu_978_p1;
wire   [63:0] zext_ln161_4_fu_1142_p1;
wire  signed [63:0] sext_ln321_1_fu_1176_p1;
wire   [63:0] trunc_ln647_2_fu_1212_p1;
wire   [2:0] cc_fu_760_p2;
wire   [3:0] add_ln148_1_fu_780_p2;
wire   [31:0] zext_ln147_fu_801_p1;
wire  signed [31:0] add_ln147_fu_804_p2;
wire   [33:0] tmp_2_fu_813_p3;
wire  signed [34:0] sext_ln647_1_fu_821_p1;
wire  signed [34:0] sext_ln647_fu_809_p1;
wire   [4:0] tmp_3_fu_834_p3;
wire   [5:0] zext_ln321_1_fu_841_p1;
wire   [5:0] zext_ln321_fu_831_p1;
wire   [5:0] sub_ln321_fu_845_p2;
wire   [0:0] icmp_ln149_fu_860_p2;
wire   [0:0] xor_ln147_fu_855_p2;
wire   [1:0] select_ln147_fu_794_p3;
wire   [0:0] and_ln147_fu_866_p2;
wire   [0:0] or_ln152_fu_878_p2;
wire   [1:0] m_2_fu_872_p2;
wire   [34:0] zext_ln152_1_fu_903_p1;
wire   [34:0] sub_ln647_fu_825_p2;
wire   [34:0] add_ln647_fu_907_p2;
wire   [6:0] zext_ln152_fu_899_p1;
wire  signed [6:0] sext_ln321_fu_851_p1;
wire   [14:0] p_shl1_cast_fu_933_p3;
wire   [6:0] shl_ln321_fu_945_p2;
wire   [14:0] zext_ln647_1_fu_958_p1;
wire   [14:0] sub_ln647_1_fu_940_p2;
wire   [14:0] add_ln647_1_fu_961_p2;
wire   [6:0] zext_ln647_fu_955_p1;
wire   [6:0] sub_ln321_1_fu_950_p2;
wire   [0:0] icmp_ln159_fu_1006_p2;
wire   [0:0] xor_ln161_fu_1000_p2;
wire   [0:0] or_ln161_fu_1018_p2;
wire   [4:0] add_ln158_1_fu_1042_p2;
wire   [1:0] m_fu_1056_p2;
wire   [1:0] select_ln161_fu_1062_p3;
wire   [1:0] n_2_fu_1080_p2;
wire   [4:0] tmp_7_fu_1096_p3;
wire   [5:0] zext_ln161_3_fu_1103_p1;
wire   [5:0] zext_ln161_2_fu_1093_p1;
wire   [5:0] sub_ln161_fu_1107_p2;
wire   [6:0] zext_ln321_3_fu_1076_p1;
wire  signed [6:0] sext_ln161_fu_1113_p1;
wire   [6:0] shl_ln161_fu_1126_p2;
wire   [6:0] zext_ln161_fu_1123_p1;
wire   [6:0] sub_ln161_1_fu_1131_p2;
wire   [6:0] add_ln161_1_fu_1136_p2;
wire   [3:0] tmp_6_fu_1150_p3;
wire   [4:0] zext_ln321_5_fu_1157_p1;
wire   [4:0] zext_ln321_4_fu_1147_p1;
wire   [4:0] zext_ln161_1_fu_1167_p1;
wire   [4:0] sub_ln321_2_fu_1161_p2;
wire   [4:0] add_ln321_2_fu_1170_p2;
wire    ap_CS_fsm_state12;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

load_weight_3x3_fbkb #(
    .DataWidth( 512 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
src_buf_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(src_buf_V_address0),
    .ce0(src_buf_V_ce0),
    .we0(src_buf_V_we0),
    .d0(p_Val2_1_reg_1394),
    .q0(src_buf_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        cc9_0_reg_737 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_fu_982_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        cc9_0_reg_737 <= cc_1_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_reg_1323 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cc_0_reg_645 <= select_ln147_1_reg_1339;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cc_0_reg_645 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_634 <= add_ln147_1_fu_754_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten13_reg_634 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten52_reg_714 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_fu_982_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten52_reg_714 <= select_ln158_fu_1048_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten66_reg_691 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_fu_982_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten66_reg_691 <= add_ln157_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_656 <= select_ln148_fu_786_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_656 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m7_0_reg_702 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_reg_1399_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        m7_0_reg_702 <= select_ln161_1_reg_1439;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_1323_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_0_reg_667 <= select_ln152_1_reg_1358;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        m_0_reg_667 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        n8_0_reg_725 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_reg_1399_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        n8_0_reg_725 <= select_ln161_3_reg_1446;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_1323_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        n_0_reg_679 <= n_reg_1379;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_0_reg_679 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_reg_1399 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln161_reg_1453 <= add_ln161_fu_1117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_1323_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln321_1_reg_1389 <= add_ln321_1_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln321_1_reg_1389_pp0_iter3_reg <= add_ln321_1_reg_1389;
        icmp_ln147_reg_1323_pp0_iter2_reg <= icmp_ln147_reg_1323_pp0_iter1_reg;
        icmp_ln147_reg_1323_pp0_iter3_reg <= icmp_ln147_reg_1323_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_reg_1323 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln321_reg_1373 <= add_ln321_fu_921_p2;
        select_ln152_reg_1352 <= select_ln152_fu_883_p3;
        trunc_ln647_1_reg_1368 <= trunc_ln647_1_fu_917_p1;
        trunc_ln647_reg_1363 <= trunc_ln647_fu_913_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_fu_982_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln161_reg_1414 <= and_ln161_fu_1012_p2;
        icmp_ln158_reg_1408 <= icmp_ln158_fu_994_p2;
        select_ln161_2_reg_1419 <= select_ln161_2_fu_1024_p3;
        trunc_ln321_reg_1425 <= trunc_ln321_fu_1032_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln147_reg_1323 <= icmp_ln147_fu_748_p2;
        icmp_ln147_reg_1323_pp0_iter1_reg <= icmp_ln147_reg_1323;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_fu_748_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln148_reg_1332 <= icmp_ln148_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln157_reg_1399 <= icmp_ln157_fu_982_p2;
        icmp_ln157_reg_1399_pp1_iter1_reg <= icmp_ln157_reg_1399;
        trunc_ln321_reg_1425_pp1_iter1_reg <= trunc_ln321_reg_1425;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_reg_1323 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_reg_1379 <= n_fu_927_p2;
        select_ln152_1_reg_1358 <= select_ln152_1_fu_891_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_reg_1323_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_1_reg_1394 <= src_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln147_fu_748_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln147_1_reg_1339 <= select_ln147_1_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln157_reg_1399 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln161_1_reg_1439 <= select_ln161_1_fu_1069_p3;
        select_ln161_3_reg_1446 <= select_ln161_3_fu_1086_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        select_ln161_1_reg_1439_pp1_iter2_reg <= select_ln161_1_reg_1439;
        select_ln161_3_reg_1446_pp1_iter2_reg <= select_ln161_3_reg_1446;
        trunc_ln321_reg_1425_pp1_iter2_reg <= trunc_ln321_reg_1425_pp1_iter1_reg;
    end
end

always @ (*) begin
    if ((icmp_ln147_fu_748_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln157_fu_982_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln147_reg_1323 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_cc_0_phi_fu_649_p4 = select_ln147_1_reg_1339;
    end else begin
        ap_phi_mux_cc_0_phi_fu_649_p4 = cc_0_reg_645;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln157_reg_1399_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_m7_0_phi_fu_706_p4 = select_ln161_1_reg_1439;
    end else begin
        ap_phi_mux_m7_0_phi_fu_706_p4 = m7_0_reg_702;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln147_reg_1323_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_m_0_phi_fu_671_p4 = select_ln152_1_reg_1358;
    end else begin
        ap_phi_mux_m_0_phi_fu_671_p4 = m_0_reg_667;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln157_reg_1399_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ap_phi_mux_n8_0_phi_fu_729_p4 = select_ln161_3_reg_1446;
    end else begin
        ap_phi_mux_n8_0_phi_fu_729_p4 = n8_0_reg_725;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln147_reg_1323_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_n_0_phi_fu_683_p4 = n_reg_1379;
    end else begin
        ap_phi_mux_n_0_phi_fu_683_p4 = n_0_reg_679;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_0_V_ce0 = 1'b1;
    end else begin
        dest_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_0_V_we0 = 1'b1;
    end else begin
        dest_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_10_V_ce0 = 1'b1;
    end else begin
        dest_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_10_V_we0 = 1'b1;
    end else begin
        dest_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_11_V_ce0 = 1'b1;
    end else begin
        dest_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_11_V_we0 = 1'b1;
    end else begin
        dest_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_12_V_ce0 = 1'b1;
    end else begin
        dest_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_12_V_we0 = 1'b1;
    end else begin
        dest_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_13_V_ce0 = 1'b1;
    end else begin
        dest_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_13_V_we0 = 1'b1;
    end else begin
        dest_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_14_V_ce0 = 1'b1;
    end else begin
        dest_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_14_V_we0 = 1'b1;
    end else begin
        dest_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_15_V_ce0 = 1'b1;
    end else begin
        dest_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_15_V_we0 = 1'b1;
    end else begin
        dest_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_16_V_ce0 = 1'b1;
    end else begin
        dest_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_16_V_we0 = 1'b1;
    end else begin
        dest_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_17_V_ce0 = 1'b1;
    end else begin
        dest_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_17_V_we0 = 1'b1;
    end else begin
        dest_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_18_V_ce0 = 1'b1;
    end else begin
        dest_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_18_V_we0 = 1'b1;
    end else begin
        dest_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_19_V_ce0 = 1'b1;
    end else begin
        dest_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_19_V_we0 = 1'b1;
    end else begin
        dest_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_1_V_ce0 = 1'b1;
    end else begin
        dest_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_1_V_we0 = 1'b1;
    end else begin
        dest_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_20_V_ce0 = 1'b1;
    end else begin
        dest_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_20_V_we0 = 1'b1;
    end else begin
        dest_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_21_V_ce0 = 1'b1;
    end else begin
        dest_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_21_V_we0 = 1'b1;
    end else begin
        dest_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_22_V_ce0 = 1'b1;
    end else begin
        dest_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_22_V_we0 = 1'b1;
    end else begin
        dest_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_23_V_ce0 = 1'b1;
    end else begin
        dest_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_23_V_we0 = 1'b1;
    end else begin
        dest_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_24_V_ce0 = 1'b1;
    end else begin
        dest_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_24_V_we0 = 1'b1;
    end else begin
        dest_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_25_V_ce0 = 1'b1;
    end else begin
        dest_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_25_V_we0 = 1'b1;
    end else begin
        dest_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_26_V_ce0 = 1'b1;
    end else begin
        dest_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_26_V_we0 = 1'b1;
    end else begin
        dest_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_27_V_ce0 = 1'b1;
    end else begin
        dest_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_27_V_we0 = 1'b1;
    end else begin
        dest_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_28_V_ce0 = 1'b1;
    end else begin
        dest_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_28_V_we0 = 1'b1;
    end else begin
        dest_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_29_V_ce0 = 1'b1;
    end else begin
        dest_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_29_V_we0 = 1'b1;
    end else begin
        dest_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_2_V_ce0 = 1'b1;
    end else begin
        dest_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_2_V_we0 = 1'b1;
    end else begin
        dest_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_30_V_ce0 = 1'b1;
    end else begin
        dest_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_30_V_we0 = 1'b1;
    end else begin
        dest_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_31_V_ce0 = 1'b1;
    end else begin
        dest_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_31_V_we0 = 1'b1;
    end else begin
        dest_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_3_V_ce0 = 1'b1;
    end else begin
        dest_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_3_V_we0 = 1'b1;
    end else begin
        dest_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_4_V_ce0 = 1'b1;
    end else begin
        dest_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_4_V_we0 = 1'b1;
    end else begin
        dest_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_5_V_ce0 = 1'b1;
    end else begin
        dest_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_5_V_we0 = 1'b1;
    end else begin
        dest_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_6_V_ce0 = 1'b1;
    end else begin
        dest_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_6_V_we0 = 1'b1;
    end else begin
        dest_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_7_V_ce0 = 1'b1;
    end else begin
        dest_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_7_V_we0 = 1'b1;
    end else begin
        dest_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_8_V_ce0 = 1'b1;
    end else begin
        dest_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_8_V_we0 = 1'b1;
    end else begin
        dest_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_9_V_ce0 = 1'b1;
    end else begin
        dest_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln321_reg_1425_pp1_iter2_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        dest_9_V_we0 = 1'b1;
    end else begin
        dest_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        src_V_ce0 = 1'b1;
    end else begin
        src_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        src_buf_V_address0 = zext_ln161_4_fu_1142_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        src_buf_V_address0 = zext_ln321_2_fu_978_p1;
    end else begin
        src_buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
        src_buf_V_ce0 = 1'b1;
    end else begin
        src_buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_reg_1323_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        src_buf_V_we0 = 1'b1;
    end else begin
        src_buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln147_fu_748_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln147_fu_748_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln157_fu_982_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln157_fu_982_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_1_fu_754_p2 = (indvar_flatten13_reg_634 + 6'd1);

assign add_ln147_fu_804_p2 = (zext_ln147_fu_801_p1 + index);

assign add_ln148_1_fu_780_p2 = (4'd1 + indvar_flatten_reg_656);

assign add_ln157_fu_988_p2 = (indvar_flatten66_reg_691 + 6'd1);

assign add_ln158_1_fu_1042_p2 = (indvar_flatten52_reg_714 + 5'd1);

assign add_ln161_1_fu_1136_p2 = (zext_ln161_fu_1123_p1 + sub_ln161_1_fu_1131_p2);

assign add_ln161_fu_1117_p2 = ($signed(zext_ln321_3_fu_1076_p1) + $signed(sext_ln161_fu_1113_p1));

assign add_ln321_1_fu_972_p2 = (zext_ln647_fu_955_p1 + sub_ln321_1_fu_950_p2);

assign add_ln321_2_fu_1170_p2 = (zext_ln161_1_fu_1167_p1 + sub_ln321_2_fu_1161_p2);

assign add_ln321_fu_921_p2 = ($signed(zext_ln152_fu_899_p1) + $signed(sext_ln321_fu_851_p1));

assign add_ln647_1_fu_961_p2 = (zext_ln647_1_fu_958_p1 + sub_ln647_1_fu_940_p2);

assign add_ln647_fu_907_p2 = (zext_ln152_1_fu_903_p1 + sub_ln647_fu_825_p2);

assign and_ln147_fu_866_p2 = (xor_ln147_fu_855_p2 & icmp_ln149_fu_860_p2);

assign and_ln161_fu_1012_p2 = (xor_ln161_fu_1000_p2 & icmp_ln159_fu_1006_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cc_1_fu_1036_p2 = (select_ln161_2_fu_1024_p3 + 3'd1);

assign cc_fu_760_p2 = (3'd1 + ap_phi_mux_cc_0_phi_fu_649_p4);

assign dest_0_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_0_V_d0 = trunc_ln647_2_fu_1212_p1;

assign dest_10_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_10_V_d0 = {{src_buf_V_q0[191:128]}};

assign dest_11_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_11_V_d0 = {{src_buf_V_q0[255:192]}};

assign dest_12_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_12_V_d0 = {{src_buf_V_q0[319:256]}};

assign dest_13_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_13_V_d0 = {{src_buf_V_q0[383:320]}};

assign dest_14_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_14_V_d0 = {{src_buf_V_q0[447:384]}};

assign dest_15_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_15_V_d0 = {{src_buf_V_q0[511:448]}};

assign dest_16_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_16_V_d0 = trunc_ln647_2_fu_1212_p1;

assign dest_17_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_17_V_d0 = {{src_buf_V_q0[127:64]}};

assign dest_18_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_18_V_d0 = {{src_buf_V_q0[191:128]}};

assign dest_19_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_19_V_d0 = {{src_buf_V_q0[255:192]}};

assign dest_1_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_1_V_d0 = {{src_buf_V_q0[127:64]}};

assign dest_20_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_20_V_d0 = {{src_buf_V_q0[319:256]}};

assign dest_21_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_21_V_d0 = {{src_buf_V_q0[383:320]}};

assign dest_22_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_22_V_d0 = {{src_buf_V_q0[447:384]}};

assign dest_23_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_23_V_d0 = {{src_buf_V_q0[511:448]}};

assign dest_24_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_24_V_d0 = trunc_ln647_2_fu_1212_p1;

assign dest_25_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_25_V_d0 = {{src_buf_V_q0[127:64]}};

assign dest_26_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_26_V_d0 = {{src_buf_V_q0[191:128]}};

assign dest_27_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_27_V_d0 = {{src_buf_V_q0[255:192]}};

assign dest_28_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_28_V_d0 = {{src_buf_V_q0[319:256]}};

assign dest_29_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_29_V_d0 = {{src_buf_V_q0[383:320]}};

assign dest_2_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_2_V_d0 = {{src_buf_V_q0[191:128]}};

assign dest_30_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_30_V_d0 = {{src_buf_V_q0[447:384]}};

assign dest_31_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_31_V_d0 = {{src_buf_V_q0[511:448]}};

assign dest_3_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_3_V_d0 = {{src_buf_V_q0[255:192]}};

assign dest_4_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_4_V_d0 = {{src_buf_V_q0[319:256]}};

assign dest_5_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_5_V_d0 = {{src_buf_V_q0[383:320]}};

assign dest_6_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_6_V_d0 = {{src_buf_V_q0[447:384]}};

assign dest_7_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_7_V_d0 = {{src_buf_V_q0[511:448]}};

assign dest_8_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_8_V_d0 = trunc_ln647_2_fu_1212_p1;

assign dest_9_V_address0 = sext_ln321_1_fu_1176_p1;

assign dest_9_V_d0 = {{src_buf_V_q0[127:64]}};

assign icmp_ln147_fu_748_p2 = ((indvar_flatten13_reg_634 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln148_fu_766_p2 = ((indvar_flatten_reg_656 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_860_p2 = ((ap_phi_mux_n_0_phi_fu_683_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_982_p2 = ((indvar_flatten66_reg_691 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_994_p2 = ((indvar_flatten52_reg_714 == 5'd12) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_1006_p2 = ((cc9_0_reg_737 == 3'd4) ? 1'b1 : 1'b0);

assign m_2_fu_872_p2 = (2'd1 + select_ln147_fu_794_p3);

assign m_fu_1056_p2 = (2'd1 + ap_phi_mux_m7_0_phi_fu_706_p4);

assign n_2_fu_1080_p2 = (2'd1 + select_ln161_fu_1062_p3);

assign n_fu_927_p2 = (2'd1 + select_ln152_fu_883_p3);

assign or_ln152_fu_878_p2 = (icmp_ln148_reg_1332 | and_ln147_fu_866_p2);

assign or_ln161_fu_1018_p2 = (icmp_ln158_fu_994_p2 | and_ln161_fu_1012_p2);

assign p_shl1_cast_fu_933_p3 = {{trunc_ln647_1_reg_1368}, {2'd0}};

assign select_ln147_1_fu_772_p3 = ((icmp_ln148_fu_766_p2[0:0] === 1'b1) ? cc_fu_760_p2 : ap_phi_mux_cc_0_phi_fu_649_p4);

assign select_ln147_fu_794_p3 = ((icmp_ln148_reg_1332[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_m_0_phi_fu_671_p4);

assign select_ln148_fu_786_p3 = ((icmp_ln148_fu_766_p2[0:0] === 1'b1) ? 4'd1 : add_ln148_1_fu_780_p2);

assign select_ln152_1_fu_891_p3 = ((and_ln147_fu_866_p2[0:0] === 1'b1) ? m_2_fu_872_p2 : select_ln147_fu_794_p3);

assign select_ln152_fu_883_p3 = ((or_ln152_fu_878_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_n_0_phi_fu_683_p4);

assign select_ln158_fu_1048_p3 = ((icmp_ln158_fu_994_p2[0:0] === 1'b1) ? 5'd1 : add_ln158_1_fu_1042_p2);

assign select_ln161_1_fu_1069_p3 = ((icmp_ln158_reg_1408[0:0] === 1'b1) ? m_fu_1056_p2 : ap_phi_mux_m7_0_phi_fu_706_p4);

assign select_ln161_2_fu_1024_p3 = ((or_ln161_fu_1018_p2[0:0] === 1'b1) ? 3'd0 : cc9_0_reg_737);

assign select_ln161_3_fu_1086_p3 = ((and_ln161_reg_1414[0:0] === 1'b1) ? n_2_fu_1080_p2 : select_ln161_fu_1062_p3);

assign select_ln161_fu_1062_p3 = ((icmp_ln158_reg_1408[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_n8_0_phi_fu_729_p4);

assign sext_ln161_fu_1113_p1 = $signed(sub_ln161_fu_1107_p2);

assign sext_ln321_1_fu_1176_p1 = $signed(add_ln321_2_fu_1170_p2);

assign sext_ln321_fu_851_p1 = $signed(sub_ln321_fu_845_p2);

assign sext_ln647_1_fu_821_p1 = $signed(tmp_2_fu_813_p3);

assign sext_ln647_fu_809_p1 = add_ln147_fu_804_p2;

assign shl_ln161_fu_1126_p2 = add_ln161_reg_1453 << 7'd2;

assign shl_ln321_fu_945_p2 = add_ln321_reg_1373 << 7'd2;

assign src_V_address0 = zext_ln647_2_fu_967_p1;

assign sub_ln161_1_fu_1131_p2 = (shl_ln161_fu_1126_p2 - add_ln161_reg_1453);

assign sub_ln161_fu_1107_p2 = (zext_ln161_3_fu_1103_p1 - zext_ln161_2_fu_1093_p1);

assign sub_ln321_1_fu_950_p2 = (shl_ln321_fu_945_p2 - add_ln321_reg_1373);

assign sub_ln321_2_fu_1161_p2 = (zext_ln321_5_fu_1157_p1 - zext_ln321_4_fu_1147_p1);

assign sub_ln321_fu_845_p2 = (zext_ln321_1_fu_841_p1 - zext_ln321_fu_831_p1);

assign sub_ln647_1_fu_940_p2 = (p_shl1_cast_fu_933_p3 - trunc_ln647_reg_1363);

assign sub_ln647_fu_825_p2 = ($signed(sext_ln647_1_fu_821_p1) - $signed(sext_ln647_fu_809_p1));

assign tmp_2_fu_813_p3 = {{add_ln147_fu_804_p2}, {2'd0}};

assign tmp_3_fu_834_p3 = {{select_ln147_1_reg_1339}, {2'd0}};

assign tmp_6_fu_1150_p3 = {{select_ln161_1_reg_1439_pp1_iter2_reg}, {2'd0}};

assign tmp_7_fu_1096_p3 = {{select_ln161_2_reg_1419}, {2'd0}};

assign trunc_ln321_fu_1032_p1 = select_ln161_2_fu_1024_p3[1:0];

assign trunc_ln647_1_fu_917_p1 = add_ln647_fu_907_p2[12:0];

assign trunc_ln647_2_fu_1212_p1 = src_buf_V_q0[63:0];

assign trunc_ln647_fu_913_p1 = add_ln647_fu_907_p2[14:0];

assign xor_ln147_fu_855_p2 = (icmp_ln148_reg_1332 ^ 1'd1);

assign xor_ln161_fu_1000_p2 = (icmp_ln158_fu_994_p2 ^ 1'd1);

assign zext_ln147_fu_801_p1 = select_ln147_1_reg_1339;

assign zext_ln152_1_fu_903_p1 = select_ln152_1_fu_891_p3;

assign zext_ln152_fu_899_p1 = select_ln152_1_fu_891_p3;

assign zext_ln161_1_fu_1167_p1 = select_ln161_3_reg_1446_pp1_iter2_reg;

assign zext_ln161_2_fu_1093_p1 = select_ln161_2_reg_1419;

assign zext_ln161_3_fu_1103_p1 = tmp_7_fu_1096_p3;

assign zext_ln161_4_fu_1142_p1 = add_ln161_1_fu_1136_p2;

assign zext_ln161_fu_1123_p1 = select_ln161_3_reg_1446;

assign zext_ln321_1_fu_841_p1 = tmp_3_fu_834_p3;

assign zext_ln321_2_fu_978_p1 = add_ln321_1_reg_1389_pp0_iter3_reg;

assign zext_ln321_3_fu_1076_p1 = select_ln161_1_fu_1069_p3;

assign zext_ln321_4_fu_1147_p1 = select_ln161_1_reg_1439_pp1_iter2_reg;

assign zext_ln321_5_fu_1157_p1 = tmp_6_fu_1150_p3;

assign zext_ln321_fu_831_p1 = select_ln147_1_reg_1339;

assign zext_ln647_1_fu_958_p1 = select_ln152_reg_1352;

assign zext_ln647_2_fu_967_p1 = add_ln647_1_fu_961_p2;

assign zext_ln647_fu_955_p1 = select_ln152_reg_1352;

endmodule //load_weight_3x3_from_axi
