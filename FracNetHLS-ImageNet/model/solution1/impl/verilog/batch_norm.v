// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module batch_norm (
        ap_clk,
        ap_rst,
        sum_V,
        weight_V,
        bias_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [5:0] sum_V;
input  [9:0] weight_V;
input  [9:0] bias_V;
output  [13:0] ap_return;
input   ap_ce;

reg[13:0] ap_return;

reg   [9:0] bias_V_read_reg_216;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [17:0] r_V_fu_210_p2;
reg   [17:0] r_V_reg_221;
reg   [0:0] p_Result_3_reg_228;
wire   [13:0] ret_V_3_fu_150_p2;
reg   [13:0] ret_V_3_reg_235;
reg   [0:0] p_Result_4_reg_241;
wire    ap_block_pp0_stage0;
wire  signed [7:0] sum_V_cast_fu_58_p1;
wire   [12:0] trunc_ln731_fu_70_p1;
wire   [4:0] tmp_fu_88_p4;
wire   [0:0] p_Result_s_fu_81_p3;
wire   [0:0] icmp_ln785_fu_97_p2;
wire   [0:0] overflow_fu_103_p2;
wire   [13:0] sw_V_fu_73_p3;
wire  signed [13:0] p_Val2_4_fu_109_p3;
wire   [10:0] tmp_287_fu_121_p3;
wire   [14:0] zext_ln728_fu_128_p1;
wire  signed [14:0] lhs_V_fu_117_p1;
wire   [14:0] ret_V_fu_136_p2;
wire   [13:0] zext_ln1192_fu_132_p1;
wire   [0:0] xor_ln786_2_fu_164_p2;
wire   [0:0] xor_ln340_32_fu_178_p2;
wire   [0:0] xor_ln340_fu_174_p2;
wire   [0:0] underflow_fu_169_p2;
wire   [0:0] or_ln340_fu_183_p2;
wire   [13:0] select_ln340_fu_188_p3;
wire   [13:0] select_ln388_fu_195_p3;
wire   [9:0] r_V_fu_210_p0;
wire   [7:0] r_V_fu_210_p1;
wire   [13:0] select_ln340_110_fu_202_p3;
reg    ap_ce_reg;
reg   [5:0] sum_V_int_reg;
reg   [9:0] weight_V_int_reg;
reg   [9:0] bias_V_int_reg;
reg   [13:0] ap_return_int_reg;
wire   [17:0] r_V_fu_210_p00;
wire   [17:0] r_V_fu_210_p10;

FracNet_mul_mul_1jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
FracNet_mul_mul_1jbC_U1214(
    .din0(r_V_fu_210_p0),
    .din1(r_V_fu_210_p1),
    .dout(r_V_fu_210_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln340_110_fu_202_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        bias_V_int_reg <= bias_V;
        sum_V_int_reg <= sum_V;
        weight_V_int_reg <= weight_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        bias_V_read_reg_216 <= bias_V_int_reg;
        p_Result_3_reg_228 <= ret_V_fu_136_p2[32'd14];
        p_Result_4_reg_241 <= ret_V_3_fu_150_p2[32'd13];
        r_V_reg_221 <= r_V_fu_210_p2;
        ret_V_3_reg_235 <= ret_V_3_fu_150_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln340_110_fu_202_p3;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign icmp_ln785_fu_97_p2 = ((tmp_fu_88_p4 != 5'd0) ? 1'b1 : 1'b0);

assign lhs_V_fu_117_p1 = p_Val2_4_fu_109_p3;

assign or_ln340_fu_183_p2 = (xor_ln340_32_fu_178_p2 | p_Result_4_reg_241);

assign overflow_fu_103_p2 = (p_Result_s_fu_81_p3 | icmp_ln785_fu_97_p2);

assign p_Result_s_fu_81_p3 = r_V_reg_221[32'd12];

assign p_Val2_4_fu_109_p3 = ((overflow_fu_103_p2[0:0] === 1'b1) ? 14'd8191 : sw_V_fu_73_p3);

assign r_V_fu_210_p0 = r_V_fu_210_p00;

assign r_V_fu_210_p00 = weight_V_int_reg;

assign r_V_fu_210_p1 = r_V_fu_210_p10;

assign r_V_fu_210_p10 = $unsigned(sum_V_cast_fu_58_p1);

assign ret_V_3_fu_150_p2 = ($signed(zext_ln1192_fu_132_p1) + $signed(p_Val2_4_fu_109_p3));

assign ret_V_fu_136_p2 = ($signed(zext_ln728_fu_128_p1) + $signed(lhs_V_fu_117_p1));

assign select_ln340_110_fu_202_p3 = ((or_ln340_fu_183_p2[0:0] === 1'b1) ? select_ln340_fu_188_p3 : select_ln388_fu_195_p3);

assign select_ln340_fu_188_p3 = ((xor_ln340_fu_174_p2[0:0] === 1'b1) ? 14'd8191 : ret_V_3_reg_235);

assign select_ln388_fu_195_p3 = ((underflow_fu_169_p2[0:0] === 1'b1) ? 14'd8192 : ret_V_3_reg_235);

assign sum_V_cast_fu_58_p1 = $signed(sum_V_int_reg);

assign sw_V_fu_73_p3 = {{trunc_ln731_fu_70_p1}, {1'd0}};

assign tmp_287_fu_121_p3 = {{bias_V_read_reg_216}, {1'd0}};

assign tmp_fu_88_p4 = {{r_V_reg_221[17:13]}};

assign trunc_ln731_fu_70_p1 = r_V_reg_221[12:0];

assign underflow_fu_169_p2 = (xor_ln786_2_fu_164_p2 & p_Result_3_reg_228);

assign xor_ln340_32_fu_178_p2 = (p_Result_3_reg_228 ^ 1'd1);

assign xor_ln340_fu_174_p2 = (p_Result_4_reg_241 ^ p_Result_3_reg_228);

assign xor_ln786_2_fu_164_p2 = (p_Result_4_reg_241 ^ 1'd1);

assign zext_ln1192_fu_132_p1 = tmp_287_fu_121_p3;

assign zext_ln728_fu_128_p1 = tmp_287_fu_121_p3;

endmodule //batch_norm
