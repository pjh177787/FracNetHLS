// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_engine_16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        b_V,
        w_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] b_V;
input  [15:0] w_V;
output  [4:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] lut16_V_address0;
reg    lut16_V_ce0;
wire   [2:0] lut16_V_q0;
wire   [3:0] lut16_V_address1;
reg    lut16_V_ce1;
wire   [2:0] lut16_V_q1;
wire   [3:0] lut16_V_address2;
reg    lut16_V_ce2;
wire   [2:0] lut16_V_q2;
wire   [3:0] lut16_V_address3;
reg    lut16_V_ce3;
wire   [2:0] lut16_V_q3;
wire   [3:0] add0_V_fu_171_p2;
reg   [3:0] add0_V_reg_223;
wire   [3:0] add1_V_fu_185_p2;
reg   [3:0] add1_V_reg_228;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln18_fu_113_p1;
wire   [63:0] zext_ln18_1_fu_128_p1;
wire   [63:0] zext_ln19_fu_143_p1;
wire   [63:0] zext_ln19_1_fu_158_p1;
wire   [15:0] xor_ln769_fu_97_p2;
wire   [15:0] r_V_fu_103_p2;
wire   [3:0] trunc_ln681_fu_109_p1;
wire   [3:0] p_Result_s_fu_118_p4;
wire   [3:0] p_Result_45_fu_133_p4;
wire   [3:0] p_Result_46_fu_148_p4;
wire   [3:0] zext_ln215_fu_163_p1;
wire   [3:0] zext_ln215_16_fu_167_p1;
wire   [3:0] zext_ln215_17_fu_177_p1;
wire   [3:0] zext_ln215_18_fu_181_p1;
wire  signed [4:0] lhs_V_fu_191_p1;
wire  signed [4:0] rhs_V_fu_194_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_reset_start_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

compute_engine_16eOg #(
    .DataWidth( 3 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lut16_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut16_V_address0),
    .ce0(lut16_V_ce0),
    .q0(lut16_V_q0),
    .address1(lut16_V_address1),
    .ce1(lut16_V_ce1),
    .q1(lut16_V_q1),
    .address2(lut16_V_address2),
    .ce2(lut16_V_ce2),
    .q2(lut16_V_q2),
    .address3(lut16_V_address3),
    .ce3(lut16_V_ce3),
    .q3(lut16_V_q3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add0_V_reg_223 <= add0_V_fu_171_p2;
        add1_V_reg_228 <= add1_V_fu_185_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_start_pp0 = 1'b1;
    end else begin
        ap_reset_start_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce0 = 1'b1;
    end else begin
        lut16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce1 = 1'b1;
    end else begin
        lut16_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce2 = 1'b1;
    end else begin
        lut16_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce3 = 1'b1;
    end else begin
        lut16_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add0_V_fu_171_p2 = (zext_ln215_fu_163_p1 + zext_ln215_16_fu_167_p1);

assign add1_V_fu_185_p2 = (zext_ln215_17_fu_177_p1 + zext_ln215_18_fu_181_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ($signed(lhs_V_fu_191_p1) + $signed(rhs_V_fu_194_p1));

assign lhs_V_fu_191_p1 = $signed(add0_V_reg_223);

assign lut16_V_address0 = zext_ln18_fu_113_p1;

assign lut16_V_address1 = zext_ln18_1_fu_128_p1;

assign lut16_V_address2 = zext_ln19_fu_143_p1;

assign lut16_V_address3 = zext_ln19_1_fu_158_p1;

assign p_Result_45_fu_133_p4 = {{r_V_fu_103_p2[11:8]}};

assign p_Result_46_fu_148_p4 = {{r_V_fu_103_p2[15:12]}};

assign p_Result_s_fu_118_p4 = {{r_V_fu_103_p2[7:4]}};

assign r_V_fu_103_p2 = (xor_ln769_fu_97_p2 ^ b_V);

assign rhs_V_fu_194_p1 = $signed(add1_V_reg_228);

assign trunc_ln681_fu_109_p1 = r_V_fu_103_p2[3:0];

assign xor_ln769_fu_97_p2 = (w_V ^ 16'd65535);

assign zext_ln18_1_fu_128_p1 = p_Result_s_fu_118_p4;

assign zext_ln18_fu_113_p1 = trunc_ln681_fu_109_p1;

assign zext_ln19_1_fu_158_p1 = p_Result_46_fu_148_p4;

assign zext_ln19_fu_143_p1 = p_Result_45_fu_133_p4;

assign zext_ln215_16_fu_167_p1 = lut16_V_q1;

assign zext_ln215_17_fu_177_p1 = lut16_V_q2;

assign zext_ln215_18_fu_181_p1 = lut16_V_q3;

assign zext_ln215_fu_163_p1 = lut16_V_q0;

endmodule //compute_engine_16
