// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu (
        ap_clk,
        ap_rst,
        norm_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [13:0] norm_V;
output  [13:0] ap_return;
input   ap_ce;

reg[13:0] ap_return;

wire   [0:0] icmp_ln1494_fu_48_p2;
reg   [0:0] icmp_ln1494_reg_235;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] xor_ln785_fu_154_p2;
reg   [0:0] xor_ln785_reg_240;
wire   [0:0] and_ln786_fu_166_p2;
reg   [0:0] and_ln786_reg_245;
wire   [13:0] select_ln340_fu_190_p3;
reg   [13:0] select_ln340_reg_250;
wire   [13:0] select_ln1494_fu_206_p3;
reg   [13:0] select_ln1494_reg_255;
wire    ap_block_pp0_stage0;
wire   [12:0] trunc_ln703_fu_54_p1;
wire   [13:0] p_Val2_s_fu_58_p2;
wire   [0:0] p_Result_s_fu_70_p3;
wire   [12:0] add_ln746_fu_64_p2;
wire   [12:0] select_ln785_fu_78_p3;
wire  signed [20:0] r_V_fu_90_p3;
wire  signed [21:0] sext_ln1118_fu_98_p1;
wire   [21:0] add_ln1192_fu_102_p2;
wire   [20:0] add_ln1192_32_fu_108_p2;
wire   [0:0] p_Result_2_fu_132_p3;
wire   [0:0] Range1_all_ones_fu_140_p3;
wire   [0:0] p_Result_1_fu_114_p3;
wire   [0:0] or_ln785_fu_148_p2;
wire   [0:0] xor_ln786_1_fu_172_p2;
wire   [0:0] underflow_fu_178_p2;
wire   [0:0] overflow_fu_160_p2;
wire   [0:0] or_ln340_3_fu_184_p2;
wire   [13:0] p_Val2_2_fu_122_p4;
wire   [13:0] zext_ln785_fu_86_p1;
wire   [13:0] select_ln388_fu_198_p3;
wire   [0:0] or_ln340_fu_214_p2;
wire   [0:0] xor_ln1494_fu_218_p2;
wire   [0:0] and_ln340_fu_223_p2;
wire   [13:0] select_ln340_64_fu_229_p3;
reg    ap_ce_reg;
reg   [13:0] ap_return_int_reg;

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        and_ln786_reg_245 <= and_ln786_fu_166_p2;
        icmp_ln1494_reg_235 <= icmp_ln1494_fu_48_p2;
        select_ln1494_reg_255 <= select_ln1494_fu_206_p3;
        select_ln340_reg_250 <= select_ln340_fu_190_p3;
        xor_ln785_reg_240 <= xor_ln785_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln340_64_fu_229_p3;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln340_64_fu_229_p3;
    end
end

assign Range1_all_ones_fu_140_p3 = add_ln1192_fu_102_p2[32'd21];

assign add_ln1192_32_fu_108_p2 = ($signed(21'd32768) + $signed(r_V_fu_90_p3));

assign add_ln1192_fu_102_p2 = ($signed(22'd32768) + $signed(sext_ln1118_fu_98_p1));

assign add_ln746_fu_64_p2 = (13'd256 + trunc_ln703_fu_54_p1);

assign and_ln340_fu_223_p2 = (xor_ln1494_fu_218_p2 & or_ln340_fu_214_p2);

assign and_ln786_fu_166_p2 = (p_Result_2_fu_132_p3 & Range1_all_ones_fu_140_p3);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln1494_fu_48_p2 = (($signed(norm_V) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign or_ln340_3_fu_184_p2 = (underflow_fu_178_p2 | overflow_fu_160_p2);

assign or_ln340_fu_214_p2 = (xor_ln785_reg_240 | and_ln786_reg_245);

assign or_ln785_fu_148_p2 = (p_Result_2_fu_132_p3 | Range1_all_ones_fu_140_p3);

assign overflow_fu_160_p2 = (xor_ln785_fu_154_p2 & or_ln785_fu_148_p2);

assign p_Result_1_fu_114_p3 = add_ln1192_fu_102_p2[32'd21];

assign p_Result_2_fu_132_p3 = add_ln1192_32_fu_108_p2[32'd20];

assign p_Result_s_fu_70_p3 = p_Val2_s_fu_58_p2[32'd13];

assign p_Val2_2_fu_122_p4 = {{add_ln1192_32_fu_108_p2[20:7]}};

assign p_Val2_s_fu_58_p2 = (14'd256 + norm_V);

assign r_V_fu_90_p3 = {{norm_V}, {7'd0}};

assign select_ln1494_fu_206_p3 = ((icmp_ln1494_fu_48_p2[0:0] === 1'b1) ? zext_ln785_fu_86_p1 : select_ln388_fu_198_p3);

assign select_ln340_64_fu_229_p3 = ((and_ln340_fu_223_p2[0:0] === 1'b1) ? select_ln340_reg_250 : select_ln1494_reg_255);

assign select_ln340_fu_190_p3 = ((or_ln340_3_fu_184_p2[0:0] === 1'b1) ? 14'd8191 : p_Val2_2_fu_122_p4);

assign select_ln388_fu_198_p3 = ((underflow_fu_178_p2[0:0] === 1'b1) ? 14'd8192 : p_Val2_2_fu_122_p4);

assign select_ln785_fu_78_p3 = ((p_Result_s_fu_70_p3[0:0] === 1'b1) ? 13'd8191 : add_ln746_fu_64_p2);

assign sext_ln1118_fu_98_p1 = r_V_fu_90_p3;

assign trunc_ln703_fu_54_p1 = norm_V[12:0];

assign underflow_fu_178_p2 = (xor_ln786_1_fu_172_p2 & p_Result_1_fu_114_p3);

assign xor_ln1494_fu_218_p2 = (icmp_ln1494_reg_235 ^ 1'd1);

assign xor_ln785_fu_154_p2 = (p_Result_1_fu_114_p3 ^ 1'd1);

assign xor_ln786_1_fu_172_p2 = (1'd1 ^ and_ln786_fu_166_p2);

assign zext_ln785_fu_86_p1 = select_ln785_fu_78_p3;

endmodule //relu
