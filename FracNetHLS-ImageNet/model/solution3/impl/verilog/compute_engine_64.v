// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_engine_64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        b_V,
        w_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [63:0] b_V;
input  [63:0] w_V;
output  [5:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] lut16_V_address0;
reg    lut16_V_ce0;
wire   [2:0] lut16_V_q0;
wire   [3:0] lut16_V_address1;
reg    lut16_V_ce1;
wire   [2:0] lut16_V_q1;
wire   [3:0] lut16_V_address2;
reg    lut16_V_ce2;
wire   [2:0] lut16_V_q2;
wire   [3:0] lut16_V_address3;
reg    lut16_V_ce3;
wire   [2:0] lut16_V_q3;
wire   [3:0] lut16_V_address4;
reg    lut16_V_ce4;
wire   [2:0] lut16_V_q4;
wire   [3:0] lut16_V_address5;
reg    lut16_V_ce5;
wire   [2:0] lut16_V_q5;
wire   [3:0] lut16_V_address6;
reg    lut16_V_ce6;
wire   [2:0] lut16_V_q6;
wire   [3:0] lut16_V_address7;
reg    lut16_V_ce7;
wire   [2:0] lut16_V_q7;
wire   [3:0] lut16_V_address8;
reg    lut16_V_ce8;
wire   [2:0] lut16_V_q8;
wire   [3:0] lut16_V_address9;
reg    lut16_V_ce9;
wire   [2:0] lut16_V_q9;
wire   [3:0] lut16_V_address10;
reg    lut16_V_ce10;
wire   [2:0] lut16_V_q10;
wire   [3:0] lut16_V_address11;
reg    lut16_V_ce11;
wire   [2:0] lut16_V_q11;
wire   [3:0] lut16_V_address12;
reg    lut16_V_ce12;
wire   [2:0] lut16_V_q12;
wire   [3:0] lut16_V_address13;
reg    lut16_V_ce13;
wire   [2:0] lut16_V_q13;
wire   [3:0] lut16_V_address14;
reg    lut16_V_ce14;
wire   [2:0] lut16_V_q14;
wire   [3:0] lut16_V_address15;
reg    lut16_V_ce15;
wire   [2:0] lut16_V_q15;
wire   [3:0] trunc_ln681_fu_301_p1;
reg   [3:0] trunc_ln681_reg_700;
reg   [3:0] p_Result_s_reg_705;
reg   [3:0] p_Result_31_reg_710;
reg   [3:0] p_Result_32_reg_715;
reg   [3:0] p_Result_33_reg_720;
reg   [3:0] p_Result_34_reg_725;
reg   [3:0] p_Result_35_reg_730;
reg   [3:0] p_Result_36_reg_735;
reg   [3:0] p_Result_37_reg_740;
reg   [3:0] p_Result_38_reg_745;
reg   [3:0] p_Result_39_reg_750;
reg   [3:0] p_Result_40_reg_755;
reg   [3:0] p_Result_41_reg_760;
reg   [3:0] p_Result_42_reg_765;
reg   [3:0] p_Result_43_reg_770;
reg   [3:0] p_Result_44_reg_775;
reg   [2:0] lut16_V_load_reg_860;
reg   [2:0] lut16_V_load_1_reg_865;
reg   [2:0] lut16_V_load_2_reg_870;
reg   [2:0] lut16_V_load_3_reg_875;
reg   [2:0] lut16_V_load_4_reg_880;
reg   [2:0] lut16_V_load_5_reg_885;
reg   [2:0] lut16_V_load_6_reg_890;
reg   [2:0] lut16_V_load_7_reg_895;
reg   [2:0] lut16_V_load_8_reg_900;
reg   [2:0] lut16_V_load_9_reg_905;
reg   [2:0] lut16_V_load_10_reg_910;
reg   [2:0] lut16_V_load_11_reg_915;
reg   [2:0] lut16_V_load_12_reg_920;
reg   [2:0] lut16_V_load_13_reg_925;
reg   [2:0] lut16_V_load_14_reg_930;
reg   [2:0] lut16_V_load_15_reg_935;
wire   [4:0] ret_V_fu_623_p2;
reg   [4:0] ret_V_reg_940;
wire   [4:0] ret_V_7_fu_637_p2;
reg   [4:0] ret_V_7_reg_945;
wire   [4:0] ret_V_8_fu_651_p2;
reg   [4:0] ret_V_8_reg_950;
reg   [4:0] ret_V_8_reg_950_pp0_iter4_reg;
wire   [4:0] ret_V_9_fu_665_p2;
reg   [4:0] ret_V_9_reg_955;
reg   [4:0] ret_V_9_reg_955_pp0_iter4_reg;
wire   [5:0] add_ln214_1_fu_677_p2;
reg   [5:0] add_ln214_1_reg_960;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln19_fu_455_p1;
wire   [63:0] zext_ln19_1_fu_459_p1;
wire   [63:0] zext_ln20_fu_463_p1;
wire   [63:0] zext_ln20_1_fu_467_p1;
wire   [63:0] zext_ln21_fu_471_p1;
wire   [63:0] zext_ln21_1_fu_475_p1;
wire   [63:0] zext_ln22_fu_479_p1;
wire   [63:0] zext_ln22_1_fu_483_p1;
wire   [63:0] zext_ln23_fu_487_p1;
wire   [63:0] zext_ln23_1_fu_491_p1;
wire   [63:0] zext_ln24_fu_495_p1;
wire   [63:0] zext_ln24_1_fu_499_p1;
wire   [63:0] zext_ln25_fu_503_p1;
wire   [63:0] zext_ln25_1_fu_507_p1;
wire   [63:0] zext_ln26_fu_511_p1;
wire   [63:0] zext_ln26_1_fu_515_p1;
wire   [63:0] xor_ln769_fu_289_p2;
wire   [63:0] r_V_fu_295_p2;
wire   [3:0] zext_ln215_1_fu_522_p1;
wire   [3:0] zext_ln215_fu_519_p1;
wire   [3:0] zext_ln215_3_fu_534_p1;
wire   [3:0] zext_ln215_2_fu_531_p1;
wire   [3:0] zext_ln215_5_fu_546_p1;
wire   [3:0] zext_ln215_4_fu_543_p1;
wire   [3:0] zext_ln215_7_fu_558_p1;
wire   [3:0] zext_ln215_6_fu_555_p1;
wire   [3:0] zext_ln215_9_fu_570_p1;
wire   [3:0] zext_ln215_8_fu_567_p1;
wire   [3:0] zext_ln215_11_fu_582_p1;
wire   [3:0] zext_ln215_10_fu_579_p1;
wire   [3:0] zext_ln215_13_fu_594_p1;
wire   [3:0] zext_ln215_12_fu_591_p1;
wire   [3:0] zext_ln215_15_fu_606_p1;
wire   [3:0] zext_ln215_14_fu_603_p1;
wire   [3:0] add0_V_fu_525_p2;
wire   [3:0] add1_V_fu_537_p2;
wire  signed [4:0] rhs_V_fu_619_p1;
wire  signed [4:0] lhs_V_fu_615_p1;
wire   [3:0] add2_V_fu_549_p2;
wire   [3:0] add3_V_fu_561_p2;
wire  signed [4:0] rhs_V_8_fu_633_p1;
wire  signed [4:0] lhs_V_6_fu_629_p1;
wire   [3:0] add4_V_fu_573_p2;
wire   [3:0] add5_V_fu_585_p2;
wire  signed [4:0] rhs_V_9_fu_647_p1;
wire  signed [4:0] lhs_V_7_fu_643_p1;
wire   [3:0] add6_V_fu_597_p2;
wire   [3:0] add7_V_fu_609_p2;
wire  signed [4:0] rhs_V_10_fu_661_p1;
wire  signed [4:0] lhs_V_8_fu_657_p1;
wire  signed [5:0] rhs_V_11_fu_674_p1;
wire  signed [5:0] lhs_V_9_fu_671_p1;
wire  signed [5:0] rhs_V_12_fu_686_p1;
wire  signed [5:0] lhs_V_10_fu_683_p1;
wire   [5:0] add_ln214_2_fu_689_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

compute_engine_64lbW #(
    .DataWidth( 3 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
lut16_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(lut16_V_address0),
    .ce0(lut16_V_ce0),
    .q0(lut16_V_q0),
    .address1(lut16_V_address1),
    .ce1(lut16_V_ce1),
    .q1(lut16_V_q1),
    .address2(lut16_V_address2),
    .ce2(lut16_V_ce2),
    .q2(lut16_V_q2),
    .address3(lut16_V_address3),
    .ce3(lut16_V_ce3),
    .q3(lut16_V_q3),
    .address4(lut16_V_address4),
    .ce4(lut16_V_ce4),
    .q4(lut16_V_q4),
    .address5(lut16_V_address5),
    .ce5(lut16_V_ce5),
    .q5(lut16_V_q5),
    .address6(lut16_V_address6),
    .ce6(lut16_V_ce6),
    .q6(lut16_V_q6),
    .address7(lut16_V_address7),
    .ce7(lut16_V_ce7),
    .q7(lut16_V_q7),
    .address8(lut16_V_address8),
    .ce8(lut16_V_ce8),
    .q8(lut16_V_q8),
    .address9(lut16_V_address9),
    .ce9(lut16_V_ce9),
    .q9(lut16_V_q9),
    .address10(lut16_V_address10),
    .ce10(lut16_V_ce10),
    .q10(lut16_V_q10),
    .address11(lut16_V_address11),
    .ce11(lut16_V_ce11),
    .q11(lut16_V_q11),
    .address12(lut16_V_address12),
    .ce12(lut16_V_ce12),
    .q12(lut16_V_q12),
    .address13(lut16_V_address13),
    .ce13(lut16_V_ce13),
    .q13(lut16_V_q13),
    .address14(lut16_V_address14),
    .ce14(lut16_V_ce14),
    .q14(lut16_V_q14),
    .address15(lut16_V_address15),
    .ce15(lut16_V_ce15),
    .q15(lut16_V_q15)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln214_1_reg_960 <= add_ln214_1_fu_677_p2;
        ret_V_7_reg_945 <= ret_V_7_fu_637_p2;
        ret_V_8_reg_950 <= ret_V_8_fu_651_p2;
        ret_V_8_reg_950_pp0_iter4_reg <= ret_V_8_reg_950;
        ret_V_9_reg_955 <= ret_V_9_fu_665_p2;
        ret_V_9_reg_955_pp0_iter4_reg <= ret_V_9_reg_955;
        ret_V_reg_940 <= ret_V_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lut16_V_load_10_reg_910 <= lut16_V_q10;
        lut16_V_load_11_reg_915 <= lut16_V_q11;
        lut16_V_load_12_reg_920 <= lut16_V_q12;
        lut16_V_load_13_reg_925 <= lut16_V_q13;
        lut16_V_load_14_reg_930 <= lut16_V_q14;
        lut16_V_load_15_reg_935 <= lut16_V_q15;
        lut16_V_load_1_reg_865 <= lut16_V_q1;
        lut16_V_load_2_reg_870 <= lut16_V_q2;
        lut16_V_load_3_reg_875 <= lut16_V_q3;
        lut16_V_load_4_reg_880 <= lut16_V_q4;
        lut16_V_load_5_reg_885 <= lut16_V_q5;
        lut16_V_load_6_reg_890 <= lut16_V_q6;
        lut16_V_load_7_reg_895 <= lut16_V_q7;
        lut16_V_load_8_reg_900 <= lut16_V_q8;
        lut16_V_load_9_reg_905 <= lut16_V_q9;
        lut16_V_load_reg_860 <= lut16_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_31_reg_710 <= {{r_V_fu_295_p2[11:8]}};
        p_Result_32_reg_715 <= {{r_V_fu_295_p2[15:12]}};
        p_Result_33_reg_720 <= {{r_V_fu_295_p2[19:16]}};
        p_Result_34_reg_725 <= {{r_V_fu_295_p2[23:20]}};
        p_Result_35_reg_730 <= {{r_V_fu_295_p2[27:24]}};
        p_Result_36_reg_735 <= {{r_V_fu_295_p2[31:28]}};
        p_Result_37_reg_740 <= {{r_V_fu_295_p2[35:32]}};
        p_Result_38_reg_745 <= {{r_V_fu_295_p2[39:36]}};
        p_Result_39_reg_750 <= {{r_V_fu_295_p2[43:40]}};
        p_Result_40_reg_755 <= {{r_V_fu_295_p2[47:44]}};
        p_Result_41_reg_760 <= {{r_V_fu_295_p2[51:48]}};
        p_Result_42_reg_765 <= {{r_V_fu_295_p2[55:52]}};
        p_Result_43_reg_770 <= {{r_V_fu_295_p2[59:56]}};
        p_Result_44_reg_775 <= {{r_V_fu_295_p2[63:60]}};
        p_Result_s_reg_705 <= {{r_V_fu_295_p2[7:4]}};
        trunc_ln681_reg_700 <= trunc_ln681_fu_301_p1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce0 = 1'b1;
    end else begin
        lut16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce1 = 1'b1;
    end else begin
        lut16_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce10 = 1'b1;
    end else begin
        lut16_V_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce11 = 1'b1;
    end else begin
        lut16_V_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce12 = 1'b1;
    end else begin
        lut16_V_ce12 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce13 = 1'b1;
    end else begin
        lut16_V_ce13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce14 = 1'b1;
    end else begin
        lut16_V_ce14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce15 = 1'b1;
    end else begin
        lut16_V_ce15 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce2 = 1'b1;
    end else begin
        lut16_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce3 = 1'b1;
    end else begin
        lut16_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce4 = 1'b1;
    end else begin
        lut16_V_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce5 = 1'b1;
    end else begin
        lut16_V_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce6 = 1'b1;
    end else begin
        lut16_V_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce7 = 1'b1;
    end else begin
        lut16_V_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce8 = 1'b1;
    end else begin
        lut16_V_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lut16_V_ce9 = 1'b1;
    end else begin
        lut16_V_ce9 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add0_V_fu_525_p2 = (zext_ln215_1_fu_522_p1 + zext_ln215_fu_519_p1);

assign add1_V_fu_537_p2 = (zext_ln215_3_fu_534_p1 + zext_ln215_2_fu_531_p1);

assign add2_V_fu_549_p2 = (zext_ln215_5_fu_546_p1 + zext_ln215_4_fu_543_p1);

assign add3_V_fu_561_p2 = (zext_ln215_7_fu_558_p1 + zext_ln215_6_fu_555_p1);

assign add4_V_fu_573_p2 = (zext_ln215_9_fu_570_p1 + zext_ln215_8_fu_567_p1);

assign add5_V_fu_585_p2 = (zext_ln215_11_fu_582_p1 + zext_ln215_10_fu_579_p1);

assign add6_V_fu_597_p2 = (zext_ln215_13_fu_594_p1 + zext_ln215_12_fu_591_p1);

assign add7_V_fu_609_p2 = (zext_ln215_15_fu_606_p1 + zext_ln215_14_fu_603_p1);

assign add_ln214_1_fu_677_p2 = ($signed(rhs_V_11_fu_674_p1) + $signed(lhs_V_9_fu_671_p1));

assign add_ln214_2_fu_689_p2 = ($signed(rhs_V_12_fu_686_p1) + $signed(lhs_V_10_fu_683_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = (add_ln214_1_reg_960 + add_ln214_2_fu_689_p2);

assign lhs_V_10_fu_683_p1 = $signed(ret_V_8_reg_950_pp0_iter4_reg);

assign lhs_V_6_fu_629_p1 = $signed(add2_V_fu_549_p2);

assign lhs_V_7_fu_643_p1 = $signed(add4_V_fu_573_p2);

assign lhs_V_8_fu_657_p1 = $signed(add6_V_fu_597_p2);

assign lhs_V_9_fu_671_p1 = $signed(ret_V_reg_940);

assign lhs_V_fu_615_p1 = $signed(add0_V_fu_525_p2);

assign lut16_V_address0 = zext_ln19_fu_455_p1;

assign lut16_V_address1 = zext_ln19_1_fu_459_p1;

assign lut16_V_address10 = zext_ln24_fu_495_p1;

assign lut16_V_address11 = zext_ln24_1_fu_499_p1;

assign lut16_V_address12 = zext_ln25_fu_503_p1;

assign lut16_V_address13 = zext_ln25_1_fu_507_p1;

assign lut16_V_address14 = zext_ln26_fu_511_p1;

assign lut16_V_address15 = zext_ln26_1_fu_515_p1;

assign lut16_V_address2 = zext_ln20_fu_463_p1;

assign lut16_V_address3 = zext_ln20_1_fu_467_p1;

assign lut16_V_address4 = zext_ln21_fu_471_p1;

assign lut16_V_address5 = zext_ln21_1_fu_475_p1;

assign lut16_V_address6 = zext_ln22_fu_479_p1;

assign lut16_V_address7 = zext_ln22_1_fu_483_p1;

assign lut16_V_address8 = zext_ln23_fu_487_p1;

assign lut16_V_address9 = zext_ln23_1_fu_491_p1;

assign r_V_fu_295_p2 = (xor_ln769_fu_289_p2 ^ b_V);

assign ret_V_7_fu_637_p2 = ($signed(rhs_V_8_fu_633_p1) + $signed(lhs_V_6_fu_629_p1));

assign ret_V_8_fu_651_p2 = ($signed(rhs_V_9_fu_647_p1) + $signed(lhs_V_7_fu_643_p1));

assign ret_V_9_fu_665_p2 = ($signed(rhs_V_10_fu_661_p1) + $signed(lhs_V_8_fu_657_p1));

assign ret_V_fu_623_p2 = ($signed(rhs_V_fu_619_p1) + $signed(lhs_V_fu_615_p1));

assign rhs_V_10_fu_661_p1 = $signed(add7_V_fu_609_p2);

assign rhs_V_11_fu_674_p1 = $signed(ret_V_7_reg_945);

assign rhs_V_12_fu_686_p1 = $signed(ret_V_9_reg_955_pp0_iter4_reg);

assign rhs_V_8_fu_633_p1 = $signed(add3_V_fu_561_p2);

assign rhs_V_9_fu_647_p1 = $signed(add5_V_fu_585_p2);

assign rhs_V_fu_619_p1 = $signed(add1_V_fu_537_p2);

assign trunc_ln681_fu_301_p1 = r_V_fu_295_p2[3:0];

assign xor_ln769_fu_289_p2 = (w_V ^ 64'd18446744073709551615);

assign zext_ln19_1_fu_459_p1 = p_Result_s_reg_705;

assign zext_ln19_fu_455_p1 = trunc_ln681_reg_700;

assign zext_ln20_1_fu_467_p1 = p_Result_32_reg_715;

assign zext_ln20_fu_463_p1 = p_Result_31_reg_710;

assign zext_ln215_10_fu_579_p1 = lut16_V_load_10_reg_910;

assign zext_ln215_11_fu_582_p1 = lut16_V_load_11_reg_915;

assign zext_ln215_12_fu_591_p1 = lut16_V_load_12_reg_920;

assign zext_ln215_13_fu_594_p1 = lut16_V_load_13_reg_925;

assign zext_ln215_14_fu_603_p1 = lut16_V_load_14_reg_930;

assign zext_ln215_15_fu_606_p1 = lut16_V_load_15_reg_935;

assign zext_ln215_1_fu_522_p1 = lut16_V_load_1_reg_865;

assign zext_ln215_2_fu_531_p1 = lut16_V_load_2_reg_870;

assign zext_ln215_3_fu_534_p1 = lut16_V_load_3_reg_875;

assign zext_ln215_4_fu_543_p1 = lut16_V_load_4_reg_880;

assign zext_ln215_5_fu_546_p1 = lut16_V_load_5_reg_885;

assign zext_ln215_6_fu_555_p1 = lut16_V_load_6_reg_890;

assign zext_ln215_7_fu_558_p1 = lut16_V_load_7_reg_895;

assign zext_ln215_8_fu_567_p1 = lut16_V_load_8_reg_900;

assign zext_ln215_9_fu_570_p1 = lut16_V_load_9_reg_905;

assign zext_ln215_fu_519_p1 = lut16_V_load_reg_860;

assign zext_ln21_1_fu_475_p1 = p_Result_34_reg_725;

assign zext_ln21_fu_471_p1 = p_Result_33_reg_720;

assign zext_ln22_1_fu_483_p1 = p_Result_36_reg_735;

assign zext_ln22_fu_479_p1 = p_Result_35_reg_730;

assign zext_ln23_1_fu_491_p1 = p_Result_38_reg_745;

assign zext_ln23_fu_487_p1 = p_Result_37_reg_740;

assign zext_ln24_1_fu_499_p1 = p_Result_40_reg_755;

assign zext_ln24_fu_495_p1 = p_Result_39_reg_750;

assign zext_ln25_1_fu_507_p1 = p_Result_42_reg_765;

assign zext_ln25_fu_503_p1 = p_Result_41_reg_760;

assign zext_ln26_1_fu_515_p1 = p_Result_44_reg_775;

assign zext_ln26_fu_511_p1 = p_Result_43_reg_770;

endmodule //compute_engine_64
