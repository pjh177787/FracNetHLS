// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_weight_3x3_from (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dest_0_V_address0,
        dest_0_V_ce0,
        dest_0_V_we0,
        dest_0_V_d0,
        dest_1_V_address0,
        dest_1_V_ce0,
        dest_1_V_we0,
        dest_1_V_d0,
        dest_2_V_address0,
        dest_2_V_ce0,
        dest_2_V_we0,
        dest_2_V_d0,
        dest_3_V_address0,
        dest_3_V_ce0,
        dest_3_V_we0,
        dest_3_V_d0,
        dest_4_V_address0,
        dest_4_V_ce0,
        dest_4_V_we0,
        dest_4_V_d0,
        dest_5_V_address0,
        dest_5_V_ce0,
        dest_5_V_we0,
        dest_5_V_d0,
        dest_6_V_address0,
        dest_6_V_ce0,
        dest_6_V_we0,
        dest_6_V_d0,
        dest_7_V_address0,
        dest_7_V_ce0,
        dest_7_V_we0,
        dest_7_V_d0,
        dest_8_V_address0,
        dest_8_V_ce0,
        dest_8_V_we0,
        dest_8_V_d0,
        dest_9_V_address0,
        dest_9_V_ce0,
        dest_9_V_we0,
        dest_9_V_d0,
        dest_10_V_address0,
        dest_10_V_ce0,
        dest_10_V_we0,
        dest_10_V_d0,
        dest_11_V_address0,
        dest_11_V_ce0,
        dest_11_V_we0,
        dest_11_V_d0,
        dest_12_V_address0,
        dest_12_V_ce0,
        dest_12_V_we0,
        dest_12_V_d0,
        dest_13_V_address0,
        dest_13_V_ce0,
        dest_13_V_we0,
        dest_13_V_d0,
        dest_14_V_address0,
        dest_14_V_ce0,
        dest_14_V_we0,
        dest_14_V_d0,
        dest_15_V_address0,
        dest_15_V_ce0,
        dest_15_V_we0,
        dest_15_V_d0,
        dest_16_V_address0,
        dest_16_V_ce0,
        dest_16_V_we0,
        dest_16_V_d0,
        dest_17_V_address0,
        dest_17_V_ce0,
        dest_17_V_we0,
        dest_17_V_d0,
        dest_18_V_address0,
        dest_18_V_ce0,
        dest_18_V_we0,
        dest_18_V_d0,
        dest_19_V_address0,
        dest_19_V_ce0,
        dest_19_V_we0,
        dest_19_V_d0,
        dest_20_V_address0,
        dest_20_V_ce0,
        dest_20_V_we0,
        dest_20_V_d0,
        dest_21_V_address0,
        dest_21_V_ce0,
        dest_21_V_we0,
        dest_21_V_d0,
        dest_22_V_address0,
        dest_22_V_ce0,
        dest_22_V_we0,
        dest_22_V_d0,
        dest_23_V_address0,
        dest_23_V_ce0,
        dest_23_V_we0,
        dest_23_V_d0,
        dest_24_V_address0,
        dest_24_V_ce0,
        dest_24_V_we0,
        dest_24_V_d0,
        dest_25_V_address0,
        dest_25_V_ce0,
        dest_25_V_we0,
        dest_25_V_d0,
        dest_26_V_address0,
        dest_26_V_ce0,
        dest_26_V_we0,
        dest_26_V_d0,
        dest_27_V_address0,
        dest_27_V_ce0,
        dest_27_V_we0,
        dest_27_V_d0,
        dest_28_V_address0,
        dest_28_V_ce0,
        dest_28_V_we0,
        dest_28_V_d0,
        dest_29_V_address0,
        dest_29_V_ce0,
        dest_29_V_we0,
        dest_29_V_d0,
        dest_30_V_address0,
        dest_30_V_ce0,
        dest_30_V_we0,
        dest_30_V_d0,
        dest_31_V_address0,
        dest_31_V_ce0,
        dest_31_V_we0,
        dest_31_V_d0,
        m_axi_src_V_AWVALID,
        m_axi_src_V_AWREADY,
        m_axi_src_V_AWADDR,
        m_axi_src_V_AWID,
        m_axi_src_V_AWLEN,
        m_axi_src_V_AWSIZE,
        m_axi_src_V_AWBURST,
        m_axi_src_V_AWLOCK,
        m_axi_src_V_AWCACHE,
        m_axi_src_V_AWPROT,
        m_axi_src_V_AWQOS,
        m_axi_src_V_AWREGION,
        m_axi_src_V_AWUSER,
        m_axi_src_V_WVALID,
        m_axi_src_V_WREADY,
        m_axi_src_V_WDATA,
        m_axi_src_V_WSTRB,
        m_axi_src_V_WLAST,
        m_axi_src_V_WID,
        m_axi_src_V_WUSER,
        m_axi_src_V_ARVALID,
        m_axi_src_V_ARREADY,
        m_axi_src_V_ARADDR,
        m_axi_src_V_ARID,
        m_axi_src_V_ARLEN,
        m_axi_src_V_ARSIZE,
        m_axi_src_V_ARBURST,
        m_axi_src_V_ARLOCK,
        m_axi_src_V_ARCACHE,
        m_axi_src_V_ARPROT,
        m_axi_src_V_ARQOS,
        m_axi_src_V_ARREGION,
        m_axi_src_V_ARUSER,
        m_axi_src_V_RVALID,
        m_axi_src_V_RREADY,
        m_axi_src_V_RDATA,
        m_axi_src_V_RLAST,
        m_axi_src_V_RID,
        m_axi_src_V_RUSER,
        m_axi_src_V_RRESP,
        m_axi_src_V_BVALID,
        m_axi_src_V_BREADY,
        m_axi_src_V_BRESP,
        m_axi_src_V_BID,
        m_axi_src_V_BUSER,
        src_V_offset,
        index
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state19 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] dest_0_V_address0;
output   dest_0_V_ce0;
output   dest_0_V_we0;
output  [63:0] dest_0_V_d0;
output  [5:0] dest_1_V_address0;
output   dest_1_V_ce0;
output   dest_1_V_we0;
output  [63:0] dest_1_V_d0;
output  [5:0] dest_2_V_address0;
output   dest_2_V_ce0;
output   dest_2_V_we0;
output  [63:0] dest_2_V_d0;
output  [5:0] dest_3_V_address0;
output   dest_3_V_ce0;
output   dest_3_V_we0;
output  [63:0] dest_3_V_d0;
output  [5:0] dest_4_V_address0;
output   dest_4_V_ce0;
output   dest_4_V_we0;
output  [63:0] dest_4_V_d0;
output  [5:0] dest_5_V_address0;
output   dest_5_V_ce0;
output   dest_5_V_we0;
output  [63:0] dest_5_V_d0;
output  [5:0] dest_6_V_address0;
output   dest_6_V_ce0;
output   dest_6_V_we0;
output  [63:0] dest_6_V_d0;
output  [5:0] dest_7_V_address0;
output   dest_7_V_ce0;
output   dest_7_V_we0;
output  [63:0] dest_7_V_d0;
output  [5:0] dest_8_V_address0;
output   dest_8_V_ce0;
output   dest_8_V_we0;
output  [63:0] dest_8_V_d0;
output  [5:0] dest_9_V_address0;
output   dest_9_V_ce0;
output   dest_9_V_we0;
output  [63:0] dest_9_V_d0;
output  [5:0] dest_10_V_address0;
output   dest_10_V_ce0;
output   dest_10_V_we0;
output  [63:0] dest_10_V_d0;
output  [5:0] dest_11_V_address0;
output   dest_11_V_ce0;
output   dest_11_V_we0;
output  [63:0] dest_11_V_d0;
output  [5:0] dest_12_V_address0;
output   dest_12_V_ce0;
output   dest_12_V_we0;
output  [63:0] dest_12_V_d0;
output  [5:0] dest_13_V_address0;
output   dest_13_V_ce0;
output   dest_13_V_we0;
output  [63:0] dest_13_V_d0;
output  [5:0] dest_14_V_address0;
output   dest_14_V_ce0;
output   dest_14_V_we0;
output  [63:0] dest_14_V_d0;
output  [5:0] dest_15_V_address0;
output   dest_15_V_ce0;
output   dest_15_V_we0;
output  [63:0] dest_15_V_d0;
output  [5:0] dest_16_V_address0;
output   dest_16_V_ce0;
output   dest_16_V_we0;
output  [63:0] dest_16_V_d0;
output  [5:0] dest_17_V_address0;
output   dest_17_V_ce0;
output   dest_17_V_we0;
output  [63:0] dest_17_V_d0;
output  [5:0] dest_18_V_address0;
output   dest_18_V_ce0;
output   dest_18_V_we0;
output  [63:0] dest_18_V_d0;
output  [5:0] dest_19_V_address0;
output   dest_19_V_ce0;
output   dest_19_V_we0;
output  [63:0] dest_19_V_d0;
output  [5:0] dest_20_V_address0;
output   dest_20_V_ce0;
output   dest_20_V_we0;
output  [63:0] dest_20_V_d0;
output  [5:0] dest_21_V_address0;
output   dest_21_V_ce0;
output   dest_21_V_we0;
output  [63:0] dest_21_V_d0;
output  [5:0] dest_22_V_address0;
output   dest_22_V_ce0;
output   dest_22_V_we0;
output  [63:0] dest_22_V_d0;
output  [5:0] dest_23_V_address0;
output   dest_23_V_ce0;
output   dest_23_V_we0;
output  [63:0] dest_23_V_d0;
output  [5:0] dest_24_V_address0;
output   dest_24_V_ce0;
output   dest_24_V_we0;
output  [63:0] dest_24_V_d0;
output  [5:0] dest_25_V_address0;
output   dest_25_V_ce0;
output   dest_25_V_we0;
output  [63:0] dest_25_V_d0;
output  [5:0] dest_26_V_address0;
output   dest_26_V_ce0;
output   dest_26_V_we0;
output  [63:0] dest_26_V_d0;
output  [5:0] dest_27_V_address0;
output   dest_27_V_ce0;
output   dest_27_V_we0;
output  [63:0] dest_27_V_d0;
output  [5:0] dest_28_V_address0;
output   dest_28_V_ce0;
output   dest_28_V_we0;
output  [63:0] dest_28_V_d0;
output  [5:0] dest_29_V_address0;
output   dest_29_V_ce0;
output   dest_29_V_we0;
output  [63:0] dest_29_V_d0;
output  [5:0] dest_30_V_address0;
output   dest_30_V_ce0;
output   dest_30_V_we0;
output  [63:0] dest_30_V_d0;
output  [5:0] dest_31_V_address0;
output   dest_31_V_ce0;
output   dest_31_V_we0;
output  [63:0] dest_31_V_d0;
output   m_axi_src_V_AWVALID;
input   m_axi_src_V_AWREADY;
output  [31:0] m_axi_src_V_AWADDR;
output  [0:0] m_axi_src_V_AWID;
output  [31:0] m_axi_src_V_AWLEN;
output  [2:0] m_axi_src_V_AWSIZE;
output  [1:0] m_axi_src_V_AWBURST;
output  [1:0] m_axi_src_V_AWLOCK;
output  [3:0] m_axi_src_V_AWCACHE;
output  [2:0] m_axi_src_V_AWPROT;
output  [3:0] m_axi_src_V_AWQOS;
output  [3:0] m_axi_src_V_AWREGION;
output  [0:0] m_axi_src_V_AWUSER;
output   m_axi_src_V_WVALID;
input   m_axi_src_V_WREADY;
output  [511:0] m_axi_src_V_WDATA;
output  [63:0] m_axi_src_V_WSTRB;
output   m_axi_src_V_WLAST;
output  [0:0] m_axi_src_V_WID;
output  [0:0] m_axi_src_V_WUSER;
output   m_axi_src_V_ARVALID;
input   m_axi_src_V_ARREADY;
output  [31:0] m_axi_src_V_ARADDR;
output  [0:0] m_axi_src_V_ARID;
output  [31:0] m_axi_src_V_ARLEN;
output  [2:0] m_axi_src_V_ARSIZE;
output  [1:0] m_axi_src_V_ARBURST;
output  [1:0] m_axi_src_V_ARLOCK;
output  [3:0] m_axi_src_V_ARCACHE;
output  [2:0] m_axi_src_V_ARPROT;
output  [3:0] m_axi_src_V_ARQOS;
output  [3:0] m_axi_src_V_ARREGION;
output  [0:0] m_axi_src_V_ARUSER;
input   m_axi_src_V_RVALID;
output   m_axi_src_V_RREADY;
input  [511:0] m_axi_src_V_RDATA;
input   m_axi_src_V_RLAST;
input  [0:0] m_axi_src_V_RID;
input  [0:0] m_axi_src_V_RUSER;
input  [1:0] m_axi_src_V_RRESP;
input   m_axi_src_V_BVALID;
output   m_axi_src_V_BREADY;
input  [1:0] m_axi_src_V_BRESP;
input  [0:0] m_axi_src_V_BID;
input  [0:0] m_axi_src_V_BUSER;
input  [25:0] src_V_offset;
input  [9:0] index;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dest_0_V_ce0;
reg dest_0_V_we0;
reg dest_1_V_ce0;
reg dest_1_V_we0;
reg dest_2_V_ce0;
reg dest_2_V_we0;
reg dest_3_V_ce0;
reg dest_3_V_we0;
reg dest_4_V_ce0;
reg dest_4_V_we0;
reg dest_5_V_ce0;
reg dest_5_V_we0;
reg dest_6_V_ce0;
reg dest_6_V_we0;
reg dest_7_V_ce0;
reg dest_7_V_we0;
reg dest_8_V_ce0;
reg dest_8_V_we0;
reg dest_9_V_ce0;
reg dest_9_V_we0;
reg dest_10_V_ce0;
reg dest_10_V_we0;
reg dest_11_V_ce0;
reg dest_11_V_we0;
reg dest_12_V_ce0;
reg dest_12_V_we0;
reg dest_13_V_ce0;
reg dest_13_V_we0;
reg dest_14_V_ce0;
reg dest_14_V_we0;
reg dest_15_V_ce0;
reg dest_15_V_we0;
reg dest_16_V_ce0;
reg dest_16_V_we0;
reg dest_17_V_ce0;
reg dest_17_V_we0;
reg dest_18_V_ce0;
reg dest_18_V_we0;
reg dest_19_V_ce0;
reg dest_19_V_we0;
reg dest_20_V_ce0;
reg dest_20_V_we0;
reg dest_21_V_ce0;
reg dest_21_V_we0;
reg dest_22_V_ce0;
reg dest_22_V_we0;
reg dest_23_V_ce0;
reg dest_23_V_we0;
reg dest_24_V_ce0;
reg dest_24_V_we0;
reg dest_25_V_ce0;
reg dest_25_V_we0;
reg dest_26_V_ce0;
reg dest_26_V_we0;
reg dest_27_V_ce0;
reg dest_27_V_we0;
reg dest_28_V_ce0;
reg dest_28_V_we0;
reg dest_29_V_ce0;
reg dest_29_V_we0;
reg dest_30_V_ce0;
reg dest_30_V_we0;
reg dest_31_V_ce0;
reg dest_31_V_we0;
reg m_axi_src_V_ARVALID;
reg[31:0] m_axi_src_V_ARADDR;
reg m_axi_src_V_RREADY;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln146_reg_1394;
reg    src_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln146_reg_1394_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln146_reg_1394_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln146_reg_1394_pp0_iter3_reg;
reg   [3:0] indvar_flatten_reg_642;
reg   [1:0] m_0_reg_653;
reg   [1:0] n_0_reg_664;
wire   [9:0] add_ln151_fu_675_p2;
reg   [9:0] add_ln151_reg_1348;
wire   [9:0] add_ln151_1_fu_681_p2;
reg   [9:0] add_ln151_1_reg_1354;
wire   [9:0] add_ln151_2_fu_687_p2;
reg   [9:0] add_ln151_2_reg_1360;
wire  signed [13:0] sext_ln647_fu_713_p1;
reg  signed [13:0] sext_ln647_reg_1366;
wire    ap_CS_fsm_state2;
wire  signed [13:0] sext_ln647_1_fu_737_p1;
reg  signed [13:0] sext_ln647_1_reg_1371;
wire  signed [13:0] sext_ln647_2_fu_761_p1;
reg  signed [13:0] sext_ln647_2_reg_1376;
wire  signed [13:0] sext_ln647_3_fu_785_p1;
reg  signed [13:0] sext_ln647_3_reg_1381;
wire   [63:0] zext_ln647_4_fu_789_p1;
reg   [63:0] zext_ln647_4_reg_1386;
wire   [0:0] icmp_ln146_fu_793_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state7_io;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_state15_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln146_fu_799_p2;
reg   [3:0] add_ln146_reg_1398;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln151_fu_817_p3;
reg   [1:0] select_ln151_reg_1403;
reg   [1:0] select_ln151_reg_1403_pp0_iter1_reg;
reg   [1:0] select_ln151_reg_1403_pp0_iter2_reg;
wire   [1:0] select_ln151_1_fu_825_p3;
reg   [1:0] select_ln151_1_reg_1410;
reg   [1:0] select_ln151_1_reg_1410_pp0_iter1_reg;
reg   [1:0] select_ln151_1_reg_1410_pp0_iter2_reg;
wire   [13:0] zext_ln321_fu_833_p1;
reg   [13:0] zext_ln321_reg_1418;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_state8_io;
wire    ap_block_state12_pp0_stage1_iter2;
reg    ap_block_state16_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
wire  signed [13:0] add_ln647_fu_836_p2;
reg  signed [13:0] add_ln647_reg_1425;
wire   [63:0] sub_ln647_4_fu_855_p2;
reg   [63:0] sub_ln647_4_reg_1431;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
reg    ap_block_state9_io;
wire    ap_block_state13_pp0_stage2_iter2;
reg    ap_block_state17_pp0_stage2_iter3;
reg    ap_block_pp0_stage2_11001;
wire  signed [13:0] add_ln647_1_fu_861_p2;
reg  signed [13:0] add_ln647_1_reg_1436;
wire   [63:0] sub_ln647_5_fu_879_p2;
reg   [63:0] sub_ln647_5_reg_1442;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
reg    ap_block_state10_io;
reg    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state18_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_11001;
wire  signed [13:0] add_ln647_2_fu_885_p2;
reg  signed [13:0] add_ln647_2_reg_1447;
wire  signed [13:0] add_ln647_3_fu_889_p2;
reg  signed [13:0] add_ln647_3_reg_1453;
wire   [63:0] zext_ln151_fu_893_p1;
reg   [63:0] zext_ln151_reg_1459;
wire   [63:0] add_ln647_5_fu_901_p2;
reg   [63:0] add_ln647_5_reg_1466;
wire   [1:0] n_fu_906_p2;
reg   [1:0] n_reg_1471;
wire   [63:0] sub_ln647_6_fu_925_p2;
reg   [63:0] sub_ln647_6_reg_1476;
wire   [63:0] sub_ln647_7_fu_945_p2;
reg   [63:0] sub_ln647_7_reg_1481;
wire   [63:0] add_ln647_7_fu_961_p2;
reg   [63:0] add_ln647_7_reg_1492;
wire   [63:0] add_ln647_9_fu_976_p2;
reg   [63:0] add_ln647_9_reg_1503;
wire   [63:0] add_ln647_11_fu_985_p2;
reg   [63:0] add_ln647_11_reg_1508;
wire   [5:0] add_ln321_fu_1029_p2;
reg   [5:0] add_ln321_reg_1525;
wire   [63:0] trunc_ln647_fu_1035_p1;
reg   [63:0] trunc_ln647_reg_1530;
reg   [63:0] p_Result_199_0_1_reg_1535;
reg   [63:0] p_Result_199_0_2_reg_1540;
reg   [63:0] p_Result_199_0_3_reg_1545;
reg   [63:0] p_Result_199_0_4_reg_1550;
reg   [63:0] p_Result_199_0_5_reg_1555;
reg   [63:0] p_Result_199_0_6_reg_1560;
reg   [63:0] p_Result_199_0_7_reg_1565;
wire  signed [63:0] sext_ln321_1_fu_1109_p1;
reg  signed [63:0] sext_ln321_1_reg_1570;
wire   [63:0] trunc_ln647_1_fu_1120_p1;
reg   [63:0] trunc_ln647_1_reg_1598;
reg   [63:0] p_Result_199_1_1_reg_1603;
reg   [63:0] p_Result_199_1_2_reg_1608;
reg   [63:0] p_Result_199_1_3_reg_1613;
reg   [63:0] p_Result_199_1_4_reg_1618;
reg   [63:0] p_Result_199_1_5_reg_1623;
reg   [63:0] p_Result_199_1_6_reg_1628;
reg   [63:0] p_Result_199_1_7_reg_1633;
wire   [63:0] trunc_ln647_2_fu_1194_p1;
reg   [63:0] trunc_ln647_2_reg_1638;
reg   [63:0] p_Result_199_2_1_reg_1643;
reg   [63:0] p_Result_199_2_2_reg_1648;
reg   [63:0] p_Result_199_2_3_reg_1653;
reg   [63:0] p_Result_199_2_4_reg_1658;
reg   [63:0] p_Result_199_2_5_reg_1663;
reg   [63:0] p_Result_199_2_6_reg_1668;
reg   [63:0] p_Result_199_2_7_reg_1673;
wire   [63:0] trunc_ln647_3_fu_1268_p1;
reg   [63:0] trunc_ln647_3_reg_1678;
reg   [63:0] p_Result_199_3_1_reg_1683;
reg   [63:0] p_Result_199_3_2_reg_1688;
reg   [63:0] p_Result_199_3_3_reg_1693;
reg   [63:0] p_Result_199_3_4_reg_1698;
reg   [63:0] p_Result_199_3_5_reg_1703;
reg   [63:0] p_Result_199_3_6_reg_1708;
reg   [63:0] p_Result_199_3_7_reg_1713;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage3_subdone;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_646_p4;
reg   [1:0] ap_phi_mux_m_0_phi_fu_657_p4;
reg   [1:0] ap_phi_mux_n_0_phi_fu_668_p4;
wire   [11:0] tmp_s_fu_696_p3;
wire   [12:0] zext_ln647_5_fu_703_p1;
wire   [12:0] zext_ln647_fu_693_p1;
wire   [12:0] sub_ln647_fu_707_p2;
wire   [11:0] tmp_483_fu_720_p3;
wire   [12:0] zext_ln647_7_fu_727_p1;
wire   [12:0] zext_ln647_6_fu_717_p1;
wire   [12:0] sub_ln647_1_fu_731_p2;
wire   [11:0] tmp_484_fu_744_p3;
wire   [12:0] zext_ln647_9_fu_751_p1;
wire   [12:0] zext_ln647_8_fu_741_p1;
wire   [12:0] sub_ln647_2_fu_755_p2;
wire   [11:0] tmp_485_fu_768_p3;
wire   [12:0] zext_ln647_11_fu_775_p1;
wire   [12:0] zext_ln647_10_fu_765_p1;
wire   [12:0] sub_ln647_3_fu_779_p2;
wire   [0:0] icmp_ln147_fu_811_p2;
wire   [1:0] m_fu_805_p2;
wire   [15:0] tmp_1287_fu_844_p3;
wire  signed [63:0] sext_ln647_5_fu_851_p1;
wire  signed [63:0] sext_ln647_4_fu_841_p1;
wire   [15:0] tmp_1288_fu_868_p3;
wire  signed [63:0] sext_ln647_7_fu_875_p1;
wire  signed [63:0] sext_ln647_6_fu_865_p1;
wire   [63:0] add_ln647_4_fu_896_p2;
wire   [15:0] tmp_1289_fu_914_p3;
wire  signed [63:0] sext_ln647_9_fu_921_p1;
wire  signed [63:0] sext_ln647_8_fu_911_p1;
wire   [15:0] tmp_1290_fu_934_p3;
wire  signed [63:0] sext_ln647_11_fu_941_p1;
wire  signed [63:0] sext_ln647_10_fu_931_p1;
wire   [63:0] add_ln647_6_fu_957_p2;
wire   [63:0] add_ln647_8_fu_972_p2;
wire   [63:0] add_ln647_10_fu_981_p2;
wire   [3:0] tmp_486_fu_1005_p3;
wire   [4:0] zext_ln321_2_fu_1012_p1;
wire   [4:0] zext_ln321_1_fu_1002_p1;
wire   [4:0] sub_ln321_fu_1016_p2;
wire   [5:0] zext_ln321_3_fu_1026_p1;
wire  signed [5:0] sext_ln321_fu_1022_p1;
wire    ap_CS_fsm_state19;
reg   [6:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_526;
reg    ap_condition_537;
reg    ap_condition_546;
reg    ap_condition_551;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_642 <= add_ln146_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_642 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_0_reg_653 <= select_ln151_1_reg_1410;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_0_reg_653 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_0_reg_664 <= n_reg_1471;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        n_0_reg_664 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln146_reg_1398 <= add_ln146_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln151_1_reg_1354 <= add_ln151_1_fu_681_p2;
        add_ln151_2_reg_1360 <= add_ln151_2_fu_687_p2;
        add_ln151_reg_1348 <= add_ln151_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln321_reg_1525 <= add_ln321_fu_1029_p2;
        p_Result_199_0_1_reg_1535 <= {{m_axi_src_V_RDATA[127:64]}};
        p_Result_199_0_2_reg_1540 <= {{m_axi_src_V_RDATA[191:128]}};
        p_Result_199_0_3_reg_1545 <= {{m_axi_src_V_RDATA[255:192]}};
        p_Result_199_0_4_reg_1550 <= {{m_axi_src_V_RDATA[319:256]}};
        p_Result_199_0_5_reg_1555 <= {{m_axi_src_V_RDATA[383:320]}};
        p_Result_199_0_6_reg_1560 <= {{m_axi_src_V_RDATA[447:384]}};
        p_Result_199_0_7_reg_1565 <= {{m_axi_src_V_RDATA[511:448]}};
        trunc_ln647_reg_1530 <= trunc_ln647_fu_1035_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln647_11_reg_1508 <= add_ln647_11_fu_985_p2;
        add_ln647_9_reg_1503 <= add_ln647_9_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln647_1_reg_1436 <= add_ln647_1_fu_861_p2;
        sub_ln647_4_reg_1431 <= sub_ln647_4_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln647_2_reg_1447 <= add_ln647_2_fu_885_p2;
        add_ln647_3_reg_1453 <= add_ln647_3_fu_889_p2;
        add_ln647_5_reg_1466 <= add_ln647_5_fu_901_p2;
        sub_ln647_5_reg_1442 <= sub_ln647_5_fu_879_p2;
        zext_ln151_reg_1459[1 : 0] <= zext_ln151_fu_893_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln647_7_reg_1492 <= add_ln647_7_fu_961_p2;
        sub_ln647_6_reg_1476 <= sub_ln647_6_fu_925_p2;
        sub_ln647_7_reg_1481 <= sub_ln647_7_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln647_reg_1425 <= add_ln647_fu_836_p2;
        zext_ln321_reg_1418[1 : 0] <= zext_ln321_fu_833_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln146_reg_1394 <= icmp_ln146_fu_793_p2;
        icmp_ln146_reg_1394_pp0_iter1_reg <= icmp_ln146_reg_1394;
        icmp_ln146_reg_1394_pp0_iter2_reg <= icmp_ln146_reg_1394_pp0_iter1_reg;
        icmp_ln146_reg_1394_pp0_iter3_reg <= icmp_ln146_reg_1394_pp0_iter2_reg;
        select_ln151_1_reg_1410_pp0_iter1_reg <= select_ln151_1_reg_1410;
        select_ln151_1_reg_1410_pp0_iter2_reg <= select_ln151_1_reg_1410_pp0_iter1_reg;
        select_ln151_reg_1403_pp0_iter1_reg <= select_ln151_reg_1403;
        select_ln151_reg_1403_pp0_iter2_reg <= select_ln151_reg_1403_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        n_reg_1471 <= n_fu_906_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_199_1_1_reg_1603 <= {{m_axi_src_V_RDATA[127:64]}};
        p_Result_199_1_2_reg_1608 <= {{m_axi_src_V_RDATA[191:128]}};
        p_Result_199_1_3_reg_1613 <= {{m_axi_src_V_RDATA[255:192]}};
        p_Result_199_1_4_reg_1618 <= {{m_axi_src_V_RDATA[319:256]}};
        p_Result_199_1_5_reg_1623 <= {{m_axi_src_V_RDATA[383:320]}};
        p_Result_199_1_6_reg_1628 <= {{m_axi_src_V_RDATA[447:384]}};
        p_Result_199_1_7_reg_1633 <= {{m_axi_src_V_RDATA[511:448]}};
        sext_ln321_1_reg_1570 <= sext_ln321_1_fu_1109_p1;
        trunc_ln647_1_reg_1598 <= trunc_ln647_1_fu_1120_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_199_2_1_reg_1643 <= {{m_axi_src_V_RDATA[127:64]}};
        p_Result_199_2_2_reg_1648 <= {{m_axi_src_V_RDATA[191:128]}};
        p_Result_199_2_3_reg_1653 <= {{m_axi_src_V_RDATA[255:192]}};
        p_Result_199_2_4_reg_1658 <= {{m_axi_src_V_RDATA[319:256]}};
        p_Result_199_2_5_reg_1663 <= {{m_axi_src_V_RDATA[383:320]}};
        p_Result_199_2_6_reg_1668 <= {{m_axi_src_V_RDATA[447:384]}};
        p_Result_199_2_7_reg_1673 <= {{m_axi_src_V_RDATA[511:448]}};
        trunc_ln647_2_reg_1638 <= trunc_ln647_2_fu_1194_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        p_Result_199_3_1_reg_1683 <= {{m_axi_src_V_RDATA[127:64]}};
        p_Result_199_3_2_reg_1688 <= {{m_axi_src_V_RDATA[191:128]}};
        p_Result_199_3_3_reg_1693 <= {{m_axi_src_V_RDATA[255:192]}};
        p_Result_199_3_4_reg_1698 <= {{m_axi_src_V_RDATA[319:256]}};
        p_Result_199_3_5_reg_1703 <= {{m_axi_src_V_RDATA[383:320]}};
        p_Result_199_3_6_reg_1708 <= {{m_axi_src_V_RDATA[447:384]}};
        p_Result_199_3_7_reg_1713 <= {{m_axi_src_V_RDATA[511:448]}};
        trunc_ln647_3_reg_1678 <= trunc_ln647_3_fu_1268_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_fu_793_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln151_1_reg_1410 <= select_ln151_1_fu_825_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_fu_793_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln151_reg_1403 <= select_ln151_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln647_1_reg_1371 <= sext_ln647_1_fu_737_p1;
        sext_ln647_2_reg_1376 <= sext_ln647_2_fu_761_p1;
        sext_ln647_3_reg_1381 <= sext_ln647_3_fu_785_p1;
        sext_ln647_reg_1366 <= sext_ln647_fu_713_p1;
        zext_ln647_4_reg_1386[25 : 0] <= zext_ln647_4_fu_789_p1[25 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln146_fu_793_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_646_p4 = add_ln146_reg_1398;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_646_p4 = indvar_flatten_reg_642;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_m_0_phi_fu_657_p4 = select_ln151_1_reg_1410;
    end else begin
        ap_phi_mux_m_0_phi_fu_657_p4 = m_0_reg_653;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_n_0_phi_fu_668_p4 = n_reg_1471;
    end else begin
        ap_phi_mux_n_0_phi_fu_668_p4 = n_0_reg_664;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_0_V_ce0 = 1'b1;
    end else begin
        dest_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_0_V_we0 = 1'b1;
    end else begin
        dest_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_10_V_ce0 = 1'b1;
    end else begin
        dest_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_10_V_we0 = 1'b1;
    end else begin
        dest_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_11_V_ce0 = 1'b1;
    end else begin
        dest_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_11_V_we0 = 1'b1;
    end else begin
        dest_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_12_V_ce0 = 1'b1;
    end else begin
        dest_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_12_V_we0 = 1'b1;
    end else begin
        dest_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_13_V_ce0 = 1'b1;
    end else begin
        dest_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_13_V_we0 = 1'b1;
    end else begin
        dest_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_14_V_ce0 = 1'b1;
    end else begin
        dest_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_14_V_we0 = 1'b1;
    end else begin
        dest_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_15_V_ce0 = 1'b1;
    end else begin
        dest_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_15_V_we0 = 1'b1;
    end else begin
        dest_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_16_V_ce0 = 1'b1;
    end else begin
        dest_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_16_V_we0 = 1'b1;
    end else begin
        dest_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_17_V_ce0 = 1'b1;
    end else begin
        dest_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_17_V_we0 = 1'b1;
    end else begin
        dest_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_18_V_ce0 = 1'b1;
    end else begin
        dest_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_18_V_we0 = 1'b1;
    end else begin
        dest_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_19_V_ce0 = 1'b1;
    end else begin
        dest_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_19_V_we0 = 1'b1;
    end else begin
        dest_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_1_V_ce0 = 1'b1;
    end else begin
        dest_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_1_V_we0 = 1'b1;
    end else begin
        dest_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_20_V_ce0 = 1'b1;
    end else begin
        dest_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_20_V_we0 = 1'b1;
    end else begin
        dest_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_21_V_ce0 = 1'b1;
    end else begin
        dest_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_21_V_we0 = 1'b1;
    end else begin
        dest_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_22_V_ce0 = 1'b1;
    end else begin
        dest_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_22_V_we0 = 1'b1;
    end else begin
        dest_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_23_V_ce0 = 1'b1;
    end else begin
        dest_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dest_23_V_we0 = 1'b1;
    end else begin
        dest_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_24_V_ce0 = 1'b1;
    end else begin
        dest_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_24_V_we0 = 1'b1;
    end else begin
        dest_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_25_V_ce0 = 1'b1;
    end else begin
        dest_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_25_V_we0 = 1'b1;
    end else begin
        dest_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_26_V_ce0 = 1'b1;
    end else begin
        dest_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_26_V_we0 = 1'b1;
    end else begin
        dest_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_27_V_ce0 = 1'b1;
    end else begin
        dest_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_27_V_we0 = 1'b1;
    end else begin
        dest_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_28_V_ce0 = 1'b1;
    end else begin
        dest_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_28_V_we0 = 1'b1;
    end else begin
        dest_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_29_V_ce0 = 1'b1;
    end else begin
        dest_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_29_V_we0 = 1'b1;
    end else begin
        dest_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_2_V_ce0 = 1'b1;
    end else begin
        dest_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_2_V_we0 = 1'b1;
    end else begin
        dest_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_30_V_ce0 = 1'b1;
    end else begin
        dest_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_30_V_we0 = 1'b1;
    end else begin
        dest_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_31_V_ce0 = 1'b1;
    end else begin
        dest_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dest_31_V_we0 = 1'b1;
    end else begin
        dest_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_3_V_ce0 = 1'b1;
    end else begin
        dest_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_3_V_we0 = 1'b1;
    end else begin
        dest_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_4_V_ce0 = 1'b1;
    end else begin
        dest_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_4_V_we0 = 1'b1;
    end else begin
        dest_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_5_V_ce0 = 1'b1;
    end else begin
        dest_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_5_V_we0 = 1'b1;
    end else begin
        dest_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_6_V_ce0 = 1'b1;
    end else begin
        dest_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_6_V_we0 = 1'b1;
    end else begin
        dest_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_7_V_ce0 = 1'b1;
    end else begin
        dest_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_7_V_we0 = 1'b1;
    end else begin
        dest_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_8_V_ce0 = 1'b1;
    end else begin
        dest_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_8_V_we0 = 1'b1;
    end else begin
        dest_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_9_V_ce0 = 1'b1;
    end else begin
        dest_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dest_9_V_we0 = 1'b1;
    end else begin
        dest_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_551)) begin
            m_axi_src_V_ARADDR = add_ln647_11_reg_1508;
        end else if ((1'b1 == ap_condition_546)) begin
            m_axi_src_V_ARADDR = add_ln647_9_reg_1503;
        end else if ((1'b1 == ap_condition_537)) begin
            m_axi_src_V_ARADDR = add_ln647_7_reg_1492;
        end else if ((1'b1 == ap_condition_526)) begin
            m_axi_src_V_ARADDR = add_ln647_5_reg_1466;
        end else begin
            m_axi_src_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_src_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_src_V_ARVALID = 1'b1;
    end else begin
        m_axi_src_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_src_V_RREADY = 1'b1;
    end else begin
        m_axi_src_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        src_V_blk_n_AR = m_axi_src_V_ARREADY;
    end else begin
        src_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        src_V_blk_n_R = m_axi_src_V_RVALID;
    end else begin
        src_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln146_fu_793_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln146_fu_793_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_fu_799_p2 = (ap_phi_mux_indvar_flatten_phi_fu_646_p4 + 4'd1);

assign add_ln151_1_fu_681_p2 = (index + 10'd2);

assign add_ln151_2_fu_687_p2 = (index + 10'd3);

assign add_ln151_fu_675_p2 = (index + 10'd1);

assign add_ln321_fu_1029_p2 = ($signed(zext_ln321_3_fu_1026_p1) + $signed(sext_ln321_fu_1022_p1));

assign add_ln647_10_fu_981_p2 = (zext_ln151_reg_1459 + sub_ln647_7_reg_1481);

assign add_ln647_11_fu_985_p2 = (add_ln647_10_fu_981_p2 + zext_ln647_4_reg_1386);

assign add_ln647_1_fu_861_p2 = ($signed(zext_ln321_reg_1418) + $signed(sext_ln647_1_reg_1371));

assign add_ln647_2_fu_885_p2 = ($signed(zext_ln321_reg_1418) + $signed(sext_ln647_2_reg_1376));

assign add_ln647_3_fu_889_p2 = ($signed(zext_ln321_reg_1418) + $signed(sext_ln647_3_reg_1381));

assign add_ln647_4_fu_896_p2 = (zext_ln151_fu_893_p1 + sub_ln647_4_reg_1431);

assign add_ln647_5_fu_901_p2 = (add_ln647_4_fu_896_p2 + zext_ln647_4_reg_1386);

assign add_ln647_6_fu_957_p2 = (zext_ln151_reg_1459 + sub_ln647_5_reg_1442);

assign add_ln647_7_fu_961_p2 = (add_ln647_6_fu_957_p2 + zext_ln647_4_reg_1386);

assign add_ln647_8_fu_972_p2 = (zext_ln151_reg_1459 + sub_ln647_6_reg_1476);

assign add_ln647_9_fu_976_p2 = (add_ln647_8_fu_972_p2 + zext_ln647_4_reg_1386);

assign add_ln647_fu_836_p2 = ($signed(zext_ln321_fu_833_p1) + $signed(sext_ln647_reg_1366));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state7_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state8_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage3_iter2 = ((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp0_stage0_iter3 = ((icmp_ln146_reg_1394_pp0_iter2_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp0_stage1_iter3 = ((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage2_iter3 = ((icmp_ln146_reg_1394_pp0_iter3_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

assign ap_block_state18_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln146_reg_1394 == 1'd0) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_526 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln146_reg_1394 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_537 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_546 = ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_551 = ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln146_reg_1394_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dest_0_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_0_V_d0 = trunc_ln647_reg_1530;

assign dest_10_V_address0 = sext_ln321_1_reg_1570;

assign dest_10_V_d0 = p_Result_199_1_2_reg_1608;

assign dest_11_V_address0 = sext_ln321_1_reg_1570;

assign dest_11_V_d0 = p_Result_199_1_3_reg_1613;

assign dest_12_V_address0 = sext_ln321_1_reg_1570;

assign dest_12_V_d0 = p_Result_199_1_4_reg_1618;

assign dest_13_V_address0 = sext_ln321_1_reg_1570;

assign dest_13_V_d0 = p_Result_199_1_5_reg_1623;

assign dest_14_V_address0 = sext_ln321_1_reg_1570;

assign dest_14_V_d0 = p_Result_199_1_6_reg_1628;

assign dest_15_V_address0 = sext_ln321_1_reg_1570;

assign dest_15_V_d0 = p_Result_199_1_7_reg_1633;

assign dest_16_V_address0 = sext_ln321_1_reg_1570;

assign dest_16_V_d0 = trunc_ln647_2_reg_1638;

assign dest_17_V_address0 = sext_ln321_1_reg_1570;

assign dest_17_V_d0 = p_Result_199_2_1_reg_1643;

assign dest_18_V_address0 = sext_ln321_1_reg_1570;

assign dest_18_V_d0 = p_Result_199_2_2_reg_1648;

assign dest_19_V_address0 = sext_ln321_1_reg_1570;

assign dest_19_V_d0 = p_Result_199_2_3_reg_1653;

assign dest_1_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_1_V_d0 = p_Result_199_0_1_reg_1535;

assign dest_20_V_address0 = sext_ln321_1_reg_1570;

assign dest_20_V_d0 = p_Result_199_2_4_reg_1658;

assign dest_21_V_address0 = sext_ln321_1_reg_1570;

assign dest_21_V_d0 = p_Result_199_2_5_reg_1663;

assign dest_22_V_address0 = sext_ln321_1_reg_1570;

assign dest_22_V_d0 = p_Result_199_2_6_reg_1668;

assign dest_23_V_address0 = sext_ln321_1_reg_1570;

assign dest_23_V_d0 = p_Result_199_2_7_reg_1673;

assign dest_24_V_address0 = sext_ln321_1_reg_1570;

assign dest_24_V_d0 = trunc_ln647_3_reg_1678;

assign dest_25_V_address0 = sext_ln321_1_reg_1570;

assign dest_25_V_d0 = p_Result_199_3_1_reg_1683;

assign dest_26_V_address0 = sext_ln321_1_reg_1570;

assign dest_26_V_d0 = p_Result_199_3_2_reg_1688;

assign dest_27_V_address0 = sext_ln321_1_reg_1570;

assign dest_27_V_d0 = p_Result_199_3_3_reg_1693;

assign dest_28_V_address0 = sext_ln321_1_reg_1570;

assign dest_28_V_d0 = p_Result_199_3_4_reg_1698;

assign dest_29_V_address0 = sext_ln321_1_reg_1570;

assign dest_29_V_d0 = p_Result_199_3_5_reg_1703;

assign dest_2_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_2_V_d0 = p_Result_199_0_2_reg_1540;

assign dest_30_V_address0 = sext_ln321_1_reg_1570;

assign dest_30_V_d0 = p_Result_199_3_6_reg_1708;

assign dest_31_V_address0 = sext_ln321_1_reg_1570;

assign dest_31_V_d0 = p_Result_199_3_7_reg_1713;

assign dest_3_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_3_V_d0 = p_Result_199_0_3_reg_1545;

assign dest_4_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_4_V_d0 = p_Result_199_0_4_reg_1550;

assign dest_5_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_5_V_d0 = p_Result_199_0_5_reg_1555;

assign dest_6_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_6_V_d0 = p_Result_199_0_6_reg_1560;

assign dest_7_V_address0 = sext_ln321_1_fu_1109_p1;

assign dest_7_V_d0 = p_Result_199_0_7_reg_1565;

assign dest_8_V_address0 = sext_ln321_1_reg_1570;

assign dest_8_V_d0 = trunc_ln647_1_reg_1598;

assign dest_9_V_address0 = sext_ln321_1_reg_1570;

assign dest_9_V_d0 = p_Result_199_1_1_reg_1603;

assign icmp_ln146_fu_793_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_646_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_811_p2 = ((ap_phi_mux_n_0_phi_fu_668_p4 == 2'd3) ? 1'b1 : 1'b0);

assign m_axi_src_V_ARBURST = 2'd0;

assign m_axi_src_V_ARCACHE = 4'd0;

assign m_axi_src_V_ARID = 1'd0;

assign m_axi_src_V_ARLEN = 32'd1;

assign m_axi_src_V_ARLOCK = 2'd0;

assign m_axi_src_V_ARPROT = 3'd0;

assign m_axi_src_V_ARQOS = 4'd0;

assign m_axi_src_V_ARREGION = 4'd0;

assign m_axi_src_V_ARSIZE = 3'd0;

assign m_axi_src_V_ARUSER = 1'd0;

assign m_axi_src_V_AWADDR = 32'd0;

assign m_axi_src_V_AWBURST = 2'd0;

assign m_axi_src_V_AWCACHE = 4'd0;

assign m_axi_src_V_AWID = 1'd0;

assign m_axi_src_V_AWLEN = 32'd0;

assign m_axi_src_V_AWLOCK = 2'd0;

assign m_axi_src_V_AWPROT = 3'd0;

assign m_axi_src_V_AWQOS = 4'd0;

assign m_axi_src_V_AWREGION = 4'd0;

assign m_axi_src_V_AWSIZE = 3'd0;

assign m_axi_src_V_AWUSER = 1'd0;

assign m_axi_src_V_AWVALID = 1'b0;

assign m_axi_src_V_BREADY = 1'b0;

assign m_axi_src_V_WDATA = 512'd0;

assign m_axi_src_V_WID = 1'd0;

assign m_axi_src_V_WLAST = 1'b0;

assign m_axi_src_V_WSTRB = 64'd0;

assign m_axi_src_V_WUSER = 1'd0;

assign m_axi_src_V_WVALID = 1'b0;

assign m_fu_805_p2 = (2'd1 + ap_phi_mux_m_0_phi_fu_657_p4);

assign n_fu_906_p2 = (2'd1 + select_ln151_reg_1403);

assign select_ln151_1_fu_825_p3 = ((icmp_ln147_fu_811_p2[0:0] === 1'b1) ? m_fu_805_p2 : ap_phi_mux_m_0_phi_fu_657_p4);

assign select_ln151_fu_817_p3 = ((icmp_ln147_fu_811_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_n_0_phi_fu_668_p4);

assign sext_ln321_1_fu_1109_p1 = $signed(add_ln321_reg_1525);

assign sext_ln321_fu_1022_p1 = $signed(sub_ln321_fu_1016_p2);

assign sext_ln647_10_fu_931_p1 = add_ln647_3_reg_1453;

assign sext_ln647_11_fu_941_p1 = $signed(tmp_1290_fu_934_p3);

assign sext_ln647_1_fu_737_p1 = $signed(sub_ln647_1_fu_731_p2);

assign sext_ln647_2_fu_761_p1 = $signed(sub_ln647_2_fu_755_p2);

assign sext_ln647_3_fu_785_p1 = $signed(sub_ln647_3_fu_779_p2);

assign sext_ln647_4_fu_841_p1 = add_ln647_reg_1425;

assign sext_ln647_5_fu_851_p1 = $signed(tmp_1287_fu_844_p3);

assign sext_ln647_6_fu_865_p1 = add_ln647_1_reg_1436;

assign sext_ln647_7_fu_875_p1 = $signed(tmp_1288_fu_868_p3);

assign sext_ln647_8_fu_911_p1 = add_ln647_2_reg_1447;

assign sext_ln647_9_fu_921_p1 = $signed(tmp_1289_fu_914_p3);

assign sext_ln647_fu_713_p1 = $signed(sub_ln647_fu_707_p2);

assign sub_ln321_fu_1016_p2 = (zext_ln321_2_fu_1012_p1 - zext_ln321_1_fu_1002_p1);

assign sub_ln647_1_fu_731_p2 = (zext_ln647_7_fu_727_p1 - zext_ln647_6_fu_717_p1);

assign sub_ln647_2_fu_755_p2 = (zext_ln647_9_fu_751_p1 - zext_ln647_8_fu_741_p1);

assign sub_ln647_3_fu_779_p2 = (zext_ln647_11_fu_775_p1 - zext_ln647_10_fu_765_p1);

assign sub_ln647_4_fu_855_p2 = ($signed(sext_ln647_5_fu_851_p1) - $signed(sext_ln647_4_fu_841_p1));

assign sub_ln647_5_fu_879_p2 = ($signed(sext_ln647_7_fu_875_p1) - $signed(sext_ln647_6_fu_865_p1));

assign sub_ln647_6_fu_925_p2 = ($signed(sext_ln647_9_fu_921_p1) - $signed(sext_ln647_8_fu_911_p1));

assign sub_ln647_7_fu_945_p2 = ($signed(sext_ln647_11_fu_941_p1) - $signed(sext_ln647_10_fu_931_p1));

assign sub_ln647_fu_707_p2 = (zext_ln647_5_fu_703_p1 - zext_ln647_fu_693_p1);

assign tmp_1287_fu_844_p3 = {{add_ln647_reg_1425}, {2'd0}};

assign tmp_1288_fu_868_p3 = {{add_ln647_1_reg_1436}, {2'd0}};

assign tmp_1289_fu_914_p3 = {{add_ln647_2_reg_1447}, {2'd0}};

assign tmp_1290_fu_934_p3 = {{add_ln647_3_reg_1453}, {2'd0}};

assign tmp_483_fu_720_p3 = {{add_ln151_reg_1348}, {2'd0}};

assign tmp_484_fu_744_p3 = {{add_ln151_1_reg_1354}, {2'd0}};

assign tmp_485_fu_768_p3 = {{add_ln151_2_reg_1360}, {2'd0}};

assign tmp_486_fu_1005_p3 = {{select_ln151_1_reg_1410_pp0_iter2_reg}, {2'd0}};

assign tmp_s_fu_696_p3 = {{index}, {2'd0}};

assign trunc_ln647_1_fu_1120_p1 = m_axi_src_V_RDATA[63:0];

assign trunc_ln647_2_fu_1194_p1 = m_axi_src_V_RDATA[63:0];

assign trunc_ln647_3_fu_1268_p1 = m_axi_src_V_RDATA[63:0];

assign trunc_ln647_fu_1035_p1 = m_axi_src_V_RDATA[63:0];

assign zext_ln151_fu_893_p1 = select_ln151_reg_1403;

assign zext_ln321_1_fu_1002_p1 = select_ln151_1_reg_1410_pp0_iter2_reg;

assign zext_ln321_2_fu_1012_p1 = tmp_486_fu_1005_p3;

assign zext_ln321_3_fu_1026_p1 = select_ln151_reg_1403_pp0_iter2_reg;

assign zext_ln321_fu_833_p1 = select_ln151_1_reg_1410;

assign zext_ln647_10_fu_765_p1 = add_ln151_2_reg_1360;

assign zext_ln647_11_fu_775_p1 = tmp_485_fu_768_p3;

assign zext_ln647_4_fu_789_p1 = src_V_offset;

assign zext_ln647_5_fu_703_p1 = tmp_s_fu_696_p3;

assign zext_ln647_6_fu_717_p1 = add_ln151_reg_1348;

assign zext_ln647_7_fu_727_p1 = tmp_483_fu_720_p3;

assign zext_ln647_8_fu_741_p1 = add_ln151_1_reg_1354;

assign zext_ln647_9_fu_751_p1 = tmp_484_fu_744_p3;

assign zext_ln647_fu_693_p1 = index;

always @ (posedge ap_clk) begin
    zext_ln647_4_reg_1386[63:26] <= 38'b00000000000000000000000000000000000000;
    zext_ln321_reg_1418[13:2] <= 12'b000000000000;
    zext_ln151_reg_1459[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //load_weight_3x3_from
