-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_engine_64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    b_V : IN STD_LOGIC_VECTOR (63 downto 0);
    w_V : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of compute_engine_64 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lut16_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce0 : STD_LOGIC;
    signal lut16_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce1 : STD_LOGIC;
    signal lut16_V_q1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address2 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce2 : STD_LOGIC;
    signal lut16_V_q2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address3 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce3 : STD_LOGIC;
    signal lut16_V_q3 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce4 : STD_LOGIC;
    signal lut16_V_q4 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address5 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce5 : STD_LOGIC;
    signal lut16_V_q5 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address6 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce6 : STD_LOGIC;
    signal lut16_V_q6 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address7 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce7 : STD_LOGIC;
    signal lut16_V_q7 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address8 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce8 : STD_LOGIC;
    signal lut16_V_q8 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address9 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce9 : STD_LOGIC;
    signal lut16_V_q9 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address10 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce10 : STD_LOGIC;
    signal lut16_V_q10 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address11 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce11 : STD_LOGIC;
    signal lut16_V_q11 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address12 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce12 : STD_LOGIC;
    signal lut16_V_q12 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address13 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce13 : STD_LOGIC;
    signal lut16_V_q13 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address14 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce14 : STD_LOGIC;
    signal lut16_V_q14 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_address15 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_ce15 : STD_LOGIC;
    signal lut16_V_q15 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln681_fu_301_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln681_reg_700 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_reg_705 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_31_reg_710 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_32_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_33_reg_720 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_34_reg_725 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_35_reg_730 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_36_reg_735 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_37_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_38_reg_745 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_39_reg_750 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_40_reg_755 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_41_reg_760 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_42_reg_765 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_43_reg_770 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_44_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal lut16_V_load_reg_860 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_1_reg_865 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_2_reg_870 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_3_reg_875 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_4_reg_880 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_5_reg_885 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_6_reg_890 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_7_reg_895 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_8_reg_900 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_9_reg_905 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_10_reg_910 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_11_reg_915 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_12_reg_920 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_13_reg_925 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_14_reg_930 : STD_LOGIC_VECTOR (2 downto 0);
    signal lut16_V_load_15_reg_935 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_623_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_reg_940 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_7_fu_637_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_7_reg_945 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_8_fu_651_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_8_reg_950 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_8_reg_950_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_9_fu_665_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_9_reg_955 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_9_reg_955_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln214_1_fu_677_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln214_1_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln19_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_1_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_1_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_1_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln769_fu_289_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_522_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_fu_519_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_3_fu_534_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_2_fu_531_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_5_fu_546_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_4_fu_543_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_7_fu_558_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_6_fu_555_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_9_fu_570_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_8_fu_567_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_11_fu_582_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_10_fu_579_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_13_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_12_fu_591_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_15_fu_606_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln215_14_fu_603_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add0_V_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add1_V_fu_537_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_fu_619_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_fu_615_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add2_V_fu_549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add3_V_fu_561_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_8_fu_633_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_6_fu_629_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add4_V_fu_573_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add5_V_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_9_fu_647_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_7_fu_643_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add6_V_fu_597_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add7_V_fu_609_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_V_10_fu_661_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_8_fu_657_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_11_fu_674_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_9_fu_671_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_12_fu_686_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_10_fu_683_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln214_2_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute_engine_64lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address3 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address4 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address5 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address6 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address7 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address8 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address9 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address10 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address11 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address12 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address13 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address14 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (2 downto 0);
        address15 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    lut16_V_U : component compute_engine_64lbW
    generic map (
        DataWidth => 3,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut16_V_address0,
        ce0 => lut16_V_ce0,
        q0 => lut16_V_q0,
        address1 => lut16_V_address1,
        ce1 => lut16_V_ce1,
        q1 => lut16_V_q1,
        address2 => lut16_V_address2,
        ce2 => lut16_V_ce2,
        q2 => lut16_V_q2,
        address3 => lut16_V_address3,
        ce3 => lut16_V_ce3,
        q3 => lut16_V_q3,
        address4 => lut16_V_address4,
        ce4 => lut16_V_ce4,
        q4 => lut16_V_q4,
        address5 => lut16_V_address5,
        ce5 => lut16_V_ce5,
        q5 => lut16_V_q5,
        address6 => lut16_V_address6,
        ce6 => lut16_V_ce6,
        q6 => lut16_V_q6,
        address7 => lut16_V_address7,
        ce7 => lut16_V_ce7,
        q7 => lut16_V_q7,
        address8 => lut16_V_address8,
        ce8 => lut16_V_ce8,
        q8 => lut16_V_q8,
        address9 => lut16_V_address9,
        ce9 => lut16_V_ce9,
        q9 => lut16_V_q9,
        address10 => lut16_V_address10,
        ce10 => lut16_V_ce10,
        q10 => lut16_V_q10,
        address11 => lut16_V_address11,
        ce11 => lut16_V_ce11,
        q11 => lut16_V_q11,
        address12 => lut16_V_address12,
        ce12 => lut16_V_ce12,
        q12 => lut16_V_q12,
        address13 => lut16_V_address13,
        ce13 => lut16_V_ce13,
        q13 => lut16_V_q13,
        address14 => lut16_V_address14,
        ce14 => lut16_V_ce14,
        q14 => lut16_V_q14,
        address15 => lut16_V_address15,
        ce15 => lut16_V_ce15,
        q15 => lut16_V_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln214_1_reg_960 <= add_ln214_1_fu_677_p2;
                ret_V_7_reg_945 <= ret_V_7_fu_637_p2;
                ret_V_8_reg_950 <= ret_V_8_fu_651_p2;
                ret_V_8_reg_950_pp0_iter4_reg <= ret_V_8_reg_950;
                ret_V_9_reg_955 <= ret_V_9_fu_665_p2;
                ret_V_9_reg_955_pp0_iter4_reg <= ret_V_9_reg_955;
                ret_V_reg_940 <= ret_V_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                lut16_V_load_10_reg_910 <= lut16_V_q10;
                lut16_V_load_11_reg_915 <= lut16_V_q11;
                lut16_V_load_12_reg_920 <= lut16_V_q12;
                lut16_V_load_13_reg_925 <= lut16_V_q13;
                lut16_V_load_14_reg_930 <= lut16_V_q14;
                lut16_V_load_15_reg_935 <= lut16_V_q15;
                lut16_V_load_1_reg_865 <= lut16_V_q1;
                lut16_V_load_2_reg_870 <= lut16_V_q2;
                lut16_V_load_3_reg_875 <= lut16_V_q3;
                lut16_V_load_4_reg_880 <= lut16_V_q4;
                lut16_V_load_5_reg_885 <= lut16_V_q5;
                lut16_V_load_6_reg_890 <= lut16_V_q6;
                lut16_V_load_7_reg_895 <= lut16_V_q7;
                lut16_V_load_8_reg_900 <= lut16_V_q8;
                lut16_V_load_9_reg_905 <= lut16_V_q9;
                lut16_V_load_reg_860 <= lut16_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_31_reg_710 <= r_V_fu_295_p2(11 downto 8);
                p_Result_32_reg_715 <= r_V_fu_295_p2(15 downto 12);
                p_Result_33_reg_720 <= r_V_fu_295_p2(19 downto 16);
                p_Result_34_reg_725 <= r_V_fu_295_p2(23 downto 20);
                p_Result_35_reg_730 <= r_V_fu_295_p2(27 downto 24);
                p_Result_36_reg_735 <= r_V_fu_295_p2(31 downto 28);
                p_Result_37_reg_740 <= r_V_fu_295_p2(35 downto 32);
                p_Result_38_reg_745 <= r_V_fu_295_p2(39 downto 36);
                p_Result_39_reg_750 <= r_V_fu_295_p2(43 downto 40);
                p_Result_40_reg_755 <= r_V_fu_295_p2(47 downto 44);
                p_Result_41_reg_760 <= r_V_fu_295_p2(51 downto 48);
                p_Result_42_reg_765 <= r_V_fu_295_p2(55 downto 52);
                p_Result_43_reg_770 <= r_V_fu_295_p2(59 downto 56);
                p_Result_44_reg_775 <= r_V_fu_295_p2(63 downto 60);
                p_Result_s_reg_705 <= r_V_fu_295_p2(7 downto 4);
                trunc_ln681_reg_700 <= trunc_ln681_fu_301_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add0_V_fu_525_p2 <= std_logic_vector(unsigned(zext_ln215_1_fu_522_p1) + unsigned(zext_ln215_fu_519_p1));
    add1_V_fu_537_p2 <= std_logic_vector(unsigned(zext_ln215_3_fu_534_p1) + unsigned(zext_ln215_2_fu_531_p1));
    add2_V_fu_549_p2 <= std_logic_vector(unsigned(zext_ln215_5_fu_546_p1) + unsigned(zext_ln215_4_fu_543_p1));
    add3_V_fu_561_p2 <= std_logic_vector(unsigned(zext_ln215_7_fu_558_p1) + unsigned(zext_ln215_6_fu_555_p1));
    add4_V_fu_573_p2 <= std_logic_vector(unsigned(zext_ln215_9_fu_570_p1) + unsigned(zext_ln215_8_fu_567_p1));
    add5_V_fu_585_p2 <= std_logic_vector(unsigned(zext_ln215_11_fu_582_p1) + unsigned(zext_ln215_10_fu_579_p1));
    add6_V_fu_597_p2 <= std_logic_vector(unsigned(zext_ln215_13_fu_594_p1) + unsigned(zext_ln215_12_fu_591_p1));
    add7_V_fu_609_p2 <= std_logic_vector(unsigned(zext_ln215_15_fu_606_p1) + unsigned(zext_ln215_14_fu_603_p1));
    add_ln214_1_fu_677_p2 <= std_logic_vector(signed(rhs_V_11_fu_674_p1) + signed(lhs_V_9_fu_671_p1));
    add_ln214_2_fu_689_p2 <= std_logic_vector(signed(rhs_V_12_fu_686_p1) + signed(lhs_V_10_fu_683_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln214_1_reg_960) + unsigned(add_ln214_2_fu_689_p2));
        lhs_V_10_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_8_reg_950_pp0_iter4_reg),6));

        lhs_V_6_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add2_V_fu_549_p2),5));

        lhs_V_7_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add4_V_fu_573_p2),5));

        lhs_V_8_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add6_V_fu_597_p2),5));

        lhs_V_9_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_940),6));

        lhs_V_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add0_V_fu_525_p2),5));

    lut16_V_address0 <= zext_ln19_fu_455_p1(4 - 1 downto 0);
    lut16_V_address1 <= zext_ln19_1_fu_459_p1(4 - 1 downto 0);
    lut16_V_address10 <= zext_ln24_fu_495_p1(4 - 1 downto 0);
    lut16_V_address11 <= zext_ln24_1_fu_499_p1(4 - 1 downto 0);
    lut16_V_address12 <= zext_ln25_fu_503_p1(4 - 1 downto 0);
    lut16_V_address13 <= zext_ln25_1_fu_507_p1(4 - 1 downto 0);
    lut16_V_address14 <= zext_ln26_fu_511_p1(4 - 1 downto 0);
    lut16_V_address15 <= zext_ln26_1_fu_515_p1(4 - 1 downto 0);
    lut16_V_address2 <= zext_ln20_fu_463_p1(4 - 1 downto 0);
    lut16_V_address3 <= zext_ln20_1_fu_467_p1(4 - 1 downto 0);
    lut16_V_address4 <= zext_ln21_fu_471_p1(4 - 1 downto 0);
    lut16_V_address5 <= zext_ln21_1_fu_475_p1(4 - 1 downto 0);
    lut16_V_address6 <= zext_ln22_fu_479_p1(4 - 1 downto 0);
    lut16_V_address7 <= zext_ln22_1_fu_483_p1(4 - 1 downto 0);
    lut16_V_address8 <= zext_ln23_fu_487_p1(4 - 1 downto 0);
    lut16_V_address9 <= zext_ln23_1_fu_491_p1(4 - 1 downto 0);

    lut16_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce0 <= ap_const_logic_1;
        else 
            lut16_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce1 <= ap_const_logic_1;
        else 
            lut16_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce10 <= ap_const_logic_1;
        else 
            lut16_V_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce11 <= ap_const_logic_1;
        else 
            lut16_V_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce12 <= ap_const_logic_1;
        else 
            lut16_V_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce13_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce13 <= ap_const_logic_1;
        else 
            lut16_V_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce14 <= ap_const_logic_1;
        else 
            lut16_V_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce15 <= ap_const_logic_1;
        else 
            lut16_V_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce2 <= ap_const_logic_1;
        else 
            lut16_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce3 <= ap_const_logic_1;
        else 
            lut16_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce4 <= ap_const_logic_1;
        else 
            lut16_V_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce5 <= ap_const_logic_1;
        else 
            lut16_V_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce6 <= ap_const_logic_1;
        else 
            lut16_V_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce7 <= ap_const_logic_1;
        else 
            lut16_V_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce8 <= ap_const_logic_1;
        else 
            lut16_V_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    lut16_V_ce9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lut16_V_ce9 <= ap_const_logic_1;
        else 
            lut16_V_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_295_p2 <= (xor_ln769_fu_289_p2 xor b_V);
    ret_V_7_fu_637_p2 <= std_logic_vector(signed(rhs_V_8_fu_633_p1) + signed(lhs_V_6_fu_629_p1));
    ret_V_8_fu_651_p2 <= std_logic_vector(signed(rhs_V_9_fu_647_p1) + signed(lhs_V_7_fu_643_p1));
    ret_V_9_fu_665_p2 <= std_logic_vector(signed(rhs_V_10_fu_661_p1) + signed(lhs_V_8_fu_657_p1));
    ret_V_fu_623_p2 <= std_logic_vector(signed(rhs_V_fu_619_p1) + signed(lhs_V_fu_615_p1));
        rhs_V_10_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add7_V_fu_609_p2),5));

        rhs_V_11_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_7_reg_945),6));

        rhs_V_12_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_9_reg_955_pp0_iter4_reg),6));

        rhs_V_8_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add3_V_fu_561_p2),5));

        rhs_V_9_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add5_V_fu_585_p2),5));

        rhs_V_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add1_V_fu_537_p2),5));

    trunc_ln681_fu_301_p1 <= r_V_fu_295_p2(4 - 1 downto 0);
    xor_ln769_fu_289_p2 <= (w_V xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    zext_ln19_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_705),64));
    zext_ln19_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln681_reg_700),64));
    zext_ln20_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_32_reg_715),64));
    zext_ln20_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_31_reg_710),64));
    zext_ln215_10_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_10_reg_910),4));
    zext_ln215_11_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_11_reg_915),4));
    zext_ln215_12_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_12_reg_920),4));
    zext_ln215_13_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_13_reg_925),4));
    zext_ln215_14_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_14_reg_930),4));
    zext_ln215_15_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_15_reg_935),4));
    zext_ln215_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_1_reg_865),4));
    zext_ln215_2_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_2_reg_870),4));
    zext_ln215_3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_3_reg_875),4));
    zext_ln215_4_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_4_reg_880),4));
    zext_ln215_5_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_5_reg_885),4));
    zext_ln215_6_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_6_reg_890),4));
    zext_ln215_7_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_7_reg_895),4));
    zext_ln215_8_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_8_reg_900),4));
    zext_ln215_9_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_9_reg_905),4));
    zext_ln215_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut16_V_load_reg_860),4));
    zext_ln21_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_34_reg_725),64));
    zext_ln21_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_reg_720),64));
    zext_ln22_1_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_36_reg_735),64));
    zext_ln22_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_reg_730),64));
    zext_ln23_1_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_38_reg_745),64));
    zext_ln23_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_37_reg_740),64));
    zext_ln24_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_40_reg_755),64));
    zext_ln24_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_39_reg_750),64));
    zext_ln25_1_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_42_reg_765),64));
    zext_ln25_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_41_reg_760),64));
    zext_ln26_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_44_reg_775),64));
    zext_ln26_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_43_reg_770),64));
end behav;
