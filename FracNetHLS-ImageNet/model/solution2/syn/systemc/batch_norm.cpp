// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "batch_norm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic batch_norm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic batch_norm::ap_const_logic_0 = sc_dt::Log_0;
const bool batch_norm::ap_const_boolean_1 = true;
const bool batch_norm::ap_const_boolean_0 = false;
const sc_lv<32> batch_norm::ap_const_lv32_12 = "10010";
const sc_lv<32> batch_norm::ap_const_lv32_C = "1100";
const sc_lv<32> batch_norm::ap_const_lv32_D = "1101";
const sc_lv<1> batch_norm::ap_const_lv1_0 = "0";
const sc_lv<6> batch_norm::ap_const_lv6_0 = "000000";
const sc_lv<1> batch_norm::ap_const_lv1_1 = "1";
const sc_lv<6> batch_norm::ap_const_lv6_3F = "111111";
const sc_lv<14> batch_norm::ap_const_lv14_1FFF = "1111111111111";
const sc_lv<14> batch_norm::ap_const_lv14_2000 = "10000000000000";
const sc_lv<32> batch_norm::ap_const_lv32_E = "1110";

batch_norm::batch_norm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    FracNet_mul_mul_8fYi_U25 = new FracNet_mul_mul_8fYi<1,1,8,11,19>("FracNet_mul_mul_8fYi_U25");
    FracNet_mul_mul_8fYi_U25->din0(r_V_4_fu_278_p0);
    FracNet_mul_mul_8fYi_U25->din1(weight_V_int_reg);
    FracNet_mul_mul_8fYi_U25->dout(r_V_4_fu_278_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_return);
    sensitive << ( select_ln340_525_fu_270_p3 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_int_reg );

    SC_METHOD(thread_icmp_ln785_fu_101_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( p_Result_s_52_reg_310 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_icmp_ln786_fu_127_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( p_Result_s_52_reg_310 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_lhs_V_fu_185_p1);
    sensitive << ( p_Val2_18_fu_177_p3 );

    SC_METHOD(thread_or_ln340_35_fu_155_p2);
    sensitive << ( overflow_fu_116_p2 );
    sensitive << ( xor_ln340_fu_149_p2 );

    SC_METHOD(thread_or_ln340_444_fu_251_p2);
    sensitive << ( p_Result_9_reg_329 );
    sensitive << ( xor_ln340_174_fu_246_p2 );

    SC_METHOD(thread_or_ln340_fu_143_p2);
    sensitive << ( underflow_fu_138_p2 );
    sensitive << ( overflow_fu_116_p2 );

    SC_METHOD(thread_or_ln785_fu_106_p2);
    sensitive << ( p_Result_7_reg_304 );
    sensitive << ( icmp_ln785_fu_101_p2 );

    SC_METHOD(thread_or_ln786_fu_132_p2);
    sensitive << ( icmp_ln786_fu_127_p2 );
    sensitive << ( xor_ln786_fu_122_p2 );

    SC_METHOD(thread_overflow_fu_116_p2);
    sensitive << ( or_ln785_fu_106_p2 );
    sensitive << ( xor_ln785_fu_111_p2 );

    SC_METHOD(thread_p_Val2_18_fu_177_p3);
    sensitive << ( or_ln340_35_fu_155_p2 );
    sensitive << ( select_ln340_fu_161_p3 );
    sensitive << ( select_ln388_fu_169_p3 );

    SC_METHOD(thread_r_V_4_fu_278_p0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( r_V_4_fu_278_p00 );

    SC_METHOD(thread_r_V_4_fu_278_p00);
    sensitive << ( sum_V_int_reg );

    SC_METHOD(thread_ret_V_10_fu_218_p2);
    sensitive << ( p_Val2_18_fu_177_p3 );
    sensitive << ( sext_ln1192_fu_200_p1 );

    SC_METHOD(thread_ret_V_fu_204_p2);
    sensitive << ( lhs_V_fu_185_p1 );
    sensitive << ( sext_ln728_fu_196_p1 );

    SC_METHOD(thread_rhs_V_fu_189_p3);
    sensitive << ( bias_V_read_reg_288 );

    SC_METHOD(thread_select_ln340_492_fu_256_p3);
    sensitive << ( ret_V_10_reg_323 );
    sensitive << ( xor_ln340_316_fu_242_p2 );

    SC_METHOD(thread_select_ln340_525_fu_270_p3);
    sensitive << ( or_ln340_444_fu_251_p2 );
    sensitive << ( select_ln340_492_fu_256_p3 );
    sensitive << ( select_ln388_173_fu_263_p3 );

    SC_METHOD(thread_select_ln340_fu_161_p3);
    sensitive << ( or_ln340_fu_143_p2 );
    sensitive << ( sw_V_fu_94_p3 );

    SC_METHOD(thread_select_ln388_173_fu_263_p3);
    sensitive << ( ret_V_10_reg_323 );
    sensitive << ( underflow_3_fu_237_p2 );

    SC_METHOD(thread_select_ln388_fu_169_p3);
    sensitive << ( underflow_fu_138_p2 );
    sensitive << ( sw_V_fu_94_p3 );

    SC_METHOD(thread_sext_ln1192_fu_200_p1);
    sensitive << ( rhs_V_fu_189_p3 );

    SC_METHOD(thread_sext_ln728_fu_196_p1);
    sensitive << ( rhs_V_fu_189_p3 );

    SC_METHOD(thread_sw_V_fu_94_p3);
    sensitive << ( trunc_ln731_reg_299 );

    SC_METHOD(thread_trunc_ln731_fu_75_p1);
    sensitive << ( r_V_4_fu_278_p2 );

    SC_METHOD(thread_underflow_3_fu_237_p2);
    sensitive << ( p_Result_8_reg_316 );
    sensitive << ( xor_ln786_9_fu_232_p2 );

    SC_METHOD(thread_underflow_fu_138_p2);
    sensitive << ( p_Result_s_reg_293 );
    sensitive << ( or_ln786_fu_132_p2 );

    SC_METHOD(thread_xor_ln340_174_fu_246_p2);
    sensitive << ( p_Result_8_reg_316 );

    SC_METHOD(thread_xor_ln340_316_fu_242_p2);
    sensitive << ( p_Result_8_reg_316 );
    sensitive << ( p_Result_9_reg_329 );

    SC_METHOD(thread_xor_ln340_fu_149_p2);
    sensitive << ( underflow_fu_138_p2 );

    SC_METHOD(thread_xor_ln785_fu_111_p2);
    sensitive << ( p_Result_s_reg_293 );

    SC_METHOD(thread_xor_ln786_9_fu_232_p2);
    sensitive << ( p_Result_9_reg_329 );

    SC_METHOD(thread_xor_ln786_fu_122_p2);
    sensitive << ( p_Result_7_reg_304 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "batch_norm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, sum_V, "(port)sum_V");
    sc_trace(mVcdFile, weight_V, "(port)weight_V");
    sc_trace(mVcdFile, bias_V, "(port)bias_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, bias_V_read_reg_288, "bias_V_read_reg_288");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, p_Result_s_reg_293, "p_Result_s_reg_293");
    sc_trace(mVcdFile, trunc_ln731_fu_75_p1, "trunc_ln731_fu_75_p1");
    sc_trace(mVcdFile, trunc_ln731_reg_299, "trunc_ln731_reg_299");
    sc_trace(mVcdFile, p_Result_7_reg_304, "p_Result_7_reg_304");
    sc_trace(mVcdFile, p_Result_s_52_reg_310, "p_Result_s_52_reg_310");
    sc_trace(mVcdFile, p_Result_8_reg_316, "p_Result_8_reg_316");
    sc_trace(mVcdFile, ret_V_10_fu_218_p2, "ret_V_10_fu_218_p2");
    sc_trace(mVcdFile, ret_V_10_reg_323, "ret_V_10_reg_323");
    sc_trace(mVcdFile, p_Result_9_reg_329, "p_Result_9_reg_329");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, r_V_4_fu_278_p2, "r_V_4_fu_278_p2");
    sc_trace(mVcdFile, icmp_ln785_fu_101_p2, "icmp_ln785_fu_101_p2");
    sc_trace(mVcdFile, or_ln785_fu_106_p2, "or_ln785_fu_106_p2");
    sc_trace(mVcdFile, xor_ln785_fu_111_p2, "xor_ln785_fu_111_p2");
    sc_trace(mVcdFile, icmp_ln786_fu_127_p2, "icmp_ln786_fu_127_p2");
    sc_trace(mVcdFile, xor_ln786_fu_122_p2, "xor_ln786_fu_122_p2");
    sc_trace(mVcdFile, or_ln786_fu_132_p2, "or_ln786_fu_132_p2");
    sc_trace(mVcdFile, underflow_fu_138_p2, "underflow_fu_138_p2");
    sc_trace(mVcdFile, overflow_fu_116_p2, "overflow_fu_116_p2");
    sc_trace(mVcdFile, xor_ln340_fu_149_p2, "xor_ln340_fu_149_p2");
    sc_trace(mVcdFile, or_ln340_fu_143_p2, "or_ln340_fu_143_p2");
    sc_trace(mVcdFile, sw_V_fu_94_p3, "sw_V_fu_94_p3");
    sc_trace(mVcdFile, or_ln340_35_fu_155_p2, "or_ln340_35_fu_155_p2");
    sc_trace(mVcdFile, select_ln340_fu_161_p3, "select_ln340_fu_161_p3");
    sc_trace(mVcdFile, select_ln388_fu_169_p3, "select_ln388_fu_169_p3");
    sc_trace(mVcdFile, p_Val2_18_fu_177_p3, "p_Val2_18_fu_177_p3");
    sc_trace(mVcdFile, rhs_V_fu_189_p3, "rhs_V_fu_189_p3");
    sc_trace(mVcdFile, lhs_V_fu_185_p1, "lhs_V_fu_185_p1");
    sc_trace(mVcdFile, sext_ln728_fu_196_p1, "sext_ln728_fu_196_p1");
    sc_trace(mVcdFile, ret_V_fu_204_p2, "ret_V_fu_204_p2");
    sc_trace(mVcdFile, sext_ln1192_fu_200_p1, "sext_ln1192_fu_200_p1");
    sc_trace(mVcdFile, xor_ln786_9_fu_232_p2, "xor_ln786_9_fu_232_p2");
    sc_trace(mVcdFile, xor_ln340_174_fu_246_p2, "xor_ln340_174_fu_246_p2");
    sc_trace(mVcdFile, xor_ln340_316_fu_242_p2, "xor_ln340_316_fu_242_p2");
    sc_trace(mVcdFile, underflow_3_fu_237_p2, "underflow_3_fu_237_p2");
    sc_trace(mVcdFile, or_ln340_444_fu_251_p2, "or_ln340_444_fu_251_p2");
    sc_trace(mVcdFile, select_ln340_492_fu_256_p3, "select_ln340_492_fu_256_p3");
    sc_trace(mVcdFile, select_ln388_173_fu_263_p3, "select_ln388_173_fu_263_p3");
    sc_trace(mVcdFile, r_V_4_fu_278_p0, "r_V_4_fu_278_p0");
    sc_trace(mVcdFile, select_ln340_525_fu_270_p3, "select_ln340_525_fu_270_p3");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, sum_V_int_reg, "sum_V_int_reg");
    sc_trace(mVcdFile, weight_V_int_reg, "weight_V_int_reg");
    sc_trace(mVcdFile, bias_V_int_reg, "bias_V_int_reg");
    sc_trace(mVcdFile, ap_return_int_reg, "ap_return_int_reg");
    sc_trace(mVcdFile, r_V_4_fu_278_p00, "r_V_4_fu_278_p00");
#endif

    }
}

batch_norm::~batch_norm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete FracNet_mul_mul_8fYi_U25;
}

void batch_norm::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_int_reg = select_ln340_525_fu_270_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        bias_V_int_reg = bias_V.read();
        sum_V_int_reg = sum_V.read();
        weight_V_int_reg = weight_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce_reg.read(), ap_const_logic_1))) {
        bias_V_read_reg_288 = bias_V_int_reg.read();
        p_Result_7_reg_304 = r_V_4_fu_278_p2.read().range(12, 12);
        p_Result_8_reg_316 = ret_V_fu_204_p2.read().range(14, 14);
        p_Result_9_reg_329 = ret_V_10_fu_218_p2.read().range(13, 13);
        p_Result_s_52_reg_310 = r_V_4_fu_278_p2.read().range(18, 13);
        p_Result_s_reg_293 = r_V_4_fu_278_p2.read().range(18, 18);
        ret_V_10_reg_323 = ret_V_10_fu_218_p2.read();
        trunc_ln731_reg_299 = trunc_ln731_fu_75_p1.read();
    }
}

void batch_norm::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_norm::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_norm::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_norm::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_norm::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void batch_norm::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return = ap_return_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return = select_ln340_525_fu_270_p3.read();
    }
}

void batch_norm::thread_icmp_ln785_fu_101_p2() {
    icmp_ln785_fu_101_p2 = (!p_Result_s_52_reg_310.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_52_reg_310.read() != ap_const_lv6_0);
}

void batch_norm::thread_icmp_ln786_fu_127_p2() {
    icmp_ln786_fu_127_p2 = (!p_Result_s_52_reg_310.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_52_reg_310.read() != ap_const_lv6_3F);
}

void batch_norm::thread_lhs_V_fu_185_p1() {
    lhs_V_fu_185_p1 = esl_sext<15,14>(p_Val2_18_fu_177_p3.read());
}

void batch_norm::thread_or_ln340_35_fu_155_p2() {
    or_ln340_35_fu_155_p2 = (overflow_fu_116_p2.read() | xor_ln340_fu_149_p2.read());
}

void batch_norm::thread_or_ln340_444_fu_251_p2() {
    or_ln340_444_fu_251_p2 = (p_Result_9_reg_329.read() | xor_ln340_174_fu_246_p2.read());
}

void batch_norm::thread_or_ln340_fu_143_p2() {
    or_ln340_fu_143_p2 = (underflow_fu_138_p2.read() | overflow_fu_116_p2.read());
}

void batch_norm::thread_or_ln785_fu_106_p2() {
    or_ln785_fu_106_p2 = (p_Result_7_reg_304.read() | icmp_ln785_fu_101_p2.read());
}

void batch_norm::thread_or_ln786_fu_132_p2() {
    or_ln786_fu_132_p2 = (icmp_ln786_fu_127_p2.read() | xor_ln786_fu_122_p2.read());
}

void batch_norm::thread_overflow_fu_116_p2() {
    overflow_fu_116_p2 = (or_ln785_fu_106_p2.read() & xor_ln785_fu_111_p2.read());
}

void batch_norm::thread_p_Val2_18_fu_177_p3() {
    p_Val2_18_fu_177_p3 = (!or_ln340_35_fu_155_p2.read()[0].is_01())? sc_lv<14>(): ((or_ln340_35_fu_155_p2.read()[0].to_bool())? select_ln340_fu_161_p3.read(): select_ln388_fu_169_p3.read());
}

void batch_norm::thread_r_V_4_fu_278_p0() {
    r_V_4_fu_278_p0 =  (sc_lv<8>) (r_V_4_fu_278_p00.read());
}

void batch_norm::thread_r_V_4_fu_278_p00() {
    r_V_4_fu_278_p00 = esl_zext<19,8>(sum_V_int_reg.read());
}

void batch_norm::thread_ret_V_10_fu_218_p2() {
    ret_V_10_fu_218_p2 = (!p_Val2_18_fu_177_p3.read().is_01() || !sext_ln1192_fu_200_p1.read().is_01())? sc_lv<14>(): (sc_bigint<14>(p_Val2_18_fu_177_p3.read()) + sc_bigint<14>(sext_ln1192_fu_200_p1.read()));
}

void batch_norm::thread_ret_V_fu_204_p2() {
    ret_V_fu_204_p2 = (!lhs_V_fu_185_p1.read().is_01() || !sext_ln728_fu_196_p1.read().is_01())? sc_lv<15>(): (sc_bigint<15>(lhs_V_fu_185_p1.read()) + sc_bigint<15>(sext_ln728_fu_196_p1.read()));
}

void batch_norm::thread_rhs_V_fu_189_p3() {
    rhs_V_fu_189_p3 = esl_concat<11,1>(bias_V_read_reg_288.read(), ap_const_lv1_0);
}

void batch_norm::thread_select_ln340_492_fu_256_p3() {
    select_ln340_492_fu_256_p3 = (!xor_ln340_316_fu_242_p2.read()[0].is_01())? sc_lv<14>(): ((xor_ln340_316_fu_242_p2.read()[0].to_bool())? ap_const_lv14_1FFF: ret_V_10_reg_323.read());
}

void batch_norm::thread_select_ln340_525_fu_270_p3() {
    select_ln340_525_fu_270_p3 = (!or_ln340_444_fu_251_p2.read()[0].is_01())? sc_lv<14>(): ((or_ln340_444_fu_251_p2.read()[0].to_bool())? select_ln340_492_fu_256_p3.read(): select_ln388_173_fu_263_p3.read());
}

void batch_norm::thread_select_ln340_fu_161_p3() {
    select_ln340_fu_161_p3 = (!or_ln340_fu_143_p2.read()[0].is_01())? sc_lv<14>(): ((or_ln340_fu_143_p2.read()[0].to_bool())? ap_const_lv14_1FFF: sw_V_fu_94_p3.read());
}

void batch_norm::thread_select_ln388_173_fu_263_p3() {
    select_ln388_173_fu_263_p3 = (!underflow_3_fu_237_p2.read()[0].is_01())? sc_lv<14>(): ((underflow_3_fu_237_p2.read()[0].to_bool())? ap_const_lv14_2000: ret_V_10_reg_323.read());
}

void batch_norm::thread_select_ln388_fu_169_p3() {
    select_ln388_fu_169_p3 = (!underflow_fu_138_p2.read()[0].is_01())? sc_lv<14>(): ((underflow_fu_138_p2.read()[0].to_bool())? ap_const_lv14_2000: sw_V_fu_94_p3.read());
}

void batch_norm::thread_sext_ln1192_fu_200_p1() {
    sext_ln1192_fu_200_p1 = esl_sext<14,12>(rhs_V_fu_189_p3.read());
}

void batch_norm::thread_sext_ln728_fu_196_p1() {
    sext_ln728_fu_196_p1 = esl_sext<15,12>(rhs_V_fu_189_p3.read());
}

void batch_norm::thread_sw_V_fu_94_p3() {
    sw_V_fu_94_p3 = esl_concat<13,1>(trunc_ln731_reg_299.read(), ap_const_lv1_0);
}

void batch_norm::thread_trunc_ln731_fu_75_p1() {
    trunc_ln731_fu_75_p1 = r_V_4_fu_278_p2.read().range(13-1, 0);
}

void batch_norm::thread_underflow_3_fu_237_p2() {
    underflow_3_fu_237_p2 = (p_Result_8_reg_316.read() & xor_ln786_9_fu_232_p2.read());
}

void batch_norm::thread_underflow_fu_138_p2() {
    underflow_fu_138_p2 = (or_ln786_fu_132_p2.read() & p_Result_s_reg_293.read());
}

void batch_norm::thread_xor_ln340_174_fu_246_p2() {
    xor_ln340_174_fu_246_p2 = (p_Result_8_reg_316.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln340_316_fu_242_p2() {
    xor_ln340_316_fu_242_p2 = (p_Result_8_reg_316.read() ^ p_Result_9_reg_329.read());
}

void batch_norm::thread_xor_ln340_fu_149_p2() {
    xor_ln340_fu_149_p2 = (underflow_fu_138_p2.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln785_fu_111_p2() {
    xor_ln785_fu_111_p2 = (p_Result_s_reg_293.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln786_9_fu_232_p2() {
    xor_ln786_9_fu_232_p2 = (p_Result_9_reg_329.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln786_fu_122_p2() {
    xor_ln786_fu_122_p2 = (p_Result_7_reg_304.read() ^ ap_const_lv1_1);
}

}

