// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _batch_norm_HH_
#define _batch_norm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "FracNet_mul_mul_8fYi.h"

namespace ap_rtl {

struct batch_norm : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<8> > sum_V;
    sc_in< sc_lv<11> > weight_V;
    sc_in< sc_lv<11> > bias_V;
    sc_out< sc_lv<14> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    batch_norm(sc_module_name name);
    SC_HAS_PROCESS(batch_norm);

    ~batch_norm();

    sc_trace_file* mVcdFile;

    FracNet_mul_mul_8fYi<1,1,8,11,19>* FracNet_mul_mul_8fYi_U25;
    sc_signal< sc_lv<11> > bias_V_read_reg_288;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > p_Result_s_reg_293;
    sc_signal< sc_lv<13> > trunc_ln731_fu_75_p1;
    sc_signal< sc_lv<13> > trunc_ln731_reg_299;
    sc_signal< sc_lv<1> > p_Result_7_reg_304;
    sc_signal< sc_lv<6> > p_Result_s_52_reg_310;
    sc_signal< sc_lv<1> > p_Result_8_reg_316;
    sc_signal< sc_lv<14> > ret_V_10_fu_218_p2;
    sc_signal< sc_lv<14> > ret_V_10_reg_323;
    sc_signal< sc_lv<1> > p_Result_9_reg_329;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<19> > r_V_4_fu_278_p2;
    sc_signal< sc_lv<1> > icmp_ln785_fu_101_p2;
    sc_signal< sc_lv<1> > or_ln785_fu_106_p2;
    sc_signal< sc_lv<1> > xor_ln785_fu_111_p2;
    sc_signal< sc_lv<1> > icmp_ln786_fu_127_p2;
    sc_signal< sc_lv<1> > xor_ln786_fu_122_p2;
    sc_signal< sc_lv<1> > or_ln786_fu_132_p2;
    sc_signal< sc_lv<1> > underflow_fu_138_p2;
    sc_signal< sc_lv<1> > overflow_fu_116_p2;
    sc_signal< sc_lv<1> > xor_ln340_fu_149_p2;
    sc_signal< sc_lv<1> > or_ln340_fu_143_p2;
    sc_signal< sc_lv<14> > sw_V_fu_94_p3;
    sc_signal< sc_lv<1> > or_ln340_35_fu_155_p2;
    sc_signal< sc_lv<14> > select_ln340_fu_161_p3;
    sc_signal< sc_lv<14> > select_ln388_fu_169_p3;
    sc_signal< sc_lv<14> > p_Val2_18_fu_177_p3;
    sc_signal< sc_lv<12> > rhs_V_fu_189_p3;
    sc_signal< sc_lv<15> > lhs_V_fu_185_p1;
    sc_signal< sc_lv<15> > sext_ln728_fu_196_p1;
    sc_signal< sc_lv<15> > ret_V_fu_204_p2;
    sc_signal< sc_lv<14> > sext_ln1192_fu_200_p1;
    sc_signal< sc_lv<1> > xor_ln786_9_fu_232_p2;
    sc_signal< sc_lv<1> > xor_ln340_174_fu_246_p2;
    sc_signal< sc_lv<1> > xor_ln340_316_fu_242_p2;
    sc_signal< sc_lv<1> > underflow_3_fu_237_p2;
    sc_signal< sc_lv<1> > or_ln340_444_fu_251_p2;
    sc_signal< sc_lv<14> > select_ln340_492_fu_256_p3;
    sc_signal< sc_lv<14> > select_ln388_173_fu_263_p3;
    sc_signal< sc_lv<8> > r_V_4_fu_278_p0;
    sc_signal< sc_lv<14> > select_ln340_525_fu_270_p3;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<8> > sum_V_int_reg;
    sc_signal< sc_lv<11> > weight_V_int_reg;
    sc_signal< sc_lv<11> > bias_V_int_reg;
    sc_signal< sc_lv<14> > ap_return_int_reg;
    sc_signal< sc_lv<19> > r_V_4_fu_278_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_3F;
    static const sc_lv<14> ap_const_lv14_1FFF;
    static const sc_lv<14> ap_const_lv14_2000;
    static const sc_lv<32> ap_const_lv32_E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_return();
    void thread_icmp_ln785_fu_101_p2();
    void thread_icmp_ln786_fu_127_p2();
    void thread_lhs_V_fu_185_p1();
    void thread_or_ln340_35_fu_155_p2();
    void thread_or_ln340_444_fu_251_p2();
    void thread_or_ln340_fu_143_p2();
    void thread_or_ln785_fu_106_p2();
    void thread_or_ln786_fu_132_p2();
    void thread_overflow_fu_116_p2();
    void thread_p_Val2_18_fu_177_p3();
    void thread_r_V_4_fu_278_p0();
    void thread_r_V_4_fu_278_p00();
    void thread_ret_V_10_fu_218_p2();
    void thread_ret_V_fu_204_p2();
    void thread_rhs_V_fu_189_p3();
    void thread_select_ln340_492_fu_256_p3();
    void thread_select_ln340_525_fu_270_p3();
    void thread_select_ln340_fu_161_p3();
    void thread_select_ln388_173_fu_263_p3();
    void thread_select_ln388_fu_169_p3();
    void thread_sext_ln1192_fu_200_p1();
    void thread_sext_ln728_fu_196_p1();
    void thread_sw_V_fu_94_p3();
    void thread_trunc_ln731_fu_75_p1();
    void thread_underflow_3_fu_237_p2();
    void thread_underflow_fu_138_p2();
    void thread_xor_ln340_174_fu_246_p2();
    void thread_xor_ln340_316_fu_242_p2();
    void thread_xor_ln340_fu_149_p2();
    void thread_xor_ln785_fu_111_p2();
    void thread_xor_ln786_9_fu_232_p2();
    void thread_xor_ln786_fu_122_p2();
};

}

using namespace ap_rtl;

#endif
