// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_buf_from_DDR (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_src_V_AWVALID,
        m_axi_src_V_AWREADY,
        m_axi_src_V_AWADDR,
        m_axi_src_V_AWID,
        m_axi_src_V_AWLEN,
        m_axi_src_V_AWSIZE,
        m_axi_src_V_AWBURST,
        m_axi_src_V_AWLOCK,
        m_axi_src_V_AWCACHE,
        m_axi_src_V_AWPROT,
        m_axi_src_V_AWQOS,
        m_axi_src_V_AWREGION,
        m_axi_src_V_AWUSER,
        m_axi_src_V_WVALID,
        m_axi_src_V_WREADY,
        m_axi_src_V_WDATA,
        m_axi_src_V_WSTRB,
        m_axi_src_V_WLAST,
        m_axi_src_V_WID,
        m_axi_src_V_WUSER,
        m_axi_src_V_ARVALID,
        m_axi_src_V_ARREADY,
        m_axi_src_V_ARADDR,
        m_axi_src_V_ARID,
        m_axi_src_V_ARLEN,
        m_axi_src_V_ARSIZE,
        m_axi_src_V_ARBURST,
        m_axi_src_V_ARLOCK,
        m_axi_src_V_ARCACHE,
        m_axi_src_V_ARPROT,
        m_axi_src_V_ARQOS,
        m_axi_src_V_ARREGION,
        m_axi_src_V_ARUSER,
        m_axi_src_V_RVALID,
        m_axi_src_V_RREADY,
        m_axi_src_V_RDATA,
        m_axi_src_V_RLAST,
        m_axi_src_V_RID,
        m_axi_src_V_RUSER,
        m_axi_src_V_RRESP,
        m_axi_src_V_BVALID,
        m_axi_src_V_BREADY,
        m_axi_src_V_BRESP,
        m_axi_src_V_BID,
        m_axi_src_V_BUSER,
        src_V_offset,
        dest_0_V_address0,
        dest_0_V_ce0,
        dest_0_V_we0,
        dest_0_V_d0,
        dest_1_V_address0,
        dest_1_V_ce0,
        dest_1_V_we0,
        dest_1_V_d0,
        dest_2_V_address0,
        dest_2_V_ce0,
        dest_2_V_we0,
        dest_2_V_d0,
        dest_3_V_address0,
        dest_3_V_ce0,
        dest_3_V_we0,
        dest_3_V_d0,
        dest_4_V_address0,
        dest_4_V_ce0,
        dest_4_V_we0,
        dest_4_V_d0,
        dest_5_V_address0,
        dest_5_V_ce0,
        dest_5_V_we0,
        dest_5_V_d0,
        dest_6_V_address0,
        dest_6_V_ce0,
        dest_6_V_we0,
        dest_6_V_d0,
        dest_7_V_address0,
        dest_7_V_ce0,
        dest_7_V_we0,
        dest_7_V_d0,
        dest_8_V_address0,
        dest_8_V_ce0,
        dest_8_V_we0,
        dest_8_V_d0,
        dest_9_V_address0,
        dest_9_V_ce0,
        dest_9_V_we0,
        dest_9_V_d0,
        dest_10_V_address0,
        dest_10_V_ce0,
        dest_10_V_we0,
        dest_10_V_d0,
        dest_11_V_address0,
        dest_11_V_ce0,
        dest_11_V_we0,
        dest_11_V_d0,
        dest_12_V_address0,
        dest_12_V_ce0,
        dest_12_V_we0,
        dest_12_V_d0,
        dest_13_V_address0,
        dest_13_V_ce0,
        dest_13_V_we0,
        dest_13_V_d0,
        dest_14_V_address0,
        dest_14_V_ce0,
        dest_14_V_we0,
        dest_14_V_d0,
        dest_15_V_address0,
        dest_15_V_ce0,
        dest_15_V_we0,
        dest_15_V_d0,
        dest_16_V_address0,
        dest_16_V_ce0,
        dest_16_V_we0,
        dest_16_V_d0,
        dest_17_V_address0,
        dest_17_V_ce0,
        dest_17_V_we0,
        dest_17_V_d0,
        dest_18_V_address0,
        dest_18_V_ce0,
        dest_18_V_we0,
        dest_18_V_d0,
        dest_19_V_address0,
        dest_19_V_ce0,
        dest_19_V_we0,
        dest_19_V_d0,
        dest_20_V_address0,
        dest_20_V_ce0,
        dest_20_V_we0,
        dest_20_V_d0,
        dest_21_V_address0,
        dest_21_V_ce0,
        dest_21_V_we0,
        dest_21_V_d0,
        dest_22_V_address0,
        dest_22_V_ce0,
        dest_22_V_we0,
        dest_22_V_d0,
        dest_23_V_address0,
        dest_23_V_ce0,
        dest_23_V_we0,
        dest_23_V_d0,
        dest_24_V_address0,
        dest_24_V_ce0,
        dest_24_V_we0,
        dest_24_V_d0,
        dest_25_V_address0,
        dest_25_V_ce0,
        dest_25_V_we0,
        dest_25_V_d0,
        dest_26_V_address0,
        dest_26_V_ce0,
        dest_26_V_we0,
        dest_26_V_d0,
        dest_27_V_address0,
        dest_27_V_ce0,
        dest_27_V_we0,
        dest_27_V_d0,
        dest_28_V_address0,
        dest_28_V_ce0,
        dest_28_V_we0,
        dest_28_V_d0,
        dest_29_V_address0,
        dest_29_V_ce0,
        dest_29_V_we0,
        dest_29_V_d0,
        dest_30_V_address0,
        dest_30_V_ce0,
        dest_30_V_we0,
        dest_30_V_d0,
        dest_31_V_address0,
        dest_31_V_ce0,
        dest_31_V_we0,
        dest_31_V_d0,
        row_offset,
        col_offset,
        ch_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state22 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_src_V_AWVALID;
input   m_axi_src_V_AWREADY;
output  [31:0] m_axi_src_V_AWADDR;
output  [0:0] m_axi_src_V_AWID;
output  [31:0] m_axi_src_V_AWLEN;
output  [2:0] m_axi_src_V_AWSIZE;
output  [1:0] m_axi_src_V_AWBURST;
output  [1:0] m_axi_src_V_AWLOCK;
output  [3:0] m_axi_src_V_AWCACHE;
output  [2:0] m_axi_src_V_AWPROT;
output  [3:0] m_axi_src_V_AWQOS;
output  [3:0] m_axi_src_V_AWREGION;
output  [0:0] m_axi_src_V_AWUSER;
output   m_axi_src_V_WVALID;
input   m_axi_src_V_WREADY;
output  [511:0] m_axi_src_V_WDATA;
output  [63:0] m_axi_src_V_WSTRB;
output   m_axi_src_V_WLAST;
output  [0:0] m_axi_src_V_WID;
output  [0:0] m_axi_src_V_WUSER;
output   m_axi_src_V_ARVALID;
input   m_axi_src_V_ARREADY;
output  [31:0] m_axi_src_V_ARADDR;
output  [0:0] m_axi_src_V_ARID;
output  [31:0] m_axi_src_V_ARLEN;
output  [2:0] m_axi_src_V_ARSIZE;
output  [1:0] m_axi_src_V_ARBURST;
output  [1:0] m_axi_src_V_ARLOCK;
output  [3:0] m_axi_src_V_ARCACHE;
output  [2:0] m_axi_src_V_ARPROT;
output  [3:0] m_axi_src_V_ARQOS;
output  [3:0] m_axi_src_V_ARREGION;
output  [0:0] m_axi_src_V_ARUSER;
input   m_axi_src_V_RVALID;
output   m_axi_src_V_RREADY;
input  [511:0] m_axi_src_V_RDATA;
input   m_axi_src_V_RLAST;
input  [0:0] m_axi_src_V_RID;
input  [0:0] m_axi_src_V_RUSER;
input  [1:0] m_axi_src_V_RRESP;
input   m_axi_src_V_BVALID;
output   m_axi_src_V_BREADY;
input  [1:0] m_axi_src_V_BRESP;
input  [0:0] m_axi_src_V_BID;
input  [0:0] m_axi_src_V_BUSER;
input  [25:0] src_V_offset;
output  [6:0] dest_0_V_address0;
output   dest_0_V_ce0;
output   dest_0_V_we0;
output  [8:0] dest_0_V_d0;
output  [6:0] dest_1_V_address0;
output   dest_1_V_ce0;
output   dest_1_V_we0;
output  [8:0] dest_1_V_d0;
output  [6:0] dest_2_V_address0;
output   dest_2_V_ce0;
output   dest_2_V_we0;
output  [8:0] dest_2_V_d0;
output  [6:0] dest_3_V_address0;
output   dest_3_V_ce0;
output   dest_3_V_we0;
output  [8:0] dest_3_V_d0;
output  [6:0] dest_4_V_address0;
output   dest_4_V_ce0;
output   dest_4_V_we0;
output  [8:0] dest_4_V_d0;
output  [6:0] dest_5_V_address0;
output   dest_5_V_ce0;
output   dest_5_V_we0;
output  [8:0] dest_5_V_d0;
output  [6:0] dest_6_V_address0;
output   dest_6_V_ce0;
output   dest_6_V_we0;
output  [8:0] dest_6_V_d0;
output  [6:0] dest_7_V_address0;
output   dest_7_V_ce0;
output   dest_7_V_we0;
output  [8:0] dest_7_V_d0;
output  [6:0] dest_8_V_address0;
output   dest_8_V_ce0;
output   dest_8_V_we0;
output  [8:0] dest_8_V_d0;
output  [6:0] dest_9_V_address0;
output   dest_9_V_ce0;
output   dest_9_V_we0;
output  [8:0] dest_9_V_d0;
output  [6:0] dest_10_V_address0;
output   dest_10_V_ce0;
output   dest_10_V_we0;
output  [8:0] dest_10_V_d0;
output  [6:0] dest_11_V_address0;
output   dest_11_V_ce0;
output   dest_11_V_we0;
output  [8:0] dest_11_V_d0;
output  [6:0] dest_12_V_address0;
output   dest_12_V_ce0;
output   dest_12_V_we0;
output  [8:0] dest_12_V_d0;
output  [6:0] dest_13_V_address0;
output   dest_13_V_ce0;
output   dest_13_V_we0;
output  [8:0] dest_13_V_d0;
output  [6:0] dest_14_V_address0;
output   dest_14_V_ce0;
output   dest_14_V_we0;
output  [8:0] dest_14_V_d0;
output  [6:0] dest_15_V_address0;
output   dest_15_V_ce0;
output   dest_15_V_we0;
output  [8:0] dest_15_V_d0;
output  [6:0] dest_16_V_address0;
output   dest_16_V_ce0;
output   dest_16_V_we0;
output  [8:0] dest_16_V_d0;
output  [6:0] dest_17_V_address0;
output   dest_17_V_ce0;
output   dest_17_V_we0;
output  [8:0] dest_17_V_d0;
output  [6:0] dest_18_V_address0;
output   dest_18_V_ce0;
output   dest_18_V_we0;
output  [8:0] dest_18_V_d0;
output  [6:0] dest_19_V_address0;
output   dest_19_V_ce0;
output   dest_19_V_we0;
output  [8:0] dest_19_V_d0;
output  [6:0] dest_20_V_address0;
output   dest_20_V_ce0;
output   dest_20_V_we0;
output  [8:0] dest_20_V_d0;
output  [6:0] dest_21_V_address0;
output   dest_21_V_ce0;
output   dest_21_V_we0;
output  [8:0] dest_21_V_d0;
output  [6:0] dest_22_V_address0;
output   dest_22_V_ce0;
output   dest_22_V_we0;
output  [8:0] dest_22_V_d0;
output  [6:0] dest_23_V_address0;
output   dest_23_V_ce0;
output   dest_23_V_we0;
output  [8:0] dest_23_V_d0;
output  [6:0] dest_24_V_address0;
output   dest_24_V_ce0;
output   dest_24_V_we0;
output  [8:0] dest_24_V_d0;
output  [6:0] dest_25_V_address0;
output   dest_25_V_ce0;
output   dest_25_V_we0;
output  [8:0] dest_25_V_d0;
output  [6:0] dest_26_V_address0;
output   dest_26_V_ce0;
output   dest_26_V_we0;
output  [8:0] dest_26_V_d0;
output  [6:0] dest_27_V_address0;
output   dest_27_V_ce0;
output   dest_27_V_we0;
output  [8:0] dest_27_V_d0;
output  [6:0] dest_28_V_address0;
output   dest_28_V_ce0;
output   dest_28_V_we0;
output  [8:0] dest_28_V_d0;
output  [6:0] dest_29_V_address0;
output   dest_29_V_ce0;
output   dest_29_V_we0;
output  [8:0] dest_29_V_d0;
output  [6:0] dest_30_V_address0;
output   dest_30_V_ce0;
output   dest_30_V_we0;
output  [8:0] dest_30_V_d0;
output  [6:0] dest_31_V_address0;
output   dest_31_V_ce0;
output   dest_31_V_we0;
output  [8:0] dest_31_V_d0;
input  [4:0] row_offset;
input  [4:0] col_offset;
input  [5:0] ch_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_src_V_ARVALID;
reg m_axi_src_V_RREADY;
reg dest_0_V_ce0;
reg dest_0_V_we0;
reg dest_1_V_ce0;
reg dest_1_V_we0;
reg dest_2_V_ce0;
reg dest_2_V_we0;
reg dest_3_V_ce0;
reg dest_3_V_we0;
reg dest_4_V_ce0;
reg dest_4_V_we0;
reg dest_5_V_ce0;
reg dest_5_V_we0;
reg dest_6_V_ce0;
reg dest_6_V_we0;
reg dest_7_V_ce0;
reg dest_7_V_we0;
reg dest_8_V_ce0;
reg dest_8_V_we0;
reg dest_9_V_ce0;
reg dest_9_V_we0;
reg dest_10_V_ce0;
reg dest_10_V_we0;
reg dest_11_V_ce0;
reg dest_11_V_we0;
reg dest_12_V_ce0;
reg dest_12_V_we0;
reg dest_13_V_ce0;
reg dest_13_V_we0;
reg dest_14_V_ce0;
reg dest_14_V_we0;
reg dest_15_V_ce0;
reg dest_15_V_we0;
reg dest_16_V_ce0;
reg dest_16_V_we0;
reg dest_17_V_ce0;
reg dest_17_V_we0;
reg dest_18_V_ce0;
reg dest_18_V_we0;
reg dest_19_V_ce0;
reg dest_19_V_we0;
reg dest_20_V_ce0;
reg dest_20_V_we0;
reg dest_21_V_ce0;
reg dest_21_V_we0;
reg dest_22_V_ce0;
reg dest_22_V_we0;
reg dest_23_V_ce0;
reg dest_23_V_we0;
reg dest_24_V_ce0;
reg dest_24_V_we0;
reg dest_25_V_ce0;
reg dest_25_V_we0;
reg dest_26_V_ce0;
reg dest_26_V_we0;
reg dest_27_V_ce0;
reg dest_27_V_we0;
reg dest_28_V_ce0;
reg dest_28_V_we0;
reg dest_29_V_ce0;
reg dest_29_V_we0;
reg dest_30_V_ce0;
reg dest_30_V_we0;
reg dest_31_V_ce0;
reg dest_31_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter10;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_44_reg_1368;
reg    src_V_blk_n_R;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] icmp_ln93_reg_1333;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter16_reg;
reg   [5:0] indvar_flatten_reg_720;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
reg    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_11001;
reg   [9:0] src_ptr_0_rec_reg_732;
reg   [3:0] h_0_reg_744;
reg   [3:0] w_0_reg_756;
wire   [18:0] mul_ln91_fu_1299_p2;
reg   [18:0] mul_ln91_reg_1313;
wire  signed [10:0] sext_ln93_fu_802_p1;
reg  signed [10:0] sext_ln93_reg_1318;
wire    ap_CS_fsm_state2;
wire   [19:0] zext_ln96_fu_806_p1;
reg   [19:0] zext_ln96_reg_1323;
wire   [27:0] zext_ln93_fu_809_p1;
reg   [27:0] zext_ln93_reg_1328;
wire   [0:0] icmp_ln93_fu_813_p2;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter1_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter2_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter3_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter4_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter5_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter6_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter7_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter8_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter9_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter10_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter11_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter12_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter13_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter14_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter15_reg;
reg   [0:0] icmp_ln93_reg_1333_pp0_iter17_reg;
wire   [5:0] add_ln93_2_fu_819_p2;
reg   [5:0] add_ln93_2_reg_1337;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln94_fu_837_p2;
reg   [0:0] icmp_ln94_reg_1342;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter9_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter10_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter11_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter12_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter13_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter14_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter15_reg;
reg   [0:0] icmp_ln94_reg_1342_pp0_iter16_reg;
wire   [3:0] select_ln93_fu_843_p3;
reg   [3:0] select_ln93_reg_1347;
reg   [3:0] select_ln93_reg_1347_pp0_iter9_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter10_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter11_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter12_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter13_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter14_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter15_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter16_reg;
reg   [3:0] select_ln93_reg_1347_pp0_iter17_reg;
wire   [9:0] select_ln93_2_fu_851_p3;
reg   [9:0] select_ln93_2_reg_1352;
reg    ap_enable_reg_pp0_iter8;
wire   [3:0] w_fu_859_p2;
reg   [3:0] w_reg_1358;
wire   [27:0] add_ln96_1_fu_886_p2;
reg   [27:0] add_ln96_1_reg_1363;
wire   [0:0] empty_44_fu_891_p2;
wire   [3:0] select_ln93_1_fu_913_p3;
reg   [3:0] select_ln93_1_reg_1378;
wire   [8:0] trunc_ln647_fu_920_p1;
reg   [8:0] trunc_ln647_reg_1385;
reg   [8:0] p_Result_1_reg_1390;
reg   [8:0] p_Result_2_reg_1395;
reg   [8:0] p_Result_3_reg_1400;
reg   [8:0] p_Result_4_reg_1405;
reg   [8:0] p_Result_5_reg_1410;
reg   [8:0] p_Result_6_reg_1415;
reg   [8:0] p_Result_7_reg_1420;
reg   [8:0] p_Result_8_reg_1425;
reg   [8:0] p_Result_9_reg_1430;
reg   [8:0] p_Result_s_reg_1435;
reg   [8:0] p_Result_10_reg_1440;
reg   [8:0] p_Result_11_reg_1445;
reg   [8:0] p_Result_12_reg_1450;
reg   [8:0] p_Result_13_reg_1455;
reg   [8:0] p_Result_14_reg_1460;
reg   [8:0] p_Result_15_reg_1465;
reg   [8:0] p_Result_16_reg_1470;
reg   [8:0] p_Result_17_reg_1475;
reg   [8:0] p_Result_18_reg_1480;
reg   [8:0] p_Result_19_reg_1485;
reg   [8:0] p_Result_20_reg_1490;
reg   [8:0] p_Result_21_reg_1495;
reg   [8:0] p_Result_22_reg_1500;
reg   [8:0] p_Result_23_reg_1505;
reg   [8:0] p_Result_24_reg_1510;
reg   [8:0] p_Result_25_reg_1515;
reg   [8:0] p_Result_26_reg_1520;
reg   [8:0] p_Result_27_reg_1525;
reg   [8:0] p_Result_28_reg_1530;
reg   [8:0] p_Result_29_reg_1535;
reg   [8:0] p_Result_30_reg_1540;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter18;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_724_p4;
reg   [9:0] ap_phi_mux_src_ptr_0_rec_phi_fu_736_p4;
reg   [3:0] ap_phi_mux_h_0_phi_fu_748_p4;
reg   [3:0] ap_phi_mux_w_0_phi_fu_760_p4;
wire   [63:0] zext_ln203_3_fu_1263_p1;
wire  signed [63:0] sext_ln96_fu_897_p1;
wire   [3:0] trunc_ln91_fu_776_p1;
wire   [6:0] shl_ln_fu_780_p3;
wire   [7:0] zext_ln91_3_fu_788_p1;
wire   [7:0] zext_ln91_4_fu_792_p1;
wire   [7:0] sub_ln91_fu_796_p2;
wire   [18:0] grp_fu_1305_p3;
wire   [3:0] grp_fu_825_p1;
wire   [9:0] add_ln104_fu_831_p2;
wire   [10:0] zext_ln93_1_fu_865_p1;
wire   [10:0] add_ln93_fu_868_p2;
wire  signed [19:0] sext_ln93_1_fu_873_p1;
wire   [19:0] add_ln93_1_fu_877_p2;
wire  signed [27:0] sext_ln94_fu_882_p1;
wire   [5:0] grp_fu_825_p2;
wire   [3:0] h_fu_907_p2;
wire   [6:0] tmp_s_fu_1237_p3;
wire   [7:0] zext_ln203_fu_1234_p1;
wire   [7:0] zext_ln203_1_fu_1244_p1;
wire   [7:0] zext_ln203_2_fu_1254_p1;
wire   [7:0] add_ln203_fu_1248_p2;
wire   [7:0] add_ln203_1_fu_1257_p2;
wire   [14:0] mul_ln91_fu_1299_p0;
wire   [5:0] mul_ln91_fu_1299_p1;
wire   [10:0] grp_fu_1305_p0;
wire   [4:0] grp_fu_1305_p1;
reg    grp_fu_825_ce;
wire    ap_CS_fsm_state22;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_1305_p10;
wire   [18:0] mul_ln91_fu_1299_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
end

FracNet_urem_6ns_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 6 ))
FracNet_urem_6ns_hbi_U432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_724_p4),
    .din1(grp_fu_825_p1),
    .ce(grp_fu_825_ce),
    .dout(grp_fu_825_p2)
);

FracNet_mul_mul_1ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 19 ))
FracNet_mul_mul_1ibs_U433(
    .din0(mul_ln91_fu_1299_p0),
    .din1(mul_ln91_fu_1299_p1),
    .dout(mul_ln91_fu_1299_p2)
);

FracNet_mac_muladjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
FracNet_mac_muladjbC_U434(
    .din0(grp_fu_1305_p0),
    .din1(grp_fu_1305_p1),
    .din2(mul_ln91_reg_1313),
    .dout(grp_fu_1305_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        h_0_reg_744 <= select_ln93_1_reg_1378;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        h_0_reg_744 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_720 <= add_ln93_2_reg_1337;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_720 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        src_ptr_0_rec_reg_732 <= select_ln93_2_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_ptr_0_rec_reg_732 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        w_0_reg_756 <= w_reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_0_reg_756 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln93_2_reg_1337 <= add_ln93_2_fu_819_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln96_1_reg_1363 <= add_ln96_1_fu_886_p2;
        empty_44_reg_1368 <= empty_44_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln93_reg_1333 <= icmp_ln93_fu_813_p2;
        icmp_ln93_reg_1333_pp0_iter1_reg <= icmp_ln93_reg_1333;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln93_reg_1333_pp0_iter10_reg <= icmp_ln93_reg_1333_pp0_iter9_reg;
        icmp_ln93_reg_1333_pp0_iter11_reg <= icmp_ln93_reg_1333_pp0_iter10_reg;
        icmp_ln93_reg_1333_pp0_iter12_reg <= icmp_ln93_reg_1333_pp0_iter11_reg;
        icmp_ln93_reg_1333_pp0_iter13_reg <= icmp_ln93_reg_1333_pp0_iter12_reg;
        icmp_ln93_reg_1333_pp0_iter14_reg <= icmp_ln93_reg_1333_pp0_iter13_reg;
        icmp_ln93_reg_1333_pp0_iter15_reg <= icmp_ln93_reg_1333_pp0_iter14_reg;
        icmp_ln93_reg_1333_pp0_iter16_reg <= icmp_ln93_reg_1333_pp0_iter15_reg;
        icmp_ln93_reg_1333_pp0_iter17_reg <= icmp_ln93_reg_1333_pp0_iter16_reg;
        icmp_ln93_reg_1333_pp0_iter2_reg <= icmp_ln93_reg_1333_pp0_iter1_reg;
        icmp_ln93_reg_1333_pp0_iter3_reg <= icmp_ln93_reg_1333_pp0_iter2_reg;
        icmp_ln93_reg_1333_pp0_iter4_reg <= icmp_ln93_reg_1333_pp0_iter3_reg;
        icmp_ln93_reg_1333_pp0_iter5_reg <= icmp_ln93_reg_1333_pp0_iter4_reg;
        icmp_ln93_reg_1333_pp0_iter6_reg <= icmp_ln93_reg_1333_pp0_iter5_reg;
        icmp_ln93_reg_1333_pp0_iter7_reg <= icmp_ln93_reg_1333_pp0_iter6_reg;
        icmp_ln93_reg_1333_pp0_iter8_reg <= icmp_ln93_reg_1333_pp0_iter7_reg;
        icmp_ln93_reg_1333_pp0_iter9_reg <= icmp_ln93_reg_1333_pp0_iter8_reg;
        icmp_ln94_reg_1342_pp0_iter10_reg <= icmp_ln94_reg_1342_pp0_iter9_reg;
        icmp_ln94_reg_1342_pp0_iter11_reg <= icmp_ln94_reg_1342_pp0_iter10_reg;
        icmp_ln94_reg_1342_pp0_iter12_reg <= icmp_ln94_reg_1342_pp0_iter11_reg;
        icmp_ln94_reg_1342_pp0_iter13_reg <= icmp_ln94_reg_1342_pp0_iter12_reg;
        icmp_ln94_reg_1342_pp0_iter14_reg <= icmp_ln94_reg_1342_pp0_iter13_reg;
        icmp_ln94_reg_1342_pp0_iter15_reg <= icmp_ln94_reg_1342_pp0_iter14_reg;
        icmp_ln94_reg_1342_pp0_iter16_reg <= icmp_ln94_reg_1342_pp0_iter15_reg;
        icmp_ln94_reg_1342_pp0_iter9_reg <= icmp_ln94_reg_1342;
        select_ln93_reg_1347_pp0_iter10_reg <= select_ln93_reg_1347_pp0_iter9_reg;
        select_ln93_reg_1347_pp0_iter11_reg <= select_ln93_reg_1347_pp0_iter10_reg;
        select_ln93_reg_1347_pp0_iter12_reg <= select_ln93_reg_1347_pp0_iter11_reg;
        select_ln93_reg_1347_pp0_iter13_reg <= select_ln93_reg_1347_pp0_iter12_reg;
        select_ln93_reg_1347_pp0_iter14_reg <= select_ln93_reg_1347_pp0_iter13_reg;
        select_ln93_reg_1347_pp0_iter15_reg <= select_ln93_reg_1347_pp0_iter14_reg;
        select_ln93_reg_1347_pp0_iter16_reg <= select_ln93_reg_1347_pp0_iter15_reg;
        select_ln93_reg_1347_pp0_iter17_reg <= select_ln93_reg_1347_pp0_iter16_reg;
        select_ln93_reg_1347_pp0_iter9_reg <= select_ln93_reg_1347;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln94_reg_1342 <= icmp_ln94_fu_837_p2;
        select_ln93_reg_1347 <= select_ln93_fu_843_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln91_reg_1313 <= mul_ln91_fu_1299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_10_reg_1440 <= {{m_axi_src_V_RDATA[184:176]}};
        p_Result_11_reg_1445 <= {{m_axi_src_V_RDATA[200:192]}};
        p_Result_12_reg_1450 <= {{m_axi_src_V_RDATA[216:208]}};
        p_Result_13_reg_1455 <= {{m_axi_src_V_RDATA[232:224]}};
        p_Result_14_reg_1460 <= {{m_axi_src_V_RDATA[248:240]}};
        p_Result_15_reg_1465 <= {{m_axi_src_V_RDATA[264:256]}};
        p_Result_16_reg_1470 <= {{m_axi_src_V_RDATA[280:272]}};
        p_Result_17_reg_1475 <= {{m_axi_src_V_RDATA[296:288]}};
        p_Result_18_reg_1480 <= {{m_axi_src_V_RDATA[312:304]}};
        p_Result_19_reg_1485 <= {{m_axi_src_V_RDATA[328:320]}};
        p_Result_1_reg_1390 <= {{m_axi_src_V_RDATA[24:16]}};
        p_Result_20_reg_1490 <= {{m_axi_src_V_RDATA[344:336]}};
        p_Result_21_reg_1495 <= {{m_axi_src_V_RDATA[360:352]}};
        p_Result_22_reg_1500 <= {{m_axi_src_V_RDATA[376:368]}};
        p_Result_23_reg_1505 <= {{m_axi_src_V_RDATA[392:384]}};
        p_Result_24_reg_1510 <= {{m_axi_src_V_RDATA[408:400]}};
        p_Result_25_reg_1515 <= {{m_axi_src_V_RDATA[424:416]}};
        p_Result_26_reg_1520 <= {{m_axi_src_V_RDATA[440:432]}};
        p_Result_27_reg_1525 <= {{m_axi_src_V_RDATA[456:448]}};
        p_Result_28_reg_1530 <= {{m_axi_src_V_RDATA[472:464]}};
        p_Result_29_reg_1535 <= {{m_axi_src_V_RDATA[488:480]}};
        p_Result_2_reg_1395 <= {{m_axi_src_V_RDATA[40:32]}};
        p_Result_30_reg_1540 <= {{m_axi_src_V_RDATA[504:496]}};
        p_Result_3_reg_1400 <= {{m_axi_src_V_RDATA[56:48]}};
        p_Result_4_reg_1405 <= {{m_axi_src_V_RDATA[72:64]}};
        p_Result_5_reg_1410 <= {{m_axi_src_V_RDATA[88:80]}};
        p_Result_6_reg_1415 <= {{m_axi_src_V_RDATA[104:96]}};
        p_Result_7_reg_1420 <= {{m_axi_src_V_RDATA[120:112]}};
        p_Result_8_reg_1425 <= {{m_axi_src_V_RDATA[136:128]}};
        p_Result_9_reg_1430 <= {{m_axi_src_V_RDATA[152:144]}};
        p_Result_s_reg_1435 <= {{m_axi_src_V_RDATA[168:160]}};
        trunc_ln647_reg_1385 <= trunc_ln647_fu_920_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        select_ln93_1_reg_1378 <= select_ln93_1_fu_913_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln93_reg_1333_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        select_ln93_2_reg_1352 <= select_ln93_2_fu_851_p3;
        w_reg_1358 <= w_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln93_reg_1318 <= sext_ln93_fu_802_p1;
        zext_ln93_reg_1328[25 : 0] <= zext_ln93_fu_809_p1[25 : 0];
        zext_ln96_reg_1323[18 : 0] <= zext_ln96_fu_806_p1[18 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln93_fu_813_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        ap_phi_mux_h_0_phi_fu_748_p4 = select_ln93_1_reg_1378;
    end else begin
        ap_phi_mux_h_0_phi_fu_748_p4 = h_0_reg_744;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_724_p4 = add_ln93_2_reg_1337;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_724_p4 = indvar_flatten_reg_720;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_mux_src_ptr_0_rec_phi_fu_736_p4 = select_ln93_2_reg_1352;
    end else begin
        ap_phi_mux_src_ptr_0_rec_phi_fu_736_p4 = src_ptr_0_rec_reg_732;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_mux_w_0_phi_fu_760_p4 = w_reg_1358;
    end else begin
        ap_phi_mux_w_0_phi_fu_760_p4 = w_0_reg_756;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_0_V_ce0 = 1'b1;
    end else begin
        dest_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_0_V_we0 = 1'b1;
    end else begin
        dest_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_10_V_ce0 = 1'b1;
    end else begin
        dest_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_10_V_we0 = 1'b1;
    end else begin
        dest_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_11_V_ce0 = 1'b1;
    end else begin
        dest_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_11_V_we0 = 1'b1;
    end else begin
        dest_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_12_V_ce0 = 1'b1;
    end else begin
        dest_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_12_V_we0 = 1'b1;
    end else begin
        dest_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_13_V_ce0 = 1'b1;
    end else begin
        dest_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_13_V_we0 = 1'b1;
    end else begin
        dest_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_14_V_ce0 = 1'b1;
    end else begin
        dest_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_14_V_we0 = 1'b1;
    end else begin
        dest_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_15_V_ce0 = 1'b1;
    end else begin
        dest_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_15_V_we0 = 1'b1;
    end else begin
        dest_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_16_V_ce0 = 1'b1;
    end else begin
        dest_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_16_V_we0 = 1'b1;
    end else begin
        dest_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_17_V_ce0 = 1'b1;
    end else begin
        dest_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_17_V_we0 = 1'b1;
    end else begin
        dest_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_18_V_ce0 = 1'b1;
    end else begin
        dest_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_18_V_we0 = 1'b1;
    end else begin
        dest_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_19_V_ce0 = 1'b1;
    end else begin
        dest_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_19_V_we0 = 1'b1;
    end else begin
        dest_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_1_V_ce0 = 1'b1;
    end else begin
        dest_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_1_V_we0 = 1'b1;
    end else begin
        dest_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_20_V_ce0 = 1'b1;
    end else begin
        dest_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_20_V_we0 = 1'b1;
    end else begin
        dest_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_21_V_ce0 = 1'b1;
    end else begin
        dest_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_21_V_we0 = 1'b1;
    end else begin
        dest_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_22_V_ce0 = 1'b1;
    end else begin
        dest_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_22_V_we0 = 1'b1;
    end else begin
        dest_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_23_V_ce0 = 1'b1;
    end else begin
        dest_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_23_V_we0 = 1'b1;
    end else begin
        dest_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_24_V_ce0 = 1'b1;
    end else begin
        dest_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_24_V_we0 = 1'b1;
    end else begin
        dest_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_25_V_ce0 = 1'b1;
    end else begin
        dest_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_25_V_we0 = 1'b1;
    end else begin
        dest_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_26_V_ce0 = 1'b1;
    end else begin
        dest_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_26_V_we0 = 1'b1;
    end else begin
        dest_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_27_V_ce0 = 1'b1;
    end else begin
        dest_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_27_V_we0 = 1'b1;
    end else begin
        dest_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_28_V_ce0 = 1'b1;
    end else begin
        dest_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_28_V_we0 = 1'b1;
    end else begin
        dest_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_29_V_ce0 = 1'b1;
    end else begin
        dest_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_29_V_we0 = 1'b1;
    end else begin
        dest_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_2_V_ce0 = 1'b1;
    end else begin
        dest_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_2_V_we0 = 1'b1;
    end else begin
        dest_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_30_V_ce0 = 1'b1;
    end else begin
        dest_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_30_V_we0 = 1'b1;
    end else begin
        dest_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_31_V_ce0 = 1'b1;
    end else begin
        dest_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_31_V_we0 = 1'b1;
    end else begin
        dest_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_3_V_ce0 = 1'b1;
    end else begin
        dest_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_3_V_we0 = 1'b1;
    end else begin
        dest_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_4_V_ce0 = 1'b1;
    end else begin
        dest_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_4_V_we0 = 1'b1;
    end else begin
        dest_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_5_V_ce0 = 1'b1;
    end else begin
        dest_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_5_V_we0 = 1'b1;
    end else begin
        dest_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_6_V_ce0 = 1'b1;
    end else begin
        dest_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_6_V_we0 = 1'b1;
    end else begin
        dest_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_7_V_ce0 = 1'b1;
    end else begin
        dest_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_7_V_we0 = 1'b1;
    end else begin
        dest_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_8_V_ce0 = 1'b1;
    end else begin
        dest_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_8_V_we0 = 1'b1;
    end else begin
        dest_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_9_V_ce0 = 1'b1;
    end else begin
        dest_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        dest_9_V_we0 = 1'b1;
    end else begin
        dest_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_825_ce = 1'b1;
    end else begin
        grp_fu_825_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_44_reg_1368 == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        m_axi_src_V_ARVALID = 1'b1;
    end else begin
        m_axi_src_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        m_axi_src_V_RREADY = 1'b1;
    end else begin
        m_axi_src_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((empty_44_reg_1368 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        src_V_blk_n_AR = m_axi_src_V_ARREADY;
    end else begin
        src_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        src_V_blk_n_R = m_axi_src_V_RVALID;
    end else begin
        src_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln93_fu_813_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln93_fu_813_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_831_p2 = (ap_phi_mux_src_ptr_0_rec_phi_fu_736_p4 + 10'd114);

assign add_ln203_1_fu_1257_p2 = (zext_ln203_2_fu_1254_p1 + add_ln203_fu_1248_p2);

assign add_ln203_fu_1248_p2 = (zext_ln203_fu_1234_p1 + zext_ln203_1_fu_1244_p1);

assign add_ln93_1_fu_877_p2 = ($signed(sext_ln93_1_fu_873_p1) + $signed(zext_ln96_reg_1323));

assign add_ln93_2_fu_819_p2 = (ap_phi_mux_indvar_flatten_phi_fu_724_p4 + 6'd1);

assign add_ln93_fu_868_p2 = ($signed(sext_ln93_reg_1318) + $signed(zext_ln93_1_fu_865_p1));

assign add_ln96_1_fu_886_p2 = ($signed(zext_ln93_reg_1328) + $signed(sext_ln94_fu_882_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state13_io)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((empty_44_reg_1368 == 1'd1) & (m_axi_src_V_ARREADY == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter17 = ((icmp_ln93_reg_1333_pp0_iter16_reg == 1'd0) & (m_axi_src_V_RVALID == 1'b0));
end

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dest_0_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_0_V_d0 = trunc_ln647_reg_1385;

assign dest_10_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_10_V_d0 = p_Result_s_reg_1435;

assign dest_11_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_11_V_d0 = p_Result_10_reg_1440;

assign dest_12_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_12_V_d0 = p_Result_11_reg_1445;

assign dest_13_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_13_V_d0 = p_Result_12_reg_1450;

assign dest_14_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_14_V_d0 = p_Result_13_reg_1455;

assign dest_15_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_15_V_d0 = p_Result_14_reg_1460;

assign dest_16_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_16_V_d0 = p_Result_15_reg_1465;

assign dest_17_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_17_V_d0 = p_Result_16_reg_1470;

assign dest_18_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_18_V_d0 = p_Result_17_reg_1475;

assign dest_19_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_19_V_d0 = p_Result_18_reg_1480;

assign dest_1_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_1_V_d0 = p_Result_1_reg_1390;

assign dest_20_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_20_V_d0 = p_Result_19_reg_1485;

assign dest_21_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_21_V_d0 = p_Result_20_reg_1490;

assign dest_22_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_22_V_d0 = p_Result_21_reg_1495;

assign dest_23_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_23_V_d0 = p_Result_22_reg_1500;

assign dest_24_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_24_V_d0 = p_Result_23_reg_1505;

assign dest_25_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_25_V_d0 = p_Result_24_reg_1510;

assign dest_26_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_26_V_d0 = p_Result_25_reg_1515;

assign dest_27_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_27_V_d0 = p_Result_26_reg_1520;

assign dest_28_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_28_V_d0 = p_Result_27_reg_1525;

assign dest_29_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_29_V_d0 = p_Result_28_reg_1530;

assign dest_2_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_2_V_d0 = p_Result_2_reg_1395;

assign dest_30_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_30_V_d0 = p_Result_29_reg_1535;

assign dest_31_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_31_V_d0 = p_Result_30_reg_1540;

assign dest_3_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_3_V_d0 = p_Result_3_reg_1400;

assign dest_4_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_4_V_d0 = p_Result_4_reg_1405;

assign dest_5_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_5_V_d0 = p_Result_5_reg_1410;

assign dest_6_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_6_V_d0 = p_Result_6_reg_1415;

assign dest_7_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_7_V_d0 = p_Result_7_reg_1420;

assign dest_8_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_8_V_d0 = p_Result_8_reg_1425;

assign dest_9_V_address0 = zext_ln203_3_fu_1263_p1;

assign dest_9_V_d0 = p_Result_9_reg_1430;

assign empty_44_fu_891_p2 = ((grp_fu_825_p2 == 6'd0) ? 1'b1 : 1'b0);

assign grp_fu_1305_p0 = 16'd798;

assign grp_fu_1305_p1 = grp_fu_1305_p10;

assign grp_fu_1305_p10 = row_offset;

assign grp_fu_825_p1 = 6'd7;

assign h_fu_907_p2 = (ap_phi_mux_h_0_phi_fu_748_p4 + 4'd1);

assign icmp_ln93_fu_813_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_724_p4 == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln94_fu_837_p2 = ((ap_phi_mux_w_0_phi_fu_760_p4 == 4'd8) ? 1'b1 : 1'b0);

assign m_axi_src_V_ARADDR = sext_ln96_fu_897_p1;

assign m_axi_src_V_ARBURST = 2'd0;

assign m_axi_src_V_ARCACHE = 4'd0;

assign m_axi_src_V_ARID = 1'd0;

assign m_axi_src_V_ARLEN = 32'd7;

assign m_axi_src_V_ARLOCK = 2'd0;

assign m_axi_src_V_ARPROT = 3'd0;

assign m_axi_src_V_ARQOS = 4'd0;

assign m_axi_src_V_ARREGION = 4'd0;

assign m_axi_src_V_ARSIZE = 3'd0;

assign m_axi_src_V_ARUSER = 1'd0;

assign m_axi_src_V_AWADDR = 32'd0;

assign m_axi_src_V_AWBURST = 2'd0;

assign m_axi_src_V_AWCACHE = 4'd0;

assign m_axi_src_V_AWID = 1'd0;

assign m_axi_src_V_AWLEN = 32'd0;

assign m_axi_src_V_AWLOCK = 2'd0;

assign m_axi_src_V_AWPROT = 3'd0;

assign m_axi_src_V_AWQOS = 4'd0;

assign m_axi_src_V_AWREGION = 4'd0;

assign m_axi_src_V_AWSIZE = 3'd0;

assign m_axi_src_V_AWUSER = 1'd0;

assign m_axi_src_V_AWVALID = 1'b0;

assign m_axi_src_V_BREADY = 1'b0;

assign m_axi_src_V_WDATA = 512'd0;

assign m_axi_src_V_WID = 1'd0;

assign m_axi_src_V_WLAST = 1'b0;

assign m_axi_src_V_WSTRB = 64'd0;

assign m_axi_src_V_WUSER = 1'd0;

assign m_axi_src_V_WVALID = 1'b0;

assign mul_ln91_fu_1299_p0 = 19'd12996;

assign mul_ln91_fu_1299_p1 = mul_ln91_fu_1299_p10;

assign mul_ln91_fu_1299_p10 = ch_offset;

assign select_ln93_1_fu_913_p3 = ((icmp_ln94_reg_1342_pp0_iter16_reg[0:0] === 1'b1) ? h_fu_907_p2 : ap_phi_mux_h_0_phi_fu_748_p4);

assign select_ln93_2_fu_851_p3 = ((icmp_ln94_fu_837_p2[0:0] === 1'b1) ? add_ln104_fu_831_p2 : ap_phi_mux_src_ptr_0_rec_phi_fu_736_p4);

assign select_ln93_fu_843_p3 = ((icmp_ln94_fu_837_p2[0:0] === 1'b1) ? 4'd1 : ap_phi_mux_w_0_phi_fu_760_p4);

assign sext_ln93_1_fu_873_p1 = $signed(add_ln93_fu_868_p2);

assign sext_ln93_fu_802_p1 = $signed(sub_ln91_fu_796_p2);

assign sext_ln94_fu_882_p1 = $signed(add_ln93_1_fu_877_p2);

assign sext_ln96_fu_897_p1 = $signed(add_ln96_1_reg_1363);

assign shl_ln_fu_780_p3 = {{trunc_ln91_fu_776_p1}, {3'd0}};

assign sub_ln91_fu_796_p2 = (zext_ln91_3_fu_788_p1 - zext_ln91_4_fu_792_p1);

assign tmp_s_fu_1237_p3 = {{select_ln93_1_reg_1378}, {3'd0}};

assign trunc_ln647_fu_920_p1 = m_axi_src_V_RDATA[8:0];

assign trunc_ln91_fu_776_p1 = col_offset[3:0];

assign w_fu_859_p2 = (4'd1 + select_ln93_fu_843_p3);

assign zext_ln203_1_fu_1244_p1 = tmp_s_fu_1237_p3;

assign zext_ln203_2_fu_1254_p1 = select_ln93_reg_1347_pp0_iter17_reg;

assign zext_ln203_3_fu_1263_p1 = add_ln203_1_fu_1257_p2;

assign zext_ln203_fu_1234_p1 = select_ln93_1_reg_1378;

assign zext_ln91_3_fu_788_p1 = shl_ln_fu_780_p3;

assign zext_ln91_4_fu_792_p1 = col_offset;

assign zext_ln93_1_fu_865_p1 = select_ln93_2_reg_1352;

assign zext_ln93_fu_809_p1 = src_V_offset;

assign zext_ln96_fu_806_p1 = grp_fu_1305_p3;

always @ (posedge ap_clk) begin
    zext_ln96_reg_1323[19] <= 1'b0;
    zext_ln93_reg_1328[27:26] <= 2'b00;
end

endmodule //load_buf_from_DDR
