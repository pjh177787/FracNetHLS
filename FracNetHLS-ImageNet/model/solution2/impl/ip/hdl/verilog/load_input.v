// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row,
        col,
        c,
        buf_V_address0,
        buf_V_ce0,
        buf_V_we0,
        buf_V_d0,
        m_axi_img_V_AWVALID,
        m_axi_img_V_AWREADY,
        m_axi_img_V_AWADDR,
        m_axi_img_V_AWID,
        m_axi_img_V_AWLEN,
        m_axi_img_V_AWSIZE,
        m_axi_img_V_AWBURST,
        m_axi_img_V_AWLOCK,
        m_axi_img_V_AWCACHE,
        m_axi_img_V_AWPROT,
        m_axi_img_V_AWQOS,
        m_axi_img_V_AWREGION,
        m_axi_img_V_AWUSER,
        m_axi_img_V_WVALID,
        m_axi_img_V_WREADY,
        m_axi_img_V_WDATA,
        m_axi_img_V_WSTRB,
        m_axi_img_V_WLAST,
        m_axi_img_V_WID,
        m_axi_img_V_WUSER,
        m_axi_img_V_ARVALID,
        m_axi_img_V_ARREADY,
        m_axi_img_V_ARADDR,
        m_axi_img_V_ARID,
        m_axi_img_V_ARLEN,
        m_axi_img_V_ARSIZE,
        m_axi_img_V_ARBURST,
        m_axi_img_V_ARLOCK,
        m_axi_img_V_ARCACHE,
        m_axi_img_V_ARPROT,
        m_axi_img_V_ARQOS,
        m_axi_img_V_ARREGION,
        m_axi_img_V_ARUSER,
        m_axi_img_V_RVALID,
        m_axi_img_V_RREADY,
        m_axi_img_V_RDATA,
        m_axi_img_V_RLAST,
        m_axi_img_V_RID,
        m_axi_img_V_RUSER,
        m_axi_img_V_RRESP,
        m_axi_img_V_BVALID,
        m_axi_img_V_BREADY,
        m_axi_img_V_BRESP,
        m_axi_img_V_BID,
        m_axi_img_V_BUSER,
        img_V_offset
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state22 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] row;
input  [4:0] col;
input  [2:0] c;
output  [6:0] buf_V_address0;
output   buf_V_ce0;
output   buf_V_we0;
output  [15:0] buf_V_d0;
output   m_axi_img_V_AWVALID;
input   m_axi_img_V_AWREADY;
output  [31:0] m_axi_img_V_AWADDR;
output  [0:0] m_axi_img_V_AWID;
output  [31:0] m_axi_img_V_AWLEN;
output  [2:0] m_axi_img_V_AWSIZE;
output  [1:0] m_axi_img_V_AWBURST;
output  [1:0] m_axi_img_V_AWLOCK;
output  [3:0] m_axi_img_V_AWCACHE;
output  [2:0] m_axi_img_V_AWPROT;
output  [3:0] m_axi_img_V_AWQOS;
output  [3:0] m_axi_img_V_AWREGION;
output  [0:0] m_axi_img_V_AWUSER;
output   m_axi_img_V_WVALID;
input   m_axi_img_V_WREADY;
output  [15:0] m_axi_img_V_WDATA;
output  [1:0] m_axi_img_V_WSTRB;
output   m_axi_img_V_WLAST;
output  [0:0] m_axi_img_V_WID;
output  [0:0] m_axi_img_V_WUSER;
output   m_axi_img_V_ARVALID;
input   m_axi_img_V_ARREADY;
output  [31:0] m_axi_img_V_ARADDR;
output  [0:0] m_axi_img_V_ARID;
output  [31:0] m_axi_img_V_ARLEN;
output  [2:0] m_axi_img_V_ARSIZE;
output  [1:0] m_axi_img_V_ARBURST;
output  [1:0] m_axi_img_V_ARLOCK;
output  [3:0] m_axi_img_V_ARCACHE;
output  [2:0] m_axi_img_V_ARPROT;
output  [3:0] m_axi_img_V_ARQOS;
output  [3:0] m_axi_img_V_ARREGION;
output  [0:0] m_axi_img_V_ARUSER;
input   m_axi_img_V_RVALID;
output   m_axi_img_V_RREADY;
input  [15:0] m_axi_img_V_RDATA;
input   m_axi_img_V_RLAST;
input  [0:0] m_axi_img_V_RID;
input  [0:0] m_axi_img_V_RUSER;
input  [1:0] m_axi_img_V_RRESP;
input   m_axi_img_V_BVALID;
output   m_axi_img_V_BREADY;
input  [1:0] m_axi_img_V_BRESP;
input  [0:0] m_axi_img_V_BID;
input  [0:0] m_axi_img_V_BUSER;
input  [30:0] img_V_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_V_ce0;
reg buf_V_we0;
reg m_axi_img_V_ARVALID;
reg m_axi_img_V_RREADY;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    img_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter11;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_40_reg_417;
reg    img_V_blk_n_R;
reg    ap_enable_reg_pp0_iter18;
reg   [0:0] icmp_ln356_reg_375;
reg   [0:0] icmp_ln356_reg_375_pp0_iter17_reg;
reg   [6:0] indvar_flatten_reg_131;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
reg    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] mm_0_reg_143;
reg   [3:0] nn_0_reg_155;
wire   [8:0] sub_ln365_fu_187_p2;
reg   [8:0] sub_ln365_reg_360;
wire  signed [19:0] grp_fu_345_p3;
reg  signed [19:0] add_ln365_reg_365;
wire   [32:0] zext_ln356_1_fu_219_p1;
reg   [32:0] zext_ln356_1_reg_370;
wire   [0:0] icmp_ln356_fu_223_p2;
reg   [0:0] icmp_ln356_reg_375_pp0_iter1_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter2_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter3_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter4_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter5_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter6_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter7_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter8_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter9_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter10_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter11_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter12_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter13_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter14_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter15_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter16_reg;
reg   [0:0] icmp_ln356_reg_375_pp0_iter18_reg;
wire   [6:0] add_ln356_2_fu_229_p2;
reg   [6:0] add_ln356_2_reg_379;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln356_fu_253_p3;
reg   [3:0] select_ln356_reg_384;
reg   [3:0] select_ln356_reg_384_pp0_iter9_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter10_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter11_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter12_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter13_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter14_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter15_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter16_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter17_reg;
reg   [3:0] select_ln356_reg_384_pp0_iter18_reg;
wire   [3:0] select_ln356_1_fu_261_p3;
reg   [3:0] select_ln356_1_reg_389;
reg    ap_enable_reg_pp0_iter8;
reg   [3:0] select_ln356_1_reg_389_pp0_iter9_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter10_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter11_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter12_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter13_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter14_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter15_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter16_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter17_reg;
reg   [3:0] select_ln356_1_reg_389_pp0_iter18_reg;
wire   [8:0] add_ln356_fu_273_p2;
reg  signed [8:0] add_ln356_reg_396;
wire   [3:0] nn_fu_278_p2;
reg   [3:0] nn_reg_401;
wire  signed [19:0] grp_fu_353_p3;
reg  signed [19:0] add_ln356_1_reg_406;
reg    ap_enable_reg_pp0_iter9;
reg   [31:0] img_V_addr_reg_411;
wire   [0:0] empty_40_fu_305_p2;
reg   [15:0] img_V_addr_read_reg_421;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter19;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_135_p4;
reg   [3:0] ap_phi_mux_mm_0_phi_fu_147_p4;
reg   [3:0] ap_phi_mux_nn_0_phi_fu_159_p4;
wire   [63:0] zext_ln321_6_fu_340_p1;
wire  signed [63:0] sext_ln321_fu_295_p1;
wire   [7:0] shl_ln_fu_171_p3;
wire   [8:0] zext_ln365_1_fu_179_p1;
wire   [8:0] zext_ln365_2_fu_183_p1;
wire   [7:0] shl_ln365_1_fu_193_p3;
wire   [8:0] zext_ln365_3_fu_201_p1;
wire   [8:0] zext_ln365_4_fu_205_p1;
wire  signed [8:0] sub_ln365_1_fu_209_p2;
wire   [4:0] grp_fu_235_p1;
wire   [0:0] icmp_ln357_fu_247_p2;
wire   [3:0] mm_fu_241_p2;
wire   [8:0] zext_ln356_fu_269_p1;
wire  signed [32:0] sext_ln357_fu_287_p1;
wire   [32:0] add_ln321_2_fu_290_p2;
wire   [6:0] grp_fu_235_p2;
wire   [6:0] tmp_s_fu_314_p3;
wire   [7:0] zext_ln321_fu_311_p1;
wire   [7:0] zext_ln321_4_fu_321_p1;
wire   [7:0] add_ln321_fu_325_p2;
wire   [7:0] zext_ln321_5_fu_331_p1;
wire   [7:0] add_ln321_1_fu_334_p2;
wire   [2:0] grp_fu_345_p0;
wire   [16:0] grp_fu_345_p1;
wire   [8:0] grp_fu_353_p1;
reg    grp_fu_235_ce;
wire    ap_CS_fsm_state22;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [19:0] grp_fu_345_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

FracNet_urem_7ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 11 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 7 ))
FracNet_urem_7ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_135_p4),
    .din1(grp_fu_235_p1),
    .ce(grp_fu_235_ce),
    .dout(grp_fu_235_p2)
);

FracNet_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 20 ))
FracNet_mac_muladcud_U2(
    .din0(grp_fu_345_p0),
    .din1(grp_fu_345_p1),
    .din2(sub_ln365_1_fu_209_p2),
    .dout(grp_fu_345_p3)
);

FracNet_mac_muladdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
FracNet_mac_muladdEe_U3(
    .din0(add_ln356_reg_396),
    .din1(grp_fu_353_p1),
    .din2(add_ln365_reg_365),
    .dout(grp_fu_353_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_131 <= add_ln356_2_reg_379;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_131 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mm_0_reg_143 <= select_ln356_1_reg_389;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mm_0_reg_143 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nn_0_reg_155 <= nn_reg_401;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        nn_0_reg_155 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln356_1_reg_406 <= grp_fu_353_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln356_2_reg_379 <= add_ln356_2_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln356_reg_396 <= add_ln356_fu_273_p2;
        select_ln356_reg_384 <= select_ln356_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln365_reg_365 <= grp_fu_345_p3;
        sub_ln365_reg_360 <= sub_ln365_fu_187_p2;
        zext_ln356_1_reg_370[30 : 0] <= zext_ln356_1_fu_219_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_40_reg_417 <= empty_40_fu_305_p2;
        img_V_addr_reg_411 <= sext_ln321_fu_295_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln356_reg_375 <= icmp_ln356_fu_223_p2;
        icmp_ln356_reg_375_pp0_iter1_reg <= icmp_ln356_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln356_reg_375_pp0_iter10_reg <= icmp_ln356_reg_375_pp0_iter9_reg;
        icmp_ln356_reg_375_pp0_iter11_reg <= icmp_ln356_reg_375_pp0_iter10_reg;
        icmp_ln356_reg_375_pp0_iter12_reg <= icmp_ln356_reg_375_pp0_iter11_reg;
        icmp_ln356_reg_375_pp0_iter13_reg <= icmp_ln356_reg_375_pp0_iter12_reg;
        icmp_ln356_reg_375_pp0_iter14_reg <= icmp_ln356_reg_375_pp0_iter13_reg;
        icmp_ln356_reg_375_pp0_iter15_reg <= icmp_ln356_reg_375_pp0_iter14_reg;
        icmp_ln356_reg_375_pp0_iter16_reg <= icmp_ln356_reg_375_pp0_iter15_reg;
        icmp_ln356_reg_375_pp0_iter17_reg <= icmp_ln356_reg_375_pp0_iter16_reg;
        icmp_ln356_reg_375_pp0_iter18_reg <= icmp_ln356_reg_375_pp0_iter17_reg;
        icmp_ln356_reg_375_pp0_iter2_reg <= icmp_ln356_reg_375_pp0_iter1_reg;
        icmp_ln356_reg_375_pp0_iter3_reg <= icmp_ln356_reg_375_pp0_iter2_reg;
        icmp_ln356_reg_375_pp0_iter4_reg <= icmp_ln356_reg_375_pp0_iter3_reg;
        icmp_ln356_reg_375_pp0_iter5_reg <= icmp_ln356_reg_375_pp0_iter4_reg;
        icmp_ln356_reg_375_pp0_iter6_reg <= icmp_ln356_reg_375_pp0_iter5_reg;
        icmp_ln356_reg_375_pp0_iter7_reg <= icmp_ln356_reg_375_pp0_iter6_reg;
        icmp_ln356_reg_375_pp0_iter8_reg <= icmp_ln356_reg_375_pp0_iter7_reg;
        icmp_ln356_reg_375_pp0_iter9_reg <= icmp_ln356_reg_375_pp0_iter8_reg;
        select_ln356_1_reg_389_pp0_iter10_reg <= select_ln356_1_reg_389_pp0_iter9_reg;
        select_ln356_1_reg_389_pp0_iter11_reg <= select_ln356_1_reg_389_pp0_iter10_reg;
        select_ln356_1_reg_389_pp0_iter12_reg <= select_ln356_1_reg_389_pp0_iter11_reg;
        select_ln356_1_reg_389_pp0_iter13_reg <= select_ln356_1_reg_389_pp0_iter12_reg;
        select_ln356_1_reg_389_pp0_iter14_reg <= select_ln356_1_reg_389_pp0_iter13_reg;
        select_ln356_1_reg_389_pp0_iter15_reg <= select_ln356_1_reg_389_pp0_iter14_reg;
        select_ln356_1_reg_389_pp0_iter16_reg <= select_ln356_1_reg_389_pp0_iter15_reg;
        select_ln356_1_reg_389_pp0_iter17_reg <= select_ln356_1_reg_389_pp0_iter16_reg;
        select_ln356_1_reg_389_pp0_iter18_reg <= select_ln356_1_reg_389_pp0_iter17_reg;
        select_ln356_1_reg_389_pp0_iter9_reg <= select_ln356_1_reg_389;
        select_ln356_reg_384_pp0_iter10_reg <= select_ln356_reg_384_pp0_iter9_reg;
        select_ln356_reg_384_pp0_iter11_reg <= select_ln356_reg_384_pp0_iter10_reg;
        select_ln356_reg_384_pp0_iter12_reg <= select_ln356_reg_384_pp0_iter11_reg;
        select_ln356_reg_384_pp0_iter13_reg <= select_ln356_reg_384_pp0_iter12_reg;
        select_ln356_reg_384_pp0_iter14_reg <= select_ln356_reg_384_pp0_iter13_reg;
        select_ln356_reg_384_pp0_iter15_reg <= select_ln356_reg_384_pp0_iter14_reg;
        select_ln356_reg_384_pp0_iter16_reg <= select_ln356_reg_384_pp0_iter15_reg;
        select_ln356_reg_384_pp0_iter17_reg <= select_ln356_reg_384_pp0_iter16_reg;
        select_ln356_reg_384_pp0_iter18_reg <= select_ln356_reg_384_pp0_iter17_reg;
        select_ln356_reg_384_pp0_iter9_reg <= select_ln356_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_V_addr_read_reg_421 <= m_axi_img_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_reg_375_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nn_reg_401 <= nn_fu_278_p2;
        select_ln356_1_reg_389 <= select_ln356_1_fu_261_p3;
    end
end

always @ (*) begin
    if ((icmp_ln356_fu_223_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln356_reg_375 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_135_p4 = add_ln356_2_reg_379;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_135_p4 = indvar_flatten_reg_131;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln356_reg_375_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_mux_mm_0_phi_fu_147_p4 = select_ln356_1_reg_389;
    end else begin
        ap_phi_mux_mm_0_phi_fu_147_p4 = mm_0_reg_143;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln356_reg_375_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_phi_mux_nn_0_phi_fu_159_p4 = nn_reg_401;
    end else begin
        ap_phi_mux_nn_0_phi_fu_159_p4 = nn_0_reg_155;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln356_reg_375_pp0_iter18_reg == 1'd0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    if (((empty_40_reg_417 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        img_V_blk_n_AR = m_axi_img_V_ARREADY;
    end else begin
        img_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        img_V_blk_n_R = m_axi_img_V_RVALID;
    end else begin
        img_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((empty_40_reg_417 == 1'd1) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_img_V_ARVALID = 1'b1;
    end else begin
        m_axi_img_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_img_V_RREADY = 1'b1;
    end else begin
        m_axi_img_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln356_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1) & (ap_enable_reg_pp0_iter18 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1) & (ap_enable_reg_pp0_iter18 == 1'b0)) | ((icmp_ln356_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_1_fu_334_p2 = (add_ln321_fu_325_p2 + zext_ln321_5_fu_331_p1);

assign add_ln321_2_fu_290_p2 = ($signed(zext_ln356_1_reg_370) + $signed(sext_ln357_fu_287_p1));

assign add_ln321_fu_325_p2 = (zext_ln321_fu_311_p1 + zext_ln321_4_fu_321_p1);

assign add_ln356_2_fu_229_p2 = (ap_phi_mux_indvar_flatten_phi_fu_135_p4 + 7'd1);

assign add_ln356_fu_273_p2 = (zext_ln356_fu_269_p1 + sub_ln365_reg_360);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (m_axi_img_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state13_io)) | ((icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (m_axi_img_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((empty_40_reg_417 == 1'd1) & (m_axi_img_V_ARREADY == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter18 = ((icmp_ln356_reg_375_pp0_iter17_reg == 1'd0) & (m_axi_img_V_RVALID == 1'b0));
end

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buf_V_address0 = zext_ln321_6_fu_340_p1;

assign buf_V_d0 = img_V_addr_read_reg_421;

assign empty_40_fu_305_p2 = ((grp_fu_235_p2 == 7'd0) ? 1'b1 : 1'b0);

assign grp_fu_235_p1 = 7'd9;

assign grp_fu_345_p0 = grp_fu_345_p00;

assign grp_fu_345_p00 = c;

assign grp_fu_345_p1 = 20'd51076;

assign grp_fu_353_p1 = 17'd228;

assign icmp_ln356_fu_223_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_135_p4 == 7'd81) ? 1'b1 : 1'b0);

assign icmp_ln357_fu_247_p2 = ((ap_phi_mux_nn_0_phi_fu_159_p4 == 4'd9) ? 1'b1 : 1'b0);

assign m_axi_img_V_ARADDR = img_V_addr_reg_411;

assign m_axi_img_V_ARBURST = 2'd0;

assign m_axi_img_V_ARCACHE = 4'd0;

assign m_axi_img_V_ARID = 1'd0;

assign m_axi_img_V_ARLEN = 32'd9;

assign m_axi_img_V_ARLOCK = 2'd0;

assign m_axi_img_V_ARPROT = 3'd0;

assign m_axi_img_V_ARQOS = 4'd0;

assign m_axi_img_V_ARREGION = 4'd0;

assign m_axi_img_V_ARSIZE = 3'd0;

assign m_axi_img_V_ARUSER = 1'd0;

assign m_axi_img_V_AWADDR = 32'd0;

assign m_axi_img_V_AWBURST = 2'd0;

assign m_axi_img_V_AWCACHE = 4'd0;

assign m_axi_img_V_AWID = 1'd0;

assign m_axi_img_V_AWLEN = 32'd0;

assign m_axi_img_V_AWLOCK = 2'd0;

assign m_axi_img_V_AWPROT = 3'd0;

assign m_axi_img_V_AWQOS = 4'd0;

assign m_axi_img_V_AWREGION = 4'd0;

assign m_axi_img_V_AWSIZE = 3'd0;

assign m_axi_img_V_AWUSER = 1'd0;

assign m_axi_img_V_AWVALID = 1'b0;

assign m_axi_img_V_BREADY = 1'b0;

assign m_axi_img_V_WDATA = 16'd0;

assign m_axi_img_V_WID = 1'd0;

assign m_axi_img_V_WLAST = 1'b0;

assign m_axi_img_V_WSTRB = 2'd0;

assign m_axi_img_V_WUSER = 1'd0;

assign m_axi_img_V_WVALID = 1'b0;

assign mm_fu_241_p2 = (ap_phi_mux_mm_0_phi_fu_147_p4 + 4'd1);

assign nn_fu_278_p2 = (select_ln356_fu_253_p3 + 4'd1);

assign select_ln356_1_fu_261_p3 = ((icmp_ln357_fu_247_p2[0:0] === 1'b1) ? mm_fu_241_p2 : ap_phi_mux_mm_0_phi_fu_147_p4);

assign select_ln356_fu_253_p3 = ((icmp_ln357_fu_247_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_nn_0_phi_fu_159_p4);

assign sext_ln321_fu_295_p1 = $signed(add_ln321_2_fu_290_p2);

assign sext_ln357_fu_287_p1 = add_ln356_1_reg_406;

assign shl_ln365_1_fu_193_p3 = {{row}, {3'd0}};

assign shl_ln_fu_171_p3 = {{col}, {3'd0}};

assign sub_ln365_1_fu_209_p2 = (zext_ln365_3_fu_201_p1 - zext_ln365_4_fu_205_p1);

assign sub_ln365_fu_187_p2 = (zext_ln365_1_fu_179_p1 - zext_ln365_2_fu_183_p1);

assign tmp_s_fu_314_p3 = {{select_ln356_1_reg_389_pp0_iter18_reg}, {3'd0}};

assign zext_ln321_4_fu_321_p1 = tmp_s_fu_314_p3;

assign zext_ln321_5_fu_331_p1 = select_ln356_reg_384_pp0_iter18_reg;

assign zext_ln321_6_fu_340_p1 = add_ln321_1_fu_334_p2;

assign zext_ln321_fu_311_p1 = select_ln356_1_reg_389_pp0_iter18_reg;

assign zext_ln356_1_fu_219_p1 = img_V_offset;

assign zext_ln356_fu_269_p1 = select_ln356_1_fu_261_p3;

assign zext_ln365_1_fu_179_p1 = shl_ln_fu_171_p3;

assign zext_ln365_2_fu_183_p1 = col;

assign zext_ln365_3_fu_201_p1 = shl_ln365_1_fu_193_p3;

assign zext_ln365_4_fu_205_p1 = row;

always @ (posedge ap_clk) begin
    zext_ln356_1_reg_370[32:31] <= 2'b00;
end

endmodule //load_input
