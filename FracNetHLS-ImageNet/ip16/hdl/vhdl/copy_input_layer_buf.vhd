-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity copy_input_layer_buf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_dest_V_AWVALID : OUT STD_LOGIC;
    m_axi_dest_V_AWREADY : IN STD_LOGIC;
    m_axi_dest_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_WVALID : OUT STD_LOGIC;
    m_axi_dest_V_WREADY : IN STD_LOGIC;
    m_axi_dest_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dest_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_dest_V_WLAST : OUT STD_LOGIC;
    m_axi_dest_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_ARVALID : OUT STD_LOGIC;
    m_axi_dest_V_ARREADY : IN STD_LOGIC;
    m_axi_dest_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_dest_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dest_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dest_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_RVALID : IN STD_LOGIC;
    m_axi_dest_V_RREADY : OUT STD_LOGIC;
    m_axi_dest_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_dest_V_RLAST : IN STD_LOGIC;
    m_axi_dest_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_BVALID : IN STD_LOGIC;
    m_axi_dest_V_BREADY : OUT STD_LOGIC;
    m_axi_dest_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dest_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_dest_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dest_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    row_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    col_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    FM_buf_acc0_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_0_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_0_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_1_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_1_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_2_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_2_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_3_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_3_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_4_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_4_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_5_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_5_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_6_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_6_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_7_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_7_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_8_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_8_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_9_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_9_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_10_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_10_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_11_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_11_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_12_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_12_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_13_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_13_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_14_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_14_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_14_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_15_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_15_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_15_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_16_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_16_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_16_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_17_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_17_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_17_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_18_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_18_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_18_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_19_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_19_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_19_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_20_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_20_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_20_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_21_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_21_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_21_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_22_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_22_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_22_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_23_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_23_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_23_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_24_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_24_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_24_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_25_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_25_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_25_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_26_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_26_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_26_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_27_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_27_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_27_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_28_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_28_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_28_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_29_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_29_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_29_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_30_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_30_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_30_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    FM_buf_acc0_V_31_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    FM_buf_acc0_V_31_ce0 : OUT STD_LOGIC;
    FM_buf_acc0_V_31_q0 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of copy_input_layer_buf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_72 : STD_LOGIC_VECTOR (8 downto 0) := "001110010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv13_72 : STD_LOGIC_VECTOR (12 downto 0) := "0000001110010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dest_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_47_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal dest_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln43_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dest_V_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal empty_50_reg_1488 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1488_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_602 : STD_LOGIC_VECTOR (4 downto 0);
    signal dest_ptr_0_rec_reg_613 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_0_reg_624 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_0_reg_635 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln42_2_fu_681_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_2_reg_1118 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln43_fu_685_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln43_reg_1123 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln43_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln43_fu_695_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln43_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln48_1_fu_727_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln48_1_reg_1138 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln48_2_fu_757_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln48_2_reg_1143 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln414_fu_824_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln414_reg_1308 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_47_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_847_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln414_fu_853_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln414_reg_1322 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_fu_857_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_reg_1327 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_1_fu_861_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_1_reg_1332 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_2_fu_865_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_2_reg_1337 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_3_fu_869_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_3_reg_1342 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_4_fu_873_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_4_reg_1347 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_5_fu_877_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_5_reg_1352 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_6_fu_881_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_6_reg_1357 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_7_fu_885_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_7_reg_1362 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_8_fu_889_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_8_reg_1367 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_9_fu_893_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_9_reg_1372 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_10_fu_897_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_10_reg_1377 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_11_fu_901_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_11_reg_1382 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_12_fu_905_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_12_reg_1387 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_13_fu_909_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_13_reg_1392 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_14_fu_913_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_14_reg_1397 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_15_fu_917_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_15_reg_1402 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_16_fu_921_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_16_reg_1407 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_17_fu_925_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_17_reg_1412 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_18_fu_929_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_18_reg_1417 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_19_fu_933_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_19_reg_1422 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_20_fu_937_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_20_reg_1427 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_21_fu_941_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_21_reg_1432 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_22_fu_945_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_22_reg_1437 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_23_fu_949_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_23_reg_1442 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_24_fu_953_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_24_reg_1447 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_25_fu_957_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_25_reg_1452 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_26_fu_961_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_26_reg_1457 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_27_fu_965_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_27_reg_1462 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_28_fu_969_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_28_reg_1467 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_29_fu_973_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_29_reg_1472 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_30_fu_977_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln612_30_reg_1477 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_50_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1488_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1488_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1488_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_reg_1488_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_606_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_row_0_phi_fu_628_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln48_4_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln414_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_646_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln42_fu_654_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln42_1_fu_664_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1109_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln42_1_fu_676_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln44_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_707_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_739_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln48_fu_735_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_1_fu_747_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln53_fu_701_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_2_fu_765_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_1_fu_769_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln48_fu_719_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln48_fu_751_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_3_fu_778_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_2_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln44_fu_774_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_46_fu_829_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_746_fu_833_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_49_fu_991_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_747_fu_994_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1109_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1109_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1109_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1109_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1109_p20 : STD_LOGIC_VECTOR (12 downto 0);

    component FracNet_mac_muladg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    FracNet_mac_muladg8j_U126 : component FracNet_mac_muladg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 6,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1109_p0,
        din1 => grp_fu_1109_p1,
        din2 => grp_fu_1109_p2,
        dout => grp_fu_1109_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_0_reg_635 <= col_fu_847_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_0_reg_635 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    dest_ptr_0_rec_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dest_ptr_0_rec_reg_613 <= select_ln48_2_reg_1143;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                dest_ptr_0_rec_reg_613 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_602_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_602 <= add_ln43_reg_1132;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_602 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    row_0_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_0_reg_624 <= select_ln48_1_reg_1138;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_0_reg_624 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln414_reg_1308 <= add_ln414_fu_824_p2;
                empty_47_reg_1313 <= empty_47_fu_841_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln43_reg_1132 <= add_ln43_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_50_reg_1488 <= empty_50_fu_1002_p2;
                trunc_ln414_reg_1322 <= trunc_ln414_fu_853_p1;
                trunc_ln612_10_reg_1377 <= trunc_ln612_10_fu_897_p1;
                trunc_ln612_11_reg_1382 <= trunc_ln612_11_fu_901_p1;
                trunc_ln612_12_reg_1387 <= trunc_ln612_12_fu_905_p1;
                trunc_ln612_13_reg_1392 <= trunc_ln612_13_fu_909_p1;
                trunc_ln612_14_reg_1397 <= trunc_ln612_14_fu_913_p1;
                trunc_ln612_15_reg_1402 <= trunc_ln612_15_fu_917_p1;
                trunc_ln612_16_reg_1407 <= trunc_ln612_16_fu_921_p1;
                trunc_ln612_17_reg_1412 <= trunc_ln612_17_fu_925_p1;
                trunc_ln612_18_reg_1417 <= trunc_ln612_18_fu_929_p1;
                trunc_ln612_19_reg_1422 <= trunc_ln612_19_fu_933_p1;
                trunc_ln612_1_reg_1332 <= trunc_ln612_1_fu_861_p1;
                trunc_ln612_20_reg_1427 <= trunc_ln612_20_fu_937_p1;
                trunc_ln612_21_reg_1432 <= trunc_ln612_21_fu_941_p1;
                trunc_ln612_22_reg_1437 <= trunc_ln612_22_fu_945_p1;
                trunc_ln612_23_reg_1442 <= trunc_ln612_23_fu_949_p1;
                trunc_ln612_24_reg_1447 <= trunc_ln612_24_fu_953_p1;
                trunc_ln612_25_reg_1452 <= trunc_ln612_25_fu_957_p1;
                trunc_ln612_26_reg_1457 <= trunc_ln612_26_fu_961_p1;
                trunc_ln612_27_reg_1462 <= trunc_ln612_27_fu_965_p1;
                trunc_ln612_28_reg_1467 <= trunc_ln612_28_fu_969_p1;
                trunc_ln612_29_reg_1472 <= trunc_ln612_29_fu_973_p1;
                trunc_ln612_2_reg_1337 <= trunc_ln612_2_fu_865_p1;
                trunc_ln612_30_reg_1477 <= trunc_ln612_30_fu_977_p1;
                trunc_ln612_3_reg_1342 <= trunc_ln612_3_fu_869_p1;
                trunc_ln612_4_reg_1347 <= trunc_ln612_4_fu_873_p1;
                trunc_ln612_5_reg_1352 <= trunc_ln612_5_fu_877_p1;
                trunc_ln612_6_reg_1357 <= trunc_ln612_6_fu_881_p1;
                trunc_ln612_7_reg_1362 <= trunc_ln612_7_fu_885_p1;
                trunc_ln612_8_reg_1367 <= trunc_ln612_8_fu_889_p1;
                trunc_ln612_9_reg_1372 <= trunc_ln612_9_fu_893_p1;
                trunc_ln612_reg_1327 <= trunc_ln612_fu_857_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                empty_50_reg_1488_pp0_iter2_reg <= empty_50_reg_1488;
                empty_50_reg_1488_pp0_iter3_reg <= empty_50_reg_1488_pp0_iter2_reg;
                empty_50_reg_1488_pp0_iter4_reg <= empty_50_reg_1488_pp0_iter3_reg;
                empty_50_reg_1488_pp0_iter5_reg <= empty_50_reg_1488_pp0_iter4_reg;
                empty_50_reg_1488_pp0_iter6_reg <= empty_50_reg_1488_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_reg_1128 <= icmp_ln43_fu_689_p2;
                icmp_ln43_reg_1128_pp0_iter1_reg <= icmp_ln43_reg_1128;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_689_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln48_1_reg_1138 <= select_ln48_1_fu_727_p3;
                select_ln48_2_reg_1143 <= select_ln48_2_fu_757_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    zext_ln42_2_reg_1118(12 downto 1) <= zext_ln42_2_fu_681_p1(12 downto 1);
                    zext_ln43_reg_1123(25 downto 0) <= zext_ln43_fu_685_p1(25 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_2_reg_1118(0) <= '1';
    zext_ln42_2_reg_1118(13) <= '0';
    zext_ln43_reg_1123(26) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln43_fu_689_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln43_fu_689_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln43_fu_689_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    FM_buf_acc0_V_0_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_0_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_10_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_10_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_11_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_11_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_12_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_12_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_13_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_13_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_14_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_14_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_15_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_15_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_16_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_16_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_17_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_17_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_18_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_18_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_19_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_19_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_1_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_1_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_20_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_20_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_21_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_21_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_22_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_22_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_23_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_23_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_24_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_24_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_25_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_25_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_26_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_26_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_27_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_27_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_28_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_28_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_29_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_29_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_2_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_2_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_30_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_30_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_31_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_31_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_3_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_3_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_4_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_4_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_5_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_5_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_6_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_6_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_7_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_7_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_8_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_8_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FM_buf_acc0_V_9_address0 <= zext_ln48_4_fu_788_p1(8 - 1 downto 0);

    FM_buf_acc0_V_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            FM_buf_acc0_V_9_ce0 <= ap_const_logic_1;
        else 
            FM_buf_acc0_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln414_fu_824_p2 <= std_logic_vector(unsigned(zext_ln43_reg_1123) + unsigned(zext_ln44_fu_774_p1));
    add_ln43_fu_695_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_606_p4) + unsigned(ap_const_lv5_1));
    add_ln48_1_fu_769_p2 <= std_logic_vector(unsigned(zext_ln42_2_reg_1118) + unsigned(zext_ln48_2_fu_765_p1));
    add_ln48_2_fu_782_p2 <= std_logic_vector(unsigned(add_ln48_fu_751_p2) + unsigned(zext_ln48_3_fu_778_p1));
    add_ln48_fu_751_p2 <= std_logic_vector(unsigned(zext_ln48_fu_735_p1) + unsigned(zext_ln48_1_fu_747_p1));
    add_ln53_fu_701_p2 <= std_logic_vector(unsigned(ap_const_lv9_72) + unsigned(ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_dest_V_BVALID, ap_enable_reg_pp0_iter7, empty_50_reg_1488_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_dest_V_BVALID = ap_const_logic_0) and (empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_dest_V_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, empty_50_reg_1488_pp0_iter6_reg, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_dest_V_BVALID = ap_const_logic_0) and (empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_dest_V_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, empty_50_reg_1488_pp0_iter6_reg, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_dest_V_BVALID = ap_const_logic_0) and (empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_dest_V_AWREADY, empty_47_reg_1313)
    begin
                ap_block_state3_io <= ((m_axi_dest_V_AWREADY = ap_const_logic_0) and (empty_47_reg_1313 = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_dest_V_WREADY, icmp_ln43_reg_1128_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln43_reg_1128_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_dest_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter7_assign_proc : process(m_axi_dest_V_BVALID, empty_50_reg_1488_pp0_iter6_reg)
    begin
                ap_block_state9_pp0_stage0_iter7 <= ((m_axi_dest_V_BVALID = ap_const_logic_0) and (empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln43_fu_689_p2)
    begin
        if ((icmp_ln43_fu_689_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln43_reg_1128, dest_ptr_0_rec_reg_613, select_ln48_2_reg_1143)
    begin
        if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4 <= select_ln48_2_reg_1143;
        else 
            ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4 <= dest_ptr_0_rec_reg_613;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_606_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln43_reg_1128, indvar_flatten_reg_602, add_ln43_reg_1132)
    begin
        if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_606_p4 <= add_ln43_reg_1132;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_606_p4 <= indvar_flatten_reg_602;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_628_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln43_reg_1128, row_0_reg_624, select_ln48_1_reg_1138)
    begin
        if (((icmp_ln43_reg_1128 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_row_0_phi_fu_628_p4 <= select_ln48_1_reg_1138;
        else 
            ap_phi_mux_row_0_phi_fu_628_p4 <= row_0_reg_624;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_847_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln48_fu_719_p3));

    dest_V_blk_n_AW_assign_proc : process(m_axi_dest_V_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, empty_47_reg_1313)
    begin
        if (((empty_47_reg_1313 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dest_V_blk_n_AW <= m_axi_dest_V_AWREADY;
        else 
            dest_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dest_V_blk_n_B_assign_proc : process(m_axi_dest_V_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, empty_50_reg_1488_pp0_iter6_reg)
    begin
        if (((empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            dest_V_blk_n_B <= m_axi_dest_V_BVALID;
        else 
            dest_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dest_V_blk_n_W_assign_proc : process(m_axi_dest_V_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln43_reg_1128_pp0_iter1_reg)
    begin
        if (((icmp_ln43_reg_1128_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dest_V_blk_n_W <= m_axi_dest_V_WREADY;
        else 
            dest_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    empty_46_fu_829_p1 <= ap_phi_mux_indvar_flatten_phi_fu_606_p4(2 - 1 downto 0);
    empty_47_fu_841_p2 <= "1" when (tmp_746_fu_833_p3 = ap_const_lv5_0) else "0";
    empty_49_fu_991_p1 <= add_ln43_reg_1132(2 - 1 downto 0);
    empty_50_fu_1002_p2 <= "1" when (tmp_747_fu_994_p3 = ap_const_lv5_0) else "0";
    grp_fu_1109_p0 <= grp_fu_1109_p00(6 - 1 downto 0);
    grp_fu_1109_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln42_fu_654_p2),13));
    grp_fu_1109_p1 <= ap_const_lv13_72(8 - 1 downto 0);
    grp_fu_1109_p2 <= grp_fu_1109_p20(6 - 1 downto 0);
    grp_fu_1109_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_1_fu_664_p3),13));
    icmp_ln43_fu_689_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_606_p4 = ap_const_lv5_10) else "0";
    icmp_ln44_fu_713_p2 <= "1" when (col_0_reg_635 = ap_const_lv3_4) else "0";
    m_axi_dest_V_ARADDR <= ap_const_lv32_0;
    m_axi_dest_V_ARBURST <= ap_const_lv2_0;
    m_axi_dest_V_ARCACHE <= ap_const_lv4_0;
    m_axi_dest_V_ARID <= ap_const_lv1_0;
    m_axi_dest_V_ARLEN <= ap_const_lv32_0;
    m_axi_dest_V_ARLOCK <= ap_const_lv2_0;
    m_axi_dest_V_ARPROT <= ap_const_lv3_0;
    m_axi_dest_V_ARQOS <= ap_const_lv4_0;
    m_axi_dest_V_ARREGION <= ap_const_lv4_0;
    m_axi_dest_V_ARSIZE <= ap_const_lv3_0;
    m_axi_dest_V_ARUSER <= ap_const_lv1_0;
    m_axi_dest_V_ARVALID <= ap_const_logic_0;
    m_axi_dest_V_AWADDR <= zext_ln414_fu_981_p1(32 - 1 downto 0);
    m_axi_dest_V_AWBURST <= ap_const_lv2_0;
    m_axi_dest_V_AWCACHE <= ap_const_lv4_0;
    m_axi_dest_V_AWID <= ap_const_lv1_0;
    m_axi_dest_V_AWLEN <= ap_const_lv32_4;
    m_axi_dest_V_AWLOCK <= ap_const_lv2_0;
    m_axi_dest_V_AWPROT <= ap_const_lv3_0;
    m_axi_dest_V_AWQOS <= ap_const_lv4_0;
    m_axi_dest_V_AWREGION <= ap_const_lv4_0;
    m_axi_dest_V_AWSIZE <= ap_const_lv3_0;
    m_axi_dest_V_AWUSER <= ap_const_lv1_0;

    m_axi_dest_V_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, empty_47_reg_1313, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_47_reg_1313 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_dest_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_dest_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_dest_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, empty_50_reg_1488_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_50_reg_1488_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            m_axi_dest_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_dest_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_dest_V_RREADY <= ap_const_logic_0;
    m_axi_dest_V_WDATA <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ap_const_lv4_0 & trunc_ln612_30_reg_1477) & ap_const_lv4_0) & trunc_ln612_29_reg_1472) & ap_const_lv4_0) & trunc_ln612_28_reg_1467) & ap_const_lv4_0) & trunc_ln612_27_reg_1462) & ap_const_lv4_0) & trunc_ln612_26_reg_1457) & ap_const_lv4_0) & trunc_ln612_25_reg_1452) & ap_const_lv4_0) & trunc_ln612_24_reg_1447) & ap_const_lv4_0) & trunc_ln612_23_reg_1442) & ap_const_lv4_0) & trunc_ln612_22_reg_1437) & ap_const_lv4_0) & trunc_ln612_21_reg_1432) & ap_const_lv4_0) & trunc_ln612_20_reg_1427) & ap_const_lv4_0) & trunc_ln612_19_reg_1422) & ap_const_lv4_0) & trunc_ln612_18_reg_1417) & ap_const_lv4_0) & trunc_ln612_17_reg_1412) & ap_const_lv4_0) & trunc_ln612_16_reg_1407) & ap_const_lv4_0) & trunc_ln612_15_reg_1402) & ap_const_lv4_0) & trunc_ln612_14_reg_1397) & ap_const_lv4_0) & trunc_ln612_13_reg_1392) & ap_const_lv4_0) & trunc_ln612_12_reg_1387) & ap_const_lv4_0) & trunc_ln612_11_reg_1382) & ap_const_lv4_0) & trunc_ln612_10_reg_1377) & ap_const_lv4_0) & trunc_ln612_9_reg_1372) & ap_const_lv4_0) & trunc_ln612_8_reg_1367) & ap_const_lv4_0) & trunc_ln612_7_reg_1362) & ap_const_lv4_0) & trunc_ln612_6_reg_1357) & ap_const_lv4_0) & trunc_ln612_5_reg_1352) & ap_const_lv4_0) & trunc_ln612_4_reg_1347) & ap_const_lv4_0) & trunc_ln612_3_reg_1342) & ap_const_lv4_0) & trunc_ln612_2_reg_1337) & ap_const_lv4_0) & trunc_ln612_1_reg_1332) & ap_const_lv4_0) & trunc_ln612_reg_1327) & ap_const_lv4_0) & trunc_ln414_reg_1322);
    m_axi_dest_V_WID <= ap_const_lv1_0;
    m_axi_dest_V_WLAST <= ap_const_logic_0;
    m_axi_dest_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_dest_V_WUSER <= ap_const_lv1_0;

    m_axi_dest_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln43_reg_1128_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln43_reg_1128_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_dest_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_dest_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln42_1_fu_676_p2 <= (grp_fu_1109_p3 or ap_const_lv13_1);
    or_ln42_fu_654_p2 <= (shl_ln_fu_646_p3 or ap_const_lv6_1);
    row_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_row_0_phi_fu_628_p4));
    select_ln48_1_fu_727_p3 <= 
        row_fu_707_p2 when (icmp_ln44_fu_713_p2(0) = '1') else 
        ap_phi_mux_row_0_phi_fu_628_p4;
    select_ln48_2_fu_757_p3 <= 
        add_ln53_fu_701_p2 when (icmp_ln44_fu_713_p2(0) = '1') else 
        ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4;
    select_ln48_fu_719_p3 <= 
        ap_const_lv3_0 when (icmp_ln44_fu_713_p2(0) = '1') else 
        col_0_reg_635;
    shl_ln42_1_fu_664_p3 <= (col_offset & ap_const_lv2_0);
    shl_ln_fu_646_p3 <= (row_offset & ap_const_lv2_0);
    tmp_746_fu_833_p3 <= (ap_const_lv3_0 & empty_46_fu_829_p1);
    tmp_747_fu_994_p3 <= (ap_const_lv3_0 & empty_49_fu_991_p1);
    tmp_s_fu_739_p3 <= (select_ln48_1_fu_727_p3 & ap_const_lv3_0);
    trunc_ln414_fu_853_p1 <= FM_buf_acc0_V_0_q0(12 - 1 downto 0);
    trunc_ln612_10_fu_897_p1 <= FM_buf_acc0_V_11_q0(12 - 1 downto 0);
    trunc_ln612_11_fu_901_p1 <= FM_buf_acc0_V_12_q0(12 - 1 downto 0);
    trunc_ln612_12_fu_905_p1 <= FM_buf_acc0_V_13_q0(12 - 1 downto 0);
    trunc_ln612_13_fu_909_p1 <= FM_buf_acc0_V_14_q0(12 - 1 downto 0);
    trunc_ln612_14_fu_913_p1 <= FM_buf_acc0_V_15_q0(12 - 1 downto 0);
    trunc_ln612_15_fu_917_p1 <= FM_buf_acc0_V_16_q0(12 - 1 downto 0);
    trunc_ln612_16_fu_921_p1 <= FM_buf_acc0_V_17_q0(12 - 1 downto 0);
    trunc_ln612_17_fu_925_p1 <= FM_buf_acc0_V_18_q0(12 - 1 downto 0);
    trunc_ln612_18_fu_929_p1 <= FM_buf_acc0_V_19_q0(12 - 1 downto 0);
    trunc_ln612_19_fu_933_p1 <= FM_buf_acc0_V_20_q0(12 - 1 downto 0);
    trunc_ln612_1_fu_861_p1 <= FM_buf_acc0_V_2_q0(12 - 1 downto 0);
    trunc_ln612_20_fu_937_p1 <= FM_buf_acc0_V_21_q0(12 - 1 downto 0);
    trunc_ln612_21_fu_941_p1 <= FM_buf_acc0_V_22_q0(12 - 1 downto 0);
    trunc_ln612_22_fu_945_p1 <= FM_buf_acc0_V_23_q0(12 - 1 downto 0);
    trunc_ln612_23_fu_949_p1 <= FM_buf_acc0_V_24_q0(12 - 1 downto 0);
    trunc_ln612_24_fu_953_p1 <= FM_buf_acc0_V_25_q0(12 - 1 downto 0);
    trunc_ln612_25_fu_957_p1 <= FM_buf_acc0_V_26_q0(12 - 1 downto 0);
    trunc_ln612_26_fu_961_p1 <= FM_buf_acc0_V_27_q0(12 - 1 downto 0);
    trunc_ln612_27_fu_965_p1 <= FM_buf_acc0_V_28_q0(12 - 1 downto 0);
    trunc_ln612_28_fu_969_p1 <= FM_buf_acc0_V_29_q0(12 - 1 downto 0);
    trunc_ln612_29_fu_973_p1 <= FM_buf_acc0_V_30_q0(12 - 1 downto 0);
    trunc_ln612_2_fu_865_p1 <= FM_buf_acc0_V_3_q0(12 - 1 downto 0);
    trunc_ln612_30_fu_977_p1 <= FM_buf_acc0_V_31_q0(12 - 1 downto 0);
    trunc_ln612_3_fu_869_p1 <= FM_buf_acc0_V_4_q0(12 - 1 downto 0);
    trunc_ln612_4_fu_873_p1 <= FM_buf_acc0_V_5_q0(12 - 1 downto 0);
    trunc_ln612_5_fu_877_p1 <= FM_buf_acc0_V_6_q0(12 - 1 downto 0);
    trunc_ln612_6_fu_881_p1 <= FM_buf_acc0_V_7_q0(12 - 1 downto 0);
    trunc_ln612_7_fu_885_p1 <= FM_buf_acc0_V_8_q0(12 - 1 downto 0);
    trunc_ln612_8_fu_889_p1 <= FM_buf_acc0_V_9_q0(12 - 1 downto 0);
    trunc_ln612_9_fu_893_p1 <= FM_buf_acc0_V_10_q0(12 - 1 downto 0);
    trunc_ln612_fu_857_p1 <= FM_buf_acc0_V_1_q0(12 - 1 downto 0);
    zext_ln414_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln414_reg_1308),64));
    zext_ln42_2_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln42_1_fu_676_p2),14));
    zext_ln43_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dest_V_offset),27));
    zext_ln44_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_1_fu_769_p2),27));
    zext_ln48_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_739_p3),7));
    zext_ln48_2_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_2_fu_757_p3),14));
    zext_ln48_3_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_719_p3),7));
    zext_ln48_4_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_2_fu_782_p2),64));
    zext_ln48_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_fu_727_p3),7));
end behav;
