// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module copy_input_layer_buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dest_V_AWVALID,
        m_axi_dest_V_AWREADY,
        m_axi_dest_V_AWADDR,
        m_axi_dest_V_AWID,
        m_axi_dest_V_AWLEN,
        m_axi_dest_V_AWSIZE,
        m_axi_dest_V_AWBURST,
        m_axi_dest_V_AWLOCK,
        m_axi_dest_V_AWCACHE,
        m_axi_dest_V_AWPROT,
        m_axi_dest_V_AWQOS,
        m_axi_dest_V_AWREGION,
        m_axi_dest_V_AWUSER,
        m_axi_dest_V_WVALID,
        m_axi_dest_V_WREADY,
        m_axi_dest_V_WDATA,
        m_axi_dest_V_WSTRB,
        m_axi_dest_V_WLAST,
        m_axi_dest_V_WID,
        m_axi_dest_V_WUSER,
        m_axi_dest_V_ARVALID,
        m_axi_dest_V_ARREADY,
        m_axi_dest_V_ARADDR,
        m_axi_dest_V_ARID,
        m_axi_dest_V_ARLEN,
        m_axi_dest_V_ARSIZE,
        m_axi_dest_V_ARBURST,
        m_axi_dest_V_ARLOCK,
        m_axi_dest_V_ARCACHE,
        m_axi_dest_V_ARPROT,
        m_axi_dest_V_ARQOS,
        m_axi_dest_V_ARREGION,
        m_axi_dest_V_ARUSER,
        m_axi_dest_V_RVALID,
        m_axi_dest_V_RREADY,
        m_axi_dest_V_RDATA,
        m_axi_dest_V_RLAST,
        m_axi_dest_V_RID,
        m_axi_dest_V_RUSER,
        m_axi_dest_V_RRESP,
        m_axi_dest_V_BVALID,
        m_axi_dest_V_BREADY,
        m_axi_dest_V_BRESP,
        m_axi_dest_V_BID,
        m_axi_dest_V_BUSER,
        dest_V_offset,
        row_offset,
        col_offset,
        FM_buf_acc0_V_0_address0,
        FM_buf_acc0_V_0_ce0,
        FM_buf_acc0_V_0_q0,
        FM_buf_acc0_V_1_address0,
        FM_buf_acc0_V_1_ce0,
        FM_buf_acc0_V_1_q0,
        FM_buf_acc0_V_2_address0,
        FM_buf_acc0_V_2_ce0,
        FM_buf_acc0_V_2_q0,
        FM_buf_acc0_V_3_address0,
        FM_buf_acc0_V_3_ce0,
        FM_buf_acc0_V_3_q0,
        FM_buf_acc0_V_4_address0,
        FM_buf_acc0_V_4_ce0,
        FM_buf_acc0_V_4_q0,
        FM_buf_acc0_V_5_address0,
        FM_buf_acc0_V_5_ce0,
        FM_buf_acc0_V_5_q0,
        FM_buf_acc0_V_6_address0,
        FM_buf_acc0_V_6_ce0,
        FM_buf_acc0_V_6_q0,
        FM_buf_acc0_V_7_address0,
        FM_buf_acc0_V_7_ce0,
        FM_buf_acc0_V_7_q0,
        FM_buf_acc0_V_8_address0,
        FM_buf_acc0_V_8_ce0,
        FM_buf_acc0_V_8_q0,
        FM_buf_acc0_V_9_address0,
        FM_buf_acc0_V_9_ce0,
        FM_buf_acc0_V_9_q0,
        FM_buf_acc0_V_10_address0,
        FM_buf_acc0_V_10_ce0,
        FM_buf_acc0_V_10_q0,
        FM_buf_acc0_V_11_address0,
        FM_buf_acc0_V_11_ce0,
        FM_buf_acc0_V_11_q0,
        FM_buf_acc0_V_12_address0,
        FM_buf_acc0_V_12_ce0,
        FM_buf_acc0_V_12_q0,
        FM_buf_acc0_V_13_address0,
        FM_buf_acc0_V_13_ce0,
        FM_buf_acc0_V_13_q0,
        FM_buf_acc0_V_14_address0,
        FM_buf_acc0_V_14_ce0,
        FM_buf_acc0_V_14_q0,
        FM_buf_acc0_V_15_address0,
        FM_buf_acc0_V_15_ce0,
        FM_buf_acc0_V_15_q0,
        FM_buf_acc0_V_16_address0,
        FM_buf_acc0_V_16_ce0,
        FM_buf_acc0_V_16_q0,
        FM_buf_acc0_V_17_address0,
        FM_buf_acc0_V_17_ce0,
        FM_buf_acc0_V_17_q0,
        FM_buf_acc0_V_18_address0,
        FM_buf_acc0_V_18_ce0,
        FM_buf_acc0_V_18_q0,
        FM_buf_acc0_V_19_address0,
        FM_buf_acc0_V_19_ce0,
        FM_buf_acc0_V_19_q0,
        FM_buf_acc0_V_20_address0,
        FM_buf_acc0_V_20_ce0,
        FM_buf_acc0_V_20_q0,
        FM_buf_acc0_V_21_address0,
        FM_buf_acc0_V_21_ce0,
        FM_buf_acc0_V_21_q0,
        FM_buf_acc0_V_22_address0,
        FM_buf_acc0_V_22_ce0,
        FM_buf_acc0_V_22_q0,
        FM_buf_acc0_V_23_address0,
        FM_buf_acc0_V_23_ce0,
        FM_buf_acc0_V_23_q0,
        FM_buf_acc0_V_24_address0,
        FM_buf_acc0_V_24_ce0,
        FM_buf_acc0_V_24_q0,
        FM_buf_acc0_V_25_address0,
        FM_buf_acc0_V_25_ce0,
        FM_buf_acc0_V_25_q0,
        FM_buf_acc0_V_26_address0,
        FM_buf_acc0_V_26_ce0,
        FM_buf_acc0_V_26_q0,
        FM_buf_acc0_V_27_address0,
        FM_buf_acc0_V_27_ce0,
        FM_buf_acc0_V_27_q0,
        FM_buf_acc0_V_28_address0,
        FM_buf_acc0_V_28_ce0,
        FM_buf_acc0_V_28_q0,
        FM_buf_acc0_V_29_address0,
        FM_buf_acc0_V_29_ce0,
        FM_buf_acc0_V_29_q0,
        FM_buf_acc0_V_30_address0,
        FM_buf_acc0_V_30_ce0,
        FM_buf_acc0_V_30_q0,
        FM_buf_acc0_V_31_address0,
        FM_buf_acc0_V_31_ce0,
        FM_buf_acc0_V_31_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dest_V_AWVALID;
input   m_axi_dest_V_AWREADY;
output  [31:0] m_axi_dest_V_AWADDR;
output  [0:0] m_axi_dest_V_AWID;
output  [31:0] m_axi_dest_V_AWLEN;
output  [2:0] m_axi_dest_V_AWSIZE;
output  [1:0] m_axi_dest_V_AWBURST;
output  [1:0] m_axi_dest_V_AWLOCK;
output  [3:0] m_axi_dest_V_AWCACHE;
output  [2:0] m_axi_dest_V_AWPROT;
output  [3:0] m_axi_dest_V_AWQOS;
output  [3:0] m_axi_dest_V_AWREGION;
output  [0:0] m_axi_dest_V_AWUSER;
output   m_axi_dest_V_WVALID;
input   m_axi_dest_V_WREADY;
output  [511:0] m_axi_dest_V_WDATA;
output  [63:0] m_axi_dest_V_WSTRB;
output   m_axi_dest_V_WLAST;
output  [0:0] m_axi_dest_V_WID;
output  [0:0] m_axi_dest_V_WUSER;
output   m_axi_dest_V_ARVALID;
input   m_axi_dest_V_ARREADY;
output  [31:0] m_axi_dest_V_ARADDR;
output  [0:0] m_axi_dest_V_ARID;
output  [31:0] m_axi_dest_V_ARLEN;
output  [2:0] m_axi_dest_V_ARSIZE;
output  [1:0] m_axi_dest_V_ARBURST;
output  [1:0] m_axi_dest_V_ARLOCK;
output  [3:0] m_axi_dest_V_ARCACHE;
output  [2:0] m_axi_dest_V_ARPROT;
output  [3:0] m_axi_dest_V_ARQOS;
output  [3:0] m_axi_dest_V_ARREGION;
output  [0:0] m_axi_dest_V_ARUSER;
input   m_axi_dest_V_RVALID;
output   m_axi_dest_V_RREADY;
input  [511:0] m_axi_dest_V_RDATA;
input   m_axi_dest_V_RLAST;
input  [0:0] m_axi_dest_V_RID;
input  [0:0] m_axi_dest_V_RUSER;
input  [1:0] m_axi_dest_V_RRESP;
input   m_axi_dest_V_BVALID;
output   m_axi_dest_V_BREADY;
input  [1:0] m_axi_dest_V_BRESP;
input  [0:0] m_axi_dest_V_BID;
input  [0:0] m_axi_dest_V_BUSER;
input  [25:0] dest_V_offset;
input  [3:0] row_offset;
input  [3:0] col_offset;
output  [7:0] FM_buf_acc0_V_0_address0;
output   FM_buf_acc0_V_0_ce0;
input  [13:0] FM_buf_acc0_V_0_q0;
output  [7:0] FM_buf_acc0_V_1_address0;
output   FM_buf_acc0_V_1_ce0;
input  [13:0] FM_buf_acc0_V_1_q0;
output  [7:0] FM_buf_acc0_V_2_address0;
output   FM_buf_acc0_V_2_ce0;
input  [13:0] FM_buf_acc0_V_2_q0;
output  [7:0] FM_buf_acc0_V_3_address0;
output   FM_buf_acc0_V_3_ce0;
input  [13:0] FM_buf_acc0_V_3_q0;
output  [7:0] FM_buf_acc0_V_4_address0;
output   FM_buf_acc0_V_4_ce0;
input  [13:0] FM_buf_acc0_V_4_q0;
output  [7:0] FM_buf_acc0_V_5_address0;
output   FM_buf_acc0_V_5_ce0;
input  [13:0] FM_buf_acc0_V_5_q0;
output  [7:0] FM_buf_acc0_V_6_address0;
output   FM_buf_acc0_V_6_ce0;
input  [13:0] FM_buf_acc0_V_6_q0;
output  [7:0] FM_buf_acc0_V_7_address0;
output   FM_buf_acc0_V_7_ce0;
input  [13:0] FM_buf_acc0_V_7_q0;
output  [7:0] FM_buf_acc0_V_8_address0;
output   FM_buf_acc0_V_8_ce0;
input  [13:0] FM_buf_acc0_V_8_q0;
output  [7:0] FM_buf_acc0_V_9_address0;
output   FM_buf_acc0_V_9_ce0;
input  [13:0] FM_buf_acc0_V_9_q0;
output  [7:0] FM_buf_acc0_V_10_address0;
output   FM_buf_acc0_V_10_ce0;
input  [13:0] FM_buf_acc0_V_10_q0;
output  [7:0] FM_buf_acc0_V_11_address0;
output   FM_buf_acc0_V_11_ce0;
input  [13:0] FM_buf_acc0_V_11_q0;
output  [7:0] FM_buf_acc0_V_12_address0;
output   FM_buf_acc0_V_12_ce0;
input  [13:0] FM_buf_acc0_V_12_q0;
output  [7:0] FM_buf_acc0_V_13_address0;
output   FM_buf_acc0_V_13_ce0;
input  [13:0] FM_buf_acc0_V_13_q0;
output  [7:0] FM_buf_acc0_V_14_address0;
output   FM_buf_acc0_V_14_ce0;
input  [13:0] FM_buf_acc0_V_14_q0;
output  [7:0] FM_buf_acc0_V_15_address0;
output   FM_buf_acc0_V_15_ce0;
input  [13:0] FM_buf_acc0_V_15_q0;
output  [7:0] FM_buf_acc0_V_16_address0;
output   FM_buf_acc0_V_16_ce0;
input  [13:0] FM_buf_acc0_V_16_q0;
output  [7:0] FM_buf_acc0_V_17_address0;
output   FM_buf_acc0_V_17_ce0;
input  [13:0] FM_buf_acc0_V_17_q0;
output  [7:0] FM_buf_acc0_V_18_address0;
output   FM_buf_acc0_V_18_ce0;
input  [13:0] FM_buf_acc0_V_18_q0;
output  [7:0] FM_buf_acc0_V_19_address0;
output   FM_buf_acc0_V_19_ce0;
input  [13:0] FM_buf_acc0_V_19_q0;
output  [7:0] FM_buf_acc0_V_20_address0;
output   FM_buf_acc0_V_20_ce0;
input  [13:0] FM_buf_acc0_V_20_q0;
output  [7:0] FM_buf_acc0_V_21_address0;
output   FM_buf_acc0_V_21_ce0;
input  [13:0] FM_buf_acc0_V_21_q0;
output  [7:0] FM_buf_acc0_V_22_address0;
output   FM_buf_acc0_V_22_ce0;
input  [13:0] FM_buf_acc0_V_22_q0;
output  [7:0] FM_buf_acc0_V_23_address0;
output   FM_buf_acc0_V_23_ce0;
input  [13:0] FM_buf_acc0_V_23_q0;
output  [7:0] FM_buf_acc0_V_24_address0;
output   FM_buf_acc0_V_24_ce0;
input  [13:0] FM_buf_acc0_V_24_q0;
output  [7:0] FM_buf_acc0_V_25_address0;
output   FM_buf_acc0_V_25_ce0;
input  [13:0] FM_buf_acc0_V_25_q0;
output  [7:0] FM_buf_acc0_V_26_address0;
output   FM_buf_acc0_V_26_ce0;
input  [13:0] FM_buf_acc0_V_26_q0;
output  [7:0] FM_buf_acc0_V_27_address0;
output   FM_buf_acc0_V_27_ce0;
input  [13:0] FM_buf_acc0_V_27_q0;
output  [7:0] FM_buf_acc0_V_28_address0;
output   FM_buf_acc0_V_28_ce0;
input  [13:0] FM_buf_acc0_V_28_q0;
output  [7:0] FM_buf_acc0_V_29_address0;
output   FM_buf_acc0_V_29_ce0;
input  [13:0] FM_buf_acc0_V_29_q0;
output  [7:0] FM_buf_acc0_V_30_address0;
output   FM_buf_acc0_V_30_ce0;
input  [13:0] FM_buf_acc0_V_30_q0;
output  [7:0] FM_buf_acc0_V_31_address0;
output   FM_buf_acc0_V_31_ce0;
input  [13:0] FM_buf_acc0_V_31_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dest_V_AWVALID;
reg m_axi_dest_V_WVALID;
reg m_axi_dest_V_BREADY;
reg FM_buf_acc0_V_0_ce0;
reg FM_buf_acc0_V_1_ce0;
reg FM_buf_acc0_V_2_ce0;
reg FM_buf_acc0_V_3_ce0;
reg FM_buf_acc0_V_4_ce0;
reg FM_buf_acc0_V_5_ce0;
reg FM_buf_acc0_V_6_ce0;
reg FM_buf_acc0_V_7_ce0;
reg FM_buf_acc0_V_8_ce0;
reg FM_buf_acc0_V_9_ce0;
reg FM_buf_acc0_V_10_ce0;
reg FM_buf_acc0_V_11_ce0;
reg FM_buf_acc0_V_12_ce0;
reg FM_buf_acc0_V_13_ce0;
reg FM_buf_acc0_V_14_ce0;
reg FM_buf_acc0_V_15_ce0;
reg FM_buf_acc0_V_16_ce0;
reg FM_buf_acc0_V_17_ce0;
reg FM_buf_acc0_V_18_ce0;
reg FM_buf_acc0_V_19_ce0;
reg FM_buf_acc0_V_20_ce0;
reg FM_buf_acc0_V_21_ce0;
reg FM_buf_acc0_V_22_ce0;
reg FM_buf_acc0_V_23_ce0;
reg FM_buf_acc0_V_24_ce0;
reg FM_buf_acc0_V_25_ce0;
reg FM_buf_acc0_V_26_ce0;
reg FM_buf_acc0_V_27_ce0;
reg FM_buf_acc0_V_28_ce0;
reg FM_buf_acc0_V_29_ce0;
reg FM_buf_acc0_V_30_ce0;
reg FM_buf_acc0_V_31_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dest_V_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] empty_47_reg_1313;
reg    dest_V_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln43_reg_1128;
reg   [0:0] icmp_ln43_reg_1128_pp0_iter1_reg;
reg    dest_V_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] empty_50_reg_1488;
reg   [0:0] empty_50_reg_1488_pp0_iter6_reg;
reg   [4:0] indvar_flatten_reg_602;
reg   [8:0] dest_ptr_0_rec_reg_613;
reg   [2:0] row_0_reg_624;
reg   [2:0] col_0_reg_635;
wire   [13:0] zext_ln42_2_fu_681_p1;
reg   [13:0] zext_ln42_2_reg_1118;
wire   [26:0] zext_ln43_fu_685_p1;
reg   [26:0] zext_ln43_reg_1123;
wire   [0:0] icmp_ln43_fu_689_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln43_fu_695_p2;
reg   [4:0] add_ln43_reg_1132;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln48_1_fu_727_p3;
reg   [2:0] select_ln48_1_reg_1138;
wire   [8:0] select_ln48_2_fu_757_p3;
reg   [8:0] select_ln48_2_reg_1143;
wire   [26:0] add_ln414_fu_824_p2;
reg   [26:0] add_ln414_reg_1308;
wire   [0:0] empty_47_fu_841_p2;
wire   [2:0] col_fu_847_p2;
wire   [11:0] trunc_ln414_fu_853_p1;
reg   [11:0] trunc_ln414_reg_1322;
wire   [11:0] trunc_ln612_fu_857_p1;
reg   [11:0] trunc_ln612_reg_1327;
wire   [11:0] trunc_ln612_1_fu_861_p1;
reg   [11:0] trunc_ln612_1_reg_1332;
wire   [11:0] trunc_ln612_2_fu_865_p1;
reg   [11:0] trunc_ln612_2_reg_1337;
wire   [11:0] trunc_ln612_3_fu_869_p1;
reg   [11:0] trunc_ln612_3_reg_1342;
wire   [11:0] trunc_ln612_4_fu_873_p1;
reg   [11:0] trunc_ln612_4_reg_1347;
wire   [11:0] trunc_ln612_5_fu_877_p1;
reg   [11:0] trunc_ln612_5_reg_1352;
wire   [11:0] trunc_ln612_6_fu_881_p1;
reg   [11:0] trunc_ln612_6_reg_1357;
wire   [11:0] trunc_ln612_7_fu_885_p1;
reg   [11:0] trunc_ln612_7_reg_1362;
wire   [11:0] trunc_ln612_8_fu_889_p1;
reg   [11:0] trunc_ln612_8_reg_1367;
wire   [11:0] trunc_ln612_9_fu_893_p1;
reg   [11:0] trunc_ln612_9_reg_1372;
wire   [11:0] trunc_ln612_10_fu_897_p1;
reg   [11:0] trunc_ln612_10_reg_1377;
wire   [11:0] trunc_ln612_11_fu_901_p1;
reg   [11:0] trunc_ln612_11_reg_1382;
wire   [11:0] trunc_ln612_12_fu_905_p1;
reg   [11:0] trunc_ln612_12_reg_1387;
wire   [11:0] trunc_ln612_13_fu_909_p1;
reg   [11:0] trunc_ln612_13_reg_1392;
wire   [11:0] trunc_ln612_14_fu_913_p1;
reg   [11:0] trunc_ln612_14_reg_1397;
wire   [11:0] trunc_ln612_15_fu_917_p1;
reg   [11:0] trunc_ln612_15_reg_1402;
wire   [11:0] trunc_ln612_16_fu_921_p1;
reg   [11:0] trunc_ln612_16_reg_1407;
wire   [11:0] trunc_ln612_17_fu_925_p1;
reg   [11:0] trunc_ln612_17_reg_1412;
wire   [11:0] trunc_ln612_18_fu_929_p1;
reg   [11:0] trunc_ln612_18_reg_1417;
wire   [11:0] trunc_ln612_19_fu_933_p1;
reg   [11:0] trunc_ln612_19_reg_1422;
wire   [11:0] trunc_ln612_20_fu_937_p1;
reg   [11:0] trunc_ln612_20_reg_1427;
wire   [11:0] trunc_ln612_21_fu_941_p1;
reg   [11:0] trunc_ln612_21_reg_1432;
wire   [11:0] trunc_ln612_22_fu_945_p1;
reg   [11:0] trunc_ln612_22_reg_1437;
wire   [11:0] trunc_ln612_23_fu_949_p1;
reg   [11:0] trunc_ln612_23_reg_1442;
wire   [11:0] trunc_ln612_24_fu_953_p1;
reg   [11:0] trunc_ln612_24_reg_1447;
wire   [11:0] trunc_ln612_25_fu_957_p1;
reg   [11:0] trunc_ln612_25_reg_1452;
wire   [11:0] trunc_ln612_26_fu_961_p1;
reg   [11:0] trunc_ln612_26_reg_1457;
wire   [11:0] trunc_ln612_27_fu_965_p1;
reg   [11:0] trunc_ln612_27_reg_1462;
wire   [11:0] trunc_ln612_28_fu_969_p1;
reg   [11:0] trunc_ln612_28_reg_1467;
wire   [11:0] trunc_ln612_29_fu_973_p1;
reg   [11:0] trunc_ln612_29_reg_1472;
wire   [11:0] trunc_ln612_30_fu_977_p1;
reg   [11:0] trunc_ln612_30_reg_1477;
wire   [0:0] empty_50_fu_1002_p2;
reg   [0:0] empty_50_reg_1488_pp0_iter2_reg;
reg   [0:0] empty_50_reg_1488_pp0_iter3_reg;
reg   [0:0] empty_50_reg_1488_pp0_iter4_reg;
reg   [0:0] empty_50_reg_1488_pp0_iter5_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_606_p4;
reg   [8:0] ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4;
reg   [2:0] ap_phi_mux_row_0_phi_fu_628_p4;
wire   [63:0] zext_ln48_4_fu_788_p1;
wire   [63:0] zext_ln414_fu_981_p1;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] shl_ln_fu_646_p3;
wire   [5:0] or_ln42_fu_654_p2;
wire   [5:0] shl_ln42_1_fu_664_p3;
wire   [12:0] grp_fu_1109_p3;
wire   [12:0] or_ln42_1_fu_676_p2;
wire   [0:0] icmp_ln44_fu_713_p2;
wire   [2:0] row_fu_707_p2;
wire   [5:0] tmp_s_fu_739_p3;
wire   [6:0] zext_ln48_fu_735_p1;
wire   [6:0] zext_ln48_1_fu_747_p1;
wire   [8:0] add_ln53_fu_701_p2;
wire   [13:0] zext_ln48_2_fu_765_p1;
wire   [13:0] add_ln48_1_fu_769_p2;
wire   [2:0] select_ln48_fu_719_p3;
wire   [6:0] add_ln48_fu_751_p2;
wire   [6:0] zext_ln48_3_fu_778_p1;
wire   [6:0] add_ln48_2_fu_782_p2;
wire   [26:0] zext_ln44_fu_774_p1;
wire   [1:0] empty_46_fu_829_p1;
wire   [4:0] tmp_746_fu_833_p3;
wire   [1:0] empty_49_fu_991_p1;
wire   [4:0] tmp_747_fu_994_p3;
wire   [5:0] grp_fu_1109_p0;
wire   [7:0] grp_fu_1109_p1;
wire   [5:0] grp_fu_1109_p2;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] grp_fu_1109_p00;
wire   [12:0] grp_fu_1109_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

FracNet_mac_muladg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 13 ))
FracNet_mac_muladg8j_U126(
    .din0(grp_fu_1109_p0),
    .din1(grp_fu_1109_p1),
    .din2(grp_fu_1109_p2),
    .dout(grp_fu_1109_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_689_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_0_reg_635 <= col_fu_847_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_0_reg_635 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_ptr_0_rec_reg_613 <= select_ln48_2_reg_1143;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        dest_ptr_0_rec_reg_613 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_602 <= add_ln43_reg_1132;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_602 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_0_reg_624 <= select_ln48_1_reg_1138;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_0_reg_624 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_689_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln414_reg_1308 <= add_ln414_fu_824_p2;
        empty_47_reg_1313 <= empty_47_fu_841_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln43_reg_1132 <= add_ln43_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_50_reg_1488 <= empty_50_fu_1002_p2;
        trunc_ln414_reg_1322 <= trunc_ln414_fu_853_p1;
        trunc_ln612_10_reg_1377 <= trunc_ln612_10_fu_897_p1;
        trunc_ln612_11_reg_1382 <= trunc_ln612_11_fu_901_p1;
        trunc_ln612_12_reg_1387 <= trunc_ln612_12_fu_905_p1;
        trunc_ln612_13_reg_1392 <= trunc_ln612_13_fu_909_p1;
        trunc_ln612_14_reg_1397 <= trunc_ln612_14_fu_913_p1;
        trunc_ln612_15_reg_1402 <= trunc_ln612_15_fu_917_p1;
        trunc_ln612_16_reg_1407 <= trunc_ln612_16_fu_921_p1;
        trunc_ln612_17_reg_1412 <= trunc_ln612_17_fu_925_p1;
        trunc_ln612_18_reg_1417 <= trunc_ln612_18_fu_929_p1;
        trunc_ln612_19_reg_1422 <= trunc_ln612_19_fu_933_p1;
        trunc_ln612_1_reg_1332 <= trunc_ln612_1_fu_861_p1;
        trunc_ln612_20_reg_1427 <= trunc_ln612_20_fu_937_p1;
        trunc_ln612_21_reg_1432 <= trunc_ln612_21_fu_941_p1;
        trunc_ln612_22_reg_1437 <= trunc_ln612_22_fu_945_p1;
        trunc_ln612_23_reg_1442 <= trunc_ln612_23_fu_949_p1;
        trunc_ln612_24_reg_1447 <= trunc_ln612_24_fu_953_p1;
        trunc_ln612_25_reg_1452 <= trunc_ln612_25_fu_957_p1;
        trunc_ln612_26_reg_1457 <= trunc_ln612_26_fu_961_p1;
        trunc_ln612_27_reg_1462 <= trunc_ln612_27_fu_965_p1;
        trunc_ln612_28_reg_1467 <= trunc_ln612_28_fu_969_p1;
        trunc_ln612_29_reg_1472 <= trunc_ln612_29_fu_973_p1;
        trunc_ln612_2_reg_1337 <= trunc_ln612_2_fu_865_p1;
        trunc_ln612_30_reg_1477 <= trunc_ln612_30_fu_977_p1;
        trunc_ln612_3_reg_1342 <= trunc_ln612_3_fu_869_p1;
        trunc_ln612_4_reg_1347 <= trunc_ln612_4_fu_873_p1;
        trunc_ln612_5_reg_1352 <= trunc_ln612_5_fu_877_p1;
        trunc_ln612_6_reg_1357 <= trunc_ln612_6_fu_881_p1;
        trunc_ln612_7_reg_1362 <= trunc_ln612_7_fu_885_p1;
        trunc_ln612_8_reg_1367 <= trunc_ln612_8_fu_889_p1;
        trunc_ln612_9_reg_1372 <= trunc_ln612_9_fu_893_p1;
        trunc_ln612_reg_1327 <= trunc_ln612_fu_857_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        empty_50_reg_1488_pp0_iter2_reg <= empty_50_reg_1488;
        empty_50_reg_1488_pp0_iter3_reg <= empty_50_reg_1488_pp0_iter2_reg;
        empty_50_reg_1488_pp0_iter4_reg <= empty_50_reg_1488_pp0_iter3_reg;
        empty_50_reg_1488_pp0_iter5_reg <= empty_50_reg_1488_pp0_iter4_reg;
        empty_50_reg_1488_pp0_iter6_reg <= empty_50_reg_1488_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln43_reg_1128 <= icmp_ln43_fu_689_p2;
        icmp_ln43_reg_1128_pp0_iter1_reg <= icmp_ln43_reg_1128;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_689_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln48_1_reg_1138 <= select_ln48_1_fu_727_p3;
        select_ln48_2_reg_1143 <= select_ln48_2_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        zext_ln42_2_reg_1118[12 : 1] <= zext_ln42_2_fu_681_p1[12 : 1];
        zext_ln43_reg_1123[25 : 0] <= zext_ln43_fu_685_p1[25 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_0_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_10_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_11_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_12_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_13_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_14_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_15_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_16_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_17_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_18_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_19_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_1_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_20_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_21_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_22_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_23_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_24_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_25_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_26_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_27_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_28_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_29_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_2_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_30_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_31_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_3_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_4_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_5_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_6_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_7_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_8_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FM_buf_acc0_V_9_ce0 = 1'b1;
    end else begin
        FM_buf_acc0_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_689_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4 = select_ln48_2_reg_1143;
    end else begin
        ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4 = dest_ptr_0_rec_reg_613;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_606_p4 = add_ln43_reg_1132;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_606_p4 = indvar_flatten_reg_602;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1128 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_0_phi_fu_628_p4 = select_ln48_1_reg_1138;
    end else begin
        ap_phi_mux_row_0_phi_fu_628_p4 = row_0_reg_624;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((empty_47_reg_1313 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dest_V_blk_n_AW = m_axi_dest_V_AWREADY;
    end else begin
        dest_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((empty_50_reg_1488_pp0_iter6_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        dest_V_blk_n_B = m_axi_dest_V_BVALID;
    end else begin
        dest_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1128_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dest_V_blk_n_W = m_axi_dest_V_WREADY;
    end else begin
        dest_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_47_reg_1313 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_dest_V_AWVALID = 1'b1;
    end else begin
        m_axi_dest_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (empty_50_reg_1488_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        m_axi_dest_V_BREADY = 1'b1;
    end else begin
        m_axi_dest_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_1128_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_dest_V_WVALID = 1'b1;
    end else begin
        m_axi_dest_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln43_fu_689_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln43_fu_689_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FM_buf_acc0_V_0_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_10_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_11_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_12_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_13_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_14_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_15_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_16_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_17_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_18_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_19_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_1_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_20_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_21_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_22_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_23_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_24_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_25_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_26_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_27_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_28_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_29_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_2_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_30_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_31_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_3_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_4_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_5_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_6_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_7_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_8_address0 = zext_ln48_4_fu_788_p1;

assign FM_buf_acc0_V_9_address0 = zext_ln48_4_fu_788_p1;

assign add_ln414_fu_824_p2 = (zext_ln43_reg_1123 + zext_ln44_fu_774_p1);

assign add_ln43_fu_695_p2 = (ap_phi_mux_indvar_flatten_phi_fu_606_p4 + 5'd1);

assign add_ln48_1_fu_769_p2 = (zext_ln42_2_reg_1118 + zext_ln48_2_fu_765_p1);

assign add_ln48_2_fu_782_p2 = (add_ln48_fu_751_p2 + zext_ln48_3_fu_778_p1);

assign add_ln48_fu_751_p2 = (zext_ln48_fu_735_p1 + zext_ln48_1_fu_747_p1);

assign add_ln53_fu_701_p2 = (9'd114 + ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_dest_V_BVALID == 1'b0) & (empty_50_reg_1488_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_dest_V_BVALID == 1'b0) & (empty_50_reg_1488_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_dest_V_BVALID == 1'b0) & (empty_50_reg_1488_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_dest_V_AWREADY == 1'b0) & (empty_47_reg_1313 == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln43_reg_1128_pp0_iter1_reg == 1'd0) & (m_axi_dest_V_WREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = ((m_axi_dest_V_BVALID == 1'b0) & (empty_50_reg_1488_pp0_iter6_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign col_fu_847_p2 = (3'd1 + select_ln48_fu_719_p3);

assign empty_46_fu_829_p1 = ap_phi_mux_indvar_flatten_phi_fu_606_p4[1:0];

assign empty_47_fu_841_p2 = ((tmp_746_fu_833_p3 == 5'd0) ? 1'b1 : 1'b0);

assign empty_49_fu_991_p1 = add_ln43_reg_1132[1:0];

assign empty_50_fu_1002_p2 = ((tmp_747_fu_994_p3 == 5'd0) ? 1'b1 : 1'b0);

assign grp_fu_1109_p0 = grp_fu_1109_p00;

assign grp_fu_1109_p00 = or_ln42_fu_654_p2;

assign grp_fu_1109_p1 = 13'd114;

assign grp_fu_1109_p2 = grp_fu_1109_p20;

assign grp_fu_1109_p20 = shl_ln42_1_fu_664_p3;

assign icmp_ln43_fu_689_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_606_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_713_p2 = ((col_0_reg_635 == 3'd4) ? 1'b1 : 1'b0);

assign m_axi_dest_V_ARADDR = 32'd0;

assign m_axi_dest_V_ARBURST = 2'd0;

assign m_axi_dest_V_ARCACHE = 4'd0;

assign m_axi_dest_V_ARID = 1'd0;

assign m_axi_dest_V_ARLEN = 32'd0;

assign m_axi_dest_V_ARLOCK = 2'd0;

assign m_axi_dest_V_ARPROT = 3'd0;

assign m_axi_dest_V_ARQOS = 4'd0;

assign m_axi_dest_V_ARREGION = 4'd0;

assign m_axi_dest_V_ARSIZE = 3'd0;

assign m_axi_dest_V_ARUSER = 1'd0;

assign m_axi_dest_V_ARVALID = 1'b0;

assign m_axi_dest_V_AWADDR = zext_ln414_fu_981_p1;

assign m_axi_dest_V_AWBURST = 2'd0;

assign m_axi_dest_V_AWCACHE = 4'd0;

assign m_axi_dest_V_AWID = 1'd0;

assign m_axi_dest_V_AWLEN = 32'd4;

assign m_axi_dest_V_AWLOCK = 2'd0;

assign m_axi_dest_V_AWPROT = 3'd0;

assign m_axi_dest_V_AWQOS = 4'd0;

assign m_axi_dest_V_AWREGION = 4'd0;

assign m_axi_dest_V_AWSIZE = 3'd0;

assign m_axi_dest_V_AWUSER = 1'd0;

assign m_axi_dest_V_RREADY = 1'b0;

assign m_axi_dest_V_WDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{4'd0}, {trunc_ln612_30_reg_1477}}}, {4'd0}}}, {trunc_ln612_29_reg_1472}}}, {4'd0}}}, {trunc_ln612_28_reg_1467}}}, {4'd0}}}, {trunc_ln612_27_reg_1462}}}, {4'd0}}}, {trunc_ln612_26_reg_1457}}}, {4'd0}}}, {trunc_ln612_25_reg_1452}}}, {4'd0}}}, {trunc_ln612_24_reg_1447}}}, {4'd0}}}, {trunc_ln612_23_reg_1442}}}, {4'd0}}}, {trunc_ln612_22_reg_1437}}}, {4'd0}}}, {trunc_ln612_21_reg_1432}}}, {4'd0}}}, {trunc_ln612_20_reg_1427}}}, {4'd0}}}, {trunc_ln612_19_reg_1422}}}, {4'd0}}}, {trunc_ln612_18_reg_1417}}}, {4'd0}}}, {trunc_ln612_17_reg_1412}}}, {4'd0}}}, {trunc_ln612_16_reg_1407}}}, {4'd0}}}, {trunc_ln612_15_reg_1402}}}, {4'd0}}}, {trunc_ln612_14_reg_1397}}}, {4'd0}}}, {trunc_ln612_13_reg_1392}}}, {4'd0}}}, {trunc_ln612_12_reg_1387}}}, {4'd0}}}, {trunc_ln612_11_reg_1382}}}, {4'd0}}}, {trunc_ln612_10_reg_1377}}}, {4'd0}}}, {trunc_ln612_9_reg_1372}}}, {4'd0}}}, {trunc_ln612_8_reg_1367}}}, {4'd0}}}, {trunc_ln612_7_reg_1362}}}, {4'd0}}}, {trunc_ln612_6_reg_1357}}}, {4'd0}}}, {trunc_ln612_5_reg_1352}}}, {4'd0}}}, {trunc_ln612_4_reg_1347}}}, {4'd0}}}, {trunc_ln612_3_reg_1342}}}, {4'd0}}}, {trunc_ln612_2_reg_1337}}}, {4'd0}}}, {trunc_ln612_1_reg_1332}}}, {4'd0}}}, {trunc_ln612_reg_1327}}}, {4'd0}}}, {trunc_ln414_reg_1322}};

assign m_axi_dest_V_WID = 1'd0;

assign m_axi_dest_V_WLAST = 1'b0;

assign m_axi_dest_V_WSTRB = 64'd18446744073709551615;

assign m_axi_dest_V_WUSER = 1'd0;

assign or_ln42_1_fu_676_p2 = (grp_fu_1109_p3 | 13'd1);

assign or_ln42_fu_654_p2 = (shl_ln_fu_646_p3 | 6'd1);

assign row_fu_707_p2 = (3'd1 + ap_phi_mux_row_0_phi_fu_628_p4);

assign select_ln48_1_fu_727_p3 = ((icmp_ln44_fu_713_p2[0:0] === 1'b1) ? row_fu_707_p2 : ap_phi_mux_row_0_phi_fu_628_p4);

assign select_ln48_2_fu_757_p3 = ((icmp_ln44_fu_713_p2[0:0] === 1'b1) ? add_ln53_fu_701_p2 : ap_phi_mux_dest_ptr_0_rec_phi_fu_617_p4);

assign select_ln48_fu_719_p3 = ((icmp_ln44_fu_713_p2[0:0] === 1'b1) ? 3'd0 : col_0_reg_635);

assign shl_ln42_1_fu_664_p3 = {{col_offset}, {2'd0}};

assign shl_ln_fu_646_p3 = {{row_offset}, {2'd0}};

assign tmp_746_fu_833_p3 = {{3'd0}, {empty_46_fu_829_p1}};

assign tmp_747_fu_994_p3 = {{3'd0}, {empty_49_fu_991_p1}};

assign tmp_s_fu_739_p3 = {{select_ln48_1_fu_727_p3}, {3'd0}};

assign trunc_ln414_fu_853_p1 = FM_buf_acc0_V_0_q0[11:0];

assign trunc_ln612_10_fu_897_p1 = FM_buf_acc0_V_11_q0[11:0];

assign trunc_ln612_11_fu_901_p1 = FM_buf_acc0_V_12_q0[11:0];

assign trunc_ln612_12_fu_905_p1 = FM_buf_acc0_V_13_q0[11:0];

assign trunc_ln612_13_fu_909_p1 = FM_buf_acc0_V_14_q0[11:0];

assign trunc_ln612_14_fu_913_p1 = FM_buf_acc0_V_15_q0[11:0];

assign trunc_ln612_15_fu_917_p1 = FM_buf_acc0_V_16_q0[11:0];

assign trunc_ln612_16_fu_921_p1 = FM_buf_acc0_V_17_q0[11:0];

assign trunc_ln612_17_fu_925_p1 = FM_buf_acc0_V_18_q0[11:0];

assign trunc_ln612_18_fu_929_p1 = FM_buf_acc0_V_19_q0[11:0];

assign trunc_ln612_19_fu_933_p1 = FM_buf_acc0_V_20_q0[11:0];

assign trunc_ln612_1_fu_861_p1 = FM_buf_acc0_V_2_q0[11:0];

assign trunc_ln612_20_fu_937_p1 = FM_buf_acc0_V_21_q0[11:0];

assign trunc_ln612_21_fu_941_p1 = FM_buf_acc0_V_22_q0[11:0];

assign trunc_ln612_22_fu_945_p1 = FM_buf_acc0_V_23_q0[11:0];

assign trunc_ln612_23_fu_949_p1 = FM_buf_acc0_V_24_q0[11:0];

assign trunc_ln612_24_fu_953_p1 = FM_buf_acc0_V_25_q0[11:0];

assign trunc_ln612_25_fu_957_p1 = FM_buf_acc0_V_26_q0[11:0];

assign trunc_ln612_26_fu_961_p1 = FM_buf_acc0_V_27_q0[11:0];

assign trunc_ln612_27_fu_965_p1 = FM_buf_acc0_V_28_q0[11:0];

assign trunc_ln612_28_fu_969_p1 = FM_buf_acc0_V_29_q0[11:0];

assign trunc_ln612_29_fu_973_p1 = FM_buf_acc0_V_30_q0[11:0];

assign trunc_ln612_2_fu_865_p1 = FM_buf_acc0_V_3_q0[11:0];

assign trunc_ln612_30_fu_977_p1 = FM_buf_acc0_V_31_q0[11:0];

assign trunc_ln612_3_fu_869_p1 = FM_buf_acc0_V_4_q0[11:0];

assign trunc_ln612_4_fu_873_p1 = FM_buf_acc0_V_5_q0[11:0];

assign trunc_ln612_5_fu_877_p1 = FM_buf_acc0_V_6_q0[11:0];

assign trunc_ln612_6_fu_881_p1 = FM_buf_acc0_V_7_q0[11:0];

assign trunc_ln612_7_fu_885_p1 = FM_buf_acc0_V_8_q0[11:0];

assign trunc_ln612_8_fu_889_p1 = FM_buf_acc0_V_9_q0[11:0];

assign trunc_ln612_9_fu_893_p1 = FM_buf_acc0_V_10_q0[11:0];

assign trunc_ln612_fu_857_p1 = FM_buf_acc0_V_1_q0[11:0];

assign zext_ln414_fu_981_p1 = add_ln414_reg_1308;

assign zext_ln42_2_fu_681_p1 = or_ln42_1_fu_676_p2;

assign zext_ln43_fu_685_p1 = dest_V_offset;

assign zext_ln44_fu_774_p1 = add_ln48_1_fu_769_p2;

assign zext_ln48_1_fu_747_p1 = tmp_s_fu_739_p3;

assign zext_ln48_2_fu_765_p1 = select_ln48_2_fu_757_p3;

assign zext_ln48_3_fu_778_p1 = select_ln48_fu_719_p3;

assign zext_ln48_4_fu_788_p1 = add_ln48_2_fu_782_p2;

assign zext_ln48_fu_735_p1 = select_ln48_1_fu_727_p3;

always @ (posedge ap_clk) begin
    zext_ln42_2_reg_1118[0] <= 1'b1;
    zext_ln42_2_reg_1118[13] <= 1'b0;
    zext_ln43_reg_1123[26] <= 1'b0;
end

endmodule //copy_input_layer_buf
