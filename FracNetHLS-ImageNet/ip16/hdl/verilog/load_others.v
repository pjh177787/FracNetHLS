// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_others (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_all_V_AWVALID,
        m_axi_weights_all_V_AWREADY,
        m_axi_weights_all_V_AWADDR,
        m_axi_weights_all_V_AWID,
        m_axi_weights_all_V_AWLEN,
        m_axi_weights_all_V_AWSIZE,
        m_axi_weights_all_V_AWBURST,
        m_axi_weights_all_V_AWLOCK,
        m_axi_weights_all_V_AWCACHE,
        m_axi_weights_all_V_AWPROT,
        m_axi_weights_all_V_AWQOS,
        m_axi_weights_all_V_AWREGION,
        m_axi_weights_all_V_AWUSER,
        m_axi_weights_all_V_WVALID,
        m_axi_weights_all_V_WREADY,
        m_axi_weights_all_V_WDATA,
        m_axi_weights_all_V_WSTRB,
        m_axi_weights_all_V_WLAST,
        m_axi_weights_all_V_WID,
        m_axi_weights_all_V_WUSER,
        m_axi_weights_all_V_ARVALID,
        m_axi_weights_all_V_ARREADY,
        m_axi_weights_all_V_ARADDR,
        m_axi_weights_all_V_ARID,
        m_axi_weights_all_V_ARLEN,
        m_axi_weights_all_V_ARSIZE,
        m_axi_weights_all_V_ARBURST,
        m_axi_weights_all_V_ARLOCK,
        m_axi_weights_all_V_ARCACHE,
        m_axi_weights_all_V_ARPROT,
        m_axi_weights_all_V_ARQOS,
        m_axi_weights_all_V_ARREGION,
        m_axi_weights_all_V_ARUSER,
        m_axi_weights_all_V_RVALID,
        m_axi_weights_all_V_RREADY,
        m_axi_weights_all_V_RDATA,
        m_axi_weights_all_V_RLAST,
        m_axi_weights_all_V_RID,
        m_axi_weights_all_V_RUSER,
        m_axi_weights_all_V_RRESP,
        m_axi_weights_all_V_BVALID,
        m_axi_weights_all_V_BREADY,
        m_axi_weights_all_V_BRESP,
        m_axi_weights_all_V_BID,
        m_axi_weights_all_V_BUSER,
        weights_all_V_offset,
        weights_all_index,
        bn_weight_buf_V_0_0,
        bn_weight_buf_V_0_0_ap_vld,
        bn_bias_buf_V_0_0,
        bn_bias_buf_V_0_0_ap_vld,
        bn_weight_buf_V_1_0,
        bn_weight_buf_V_1_0_ap_vld,
        bn_bias_buf_V_1_0,
        bn_bias_buf_V_1_0_ap_vld,
        bn_weight_buf_V_2_0,
        bn_weight_buf_V_2_0_ap_vld,
        bn_bias_buf_V_2_0,
        bn_bias_buf_V_2_0_ap_vld,
        bn_weight_buf_V_3_0,
        bn_weight_buf_V_3_0_ap_vld,
        bn_bias_buf_V_3_0,
        bn_bias_buf_V_3_0_ap_vld,
        bn_weight_buf_V_4_0,
        bn_weight_buf_V_4_0_ap_vld,
        bn_bias_buf_V_4_0,
        bn_bias_buf_V_4_0_ap_vld,
        bn_weight_buf_V_5_0,
        bn_weight_buf_V_5_0_ap_vld,
        bn_bias_buf_V_5_0,
        bn_bias_buf_V_5_0_ap_vld,
        bn_weight_buf_V_6_0,
        bn_weight_buf_V_6_0_ap_vld,
        bn_bias_buf_V_6_0,
        bn_bias_buf_V_6_0_ap_vld,
        bn_weight_buf_V_7_0,
        bn_weight_buf_V_7_0_ap_vld,
        bn_bias_buf_V_7_0,
        bn_bias_buf_V_7_0_ap_vld,
        bn_weight_buf_V_8_0,
        bn_weight_buf_V_8_0_ap_vld,
        bn_bias_buf_V_8_0,
        bn_bias_buf_V_8_0_ap_vld,
        bn_weight_buf_V_9_0,
        bn_weight_buf_V_9_0_ap_vld,
        bn_bias_buf_V_9_0,
        bn_bias_buf_V_9_0_ap_vld,
        bn_weight_buf_V_10_0,
        bn_weight_buf_V_10_0_ap_vld,
        bn_bias_buf_V_10_0,
        bn_bias_buf_V_10_0_ap_vld,
        bn_weight_buf_V_11_0,
        bn_weight_buf_V_11_0_ap_vld,
        bn_bias_buf_V_11_0,
        bn_bias_buf_V_11_0_ap_vld,
        bn_weight_buf_V_12_0,
        bn_weight_buf_V_12_0_ap_vld,
        bn_bias_buf_V_12_0,
        bn_bias_buf_V_12_0_ap_vld,
        bn_weight_buf_V_13_0,
        bn_weight_buf_V_13_0_ap_vld,
        bn_bias_buf_V_13_0,
        bn_bias_buf_V_13_0_ap_vld,
        bn_weight_buf_V_14_0,
        bn_weight_buf_V_14_0_ap_vld,
        bn_bias_buf_V_14_0,
        bn_bias_buf_V_14_0_ap_vld,
        bn_weight_buf_V_15_0,
        bn_weight_buf_V_15_0_ap_vld,
        bn_bias_buf_V_15_0,
        bn_bias_buf_V_15_0_ap_vld,
        bn_weight_buf_V_16_0,
        bn_weight_buf_V_16_0_ap_vld,
        bn_bias_buf_V_16_0,
        bn_bias_buf_V_16_0_ap_vld,
        bn_weight_buf_V_17_0,
        bn_weight_buf_V_17_0_ap_vld,
        bn_bias_buf_V_17_0,
        bn_bias_buf_V_17_0_ap_vld,
        bn_weight_buf_V_18_0,
        bn_weight_buf_V_18_0_ap_vld,
        bn_bias_buf_V_18_0,
        bn_bias_buf_V_18_0_ap_vld,
        bn_weight_buf_V_19_0,
        bn_weight_buf_V_19_0_ap_vld,
        bn_bias_buf_V_19_0,
        bn_bias_buf_V_19_0_ap_vld,
        bn_weight_buf_V_20_0,
        bn_weight_buf_V_20_0_ap_vld,
        bn_bias_buf_V_20_0,
        bn_bias_buf_V_20_0_ap_vld,
        bn_weight_buf_V_21_0,
        bn_weight_buf_V_21_0_ap_vld,
        bn_bias_buf_V_21_0,
        bn_bias_buf_V_21_0_ap_vld,
        bn_weight_buf_V_22_0,
        bn_weight_buf_V_22_0_ap_vld,
        bn_bias_buf_V_22_0,
        bn_bias_buf_V_22_0_ap_vld,
        bn_weight_buf_V_23_0,
        bn_weight_buf_V_23_0_ap_vld,
        bn_bias_buf_V_23_0,
        bn_bias_buf_V_23_0_ap_vld,
        bn_weight_buf_V_24_0,
        bn_weight_buf_V_24_0_ap_vld,
        bn_bias_buf_V_24_0,
        bn_bias_buf_V_24_0_ap_vld,
        bn_weight_buf_V_25_0,
        bn_weight_buf_V_25_0_ap_vld,
        bn_bias_buf_V_25_0,
        bn_bias_buf_V_25_0_ap_vld,
        bn_weight_buf_V_26_0,
        bn_weight_buf_V_26_0_ap_vld,
        bn_bias_buf_V_26_0,
        bn_bias_buf_V_26_0_ap_vld,
        bn_weight_buf_V_27_0,
        bn_weight_buf_V_27_0_ap_vld,
        bn_bias_buf_V_27_0,
        bn_bias_buf_V_27_0_ap_vld,
        bn_weight_buf_V_28_0,
        bn_weight_buf_V_28_0_ap_vld,
        bn_bias_buf_V_28_0,
        bn_bias_buf_V_28_0_ap_vld,
        bn_weight_buf_V_29_0,
        bn_weight_buf_V_29_0_ap_vld,
        bn_bias_buf_V_29_0,
        bn_bias_buf_V_29_0_ap_vld,
        bn_weight_buf_V_30_0,
        bn_weight_buf_V_30_0_ap_vld,
        bn_bias_buf_V_30_0,
        bn_bias_buf_V_30_0_ap_vld,
        bn_weight_buf_V_31_0,
        bn_weight_buf_V_31_0_ap_vld,
        bn_bias_buf_V_31_0,
        bn_bias_buf_V_31_0_ap_vld
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_all_V_AWVALID;
input   m_axi_weights_all_V_AWREADY;
output  [31:0] m_axi_weights_all_V_AWADDR;
output  [0:0] m_axi_weights_all_V_AWID;
output  [31:0] m_axi_weights_all_V_AWLEN;
output  [2:0] m_axi_weights_all_V_AWSIZE;
output  [1:0] m_axi_weights_all_V_AWBURST;
output  [1:0] m_axi_weights_all_V_AWLOCK;
output  [3:0] m_axi_weights_all_V_AWCACHE;
output  [2:0] m_axi_weights_all_V_AWPROT;
output  [3:0] m_axi_weights_all_V_AWQOS;
output  [3:0] m_axi_weights_all_V_AWREGION;
output  [0:0] m_axi_weights_all_V_AWUSER;
output   m_axi_weights_all_V_WVALID;
input   m_axi_weights_all_V_WREADY;
output  [511:0] m_axi_weights_all_V_WDATA;
output  [63:0] m_axi_weights_all_V_WSTRB;
output   m_axi_weights_all_V_WLAST;
output  [0:0] m_axi_weights_all_V_WID;
output  [0:0] m_axi_weights_all_V_WUSER;
output   m_axi_weights_all_V_ARVALID;
input   m_axi_weights_all_V_ARREADY;
output  [31:0] m_axi_weights_all_V_ARADDR;
output  [0:0] m_axi_weights_all_V_ARID;
output  [31:0] m_axi_weights_all_V_ARLEN;
output  [2:0] m_axi_weights_all_V_ARSIZE;
output  [1:0] m_axi_weights_all_V_ARBURST;
output  [1:0] m_axi_weights_all_V_ARLOCK;
output  [3:0] m_axi_weights_all_V_ARCACHE;
output  [2:0] m_axi_weights_all_V_ARPROT;
output  [3:0] m_axi_weights_all_V_ARQOS;
output  [3:0] m_axi_weights_all_V_ARREGION;
output  [0:0] m_axi_weights_all_V_ARUSER;
input   m_axi_weights_all_V_RVALID;
output   m_axi_weights_all_V_RREADY;
input  [511:0] m_axi_weights_all_V_RDATA;
input   m_axi_weights_all_V_RLAST;
input  [0:0] m_axi_weights_all_V_RID;
input  [0:0] m_axi_weights_all_V_RUSER;
input  [1:0] m_axi_weights_all_V_RRESP;
input   m_axi_weights_all_V_BVALID;
output   m_axi_weights_all_V_BREADY;
input  [1:0] m_axi_weights_all_V_BRESP;
input  [0:0] m_axi_weights_all_V_BID;
input  [0:0] m_axi_weights_all_V_BUSER;
input  [25:0] weights_all_V_offset;
input  [10:0] weights_all_index;
output  [9:0] bn_weight_buf_V_0_0;
output   bn_weight_buf_V_0_0_ap_vld;
output  [9:0] bn_bias_buf_V_0_0;
output   bn_bias_buf_V_0_0_ap_vld;
output  [9:0] bn_weight_buf_V_1_0;
output   bn_weight_buf_V_1_0_ap_vld;
output  [9:0] bn_bias_buf_V_1_0;
output   bn_bias_buf_V_1_0_ap_vld;
output  [9:0] bn_weight_buf_V_2_0;
output   bn_weight_buf_V_2_0_ap_vld;
output  [9:0] bn_bias_buf_V_2_0;
output   bn_bias_buf_V_2_0_ap_vld;
output  [9:0] bn_weight_buf_V_3_0;
output   bn_weight_buf_V_3_0_ap_vld;
output  [9:0] bn_bias_buf_V_3_0;
output   bn_bias_buf_V_3_0_ap_vld;
output  [9:0] bn_weight_buf_V_4_0;
output   bn_weight_buf_V_4_0_ap_vld;
output  [9:0] bn_bias_buf_V_4_0;
output   bn_bias_buf_V_4_0_ap_vld;
output  [9:0] bn_weight_buf_V_5_0;
output   bn_weight_buf_V_5_0_ap_vld;
output  [9:0] bn_bias_buf_V_5_0;
output   bn_bias_buf_V_5_0_ap_vld;
output  [9:0] bn_weight_buf_V_6_0;
output   bn_weight_buf_V_6_0_ap_vld;
output  [9:0] bn_bias_buf_V_6_0;
output   bn_bias_buf_V_6_0_ap_vld;
output  [9:0] bn_weight_buf_V_7_0;
output   bn_weight_buf_V_7_0_ap_vld;
output  [9:0] bn_bias_buf_V_7_0;
output   bn_bias_buf_V_7_0_ap_vld;
output  [9:0] bn_weight_buf_V_8_0;
output   bn_weight_buf_V_8_0_ap_vld;
output  [9:0] bn_bias_buf_V_8_0;
output   bn_bias_buf_V_8_0_ap_vld;
output  [9:0] bn_weight_buf_V_9_0;
output   bn_weight_buf_V_9_0_ap_vld;
output  [9:0] bn_bias_buf_V_9_0;
output   bn_bias_buf_V_9_0_ap_vld;
output  [9:0] bn_weight_buf_V_10_0;
output   bn_weight_buf_V_10_0_ap_vld;
output  [9:0] bn_bias_buf_V_10_0;
output   bn_bias_buf_V_10_0_ap_vld;
output  [9:0] bn_weight_buf_V_11_0;
output   bn_weight_buf_V_11_0_ap_vld;
output  [9:0] bn_bias_buf_V_11_0;
output   bn_bias_buf_V_11_0_ap_vld;
output  [9:0] bn_weight_buf_V_12_0;
output   bn_weight_buf_V_12_0_ap_vld;
output  [9:0] bn_bias_buf_V_12_0;
output   bn_bias_buf_V_12_0_ap_vld;
output  [9:0] bn_weight_buf_V_13_0;
output   bn_weight_buf_V_13_0_ap_vld;
output  [9:0] bn_bias_buf_V_13_0;
output   bn_bias_buf_V_13_0_ap_vld;
output  [9:0] bn_weight_buf_V_14_0;
output   bn_weight_buf_V_14_0_ap_vld;
output  [9:0] bn_bias_buf_V_14_0;
output   bn_bias_buf_V_14_0_ap_vld;
output  [9:0] bn_weight_buf_V_15_0;
output   bn_weight_buf_V_15_0_ap_vld;
output  [9:0] bn_bias_buf_V_15_0;
output   bn_bias_buf_V_15_0_ap_vld;
output  [9:0] bn_weight_buf_V_16_0;
output   bn_weight_buf_V_16_0_ap_vld;
output  [9:0] bn_bias_buf_V_16_0;
output   bn_bias_buf_V_16_0_ap_vld;
output  [9:0] bn_weight_buf_V_17_0;
output   bn_weight_buf_V_17_0_ap_vld;
output  [9:0] bn_bias_buf_V_17_0;
output   bn_bias_buf_V_17_0_ap_vld;
output  [9:0] bn_weight_buf_V_18_0;
output   bn_weight_buf_V_18_0_ap_vld;
output  [9:0] bn_bias_buf_V_18_0;
output   bn_bias_buf_V_18_0_ap_vld;
output  [9:0] bn_weight_buf_V_19_0;
output   bn_weight_buf_V_19_0_ap_vld;
output  [9:0] bn_bias_buf_V_19_0;
output   bn_bias_buf_V_19_0_ap_vld;
output  [9:0] bn_weight_buf_V_20_0;
output   bn_weight_buf_V_20_0_ap_vld;
output  [9:0] bn_bias_buf_V_20_0;
output   bn_bias_buf_V_20_0_ap_vld;
output  [9:0] bn_weight_buf_V_21_0;
output   bn_weight_buf_V_21_0_ap_vld;
output  [9:0] bn_bias_buf_V_21_0;
output   bn_bias_buf_V_21_0_ap_vld;
output  [9:0] bn_weight_buf_V_22_0;
output   bn_weight_buf_V_22_0_ap_vld;
output  [9:0] bn_bias_buf_V_22_0;
output   bn_bias_buf_V_22_0_ap_vld;
output  [9:0] bn_weight_buf_V_23_0;
output   bn_weight_buf_V_23_0_ap_vld;
output  [9:0] bn_bias_buf_V_23_0;
output   bn_bias_buf_V_23_0_ap_vld;
output  [9:0] bn_weight_buf_V_24_0;
output   bn_weight_buf_V_24_0_ap_vld;
output  [9:0] bn_bias_buf_V_24_0;
output   bn_bias_buf_V_24_0_ap_vld;
output  [9:0] bn_weight_buf_V_25_0;
output   bn_weight_buf_V_25_0_ap_vld;
output  [9:0] bn_bias_buf_V_25_0;
output   bn_bias_buf_V_25_0_ap_vld;
output  [9:0] bn_weight_buf_V_26_0;
output   bn_weight_buf_V_26_0_ap_vld;
output  [9:0] bn_bias_buf_V_26_0;
output   bn_bias_buf_V_26_0_ap_vld;
output  [9:0] bn_weight_buf_V_27_0;
output   bn_weight_buf_V_27_0_ap_vld;
output  [9:0] bn_bias_buf_V_27_0;
output   bn_bias_buf_V_27_0_ap_vld;
output  [9:0] bn_weight_buf_V_28_0;
output   bn_weight_buf_V_28_0_ap_vld;
output  [9:0] bn_bias_buf_V_28_0;
output   bn_bias_buf_V_28_0_ap_vld;
output  [9:0] bn_weight_buf_V_29_0;
output   bn_weight_buf_V_29_0_ap_vld;
output  [9:0] bn_bias_buf_V_29_0;
output   bn_bias_buf_V_29_0_ap_vld;
output  [9:0] bn_weight_buf_V_30_0;
output   bn_weight_buf_V_30_0_ap_vld;
output  [9:0] bn_bias_buf_V_30_0;
output   bn_bias_buf_V_30_0_ap_vld;
output  [9:0] bn_weight_buf_V_31_0;
output   bn_weight_buf_V_31_0_ap_vld;
output  [9:0] bn_bias_buf_V_31_0;
output   bn_bias_buf_V_31_0_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_all_V_ARVALID;
reg m_axi_weights_all_V_RREADY;
reg bn_weight_buf_V_0_0_ap_vld;
reg bn_bias_buf_V_0_0_ap_vld;
reg bn_weight_buf_V_1_0_ap_vld;
reg bn_bias_buf_V_1_0_ap_vld;
reg bn_weight_buf_V_2_0_ap_vld;
reg bn_bias_buf_V_2_0_ap_vld;
reg bn_weight_buf_V_3_0_ap_vld;
reg bn_bias_buf_V_3_0_ap_vld;
reg bn_weight_buf_V_4_0_ap_vld;
reg bn_bias_buf_V_4_0_ap_vld;
reg bn_weight_buf_V_5_0_ap_vld;
reg bn_bias_buf_V_5_0_ap_vld;
reg bn_weight_buf_V_6_0_ap_vld;
reg bn_bias_buf_V_6_0_ap_vld;
reg bn_weight_buf_V_7_0_ap_vld;
reg bn_bias_buf_V_7_0_ap_vld;
reg bn_weight_buf_V_8_0_ap_vld;
reg bn_bias_buf_V_8_0_ap_vld;
reg bn_weight_buf_V_9_0_ap_vld;
reg bn_bias_buf_V_9_0_ap_vld;
reg bn_weight_buf_V_10_0_ap_vld;
reg bn_bias_buf_V_10_0_ap_vld;
reg bn_weight_buf_V_11_0_ap_vld;
reg bn_bias_buf_V_11_0_ap_vld;
reg bn_weight_buf_V_12_0_ap_vld;
reg bn_bias_buf_V_12_0_ap_vld;
reg bn_weight_buf_V_13_0_ap_vld;
reg bn_bias_buf_V_13_0_ap_vld;
reg bn_weight_buf_V_14_0_ap_vld;
reg bn_bias_buf_V_14_0_ap_vld;
reg bn_weight_buf_V_15_0_ap_vld;
reg bn_bias_buf_V_15_0_ap_vld;
reg bn_weight_buf_V_16_0_ap_vld;
reg bn_bias_buf_V_16_0_ap_vld;
reg bn_weight_buf_V_17_0_ap_vld;
reg bn_bias_buf_V_17_0_ap_vld;
reg bn_weight_buf_V_18_0_ap_vld;
reg bn_bias_buf_V_18_0_ap_vld;
reg bn_weight_buf_V_19_0_ap_vld;
reg bn_bias_buf_V_19_0_ap_vld;
reg bn_weight_buf_V_20_0_ap_vld;
reg bn_bias_buf_V_20_0_ap_vld;
reg bn_weight_buf_V_21_0_ap_vld;
reg bn_bias_buf_V_21_0_ap_vld;
reg bn_weight_buf_V_22_0_ap_vld;
reg bn_bias_buf_V_22_0_ap_vld;
reg bn_weight_buf_V_23_0_ap_vld;
reg bn_bias_buf_V_23_0_ap_vld;
reg bn_weight_buf_V_24_0_ap_vld;
reg bn_bias_buf_V_24_0_ap_vld;
reg bn_weight_buf_V_25_0_ap_vld;
reg bn_bias_buf_V_25_0_ap_vld;
reg bn_weight_buf_V_26_0_ap_vld;
reg bn_bias_buf_V_26_0_ap_vld;
reg bn_weight_buf_V_27_0_ap_vld;
reg bn_bias_buf_V_27_0_ap_vld;
reg bn_weight_buf_V_28_0_ap_vld;
reg bn_bias_buf_V_28_0_ap_vld;
reg bn_weight_buf_V_29_0_ap_vld;
reg bn_bias_buf_V_29_0_ap_vld;
reg bn_weight_buf_V_30_0_ap_vld;
reg bn_bias_buf_V_30_0_ap_vld;
reg bn_weight_buf_V_31_0_ap_vld;
reg bn_bias_buf_V_31_0_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_all_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    weights_all_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_0_reg_554;
wire   [26:0] add_ln647_fu_573_p2;
reg   [26:0] add_ln647_reg_4589;
wire   [0:0] icmp_ln234_fu_589_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_595_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] trunc_ln414_fu_601_p1;
reg   [2:0] trunc_ln414_reg_4609;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire   [63:0] zext_ln647_6_fu_579_p1;
reg   [511:0] DATA_7_V_fu_522;
wire    ap_CS_fsm_state11;
reg   [511:0] DATA_7_V_1_fu_526;
wire   [26:0] zext_ln647_fu_565_p1;
wire   [26:0] zext_ln647_5_fu_569_p1;
wire   [2:0] trunc_ln746_fu_621_p1;
wire   [6:0] tmp_fu_641_p4;
wire   [0:0] tmp_681_fu_633_p3;
wire   [0:0] icmp_ln785_fu_651_p2;
wire   [0:0] or_ln785_fu_657_p2;
wire   [9:0] trunc_ln_fu_625_p3;
wire   [2:0] trunc_ln746_144_fu_677_p1;
wire   [6:0] tmp_s_fu_697_p4;
wire   [0:0] tmp_682_fu_689_p3;
wire   [0:0] icmp_ln785_16_fu_707_p2;
wire   [0:0] or_ln785_17_fu_713_p2;
wire   [9:0] trunc_ln746_1_fu_681_p3;
wire   [2:0] tmp_75_fu_733_p4;
wire   [6:0] tmp_12_fu_759_p4;
wire   [0:0] tmp_683_fu_751_p3;
wire   [0:0] icmp_ln785_17_fu_769_p2;
wire   [0:0] or_ln785_18_fu_775_p2;
wire   [9:0] trunc_ln746_2_fu_743_p3;
wire   [2:0] tmp_76_fu_795_p4;
wire   [6:0] tmp_13_fu_821_p4;
wire   [0:0] tmp_684_fu_813_p3;
wire   [0:0] icmp_ln785_18_fu_831_p2;
wire   [0:0] or_ln785_19_fu_837_p2;
wire   [9:0] trunc_ln746_3_fu_805_p3;
wire   [2:0] tmp_77_fu_857_p4;
wire   [6:0] tmp_14_fu_883_p4;
wire   [0:0] tmp_685_fu_875_p3;
wire   [0:0] icmp_ln785_19_fu_893_p2;
wire   [0:0] or_ln785_20_fu_899_p2;
wire   [9:0] trunc_ln746_4_fu_867_p3;
wire   [2:0] tmp_78_fu_919_p4;
wire   [6:0] tmp_15_fu_945_p4;
wire   [0:0] tmp_686_fu_937_p3;
wire   [0:0] icmp_ln785_20_fu_955_p2;
wire   [0:0] or_ln785_21_fu_961_p2;
wire   [9:0] trunc_ln746_5_fu_929_p3;
wire   [2:0] tmp_79_fu_981_p4;
wire   [6:0] tmp_16_fu_1007_p4;
wire   [0:0] tmp_687_fu_999_p3;
wire   [0:0] icmp_ln785_21_fu_1017_p2;
wire   [0:0] or_ln785_22_fu_1023_p2;
wire   [9:0] trunc_ln746_6_fu_991_p3;
wire   [2:0] tmp_80_fu_1043_p4;
wire   [6:0] tmp_17_fu_1069_p4;
wire   [0:0] tmp_688_fu_1061_p3;
wire   [0:0] icmp_ln785_22_fu_1079_p2;
wire   [0:0] or_ln785_23_fu_1085_p2;
wire   [9:0] trunc_ln746_7_fu_1053_p3;
wire   [2:0] tmp_81_fu_1105_p4;
wire   [6:0] tmp_18_fu_1131_p4;
wire   [0:0] tmp_689_fu_1123_p3;
wire   [0:0] icmp_ln785_23_fu_1141_p2;
wire   [0:0] or_ln785_24_fu_1147_p2;
wire   [9:0] trunc_ln746_8_fu_1115_p3;
wire   [2:0] tmp_82_fu_1167_p4;
wire   [6:0] tmp_19_fu_1193_p4;
wire   [0:0] tmp_690_fu_1185_p3;
wire   [0:0] icmp_ln785_24_fu_1203_p2;
wire   [0:0] or_ln785_25_fu_1209_p2;
wire   [9:0] trunc_ln746_9_fu_1177_p3;
wire   [2:0] tmp_83_fu_1229_p4;
wire   [6:0] tmp_20_fu_1255_p4;
wire   [0:0] tmp_691_fu_1247_p3;
wire   [0:0] icmp_ln785_25_fu_1265_p2;
wire   [0:0] or_ln785_26_fu_1271_p2;
wire   [9:0] trunc_ln746_s_fu_1239_p3;
wire   [2:0] tmp_84_fu_1291_p4;
wire   [6:0] tmp_21_fu_1317_p4;
wire   [0:0] tmp_692_fu_1309_p3;
wire   [0:0] icmp_ln785_26_fu_1327_p2;
wire   [0:0] or_ln785_27_fu_1333_p2;
wire   [9:0] trunc_ln746_10_fu_1301_p3;
wire   [2:0] tmp_85_fu_1353_p4;
wire   [6:0] tmp_22_fu_1379_p4;
wire   [0:0] tmp_693_fu_1371_p3;
wire   [0:0] icmp_ln785_27_fu_1389_p2;
wire   [0:0] or_ln785_28_fu_1395_p2;
wire   [9:0] trunc_ln746_11_fu_1363_p3;
wire   [2:0] tmp_86_fu_1415_p4;
wire   [6:0] tmp_23_fu_1441_p4;
wire   [0:0] tmp_694_fu_1433_p3;
wire   [0:0] icmp_ln785_28_fu_1451_p2;
wire   [0:0] or_ln785_29_fu_1457_p2;
wire   [9:0] trunc_ln746_12_fu_1425_p3;
wire   [2:0] tmp_87_fu_1477_p4;
wire   [6:0] tmp_24_fu_1503_p4;
wire   [0:0] tmp_695_fu_1495_p3;
wire   [0:0] icmp_ln785_29_fu_1513_p2;
wire   [0:0] or_ln785_30_fu_1519_p2;
wire   [9:0] trunc_ln746_13_fu_1487_p3;
wire   [2:0] tmp_88_fu_1539_p4;
wire   [6:0] tmp_25_fu_1565_p4;
wire   [0:0] tmp_696_fu_1557_p3;
wire   [0:0] icmp_ln785_30_fu_1575_p2;
wire   [0:0] or_ln785_31_fu_1581_p2;
wire   [9:0] trunc_ln746_14_fu_1549_p3;
wire   [2:0] tmp_89_fu_1601_p4;
wire   [6:0] tmp_26_fu_1627_p4;
wire   [0:0] tmp_697_fu_1619_p3;
wire   [0:0] icmp_ln785_31_fu_1637_p2;
wire   [0:0] or_ln785_32_fu_1643_p2;
wire   [9:0] trunc_ln746_15_fu_1611_p3;
wire   [2:0] tmp_90_fu_1663_p4;
wire   [6:0] tmp_27_fu_1689_p4;
wire   [0:0] tmp_698_fu_1681_p3;
wire   [0:0] icmp_ln785_32_fu_1699_p2;
wire   [0:0] or_ln785_33_fu_1705_p2;
wire   [9:0] trunc_ln746_16_fu_1673_p3;
wire   [2:0] tmp_91_fu_1725_p4;
wire   [6:0] tmp_28_fu_1751_p4;
wire   [0:0] tmp_699_fu_1743_p3;
wire   [0:0] icmp_ln785_33_fu_1761_p2;
wire   [0:0] or_ln785_34_fu_1767_p2;
wire   [9:0] trunc_ln746_17_fu_1735_p3;
wire   [2:0] tmp_92_fu_1787_p4;
wire   [6:0] tmp_29_fu_1813_p4;
wire   [0:0] tmp_700_fu_1805_p3;
wire   [0:0] icmp_ln785_34_fu_1823_p2;
wire   [0:0] or_ln785_35_fu_1829_p2;
wire   [9:0] trunc_ln746_18_fu_1797_p3;
wire   [2:0] tmp_93_fu_1849_p4;
wire   [6:0] tmp_30_fu_1875_p4;
wire   [0:0] tmp_701_fu_1867_p3;
wire   [0:0] icmp_ln785_35_fu_1885_p2;
wire   [0:0] or_ln785_36_fu_1891_p2;
wire   [9:0] trunc_ln746_19_fu_1859_p3;
wire   [2:0] tmp_94_fu_1911_p4;
wire   [6:0] tmp_31_fu_1937_p4;
wire   [0:0] tmp_702_fu_1929_p3;
wire   [0:0] icmp_ln785_36_fu_1947_p2;
wire   [0:0] or_ln785_37_fu_1953_p2;
wire   [9:0] trunc_ln746_20_fu_1921_p3;
wire   [2:0] tmp_95_fu_1973_p4;
wire   [6:0] tmp_32_fu_1999_p4;
wire   [0:0] tmp_703_fu_1991_p3;
wire   [0:0] icmp_ln785_37_fu_2009_p2;
wire   [0:0] or_ln785_38_fu_2015_p2;
wire   [9:0] trunc_ln746_21_fu_1983_p3;
wire   [2:0] tmp_96_fu_2035_p4;
wire   [6:0] tmp_33_fu_2061_p4;
wire   [0:0] tmp_704_fu_2053_p3;
wire   [0:0] icmp_ln785_38_fu_2071_p2;
wire   [0:0] or_ln785_39_fu_2077_p2;
wire   [9:0] trunc_ln746_22_fu_2045_p3;
wire   [2:0] tmp_97_fu_2097_p4;
wire   [6:0] tmp_34_fu_2123_p4;
wire   [0:0] tmp_705_fu_2115_p3;
wire   [0:0] icmp_ln785_39_fu_2133_p2;
wire   [0:0] or_ln785_40_fu_2139_p2;
wire   [9:0] trunc_ln746_23_fu_2107_p3;
wire   [2:0] tmp_98_fu_2159_p4;
wire   [6:0] tmp_35_fu_2185_p4;
wire   [0:0] tmp_706_fu_2177_p3;
wire   [0:0] icmp_ln785_40_fu_2195_p2;
wire   [0:0] or_ln785_41_fu_2201_p2;
wire   [9:0] trunc_ln746_24_fu_2169_p3;
wire   [2:0] tmp_99_fu_2221_p4;
wire   [6:0] tmp_36_fu_2247_p4;
wire   [0:0] tmp_707_fu_2239_p3;
wire   [0:0] icmp_ln785_41_fu_2257_p2;
wire   [0:0] or_ln785_42_fu_2263_p2;
wire   [9:0] trunc_ln746_25_fu_2231_p3;
wire   [2:0] tmp_100_fu_2283_p4;
wire   [6:0] tmp_37_fu_2309_p4;
wire   [0:0] tmp_708_fu_2301_p3;
wire   [0:0] icmp_ln785_42_fu_2319_p2;
wire   [0:0] or_ln785_43_fu_2325_p2;
wire   [9:0] trunc_ln746_26_fu_2293_p3;
wire   [2:0] tmp_101_fu_2345_p4;
wire   [6:0] tmp_38_fu_2371_p4;
wire   [0:0] tmp_709_fu_2363_p3;
wire   [0:0] icmp_ln785_43_fu_2381_p2;
wire   [0:0] or_ln785_44_fu_2387_p2;
wire   [9:0] trunc_ln746_27_fu_2355_p3;
wire   [2:0] tmp_102_fu_2407_p4;
wire   [6:0] tmp_39_fu_2433_p4;
wire   [0:0] tmp_710_fu_2425_p3;
wire   [0:0] icmp_ln785_44_fu_2443_p2;
wire   [0:0] or_ln785_45_fu_2449_p2;
wire   [9:0] trunc_ln746_28_fu_2417_p3;
wire   [2:0] tmp_103_fu_2469_p4;
wire   [6:0] tmp_40_fu_2495_p4;
wire   [0:0] tmp_711_fu_2487_p3;
wire   [0:0] icmp_ln785_45_fu_2505_p2;
wire   [0:0] or_ln785_46_fu_2511_p2;
wire   [9:0] trunc_ln746_29_fu_2479_p3;
wire   [2:0] tmp_104_fu_2531_p4;
wire   [6:0] tmp_41_fu_2557_p4;
wire   [0:0] tmp_712_fu_2549_p3;
wire   [0:0] icmp_ln785_46_fu_2567_p2;
wire   [0:0] or_ln785_47_fu_2573_p2;
wire   [9:0] trunc_ln746_30_fu_2541_p3;
wire   [2:0] tmp_105_fu_2593_p4;
wire   [6:0] tmp_42_fu_2619_p4;
wire   [0:0] tmp_713_fu_2611_p3;
wire   [0:0] icmp_ln785_47_fu_2629_p2;
wire   [0:0] or_ln785_48_fu_2635_p2;
wire   [9:0] trunc_ln746_31_fu_2603_p3;
wire   [2:0] tmp_106_fu_2655_p4;
wire   [6:0] tmp_43_fu_2681_p4;
wire   [0:0] tmp_714_fu_2673_p3;
wire   [0:0] icmp_ln785_48_fu_2691_p2;
wire   [0:0] or_ln785_49_fu_2697_p2;
wire   [9:0] trunc_ln746_32_fu_2665_p3;
wire   [2:0] tmp_107_fu_2717_p4;
wire   [6:0] tmp_44_fu_2743_p4;
wire   [0:0] tmp_715_fu_2735_p3;
wire   [0:0] icmp_ln785_49_fu_2753_p2;
wire   [0:0] or_ln785_50_fu_2759_p2;
wire   [9:0] trunc_ln746_33_fu_2727_p3;
wire   [2:0] tmp_108_fu_2779_p4;
wire   [6:0] tmp_45_fu_2805_p4;
wire   [0:0] tmp_716_fu_2797_p3;
wire   [0:0] icmp_ln785_50_fu_2815_p2;
wire   [0:0] or_ln785_51_fu_2821_p2;
wire   [9:0] trunc_ln746_34_fu_2789_p3;
wire   [2:0] tmp_109_fu_2841_p4;
wire   [6:0] tmp_46_fu_2867_p4;
wire   [0:0] tmp_717_fu_2859_p3;
wire   [0:0] icmp_ln785_51_fu_2877_p2;
wire   [0:0] or_ln785_52_fu_2883_p2;
wire   [9:0] trunc_ln746_35_fu_2851_p3;
wire   [2:0] tmp_110_fu_2903_p4;
wire   [6:0] tmp_47_fu_2929_p4;
wire   [0:0] tmp_718_fu_2921_p3;
wire   [0:0] icmp_ln785_52_fu_2939_p2;
wire   [0:0] or_ln785_53_fu_2945_p2;
wire   [9:0] trunc_ln746_36_fu_2913_p3;
wire   [2:0] tmp_111_fu_2965_p4;
wire   [6:0] tmp_48_fu_2991_p4;
wire   [0:0] tmp_719_fu_2983_p3;
wire   [0:0] icmp_ln785_53_fu_3001_p2;
wire   [0:0] or_ln785_54_fu_3007_p2;
wire   [9:0] trunc_ln746_37_fu_2975_p3;
wire   [2:0] tmp_112_fu_3027_p4;
wire   [6:0] tmp_49_fu_3053_p4;
wire   [0:0] tmp_720_fu_3045_p3;
wire   [0:0] icmp_ln785_54_fu_3063_p2;
wire   [0:0] or_ln785_55_fu_3069_p2;
wire   [9:0] trunc_ln746_38_fu_3037_p3;
wire   [2:0] tmp_113_fu_3089_p4;
wire   [6:0] tmp_50_fu_3115_p4;
wire   [0:0] tmp_721_fu_3107_p3;
wire   [0:0] icmp_ln785_55_fu_3125_p2;
wire   [0:0] or_ln785_56_fu_3131_p2;
wire   [9:0] trunc_ln746_39_fu_3099_p3;
wire   [2:0] tmp_114_fu_3151_p4;
wire   [6:0] tmp_51_fu_3177_p4;
wire   [0:0] tmp_722_fu_3169_p3;
wire   [0:0] icmp_ln785_56_fu_3187_p2;
wire   [0:0] or_ln785_57_fu_3193_p2;
wire   [9:0] trunc_ln746_40_fu_3161_p3;
wire   [2:0] tmp_115_fu_3213_p4;
wire   [6:0] tmp_52_fu_3239_p4;
wire   [0:0] tmp_723_fu_3231_p3;
wire   [0:0] icmp_ln785_57_fu_3249_p2;
wire   [0:0] or_ln785_58_fu_3255_p2;
wire   [9:0] trunc_ln746_41_fu_3223_p3;
wire   [2:0] tmp_116_fu_3275_p4;
wire   [6:0] tmp_53_fu_3301_p4;
wire   [0:0] tmp_724_fu_3293_p3;
wire   [0:0] icmp_ln785_58_fu_3311_p2;
wire   [0:0] or_ln785_59_fu_3317_p2;
wire   [9:0] trunc_ln746_42_fu_3285_p3;
wire   [2:0] tmp_117_fu_3337_p4;
wire   [6:0] tmp_54_fu_3363_p4;
wire   [0:0] tmp_725_fu_3355_p3;
wire   [0:0] icmp_ln785_59_fu_3373_p2;
wire   [0:0] or_ln785_60_fu_3379_p2;
wire   [9:0] trunc_ln746_43_fu_3347_p3;
wire   [2:0] tmp_118_fu_3399_p4;
wire   [6:0] tmp_55_fu_3425_p4;
wire   [0:0] tmp_726_fu_3417_p3;
wire   [0:0] icmp_ln785_60_fu_3435_p2;
wire   [0:0] or_ln785_61_fu_3441_p2;
wire   [9:0] trunc_ln746_44_fu_3409_p3;
wire   [2:0] tmp_119_fu_3461_p4;
wire   [6:0] tmp_56_fu_3487_p4;
wire   [0:0] tmp_727_fu_3479_p3;
wire   [0:0] icmp_ln785_61_fu_3497_p2;
wire   [0:0] or_ln785_62_fu_3503_p2;
wire   [9:0] trunc_ln746_45_fu_3471_p3;
wire   [2:0] tmp_120_fu_3523_p4;
wire   [6:0] tmp_57_fu_3549_p4;
wire   [0:0] tmp_728_fu_3541_p3;
wire   [0:0] icmp_ln785_62_fu_3559_p2;
wire   [0:0] or_ln785_63_fu_3565_p2;
wire   [9:0] trunc_ln746_46_fu_3533_p3;
wire   [2:0] tmp_121_fu_3585_p4;
wire   [6:0] tmp_58_fu_3611_p4;
wire   [0:0] tmp_729_fu_3603_p3;
wire   [0:0] icmp_ln785_63_fu_3621_p2;
wire   [0:0] or_ln785_64_fu_3627_p2;
wire   [9:0] trunc_ln746_47_fu_3595_p3;
wire   [2:0] tmp_122_fu_3647_p4;
wire   [6:0] tmp_59_fu_3673_p4;
wire   [0:0] tmp_730_fu_3665_p3;
wire   [0:0] icmp_ln785_64_fu_3683_p2;
wire   [0:0] or_ln785_65_fu_3689_p2;
wire   [9:0] trunc_ln746_48_fu_3657_p3;
wire   [2:0] tmp_123_fu_3709_p4;
wire   [6:0] tmp_60_fu_3735_p4;
wire   [0:0] tmp_731_fu_3727_p3;
wire   [0:0] icmp_ln785_65_fu_3745_p2;
wire   [0:0] or_ln785_66_fu_3751_p2;
wire   [9:0] trunc_ln746_49_fu_3719_p3;
wire   [2:0] tmp_124_fu_3771_p4;
wire   [6:0] tmp_61_fu_3797_p4;
wire   [0:0] tmp_732_fu_3789_p3;
wire   [0:0] icmp_ln785_66_fu_3807_p2;
wire   [0:0] or_ln785_67_fu_3813_p2;
wire   [9:0] trunc_ln746_50_fu_3781_p3;
wire   [2:0] tmp_125_fu_3833_p4;
wire   [6:0] tmp_62_fu_3859_p4;
wire   [0:0] tmp_733_fu_3851_p3;
wire   [0:0] icmp_ln785_67_fu_3869_p2;
wire   [0:0] or_ln785_68_fu_3875_p2;
wire   [9:0] trunc_ln746_51_fu_3843_p3;
wire   [2:0] tmp_126_fu_3895_p4;
wire   [6:0] tmp_63_fu_3921_p4;
wire   [0:0] tmp_734_fu_3913_p3;
wire   [0:0] icmp_ln785_68_fu_3931_p2;
wire   [0:0] or_ln785_69_fu_3937_p2;
wire   [9:0] trunc_ln746_52_fu_3905_p3;
wire   [2:0] tmp_127_fu_3957_p4;
wire   [6:0] tmp_64_fu_3983_p4;
wire   [0:0] tmp_735_fu_3975_p3;
wire   [0:0] icmp_ln785_69_fu_3993_p2;
wire   [0:0] or_ln785_70_fu_3999_p2;
wire   [9:0] trunc_ln746_53_fu_3967_p3;
wire   [2:0] tmp_128_fu_4019_p4;
wire   [6:0] tmp_65_fu_4045_p4;
wire   [0:0] tmp_736_fu_4037_p3;
wire   [0:0] icmp_ln785_70_fu_4055_p2;
wire   [0:0] or_ln785_71_fu_4061_p2;
wire   [9:0] trunc_ln746_54_fu_4029_p3;
wire   [2:0] tmp_129_fu_4081_p4;
wire   [6:0] tmp_66_fu_4107_p4;
wire   [0:0] tmp_737_fu_4099_p3;
wire   [0:0] icmp_ln785_71_fu_4117_p2;
wire   [0:0] or_ln785_72_fu_4123_p2;
wire   [9:0] trunc_ln746_55_fu_4091_p3;
wire   [2:0] tmp_130_fu_4143_p4;
wire   [6:0] tmp_67_fu_4169_p4;
wire   [0:0] tmp_738_fu_4161_p3;
wire   [0:0] icmp_ln785_72_fu_4179_p2;
wire   [0:0] or_ln785_73_fu_4185_p2;
wire   [9:0] trunc_ln746_56_fu_4153_p3;
wire   [2:0] tmp_131_fu_4205_p4;
wire   [6:0] tmp_68_fu_4231_p4;
wire   [0:0] tmp_739_fu_4223_p3;
wire   [0:0] icmp_ln785_73_fu_4241_p2;
wire   [0:0] or_ln785_74_fu_4247_p2;
wire   [9:0] trunc_ln746_57_fu_4215_p3;
wire   [2:0] tmp_132_fu_4267_p4;
wire   [6:0] tmp_69_fu_4293_p4;
wire   [0:0] tmp_740_fu_4285_p3;
wire   [0:0] icmp_ln785_74_fu_4303_p2;
wire   [0:0] or_ln785_75_fu_4309_p2;
wire   [9:0] trunc_ln746_58_fu_4277_p3;
wire   [2:0] tmp_133_fu_4329_p4;
wire   [6:0] tmp_70_fu_4355_p4;
wire   [0:0] tmp_741_fu_4347_p3;
wire   [0:0] icmp_ln785_75_fu_4365_p2;
wire   [0:0] or_ln785_76_fu_4371_p2;
wire   [9:0] trunc_ln746_59_fu_4339_p3;
wire   [2:0] tmp_134_fu_4391_p4;
wire   [6:0] tmp_71_fu_4417_p4;
wire   [0:0] tmp_742_fu_4409_p3;
wire   [0:0] icmp_ln785_76_fu_4427_p2;
wire   [0:0] or_ln785_77_fu_4433_p2;
wire   [9:0] trunc_ln746_60_fu_4401_p3;
wire   [2:0] tmp_135_fu_4453_p4;
wire   [6:0] tmp_72_fu_4479_p4;
wire   [0:0] tmp_743_fu_4471_p3;
wire   [0:0] icmp_ln785_77_fu_4489_p2;
wire   [0:0] or_ln785_78_fu_4495_p2;
wire   [9:0] trunc_ln746_61_fu_4463_p3;
wire   [2:0] tmp_136_fu_4515_p4;
wire   [6:0] tmp_73_fu_4541_p4;
wire   [0:0] tmp_744_fu_4533_p3;
wire   [0:0] icmp_ln785_78_fu_4551_p2;
wire   [0:0] or_ln785_79_fu_4557_p2;
wire   [9:0] trunc_ln746_62_fu_4525_p3;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln234_fu_589_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_554 <= i_fu_595_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_554 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln414_reg_4609 == 3'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_7_V_1_fu_526 <= m_axi_weights_all_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln414_reg_4609 == 3'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DATA_7_V_fu_522 <= m_axi_weights_all_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln647_reg_4589 <= add_ln647_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln234_fu_589_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln414_reg_4609 <= trunc_ln414_fu_601_p1;
    end
end

always @ (*) begin
    if ((icmp_ln234_fu_589_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_0_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_10_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_10_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_11_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_11_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_12_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_12_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_13_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_13_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_14_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_14_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_15_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_15_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_16_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_16_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_17_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_17_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_18_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_18_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_19_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_19_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_1_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_20_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_20_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_21_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_21_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_22_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_22_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_23_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_23_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_24_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_24_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_25_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_25_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_26_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_26_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_27_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_27_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_28_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_28_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_29_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_29_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_2_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_30_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_30_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_31_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_31_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_3_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_3_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_4_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_4_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_5_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_5_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_6_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_6_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_7_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_7_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_8_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_8_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_bias_buf_V_9_0_ap_vld = 1'b1;
    end else begin
        bn_bias_buf_V_9_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_0_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_0_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_10_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_10_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_11_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_11_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_12_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_12_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_13_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_13_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_14_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_14_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_15_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_15_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_16_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_16_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_17_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_17_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_18_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_18_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_19_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_19_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_1_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_1_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_20_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_20_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_21_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_21_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_22_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_22_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_23_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_23_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_24_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_24_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_25_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_25_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_26_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_26_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_27_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_27_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_28_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_28_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_29_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_29_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_2_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_2_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_30_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_30_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_31_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_31_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_3_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_3_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_4_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_4_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_5_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_5_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_6_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_6_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_7_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_7_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_8_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_8_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bn_weight_buf_V_9_0_ap_vld = 1'b1;
    end else begin
        bn_weight_buf_V_9_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_weights_all_V_ARVALID = 1'b1;
    end else begin
        m_axi_weights_all_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_weights_all_V_RREADY = 1'b1;
    end else begin
        m_axi_weights_all_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_all_V_blk_n_AR = m_axi_weights_all_V_ARREADY;
    end else begin
        weights_all_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_all_V_blk_n_R = m_axi_weights_all_V_RVALID;
    end else begin
        weights_all_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln234_fu_589_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln234_fu_589_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln647_fu_573_p2 = (zext_ln647_fu_565_p1 + zext_ln647_5_fu_569_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_weights_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_weights_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_weights_all_V_RVALID == 1'b0);
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bn_bias_buf_V_0_0 = ((or_ln785_17_fu_713_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_1_fu_681_p3);

assign bn_bias_buf_V_10_0 = ((or_ln785_37_fu_1953_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_20_fu_1921_p3);

assign bn_bias_buf_V_11_0 = ((or_ln785_39_fu_2077_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_22_fu_2045_p3);

assign bn_bias_buf_V_12_0 = ((or_ln785_41_fu_2201_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_24_fu_2169_p3);

assign bn_bias_buf_V_13_0 = ((or_ln785_43_fu_2325_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_26_fu_2293_p3);

assign bn_bias_buf_V_14_0 = ((or_ln785_45_fu_2449_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_28_fu_2417_p3);

assign bn_bias_buf_V_15_0 = ((or_ln785_47_fu_2573_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_30_fu_2541_p3);

assign bn_bias_buf_V_16_0 = ((or_ln785_49_fu_2697_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_32_fu_2665_p3);

assign bn_bias_buf_V_17_0 = ((or_ln785_51_fu_2821_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_34_fu_2789_p3);

assign bn_bias_buf_V_18_0 = ((or_ln785_53_fu_2945_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_36_fu_2913_p3);

assign bn_bias_buf_V_19_0 = ((or_ln785_55_fu_3069_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_38_fu_3037_p3);

assign bn_bias_buf_V_1_0 = ((or_ln785_19_fu_837_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_3_fu_805_p3);

assign bn_bias_buf_V_20_0 = ((or_ln785_57_fu_3193_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_40_fu_3161_p3);

assign bn_bias_buf_V_21_0 = ((or_ln785_59_fu_3317_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_42_fu_3285_p3);

assign bn_bias_buf_V_22_0 = ((or_ln785_61_fu_3441_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_44_fu_3409_p3);

assign bn_bias_buf_V_23_0 = ((or_ln785_63_fu_3565_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_46_fu_3533_p3);

assign bn_bias_buf_V_24_0 = ((or_ln785_65_fu_3689_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_48_fu_3657_p3);

assign bn_bias_buf_V_25_0 = ((or_ln785_67_fu_3813_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_50_fu_3781_p3);

assign bn_bias_buf_V_26_0 = ((or_ln785_69_fu_3937_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_52_fu_3905_p3);

assign bn_bias_buf_V_27_0 = ((or_ln785_71_fu_4061_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_54_fu_4029_p3);

assign bn_bias_buf_V_28_0 = ((or_ln785_73_fu_4185_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_56_fu_4153_p3);

assign bn_bias_buf_V_29_0 = ((or_ln785_75_fu_4309_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_58_fu_4277_p3);

assign bn_bias_buf_V_2_0 = ((or_ln785_21_fu_961_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_5_fu_929_p3);

assign bn_bias_buf_V_30_0 = ((or_ln785_77_fu_4433_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_60_fu_4401_p3);

assign bn_bias_buf_V_31_0 = ((or_ln785_79_fu_4557_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_62_fu_4525_p3);

assign bn_bias_buf_V_3_0 = ((or_ln785_23_fu_1085_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_7_fu_1053_p3);

assign bn_bias_buf_V_4_0 = ((or_ln785_25_fu_1209_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_9_fu_1177_p3);

assign bn_bias_buf_V_5_0 = ((or_ln785_27_fu_1333_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_10_fu_1301_p3);

assign bn_bias_buf_V_6_0 = ((or_ln785_29_fu_1457_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_12_fu_1425_p3);

assign bn_bias_buf_V_7_0 = ((or_ln785_31_fu_1581_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_14_fu_1549_p3);

assign bn_bias_buf_V_8_0 = ((or_ln785_33_fu_1705_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_16_fu_1673_p3);

assign bn_bias_buf_V_9_0 = ((or_ln785_35_fu_1829_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_18_fu_1797_p3);

assign bn_weight_buf_V_0_0 = ((or_ln785_fu_657_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln_fu_625_p3);

assign bn_weight_buf_V_10_0 = ((or_ln785_36_fu_1891_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_19_fu_1859_p3);

assign bn_weight_buf_V_11_0 = ((or_ln785_38_fu_2015_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_21_fu_1983_p3);

assign bn_weight_buf_V_12_0 = ((or_ln785_40_fu_2139_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_23_fu_2107_p3);

assign bn_weight_buf_V_13_0 = ((or_ln785_42_fu_2263_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_25_fu_2231_p3);

assign bn_weight_buf_V_14_0 = ((or_ln785_44_fu_2387_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_27_fu_2355_p3);

assign bn_weight_buf_V_15_0 = ((or_ln785_46_fu_2511_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_29_fu_2479_p3);

assign bn_weight_buf_V_16_0 = ((or_ln785_48_fu_2635_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_31_fu_2603_p3);

assign bn_weight_buf_V_17_0 = ((or_ln785_50_fu_2759_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_33_fu_2727_p3);

assign bn_weight_buf_V_18_0 = ((or_ln785_52_fu_2883_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_35_fu_2851_p3);

assign bn_weight_buf_V_19_0 = ((or_ln785_54_fu_3007_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_37_fu_2975_p3);

assign bn_weight_buf_V_1_0 = ((or_ln785_18_fu_775_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_2_fu_743_p3);

assign bn_weight_buf_V_20_0 = ((or_ln785_56_fu_3131_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_39_fu_3099_p3);

assign bn_weight_buf_V_21_0 = ((or_ln785_58_fu_3255_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_41_fu_3223_p3);

assign bn_weight_buf_V_22_0 = ((or_ln785_60_fu_3379_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_43_fu_3347_p3);

assign bn_weight_buf_V_23_0 = ((or_ln785_62_fu_3503_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_45_fu_3471_p3);

assign bn_weight_buf_V_24_0 = ((or_ln785_64_fu_3627_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_47_fu_3595_p3);

assign bn_weight_buf_V_25_0 = ((or_ln785_66_fu_3751_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_49_fu_3719_p3);

assign bn_weight_buf_V_26_0 = ((or_ln785_68_fu_3875_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_51_fu_3843_p3);

assign bn_weight_buf_V_27_0 = ((or_ln785_70_fu_3999_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_53_fu_3967_p3);

assign bn_weight_buf_V_28_0 = ((or_ln785_72_fu_4123_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_55_fu_4091_p3);

assign bn_weight_buf_V_29_0 = ((or_ln785_74_fu_4247_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_57_fu_4215_p3);

assign bn_weight_buf_V_2_0 = ((or_ln785_20_fu_899_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_4_fu_867_p3);

assign bn_weight_buf_V_30_0 = ((or_ln785_76_fu_4371_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_59_fu_4339_p3);

assign bn_weight_buf_V_31_0 = ((or_ln785_78_fu_4495_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_61_fu_4463_p3);

assign bn_weight_buf_V_3_0 = ((or_ln785_22_fu_1023_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_6_fu_991_p3);

assign bn_weight_buf_V_4_0 = ((or_ln785_24_fu_1147_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_8_fu_1115_p3);

assign bn_weight_buf_V_5_0 = ((or_ln785_26_fu_1271_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_s_fu_1239_p3);

assign bn_weight_buf_V_6_0 = ((or_ln785_28_fu_1395_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_11_fu_1363_p3);

assign bn_weight_buf_V_7_0 = ((or_ln785_30_fu_1519_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_13_fu_1487_p3);

assign bn_weight_buf_V_8_0 = ((or_ln785_32_fu_1643_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_15_fu_1611_p3);

assign bn_weight_buf_V_9_0 = ((or_ln785_34_fu_1767_p2[0:0] === 1'b1) ? 10'd1023 : trunc_ln746_17_fu_1735_p3);

assign i_fu_595_p2 = (i_0_reg_554 + 4'd1);

assign icmp_ln234_fu_589_p2 = ((i_0_reg_554 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln785_16_fu_707_p2 = ((tmp_s_fu_697_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_17_fu_769_p2 = ((tmp_12_fu_759_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_18_fu_831_p2 = ((tmp_13_fu_821_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_19_fu_893_p2 = ((tmp_14_fu_883_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_20_fu_955_p2 = ((tmp_15_fu_945_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_21_fu_1017_p2 = ((tmp_16_fu_1007_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_22_fu_1079_p2 = ((tmp_17_fu_1069_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_23_fu_1141_p2 = ((tmp_18_fu_1131_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_24_fu_1203_p2 = ((tmp_19_fu_1193_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_25_fu_1265_p2 = ((tmp_20_fu_1255_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_26_fu_1327_p2 = ((tmp_21_fu_1317_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_27_fu_1389_p2 = ((tmp_22_fu_1379_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_28_fu_1451_p2 = ((tmp_23_fu_1441_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_29_fu_1513_p2 = ((tmp_24_fu_1503_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_30_fu_1575_p2 = ((tmp_25_fu_1565_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_31_fu_1637_p2 = ((tmp_26_fu_1627_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_32_fu_1699_p2 = ((tmp_27_fu_1689_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_33_fu_1761_p2 = ((tmp_28_fu_1751_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_34_fu_1823_p2 = ((tmp_29_fu_1813_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_35_fu_1885_p2 = ((tmp_30_fu_1875_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_36_fu_1947_p2 = ((tmp_31_fu_1937_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_37_fu_2009_p2 = ((tmp_32_fu_1999_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_38_fu_2071_p2 = ((tmp_33_fu_2061_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_39_fu_2133_p2 = ((tmp_34_fu_2123_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_40_fu_2195_p2 = ((tmp_35_fu_2185_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_41_fu_2257_p2 = ((tmp_36_fu_2247_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_42_fu_2319_p2 = ((tmp_37_fu_2309_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_43_fu_2381_p2 = ((tmp_38_fu_2371_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_44_fu_2443_p2 = ((tmp_39_fu_2433_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_45_fu_2505_p2 = ((tmp_40_fu_2495_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_46_fu_2567_p2 = ((tmp_41_fu_2557_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_47_fu_2629_p2 = ((tmp_42_fu_2619_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_48_fu_2691_p2 = ((tmp_43_fu_2681_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_49_fu_2753_p2 = ((tmp_44_fu_2743_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_50_fu_2815_p2 = ((tmp_45_fu_2805_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_51_fu_2877_p2 = ((tmp_46_fu_2867_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_52_fu_2939_p2 = ((tmp_47_fu_2929_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_53_fu_3001_p2 = ((tmp_48_fu_2991_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_54_fu_3063_p2 = ((tmp_49_fu_3053_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_55_fu_3125_p2 = ((tmp_50_fu_3115_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_56_fu_3187_p2 = ((tmp_51_fu_3177_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_57_fu_3249_p2 = ((tmp_52_fu_3239_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_58_fu_3311_p2 = ((tmp_53_fu_3301_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_59_fu_3373_p2 = ((tmp_54_fu_3363_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_60_fu_3435_p2 = ((tmp_55_fu_3425_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_61_fu_3497_p2 = ((tmp_56_fu_3487_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_62_fu_3559_p2 = ((tmp_57_fu_3549_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_63_fu_3621_p2 = ((tmp_58_fu_3611_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_64_fu_3683_p2 = ((tmp_59_fu_3673_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_65_fu_3745_p2 = ((tmp_60_fu_3735_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_66_fu_3807_p2 = ((tmp_61_fu_3797_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_67_fu_3869_p2 = ((tmp_62_fu_3859_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_68_fu_3931_p2 = ((tmp_63_fu_3921_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_69_fu_3993_p2 = ((tmp_64_fu_3983_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_70_fu_4055_p2 = ((tmp_65_fu_4045_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_71_fu_4117_p2 = ((tmp_66_fu_4107_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_72_fu_4179_p2 = ((tmp_67_fu_4169_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_73_fu_4241_p2 = ((tmp_68_fu_4231_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_74_fu_4303_p2 = ((tmp_69_fu_4293_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_75_fu_4365_p2 = ((tmp_70_fu_4355_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_76_fu_4427_p2 = ((tmp_71_fu_4417_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_77_fu_4489_p2 = ((tmp_72_fu_4479_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_78_fu_4551_p2 = ((tmp_73_fu_4541_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_651_p2 = ((tmp_fu_641_p4 != 7'd0) ? 1'b1 : 1'b0);

assign m_axi_weights_all_V_ARADDR = zext_ln647_6_fu_579_p1;

assign m_axi_weights_all_V_ARBURST = 2'd0;

assign m_axi_weights_all_V_ARCACHE = 4'd0;

assign m_axi_weights_all_V_ARID = 1'd0;

assign m_axi_weights_all_V_ARLEN = 32'd8;

assign m_axi_weights_all_V_ARLOCK = 2'd0;

assign m_axi_weights_all_V_ARPROT = 3'd0;

assign m_axi_weights_all_V_ARQOS = 4'd0;

assign m_axi_weights_all_V_ARREGION = 4'd0;

assign m_axi_weights_all_V_ARSIZE = 3'd0;

assign m_axi_weights_all_V_ARUSER = 1'd0;

assign m_axi_weights_all_V_AWADDR = 32'd0;

assign m_axi_weights_all_V_AWBURST = 2'd0;

assign m_axi_weights_all_V_AWCACHE = 4'd0;

assign m_axi_weights_all_V_AWID = 1'd0;

assign m_axi_weights_all_V_AWLEN = 32'd0;

assign m_axi_weights_all_V_AWLOCK = 2'd0;

assign m_axi_weights_all_V_AWPROT = 3'd0;

assign m_axi_weights_all_V_AWQOS = 4'd0;

assign m_axi_weights_all_V_AWREGION = 4'd0;

assign m_axi_weights_all_V_AWSIZE = 3'd0;

assign m_axi_weights_all_V_AWUSER = 1'd0;

assign m_axi_weights_all_V_AWVALID = 1'b0;

assign m_axi_weights_all_V_BREADY = 1'b0;

assign m_axi_weights_all_V_WDATA = 512'd0;

assign m_axi_weights_all_V_WID = 1'd0;

assign m_axi_weights_all_V_WLAST = 1'b0;

assign m_axi_weights_all_V_WSTRB = 64'd0;

assign m_axi_weights_all_V_WUSER = 1'd0;

assign m_axi_weights_all_V_WVALID = 1'b0;

assign or_ln785_17_fu_713_p2 = (tmp_682_fu_689_p3 | icmp_ln785_16_fu_707_p2);

assign or_ln785_18_fu_775_p2 = (tmp_683_fu_751_p3 | icmp_ln785_17_fu_769_p2);

assign or_ln785_19_fu_837_p2 = (tmp_684_fu_813_p3 | icmp_ln785_18_fu_831_p2);

assign or_ln785_20_fu_899_p2 = (tmp_685_fu_875_p3 | icmp_ln785_19_fu_893_p2);

assign or_ln785_21_fu_961_p2 = (tmp_686_fu_937_p3 | icmp_ln785_20_fu_955_p2);

assign or_ln785_22_fu_1023_p2 = (tmp_687_fu_999_p3 | icmp_ln785_21_fu_1017_p2);

assign or_ln785_23_fu_1085_p2 = (tmp_688_fu_1061_p3 | icmp_ln785_22_fu_1079_p2);

assign or_ln785_24_fu_1147_p2 = (tmp_689_fu_1123_p3 | icmp_ln785_23_fu_1141_p2);

assign or_ln785_25_fu_1209_p2 = (tmp_690_fu_1185_p3 | icmp_ln785_24_fu_1203_p2);

assign or_ln785_26_fu_1271_p2 = (tmp_691_fu_1247_p3 | icmp_ln785_25_fu_1265_p2);

assign or_ln785_27_fu_1333_p2 = (tmp_692_fu_1309_p3 | icmp_ln785_26_fu_1327_p2);

assign or_ln785_28_fu_1395_p2 = (tmp_693_fu_1371_p3 | icmp_ln785_27_fu_1389_p2);

assign or_ln785_29_fu_1457_p2 = (tmp_694_fu_1433_p3 | icmp_ln785_28_fu_1451_p2);

assign or_ln785_30_fu_1519_p2 = (tmp_695_fu_1495_p3 | icmp_ln785_29_fu_1513_p2);

assign or_ln785_31_fu_1581_p2 = (tmp_696_fu_1557_p3 | icmp_ln785_30_fu_1575_p2);

assign or_ln785_32_fu_1643_p2 = (tmp_697_fu_1619_p3 | icmp_ln785_31_fu_1637_p2);

assign or_ln785_33_fu_1705_p2 = (tmp_698_fu_1681_p3 | icmp_ln785_32_fu_1699_p2);

assign or_ln785_34_fu_1767_p2 = (tmp_699_fu_1743_p3 | icmp_ln785_33_fu_1761_p2);

assign or_ln785_35_fu_1829_p2 = (tmp_700_fu_1805_p3 | icmp_ln785_34_fu_1823_p2);

assign or_ln785_36_fu_1891_p2 = (tmp_701_fu_1867_p3 | icmp_ln785_35_fu_1885_p2);

assign or_ln785_37_fu_1953_p2 = (tmp_702_fu_1929_p3 | icmp_ln785_36_fu_1947_p2);

assign or_ln785_38_fu_2015_p2 = (tmp_703_fu_1991_p3 | icmp_ln785_37_fu_2009_p2);

assign or_ln785_39_fu_2077_p2 = (tmp_704_fu_2053_p3 | icmp_ln785_38_fu_2071_p2);

assign or_ln785_40_fu_2139_p2 = (tmp_705_fu_2115_p3 | icmp_ln785_39_fu_2133_p2);

assign or_ln785_41_fu_2201_p2 = (tmp_706_fu_2177_p3 | icmp_ln785_40_fu_2195_p2);

assign or_ln785_42_fu_2263_p2 = (tmp_707_fu_2239_p3 | icmp_ln785_41_fu_2257_p2);

assign or_ln785_43_fu_2325_p2 = (tmp_708_fu_2301_p3 | icmp_ln785_42_fu_2319_p2);

assign or_ln785_44_fu_2387_p2 = (tmp_709_fu_2363_p3 | icmp_ln785_43_fu_2381_p2);

assign or_ln785_45_fu_2449_p2 = (tmp_710_fu_2425_p3 | icmp_ln785_44_fu_2443_p2);

assign or_ln785_46_fu_2511_p2 = (tmp_711_fu_2487_p3 | icmp_ln785_45_fu_2505_p2);

assign or_ln785_47_fu_2573_p2 = (tmp_712_fu_2549_p3 | icmp_ln785_46_fu_2567_p2);

assign or_ln785_48_fu_2635_p2 = (tmp_713_fu_2611_p3 | icmp_ln785_47_fu_2629_p2);

assign or_ln785_49_fu_2697_p2 = (tmp_714_fu_2673_p3 | icmp_ln785_48_fu_2691_p2);

assign or_ln785_50_fu_2759_p2 = (tmp_715_fu_2735_p3 | icmp_ln785_49_fu_2753_p2);

assign or_ln785_51_fu_2821_p2 = (tmp_716_fu_2797_p3 | icmp_ln785_50_fu_2815_p2);

assign or_ln785_52_fu_2883_p2 = (tmp_717_fu_2859_p3 | icmp_ln785_51_fu_2877_p2);

assign or_ln785_53_fu_2945_p2 = (tmp_718_fu_2921_p3 | icmp_ln785_52_fu_2939_p2);

assign or_ln785_54_fu_3007_p2 = (tmp_719_fu_2983_p3 | icmp_ln785_53_fu_3001_p2);

assign or_ln785_55_fu_3069_p2 = (tmp_720_fu_3045_p3 | icmp_ln785_54_fu_3063_p2);

assign or_ln785_56_fu_3131_p2 = (tmp_721_fu_3107_p3 | icmp_ln785_55_fu_3125_p2);

assign or_ln785_57_fu_3193_p2 = (tmp_722_fu_3169_p3 | icmp_ln785_56_fu_3187_p2);

assign or_ln785_58_fu_3255_p2 = (tmp_723_fu_3231_p3 | icmp_ln785_57_fu_3249_p2);

assign or_ln785_59_fu_3317_p2 = (tmp_724_fu_3293_p3 | icmp_ln785_58_fu_3311_p2);

assign or_ln785_60_fu_3379_p2 = (tmp_725_fu_3355_p3 | icmp_ln785_59_fu_3373_p2);

assign or_ln785_61_fu_3441_p2 = (tmp_726_fu_3417_p3 | icmp_ln785_60_fu_3435_p2);

assign or_ln785_62_fu_3503_p2 = (tmp_727_fu_3479_p3 | icmp_ln785_61_fu_3497_p2);

assign or_ln785_63_fu_3565_p2 = (tmp_728_fu_3541_p3 | icmp_ln785_62_fu_3559_p2);

assign or_ln785_64_fu_3627_p2 = (tmp_729_fu_3603_p3 | icmp_ln785_63_fu_3621_p2);

assign or_ln785_65_fu_3689_p2 = (tmp_730_fu_3665_p3 | icmp_ln785_64_fu_3683_p2);

assign or_ln785_66_fu_3751_p2 = (tmp_731_fu_3727_p3 | icmp_ln785_65_fu_3745_p2);

assign or_ln785_67_fu_3813_p2 = (tmp_732_fu_3789_p3 | icmp_ln785_66_fu_3807_p2);

assign or_ln785_68_fu_3875_p2 = (tmp_733_fu_3851_p3 | icmp_ln785_67_fu_3869_p2);

assign or_ln785_69_fu_3937_p2 = (tmp_734_fu_3913_p3 | icmp_ln785_68_fu_3931_p2);

assign or_ln785_70_fu_3999_p2 = (tmp_735_fu_3975_p3 | icmp_ln785_69_fu_3993_p2);

assign or_ln785_71_fu_4061_p2 = (tmp_736_fu_4037_p3 | icmp_ln785_70_fu_4055_p2);

assign or_ln785_72_fu_4123_p2 = (tmp_737_fu_4099_p3 | icmp_ln785_71_fu_4117_p2);

assign or_ln785_73_fu_4185_p2 = (tmp_738_fu_4161_p3 | icmp_ln785_72_fu_4179_p2);

assign or_ln785_74_fu_4247_p2 = (tmp_739_fu_4223_p3 | icmp_ln785_73_fu_4241_p2);

assign or_ln785_75_fu_4309_p2 = (tmp_740_fu_4285_p3 | icmp_ln785_74_fu_4303_p2);

assign or_ln785_76_fu_4371_p2 = (tmp_741_fu_4347_p3 | icmp_ln785_75_fu_4365_p2);

assign or_ln785_77_fu_4433_p2 = (tmp_742_fu_4409_p3 | icmp_ln785_76_fu_4427_p2);

assign or_ln785_78_fu_4495_p2 = (tmp_743_fu_4471_p3 | icmp_ln785_77_fu_4489_p2);

assign or_ln785_79_fu_4557_p2 = (tmp_744_fu_4533_p3 | icmp_ln785_78_fu_4551_p2);

assign or_ln785_fu_657_p2 = (tmp_681_fu_633_p3 | icmp_ln785_fu_651_p2);

assign tmp_100_fu_2283_p4 = {{DATA_7_V_1_fu_526[210:208]}};

assign tmp_101_fu_2345_p4 = {{DATA_7_V_fu_522[226:224]}};

assign tmp_102_fu_2407_p4 = {{DATA_7_V_1_fu_526[226:224]}};

assign tmp_103_fu_2469_p4 = {{DATA_7_V_fu_522[242:240]}};

assign tmp_104_fu_2531_p4 = {{DATA_7_V_1_fu_526[242:240]}};

assign tmp_105_fu_2593_p4 = {{DATA_7_V_fu_522[258:256]}};

assign tmp_106_fu_2655_p4 = {{DATA_7_V_1_fu_526[258:256]}};

assign tmp_107_fu_2717_p4 = {{DATA_7_V_fu_522[274:272]}};

assign tmp_108_fu_2779_p4 = {{DATA_7_V_1_fu_526[274:272]}};

assign tmp_109_fu_2841_p4 = {{DATA_7_V_fu_522[290:288]}};

assign tmp_110_fu_2903_p4 = {{DATA_7_V_1_fu_526[290:288]}};

assign tmp_111_fu_2965_p4 = {{DATA_7_V_fu_522[306:304]}};

assign tmp_112_fu_3027_p4 = {{DATA_7_V_1_fu_526[306:304]}};

assign tmp_113_fu_3089_p4 = {{DATA_7_V_fu_522[322:320]}};

assign tmp_114_fu_3151_p4 = {{DATA_7_V_1_fu_526[322:320]}};

assign tmp_115_fu_3213_p4 = {{DATA_7_V_fu_522[338:336]}};

assign tmp_116_fu_3275_p4 = {{DATA_7_V_1_fu_526[338:336]}};

assign tmp_117_fu_3337_p4 = {{DATA_7_V_fu_522[354:352]}};

assign tmp_118_fu_3399_p4 = {{DATA_7_V_1_fu_526[354:352]}};

assign tmp_119_fu_3461_p4 = {{DATA_7_V_fu_522[370:368]}};

assign tmp_120_fu_3523_p4 = {{DATA_7_V_1_fu_526[370:368]}};

assign tmp_121_fu_3585_p4 = {{DATA_7_V_fu_522[386:384]}};

assign tmp_122_fu_3647_p4 = {{DATA_7_V_1_fu_526[386:384]}};

assign tmp_123_fu_3709_p4 = {{DATA_7_V_fu_522[402:400]}};

assign tmp_124_fu_3771_p4 = {{DATA_7_V_1_fu_526[402:400]}};

assign tmp_125_fu_3833_p4 = {{DATA_7_V_fu_522[418:416]}};

assign tmp_126_fu_3895_p4 = {{DATA_7_V_1_fu_526[418:416]}};

assign tmp_127_fu_3957_p4 = {{DATA_7_V_fu_522[434:432]}};

assign tmp_128_fu_4019_p4 = {{DATA_7_V_1_fu_526[434:432]}};

assign tmp_129_fu_4081_p4 = {{DATA_7_V_fu_522[450:448]}};

assign tmp_12_fu_759_p4 = {{DATA_7_V_fu_522[26:20]}};

assign tmp_130_fu_4143_p4 = {{DATA_7_V_1_fu_526[450:448]}};

assign tmp_131_fu_4205_p4 = {{DATA_7_V_fu_522[466:464]}};

assign tmp_132_fu_4267_p4 = {{DATA_7_V_1_fu_526[466:464]}};

assign tmp_133_fu_4329_p4 = {{DATA_7_V_fu_522[482:480]}};

assign tmp_134_fu_4391_p4 = {{DATA_7_V_1_fu_526[482:480]}};

assign tmp_135_fu_4453_p4 = {{DATA_7_V_fu_522[498:496]}};

assign tmp_136_fu_4515_p4 = {{DATA_7_V_1_fu_526[498:496]}};

assign tmp_13_fu_821_p4 = {{DATA_7_V_1_fu_526[26:20]}};

assign tmp_14_fu_883_p4 = {{DATA_7_V_fu_522[42:36]}};

assign tmp_15_fu_945_p4 = {{DATA_7_V_1_fu_526[42:36]}};

assign tmp_16_fu_1007_p4 = {{DATA_7_V_fu_522[58:52]}};

assign tmp_17_fu_1069_p4 = {{DATA_7_V_1_fu_526[58:52]}};

assign tmp_18_fu_1131_p4 = {{DATA_7_V_fu_522[74:68]}};

assign tmp_19_fu_1193_p4 = {{DATA_7_V_1_fu_526[74:68]}};

assign tmp_20_fu_1255_p4 = {{DATA_7_V_fu_522[90:84]}};

assign tmp_21_fu_1317_p4 = {{DATA_7_V_1_fu_526[90:84]}};

assign tmp_22_fu_1379_p4 = {{DATA_7_V_fu_522[106:100]}};

assign tmp_23_fu_1441_p4 = {{DATA_7_V_1_fu_526[106:100]}};

assign tmp_24_fu_1503_p4 = {{DATA_7_V_fu_522[122:116]}};

assign tmp_25_fu_1565_p4 = {{DATA_7_V_1_fu_526[122:116]}};

assign tmp_26_fu_1627_p4 = {{DATA_7_V_fu_522[138:132]}};

assign tmp_27_fu_1689_p4 = {{DATA_7_V_1_fu_526[138:132]}};

assign tmp_28_fu_1751_p4 = {{DATA_7_V_fu_522[154:148]}};

assign tmp_29_fu_1813_p4 = {{DATA_7_V_1_fu_526[154:148]}};

assign tmp_30_fu_1875_p4 = {{DATA_7_V_fu_522[170:164]}};

assign tmp_31_fu_1937_p4 = {{DATA_7_V_1_fu_526[170:164]}};

assign tmp_32_fu_1999_p4 = {{DATA_7_V_fu_522[186:180]}};

assign tmp_33_fu_2061_p4 = {{DATA_7_V_1_fu_526[186:180]}};

assign tmp_34_fu_2123_p4 = {{DATA_7_V_fu_522[202:196]}};

assign tmp_35_fu_2185_p4 = {{DATA_7_V_1_fu_526[202:196]}};

assign tmp_36_fu_2247_p4 = {{DATA_7_V_fu_522[218:212]}};

assign tmp_37_fu_2309_p4 = {{DATA_7_V_1_fu_526[218:212]}};

assign tmp_38_fu_2371_p4 = {{DATA_7_V_fu_522[234:228]}};

assign tmp_39_fu_2433_p4 = {{DATA_7_V_1_fu_526[234:228]}};

assign tmp_40_fu_2495_p4 = {{DATA_7_V_fu_522[250:244]}};

assign tmp_41_fu_2557_p4 = {{DATA_7_V_1_fu_526[250:244]}};

assign tmp_42_fu_2619_p4 = {{DATA_7_V_fu_522[266:260]}};

assign tmp_43_fu_2681_p4 = {{DATA_7_V_1_fu_526[266:260]}};

assign tmp_44_fu_2743_p4 = {{DATA_7_V_fu_522[282:276]}};

assign tmp_45_fu_2805_p4 = {{DATA_7_V_1_fu_526[282:276]}};

assign tmp_46_fu_2867_p4 = {{DATA_7_V_fu_522[298:292]}};

assign tmp_47_fu_2929_p4 = {{DATA_7_V_1_fu_526[298:292]}};

assign tmp_48_fu_2991_p4 = {{DATA_7_V_fu_522[314:308]}};

assign tmp_49_fu_3053_p4 = {{DATA_7_V_1_fu_526[314:308]}};

assign tmp_50_fu_3115_p4 = {{DATA_7_V_fu_522[330:324]}};

assign tmp_51_fu_3177_p4 = {{DATA_7_V_1_fu_526[330:324]}};

assign tmp_52_fu_3239_p4 = {{DATA_7_V_fu_522[346:340]}};

assign tmp_53_fu_3301_p4 = {{DATA_7_V_1_fu_526[346:340]}};

assign tmp_54_fu_3363_p4 = {{DATA_7_V_fu_522[362:356]}};

assign tmp_55_fu_3425_p4 = {{DATA_7_V_1_fu_526[362:356]}};

assign tmp_56_fu_3487_p4 = {{DATA_7_V_fu_522[378:372]}};

assign tmp_57_fu_3549_p4 = {{DATA_7_V_1_fu_526[378:372]}};

assign tmp_58_fu_3611_p4 = {{DATA_7_V_fu_522[394:388]}};

assign tmp_59_fu_3673_p4 = {{DATA_7_V_1_fu_526[394:388]}};

assign tmp_60_fu_3735_p4 = {{DATA_7_V_fu_522[410:404]}};

assign tmp_61_fu_3797_p4 = {{DATA_7_V_1_fu_526[410:404]}};

assign tmp_62_fu_3859_p4 = {{DATA_7_V_fu_522[426:420]}};

assign tmp_63_fu_3921_p4 = {{DATA_7_V_1_fu_526[426:420]}};

assign tmp_64_fu_3983_p4 = {{DATA_7_V_fu_522[442:436]}};

assign tmp_65_fu_4045_p4 = {{DATA_7_V_1_fu_526[442:436]}};

assign tmp_66_fu_4107_p4 = {{DATA_7_V_fu_522[458:452]}};

assign tmp_67_fu_4169_p4 = {{DATA_7_V_1_fu_526[458:452]}};

assign tmp_681_fu_633_p3 = DATA_7_V_fu_522[32'd3];

assign tmp_682_fu_689_p3 = DATA_7_V_1_fu_526[32'd3];

assign tmp_683_fu_751_p3 = DATA_7_V_fu_522[32'd19];

assign tmp_684_fu_813_p3 = DATA_7_V_1_fu_526[32'd19];

assign tmp_685_fu_875_p3 = DATA_7_V_fu_522[32'd35];

assign tmp_686_fu_937_p3 = DATA_7_V_1_fu_526[32'd35];

assign tmp_687_fu_999_p3 = DATA_7_V_fu_522[32'd51];

assign tmp_688_fu_1061_p3 = DATA_7_V_1_fu_526[32'd51];

assign tmp_689_fu_1123_p3 = DATA_7_V_fu_522[32'd67];

assign tmp_68_fu_4231_p4 = {{DATA_7_V_fu_522[474:468]}};

assign tmp_690_fu_1185_p3 = DATA_7_V_1_fu_526[32'd67];

assign tmp_691_fu_1247_p3 = DATA_7_V_fu_522[32'd83];

assign tmp_692_fu_1309_p3 = DATA_7_V_1_fu_526[32'd83];

assign tmp_693_fu_1371_p3 = DATA_7_V_fu_522[32'd99];

assign tmp_694_fu_1433_p3 = DATA_7_V_1_fu_526[32'd99];

assign tmp_695_fu_1495_p3 = DATA_7_V_fu_522[32'd115];

assign tmp_696_fu_1557_p3 = DATA_7_V_1_fu_526[32'd115];

assign tmp_697_fu_1619_p3 = DATA_7_V_fu_522[32'd131];

assign tmp_698_fu_1681_p3 = DATA_7_V_1_fu_526[32'd131];

assign tmp_699_fu_1743_p3 = DATA_7_V_fu_522[32'd147];

assign tmp_69_fu_4293_p4 = {{DATA_7_V_1_fu_526[474:468]}};

assign tmp_700_fu_1805_p3 = DATA_7_V_1_fu_526[32'd147];

assign tmp_701_fu_1867_p3 = DATA_7_V_fu_522[32'd163];

assign tmp_702_fu_1929_p3 = DATA_7_V_1_fu_526[32'd163];

assign tmp_703_fu_1991_p3 = DATA_7_V_fu_522[32'd179];

assign tmp_704_fu_2053_p3 = DATA_7_V_1_fu_526[32'd179];

assign tmp_705_fu_2115_p3 = DATA_7_V_fu_522[32'd195];

assign tmp_706_fu_2177_p3 = DATA_7_V_1_fu_526[32'd195];

assign tmp_707_fu_2239_p3 = DATA_7_V_fu_522[32'd211];

assign tmp_708_fu_2301_p3 = DATA_7_V_1_fu_526[32'd211];

assign tmp_709_fu_2363_p3 = DATA_7_V_fu_522[32'd227];

assign tmp_70_fu_4355_p4 = {{DATA_7_V_fu_522[490:484]}};

assign tmp_710_fu_2425_p3 = DATA_7_V_1_fu_526[32'd227];

assign tmp_711_fu_2487_p3 = DATA_7_V_fu_522[32'd243];

assign tmp_712_fu_2549_p3 = DATA_7_V_1_fu_526[32'd243];

assign tmp_713_fu_2611_p3 = DATA_7_V_fu_522[32'd259];

assign tmp_714_fu_2673_p3 = DATA_7_V_1_fu_526[32'd259];

assign tmp_715_fu_2735_p3 = DATA_7_V_fu_522[32'd275];

assign tmp_716_fu_2797_p3 = DATA_7_V_1_fu_526[32'd275];

assign tmp_717_fu_2859_p3 = DATA_7_V_fu_522[32'd291];

assign tmp_718_fu_2921_p3 = DATA_7_V_1_fu_526[32'd291];

assign tmp_719_fu_2983_p3 = DATA_7_V_fu_522[32'd307];

assign tmp_71_fu_4417_p4 = {{DATA_7_V_1_fu_526[490:484]}};

assign tmp_720_fu_3045_p3 = DATA_7_V_1_fu_526[32'd307];

assign tmp_721_fu_3107_p3 = DATA_7_V_fu_522[32'd323];

assign tmp_722_fu_3169_p3 = DATA_7_V_1_fu_526[32'd323];

assign tmp_723_fu_3231_p3 = DATA_7_V_fu_522[32'd339];

assign tmp_724_fu_3293_p3 = DATA_7_V_1_fu_526[32'd339];

assign tmp_725_fu_3355_p3 = DATA_7_V_fu_522[32'd355];

assign tmp_726_fu_3417_p3 = DATA_7_V_1_fu_526[32'd355];

assign tmp_727_fu_3479_p3 = DATA_7_V_fu_522[32'd371];

assign tmp_728_fu_3541_p3 = DATA_7_V_1_fu_526[32'd371];

assign tmp_729_fu_3603_p3 = DATA_7_V_fu_522[32'd387];

assign tmp_72_fu_4479_p4 = {{DATA_7_V_fu_522[506:500]}};

assign tmp_730_fu_3665_p3 = DATA_7_V_1_fu_526[32'd387];

assign tmp_731_fu_3727_p3 = DATA_7_V_fu_522[32'd403];

assign tmp_732_fu_3789_p3 = DATA_7_V_1_fu_526[32'd403];

assign tmp_733_fu_3851_p3 = DATA_7_V_fu_522[32'd419];

assign tmp_734_fu_3913_p3 = DATA_7_V_1_fu_526[32'd419];

assign tmp_735_fu_3975_p3 = DATA_7_V_fu_522[32'd435];

assign tmp_736_fu_4037_p3 = DATA_7_V_1_fu_526[32'd435];

assign tmp_737_fu_4099_p3 = DATA_7_V_fu_522[32'd451];

assign tmp_738_fu_4161_p3 = DATA_7_V_1_fu_526[32'd451];

assign tmp_739_fu_4223_p3 = DATA_7_V_fu_522[32'd467];

assign tmp_73_fu_4541_p4 = {{DATA_7_V_1_fu_526[506:500]}};

assign tmp_740_fu_4285_p3 = DATA_7_V_1_fu_526[32'd467];

assign tmp_741_fu_4347_p3 = DATA_7_V_fu_522[32'd483];

assign tmp_742_fu_4409_p3 = DATA_7_V_1_fu_526[32'd483];

assign tmp_743_fu_4471_p3 = DATA_7_V_fu_522[32'd499];

assign tmp_744_fu_4533_p3 = DATA_7_V_1_fu_526[32'd499];

assign tmp_75_fu_733_p4 = {{DATA_7_V_fu_522[18:16]}};

assign tmp_76_fu_795_p4 = {{DATA_7_V_1_fu_526[18:16]}};

assign tmp_77_fu_857_p4 = {{DATA_7_V_fu_522[34:32]}};

assign tmp_78_fu_919_p4 = {{DATA_7_V_1_fu_526[34:32]}};

assign tmp_79_fu_981_p4 = {{DATA_7_V_fu_522[50:48]}};

assign tmp_80_fu_1043_p4 = {{DATA_7_V_1_fu_526[50:48]}};

assign tmp_81_fu_1105_p4 = {{DATA_7_V_fu_522[66:64]}};

assign tmp_82_fu_1167_p4 = {{DATA_7_V_1_fu_526[66:64]}};

assign tmp_83_fu_1229_p4 = {{DATA_7_V_fu_522[82:80]}};

assign tmp_84_fu_1291_p4 = {{DATA_7_V_1_fu_526[82:80]}};

assign tmp_85_fu_1353_p4 = {{DATA_7_V_fu_522[98:96]}};

assign tmp_86_fu_1415_p4 = {{DATA_7_V_1_fu_526[98:96]}};

assign tmp_87_fu_1477_p4 = {{DATA_7_V_fu_522[114:112]}};

assign tmp_88_fu_1539_p4 = {{DATA_7_V_1_fu_526[114:112]}};

assign tmp_89_fu_1601_p4 = {{DATA_7_V_fu_522[130:128]}};

assign tmp_90_fu_1663_p4 = {{DATA_7_V_1_fu_526[130:128]}};

assign tmp_91_fu_1725_p4 = {{DATA_7_V_fu_522[146:144]}};

assign tmp_92_fu_1787_p4 = {{DATA_7_V_1_fu_526[146:144]}};

assign tmp_93_fu_1849_p4 = {{DATA_7_V_fu_522[162:160]}};

assign tmp_94_fu_1911_p4 = {{DATA_7_V_1_fu_526[162:160]}};

assign tmp_95_fu_1973_p4 = {{DATA_7_V_fu_522[178:176]}};

assign tmp_96_fu_2035_p4 = {{DATA_7_V_1_fu_526[178:176]}};

assign tmp_97_fu_2097_p4 = {{DATA_7_V_fu_522[194:192]}};

assign tmp_98_fu_2159_p4 = {{DATA_7_V_1_fu_526[194:192]}};

assign tmp_99_fu_2221_p4 = {{DATA_7_V_fu_522[210:208]}};

assign tmp_fu_641_p4 = {{DATA_7_V_fu_522[10:4]}};

assign tmp_s_fu_697_p4 = {{DATA_7_V_1_fu_526[10:4]}};

assign trunc_ln414_fu_601_p1 = i_0_reg_554[2:0];

assign trunc_ln746_10_fu_1301_p3 = {{tmp_84_fu_1291_p4}, {7'd0}};

assign trunc_ln746_11_fu_1363_p3 = {{tmp_85_fu_1353_p4}, {7'd0}};

assign trunc_ln746_12_fu_1425_p3 = {{tmp_86_fu_1415_p4}, {7'd0}};

assign trunc_ln746_13_fu_1487_p3 = {{tmp_87_fu_1477_p4}, {7'd0}};

assign trunc_ln746_144_fu_677_p1 = DATA_7_V_1_fu_526[2:0];

assign trunc_ln746_14_fu_1549_p3 = {{tmp_88_fu_1539_p4}, {7'd0}};

assign trunc_ln746_15_fu_1611_p3 = {{tmp_89_fu_1601_p4}, {7'd0}};

assign trunc_ln746_16_fu_1673_p3 = {{tmp_90_fu_1663_p4}, {7'd0}};

assign trunc_ln746_17_fu_1735_p3 = {{tmp_91_fu_1725_p4}, {7'd0}};

assign trunc_ln746_18_fu_1797_p3 = {{tmp_92_fu_1787_p4}, {7'd0}};

assign trunc_ln746_19_fu_1859_p3 = {{tmp_93_fu_1849_p4}, {7'd0}};

assign trunc_ln746_1_fu_681_p3 = {{trunc_ln746_144_fu_677_p1}, {7'd0}};

assign trunc_ln746_20_fu_1921_p3 = {{tmp_94_fu_1911_p4}, {7'd0}};

assign trunc_ln746_21_fu_1983_p3 = {{tmp_95_fu_1973_p4}, {7'd0}};

assign trunc_ln746_22_fu_2045_p3 = {{tmp_96_fu_2035_p4}, {7'd0}};

assign trunc_ln746_23_fu_2107_p3 = {{tmp_97_fu_2097_p4}, {7'd0}};

assign trunc_ln746_24_fu_2169_p3 = {{tmp_98_fu_2159_p4}, {7'd0}};

assign trunc_ln746_25_fu_2231_p3 = {{tmp_99_fu_2221_p4}, {7'd0}};

assign trunc_ln746_26_fu_2293_p3 = {{tmp_100_fu_2283_p4}, {7'd0}};

assign trunc_ln746_27_fu_2355_p3 = {{tmp_101_fu_2345_p4}, {7'd0}};

assign trunc_ln746_28_fu_2417_p3 = {{tmp_102_fu_2407_p4}, {7'd0}};

assign trunc_ln746_29_fu_2479_p3 = {{tmp_103_fu_2469_p4}, {7'd0}};

assign trunc_ln746_2_fu_743_p3 = {{tmp_75_fu_733_p4}, {7'd0}};

assign trunc_ln746_30_fu_2541_p3 = {{tmp_104_fu_2531_p4}, {7'd0}};

assign trunc_ln746_31_fu_2603_p3 = {{tmp_105_fu_2593_p4}, {7'd0}};

assign trunc_ln746_32_fu_2665_p3 = {{tmp_106_fu_2655_p4}, {7'd0}};

assign trunc_ln746_33_fu_2727_p3 = {{tmp_107_fu_2717_p4}, {7'd0}};

assign trunc_ln746_34_fu_2789_p3 = {{tmp_108_fu_2779_p4}, {7'd0}};

assign trunc_ln746_35_fu_2851_p3 = {{tmp_109_fu_2841_p4}, {7'd0}};

assign trunc_ln746_36_fu_2913_p3 = {{tmp_110_fu_2903_p4}, {7'd0}};

assign trunc_ln746_37_fu_2975_p3 = {{tmp_111_fu_2965_p4}, {7'd0}};

assign trunc_ln746_38_fu_3037_p3 = {{tmp_112_fu_3027_p4}, {7'd0}};

assign trunc_ln746_39_fu_3099_p3 = {{tmp_113_fu_3089_p4}, {7'd0}};

assign trunc_ln746_3_fu_805_p3 = {{tmp_76_fu_795_p4}, {7'd0}};

assign trunc_ln746_40_fu_3161_p3 = {{tmp_114_fu_3151_p4}, {7'd0}};

assign trunc_ln746_41_fu_3223_p3 = {{tmp_115_fu_3213_p4}, {7'd0}};

assign trunc_ln746_42_fu_3285_p3 = {{tmp_116_fu_3275_p4}, {7'd0}};

assign trunc_ln746_43_fu_3347_p3 = {{tmp_117_fu_3337_p4}, {7'd0}};

assign trunc_ln746_44_fu_3409_p3 = {{tmp_118_fu_3399_p4}, {7'd0}};

assign trunc_ln746_45_fu_3471_p3 = {{tmp_119_fu_3461_p4}, {7'd0}};

assign trunc_ln746_46_fu_3533_p3 = {{tmp_120_fu_3523_p4}, {7'd0}};

assign trunc_ln746_47_fu_3595_p3 = {{tmp_121_fu_3585_p4}, {7'd0}};

assign trunc_ln746_48_fu_3657_p3 = {{tmp_122_fu_3647_p4}, {7'd0}};

assign trunc_ln746_49_fu_3719_p3 = {{tmp_123_fu_3709_p4}, {7'd0}};

assign trunc_ln746_4_fu_867_p3 = {{tmp_77_fu_857_p4}, {7'd0}};

assign trunc_ln746_50_fu_3781_p3 = {{tmp_124_fu_3771_p4}, {7'd0}};

assign trunc_ln746_51_fu_3843_p3 = {{tmp_125_fu_3833_p4}, {7'd0}};

assign trunc_ln746_52_fu_3905_p3 = {{tmp_126_fu_3895_p4}, {7'd0}};

assign trunc_ln746_53_fu_3967_p3 = {{tmp_127_fu_3957_p4}, {7'd0}};

assign trunc_ln746_54_fu_4029_p3 = {{tmp_128_fu_4019_p4}, {7'd0}};

assign trunc_ln746_55_fu_4091_p3 = {{tmp_129_fu_4081_p4}, {7'd0}};

assign trunc_ln746_56_fu_4153_p3 = {{tmp_130_fu_4143_p4}, {7'd0}};

assign trunc_ln746_57_fu_4215_p3 = {{tmp_131_fu_4205_p4}, {7'd0}};

assign trunc_ln746_58_fu_4277_p3 = {{tmp_132_fu_4267_p4}, {7'd0}};

assign trunc_ln746_59_fu_4339_p3 = {{tmp_133_fu_4329_p4}, {7'd0}};

assign trunc_ln746_5_fu_929_p3 = {{tmp_78_fu_919_p4}, {7'd0}};

assign trunc_ln746_60_fu_4401_p3 = {{tmp_134_fu_4391_p4}, {7'd0}};

assign trunc_ln746_61_fu_4463_p3 = {{tmp_135_fu_4453_p4}, {7'd0}};

assign trunc_ln746_62_fu_4525_p3 = {{tmp_136_fu_4515_p4}, {7'd0}};

assign trunc_ln746_6_fu_991_p3 = {{tmp_79_fu_981_p4}, {7'd0}};

assign trunc_ln746_7_fu_1053_p3 = {{tmp_80_fu_1043_p4}, {7'd0}};

assign trunc_ln746_8_fu_1115_p3 = {{tmp_81_fu_1105_p4}, {7'd0}};

assign trunc_ln746_9_fu_1177_p3 = {{tmp_82_fu_1167_p4}, {7'd0}};

assign trunc_ln746_fu_621_p1 = DATA_7_V_fu_522[2:0];

assign trunc_ln746_s_fu_1239_p3 = {{tmp_83_fu_1229_p4}, {7'd0}};

assign trunc_ln_fu_625_p3 = {{trunc_ln746_fu_621_p1}, {7'd0}};

assign zext_ln647_5_fu_569_p1 = weights_all_V_offset;

assign zext_ln647_6_fu_579_p1 = add_ln647_reg_4589;

assign zext_ln647_fu_565_p1 = weights_all_index;

endmodule //load_others
