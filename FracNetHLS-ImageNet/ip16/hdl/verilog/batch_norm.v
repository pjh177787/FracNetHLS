// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module batch_norm (
        ap_clk,
        ap_rst,
        sum_V,
        weight_V,
        bias_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [5:0] sum_V;
input  [10:0] weight_V;
input  [10:0] bias_V;
output  [13:0] ap_return;
input   ap_ce;

reg[13:0] ap_return;

reg   [10:0] bias_V_read_reg_134;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [17:0] trunc_ln1118_fu_58_p1;
reg   [17:0] trunc_ln1118_reg_140;
wire   [12:0] trunc_ln731_fu_61_p1;
reg   [12:0] trunc_ln731_reg_145;
wire    ap_block_pp0_stage0;
wire  signed [7:0] sum_V_cast_fu_46_p1;
wire   [18:0] r_V_4_fu_126_p2;
wire   [17:0] zext_ln1192_fu_64_p1;
wire   [12:0] zext_ln731_fu_72_p1;
wire   [12:0] add_ln731_fu_75_p2;
wire   [17:0] ret_V_fu_67_p2;
wire   [4:0] tmp_fu_96_p4;
wire   [0:0] p_Result_s_fu_88_p3;
wire   [0:0] icmp_ln785_fu_106_p2;
wire   [0:0] overflow_fu_112_p2;
wire   [13:0] p_Val2_12_fu_80_p3;
wire   [7:0] r_V_4_fu_126_p0;
wire   [10:0] r_V_4_fu_126_p1;
wire   [13:0] select_ln340_fu_118_p3;
reg    ap_ce_reg;
reg   [13:0] ap_return_int_reg;
wire   [18:0] r_V_4_fu_126_p00;
wire   [18:0] r_V_4_fu_126_p10;

FracNet_mul_mul_8hbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
FracNet_mul_mul_8hbi_U164(
    .din0(r_V_4_fu_126_p0),
    .din1(r_V_4_fu_126_p1),
    .dout(r_V_4_fu_126_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= select_ln340_fu_118_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1))) begin
        bias_V_read_reg_134 <= bias_V;
        trunc_ln1118_reg_140 <= trunc_ln1118_fu_58_p1;
        trunc_ln731_reg_145 <= trunc_ln731_fu_61_p1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = select_ln340_fu_118_p3;
    end
end

assign add_ln731_fu_75_p2 = (zext_ln731_fu_72_p1 + trunc_ln731_reg_145);

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign icmp_ln785_fu_106_p2 = ((tmp_fu_96_p4 != 5'd0) ? 1'b1 : 1'b0);

assign overflow_fu_112_p2 = (p_Result_s_fu_88_p3 | icmp_ln785_fu_106_p2);

assign p_Result_s_fu_88_p3 = add_ln731_fu_75_p2[32'd12];

assign p_Val2_12_fu_80_p3 = {{add_ln731_fu_75_p2}, {1'd0}};

assign r_V_4_fu_126_p0 = r_V_4_fu_126_p00;

assign r_V_4_fu_126_p00 = $unsigned(sum_V_cast_fu_46_p1);

assign r_V_4_fu_126_p1 = r_V_4_fu_126_p10;

assign r_V_4_fu_126_p10 = weight_V;

assign ret_V_fu_67_p2 = (zext_ln1192_fu_64_p1 + trunc_ln1118_reg_140);

assign select_ln340_fu_118_p3 = ((overflow_fu_112_p2[0:0] === 1'b1) ? 14'd8191 : p_Val2_12_fu_80_p3);

assign sum_V_cast_fu_46_p1 = $signed(sum_V);

assign tmp_fu_96_p4 = {{ret_V_fu_67_p2[17:13]}};

assign trunc_ln1118_fu_58_p1 = r_V_4_fu_126_p2[17:0];

assign trunc_ln731_fu_61_p1 = r_V_4_fu_126_p2[12:0];

assign zext_ln1192_fu_64_p1 = bias_V_read_reg_134;

assign zext_ln731_fu_72_p1 = bias_V_read_reg_134;

endmodule //batch_norm
