-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row : IN STD_LOGIC_VECTOR (1 downto 0);
    col : IN STD_LOGIC_VECTOR (1 downto 0);
    c : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_AWVALID : OUT STD_LOGIC;
    m_axi_img_V_AWREADY : IN STD_LOGIC;
    m_axi_img_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_WVALID : OUT STD_LOGIC;
    m_axi_img_V_WREADY : IN STD_LOGIC;
    m_axi_img_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_WLAST : OUT STD_LOGIC;
    m_axi_img_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_ARVALID : OUT STD_LOGIC;
    m_axi_img_V_ARREADY : IN STD_LOGIC;
    m_axi_img_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_img_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_img_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RVALID : IN STD_LOGIC;
    m_axi_img_V_RREADY : OUT STD_LOGIC;
    m_axi_img_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_img_V_RLAST : IN STD_LOGIC;
    m_axi_img_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_BVALID : IN STD_LOGIC;
    m_axi_img_V_BREADY : OUT STD_LOGIC;
    m_axi_img_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_img_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_img_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    img_V_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    pg_buf_all_in_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    pg_buf_all_in_V_ce0 : OUT STD_LOGIC;
    pg_buf_all_in_V_we0 : OUT STD_LOGIC;
    pg_buf_all_in_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of load_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_32C4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011001011000100";
    constant ap_const_lv17_C784 : STD_LOGIC_VECTOR (16 downto 0) := "01100011110000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv14_32C4 : STD_LOGIC_VECTOR (13 downto 0) := "11001011000100";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv17_62E0 : STD_LOGIC_VECTOR (16 downto 0) := "00110001011100000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln397_reg_267 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_121 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_0_reg_121_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal mul_ln396_fu_137_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln396_reg_246 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_238_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln405_reg_251 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln209_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln209_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln397_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln397_reg_267_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_223_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_271 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal img_V_addr_read_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_125_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln406_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln209_1_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln396_fu_137_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_147_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln396_1_fu_159_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln396_2_fu_155_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln396_3_fu_167_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln396_fu_171_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln405_fu_188_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln405_fu_185_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln405_1_fu_191_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln209_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_V_offset_cast_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_238_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln396_fu_137_p00 : STD_LOGIC_VECTOR (16 downto 0);

    component FracNet_mac_muladbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    FracNet_mac_muladbkb_U1 : component FracNet_mac_muladbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        din2_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        din2 => sub_ln396_fu_171_p2,
        dout => grp_fu_238_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_reg_267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_121 <= i_reg_271;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_121 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln209_reg_256 <= add_ln209_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln405_reg_251 <= grp_fu_238_p3;
                    mul_ln396_reg_246(16 downto 2) <= mul_ln396_fu_137_p2(16 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_0_reg_121_pp0_iter1_reg <= i_0_reg_121;
                icmp_ln397_reg_267 <= icmp_ln397_fu_217_p2;
                icmp_ln397_reg_267_pp0_iter1_reg <= icmp_ln397_reg_267;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_271 <= i_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln397_reg_267 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                img_V_addr_read_reg_276 <= m_axi_img_V_RDATA;
            end if;
        end if;
    end process;
    mul_ln396_reg_246(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_img_V_ARREADY, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, icmp_ln397_fu_217_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((m_axi_img_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln397_fu_217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln397_fu_217_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln209_fu_201_p2 <= std_logic_vector(signed(sext_ln209_fu_197_p1) + signed(img_V_offset_cast_fu_181_p1));
    add_ln405_1_fu_191_p2 <= std_logic_vector(unsigned(zext_ln405_fu_188_p1) + unsigned(sext_ln405_fu_185_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_img_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln397_reg_267)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln397_reg_267 = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_img_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln397_reg_267)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln397_reg_267 = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_img_V_RVALID, icmp_ln397_reg_267)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((icmp_ln397_reg_267 = ap_const_lv1_0) and (m_axi_img_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln397_fu_217_p2)
    begin
        if ((icmp_ln397_fu_217_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_125_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln397_reg_267, i_0_reg_121, i_reg_271)
    begin
        if (((icmp_ln397_reg_267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_125_p4 <= i_reg_271;
        else 
            ap_phi_mux_i_0_phi_fu_125_p4 <= i_0_reg_121;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_238_p0 <= grp_fu_238_p00(2 - 1 downto 0);
    grp_fu_238_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row),17));
    grp_fu_238_p1 <= ap_const_lv17_62E0(16 - 1 downto 0);
    i_fu_223_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_125_p4) + unsigned(ap_const_lv14_1));
    icmp_ln397_fu_217_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_125_p4 = ap_const_lv14_32C4) else "0";

    img_V_blk_n_AR_assign_proc : process(m_axi_img_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_V_blk_n_AR <= m_axi_img_V_ARREADY;
        else 
            img_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    img_V_blk_n_R_assign_proc : process(m_axi_img_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln397_reg_267)
    begin
        if (((icmp_ln397_reg_267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_V_blk_n_R <= m_axi_img_V_RVALID;
        else 
            img_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    img_V_offset_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_V_offset),32));
    m_axi_img_V_ARADDR <= sext_ln209_1_fu_207_p1(32 - 1 downto 0);
    m_axi_img_V_ARBURST <= ap_const_lv2_0;
    m_axi_img_V_ARCACHE <= ap_const_lv4_0;
    m_axi_img_V_ARID <= ap_const_lv1_0;
    m_axi_img_V_ARLEN <= ap_const_lv32_32C4;
    m_axi_img_V_ARLOCK <= ap_const_lv2_0;
    m_axi_img_V_ARPROT <= ap_const_lv3_0;
    m_axi_img_V_ARQOS <= ap_const_lv4_0;
    m_axi_img_V_ARREGION <= ap_const_lv4_0;
    m_axi_img_V_ARSIZE <= ap_const_lv3_0;
    m_axi_img_V_ARUSER <= ap_const_lv1_0;

    m_axi_img_V_ARVALID_assign_proc : process(m_axi_img_V_ARREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_img_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_img_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_img_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_img_V_AWADDR <= ap_const_lv32_0;
    m_axi_img_V_AWBURST <= ap_const_lv2_0;
    m_axi_img_V_AWCACHE <= ap_const_lv4_0;
    m_axi_img_V_AWID <= ap_const_lv1_0;
    m_axi_img_V_AWLEN <= ap_const_lv32_0;
    m_axi_img_V_AWLOCK <= ap_const_lv2_0;
    m_axi_img_V_AWPROT <= ap_const_lv3_0;
    m_axi_img_V_AWQOS <= ap_const_lv4_0;
    m_axi_img_V_AWREGION <= ap_const_lv4_0;
    m_axi_img_V_AWSIZE <= ap_const_lv3_0;
    m_axi_img_V_AWUSER <= ap_const_lv1_0;
    m_axi_img_V_AWVALID <= ap_const_logic_0;
    m_axi_img_V_BREADY <= ap_const_logic_0;

    m_axi_img_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln397_reg_267, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln397_reg_267 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_img_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_img_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_img_V_WDATA <= ap_const_lv32_0;
    m_axi_img_V_WID <= ap_const_lv1_0;
    m_axi_img_V_WLAST <= ap_const_logic_0;
    m_axi_img_V_WSTRB <= ap_const_lv4_0;
    m_axi_img_V_WUSER <= ap_const_lv1_0;
    m_axi_img_V_WVALID <= ap_const_logic_0;
    mul_ln396_fu_137_p0 <= mul_ln396_fu_137_p00(2 - 1 downto 0);
    mul_ln396_fu_137_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c),17));
    mul_ln396_fu_137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln396_fu_137_p0) * unsigned(ap_const_lv17_C784), 17));
    pg_buf_all_in_V_address0 <= zext_ln406_fu_229_p1(14 - 1 downto 0);

    pg_buf_all_in_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pg_buf_all_in_V_ce0 <= ap_const_logic_1;
        else 
            pg_buf_all_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pg_buf_all_in_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_V_addr_read_reg_276),64));

    pg_buf_all_in_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln397_reg_267_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln397_reg_267_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            pg_buf_all_in_V_we0 <= ap_const_logic_1;
        else 
            pg_buf_all_in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln209_1_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln209_reg_256),64));

        sext_ln209_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln405_1_fu_191_p2),32));

        sext_ln405_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln405_reg_251),19));

    shl_ln396_1_fu_159_p3 <= (col & ap_const_lv4_0);
    shl_ln_fu_147_p3 <= (col & ap_const_lv7_0);
    sub_ln396_fu_171_p2 <= std_logic_vector(unsigned(zext_ln396_2_fu_155_p1) - unsigned(zext_ln396_3_fu_167_p1));
    zext_ln396_2_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_147_p3),10));
    zext_ln396_3_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln396_1_fu_159_p3),10));
    zext_ln405_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln396_reg_246),19));
    zext_ln406_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_121_pp0_iter1_reg),64));
end behav;
