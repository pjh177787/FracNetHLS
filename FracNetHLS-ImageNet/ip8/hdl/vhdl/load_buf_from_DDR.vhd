-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_buf_from_DDR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_src_V_AWVALID : OUT STD_LOGIC;
    m_axi_src_V_AWREADY : IN STD_LOGIC;
    m_axi_src_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_WVALID : OUT STD_LOGIC;
    m_axi_src_V_WREADY : IN STD_LOGIC;
    m_axi_src_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_src_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_src_V_WLAST : OUT STD_LOGIC;
    m_axi_src_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_ARVALID : OUT STD_LOGIC;
    m_axi_src_V_ARREADY : IN STD_LOGIC;
    m_axi_src_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_src_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_src_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_src_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RVALID : IN STD_LOGIC;
    m_axi_src_V_RREADY : OUT STD_LOGIC;
    m_axi_src_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_src_V_RLAST : IN STD_LOGIC;
    m_axi_src_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_BVALID : IN STD_LOGIC;
    m_axi_src_V_BREADY : OUT STD_LOGIC;
    m_axi_src_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_src_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_src_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    src_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    dest_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_0_V_ce0 : OUT STD_LOGIC;
    dest_0_V_we0 : OUT STD_LOGIC;
    dest_0_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_1_V_ce0 : OUT STD_LOGIC;
    dest_1_V_we0 : OUT STD_LOGIC;
    dest_1_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_2_V_ce0 : OUT STD_LOGIC;
    dest_2_V_we0 : OUT STD_LOGIC;
    dest_2_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_3_V_ce0 : OUT STD_LOGIC;
    dest_3_V_we0 : OUT STD_LOGIC;
    dest_3_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_4_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_4_V_ce0 : OUT STD_LOGIC;
    dest_4_V_we0 : OUT STD_LOGIC;
    dest_4_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_5_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_5_V_ce0 : OUT STD_LOGIC;
    dest_5_V_we0 : OUT STD_LOGIC;
    dest_5_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_6_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_6_V_ce0 : OUT STD_LOGIC;
    dest_6_V_we0 : OUT STD_LOGIC;
    dest_6_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_7_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_7_V_ce0 : OUT STD_LOGIC;
    dest_7_V_we0 : OUT STD_LOGIC;
    dest_7_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_8_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_8_V_ce0 : OUT STD_LOGIC;
    dest_8_V_we0 : OUT STD_LOGIC;
    dest_8_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_9_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_9_V_ce0 : OUT STD_LOGIC;
    dest_9_V_we0 : OUT STD_LOGIC;
    dest_9_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_10_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_10_V_ce0 : OUT STD_LOGIC;
    dest_10_V_we0 : OUT STD_LOGIC;
    dest_10_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_11_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_11_V_ce0 : OUT STD_LOGIC;
    dest_11_V_we0 : OUT STD_LOGIC;
    dest_11_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_12_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_12_V_ce0 : OUT STD_LOGIC;
    dest_12_V_we0 : OUT STD_LOGIC;
    dest_12_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_13_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_13_V_ce0 : OUT STD_LOGIC;
    dest_13_V_we0 : OUT STD_LOGIC;
    dest_13_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_14_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_14_V_ce0 : OUT STD_LOGIC;
    dest_14_V_we0 : OUT STD_LOGIC;
    dest_14_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_15_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_15_V_ce0 : OUT STD_LOGIC;
    dest_15_V_we0 : OUT STD_LOGIC;
    dest_15_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_16_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_16_V_ce0 : OUT STD_LOGIC;
    dest_16_V_we0 : OUT STD_LOGIC;
    dest_16_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_17_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_17_V_ce0 : OUT STD_LOGIC;
    dest_17_V_we0 : OUT STD_LOGIC;
    dest_17_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_18_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_18_V_ce0 : OUT STD_LOGIC;
    dest_18_V_we0 : OUT STD_LOGIC;
    dest_18_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_19_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_19_V_ce0 : OUT STD_LOGIC;
    dest_19_V_we0 : OUT STD_LOGIC;
    dest_19_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_20_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_20_V_ce0 : OUT STD_LOGIC;
    dest_20_V_we0 : OUT STD_LOGIC;
    dest_20_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_21_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_21_V_ce0 : OUT STD_LOGIC;
    dest_21_V_we0 : OUT STD_LOGIC;
    dest_21_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_22_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_22_V_ce0 : OUT STD_LOGIC;
    dest_22_V_we0 : OUT STD_LOGIC;
    dest_22_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_23_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_23_V_ce0 : OUT STD_LOGIC;
    dest_23_V_we0 : OUT STD_LOGIC;
    dest_23_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_24_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_24_V_ce0 : OUT STD_LOGIC;
    dest_24_V_we0 : OUT STD_LOGIC;
    dest_24_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_25_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_25_V_ce0 : OUT STD_LOGIC;
    dest_25_V_we0 : OUT STD_LOGIC;
    dest_25_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_26_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_26_V_ce0 : OUT STD_LOGIC;
    dest_26_V_we0 : OUT STD_LOGIC;
    dest_26_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_27_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_27_V_ce0 : OUT STD_LOGIC;
    dest_27_V_we0 : OUT STD_LOGIC;
    dest_27_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_28_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_28_V_ce0 : OUT STD_LOGIC;
    dest_28_V_we0 : OUT STD_LOGIC;
    dest_28_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_29_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_29_V_ce0 : OUT STD_LOGIC;
    dest_29_V_we0 : OUT STD_LOGIC;
    dest_29_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_30_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_30_V_ce0 : OUT STD_LOGIC;
    dest_30_V_we0 : OUT STD_LOGIC;
    dest_30_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    dest_31_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dest_31_V_ce0 : OUT STD_LOGIC;
    dest_31_V_we0 : OUT STD_LOGIC;
    dest_31_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    row_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    col_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    ch_offset : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of load_buf_from_DDR is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv18_25880 : STD_LOGIC_VECTOR (17 downto 0) := "100101100010000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv7_62 : STD_LOGIC_VECTOR (6 downto 0) := "1100010";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv15_35E2 : STD_LOGIC_VECTOR (14 downto 0) := "011010111100010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv10_72 : STD_LOGIC_VECTOR (9 downto 0) := "0001110010";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001000";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011000";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_128 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101000";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111000";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_148 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001000";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011000";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_168 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101000";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_178 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111000";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_188 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001000";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_198 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011000";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101000";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111000";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001000";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011000";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101000";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111000";
    constant ap_const_lv18_32C4 : STD_LOGIC_VECTOR (17 downto 0) := "000011001011000100";
    constant ap_const_lv16_31E : STD_LOGIC_VECTOR (15 downto 0) := "0000001100011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_V_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal empty_44_reg_1604 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal icmp_ln87_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten37_reg_742 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal src_ptr_0_rec_reg_754 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_765 : STD_LOGIC_VECTOR (5 downto 0);
    signal src_ptr_1_rec_reg_776 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_0_reg_787 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_0_reg_798 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln85_fu_1482_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln85_reg_1496 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1488_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln91_reg_1501 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln87_fu_851_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln87_reg_1506 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln91_2_fu_871_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln91_2_reg_1512 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln91_1_fu_875_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln91_1_reg_1517 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln87_fu_879_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln87_reg_1522 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln87_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_1527_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln87_fu_902_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln87_reg_1531 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln88_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln91_3_fu_936_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_3_reg_1541 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_4_fu_941_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_4_reg_1546 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln88_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_reg_1551 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln87_fu_965_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln87_reg_1556 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln99_fu_973_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln99_reg_1562 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln88_3_fu_991_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_3_reg_1567_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_fu_999_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter16_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter17_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_4_reg_1572_pp0_iter18_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_6_fu_1007_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal w_fu_1021_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln88_7_fu_1033_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln88_1_fu_1074_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter2_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter3_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter4_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter5_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter6_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter7_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter8_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln88_1_reg_1594_pp0_iter9_reg : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln91_7_fu_1082_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln91_7_reg_1599 : STD_LOGIC_VECTOR (27 downto 0);
    signal empty_44_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_1103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_reg_1614 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_reg_1619 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_2_reg_1624 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_3_reg_1629 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_4_reg_1634 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_reg_1639 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_6_reg_1644 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_7_reg_1649 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_8_reg_1654 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_reg_1659 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_reg_1664 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_reg_1669 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_11_reg_1674 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_12_reg_1679 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_13_reg_1684 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_14_reg_1689 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_15_reg_1694 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_16_reg_1699 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_17_reg_1704 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_18_reg_1709 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_19_reg_1714 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_20_reg_1719 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_21_reg_1724 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_22_reg_1729 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_23_reg_1734 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_24_reg_1739 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_25_reg_1744 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_26_reg_1749 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_27_reg_1754 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_28_reg_1759 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_29_reg_1764 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_30_reg_1769 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten37_phi_fu_746_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_h_0_phi_fu_791_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_8_fu_1446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln91_4_fu_1093_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln85_fu_825_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_829_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln85_3_fu_837_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln85_4_fu_841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln85_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln91_3_fu_855_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln91_1_fu_862_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln91_fu_858_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln91_2_fu_865_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln88_fu_883_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_1_fu_887_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln101_fu_908_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln91_fu_892_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln89_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln88_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln88_fu_920_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln88_1_fu_928_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln88_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_979_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1015_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_2_fu_1027_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln88_1_fu_1046_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_5_fu_1049_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln91_2_fu_1054_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln91_6_fu_1058_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln88_2_fu_1041_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln88_5_fu_1063_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln88_fu_1070_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln88_1_fu_1079_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1015_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_553_fu_1420_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_1427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln88_2_fu_1417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_7_fu_1437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_1431_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_5_fu_1440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln85_fu_1482_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln85_fu_1482_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1488_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1488_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1015_ce : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1488_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln85_fu_1482_p10 : STD_LOGIC_VECTOR (17 downto 0);

    component FracNet_urem_7ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component FracNet_mul_mul_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component FracNet_mac_muladjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    FracNet_urem_7ns_hbi_U447 : component FracNet_urem_7ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 4,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten37_phi_fu_746_p4,
        din1 => grp_fu_1015_p1,
        ce => grp_fu_1015_ce,
        dout => grp_fu_1015_p2);

    FracNet_mul_mul_1ibs_U448 : component FracNet_mul_mul_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 5,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln85_fu_1482_p0,
        din1 => mul_ln85_fu_1482_p1,
        dout => mul_ln85_fu_1482_p2);

    FracNet_mac_muladjbC_U449 : component FracNet_mac_muladjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_1488_p0,
        din1 => grp_fu_1488_p1,
        din2 => grp_fu_1488_p2,
        dout => grp_fu_1488_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    h_0_reg_787_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                h_0_reg_787 <= select_ln88_4_reg_1572;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h_0_reg_787 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    indvar_flatten37_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten37_reg_742 <= add_ln87_reg_1531;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten37_reg_742 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_765_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_765 <= select_ln88_7_fu_1033_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_765 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    src_ptr_0_rec_reg_754_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                src_ptr_0_rec_reg_754 <= select_ln87_reg_1556;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                src_ptr_0_rec_reg_754 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    src_ptr_1_rec_reg_776_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                src_ptr_1_rec_reg_776 <= select_ln88_6_fu_1007_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                src_ptr_1_rec_reg_776 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    w_0_reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_0_reg_798 <= w_fu_1021_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                w_0_reg_798 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln87_reg_1531 <= add_ln87_fu_902_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln88_1_reg_1594 <= add_ln88_1_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln88_1_reg_1594_pp0_iter2_reg <= add_ln88_1_reg_1594;
                add_ln88_1_reg_1594_pp0_iter3_reg <= add_ln88_1_reg_1594_pp0_iter2_reg;
                add_ln88_1_reg_1594_pp0_iter4_reg <= add_ln88_1_reg_1594_pp0_iter3_reg;
                add_ln88_1_reg_1594_pp0_iter5_reg <= add_ln88_1_reg_1594_pp0_iter4_reg;
                add_ln88_1_reg_1594_pp0_iter6_reg <= add_ln88_1_reg_1594_pp0_iter5_reg;
                add_ln88_1_reg_1594_pp0_iter7_reg <= add_ln88_1_reg_1594_pp0_iter6_reg;
                add_ln88_1_reg_1594_pp0_iter8_reg <= add_ln88_1_reg_1594_pp0_iter7_reg;
                add_ln88_1_reg_1594_pp0_iter9_reg <= add_ln88_1_reg_1594_pp0_iter8_reg;
                icmp_ln87_reg_1527_pp0_iter10_reg <= icmp_ln87_reg_1527_pp0_iter9_reg;
                icmp_ln87_reg_1527_pp0_iter11_reg <= icmp_ln87_reg_1527_pp0_iter10_reg;
                icmp_ln87_reg_1527_pp0_iter12_reg <= icmp_ln87_reg_1527_pp0_iter11_reg;
                icmp_ln87_reg_1527_pp0_iter13_reg <= icmp_ln87_reg_1527_pp0_iter12_reg;
                icmp_ln87_reg_1527_pp0_iter14_reg <= icmp_ln87_reg_1527_pp0_iter13_reg;
                icmp_ln87_reg_1527_pp0_iter15_reg <= icmp_ln87_reg_1527_pp0_iter14_reg;
                icmp_ln87_reg_1527_pp0_iter16_reg <= icmp_ln87_reg_1527_pp0_iter15_reg;
                icmp_ln87_reg_1527_pp0_iter17_reg <= icmp_ln87_reg_1527_pp0_iter16_reg;
                icmp_ln87_reg_1527_pp0_iter18_reg <= icmp_ln87_reg_1527_pp0_iter17_reg;
                icmp_ln87_reg_1527_pp0_iter2_reg <= icmp_ln87_reg_1527_pp0_iter1_reg;
                icmp_ln87_reg_1527_pp0_iter3_reg <= icmp_ln87_reg_1527_pp0_iter2_reg;
                icmp_ln87_reg_1527_pp0_iter4_reg <= icmp_ln87_reg_1527_pp0_iter3_reg;
                icmp_ln87_reg_1527_pp0_iter5_reg <= icmp_ln87_reg_1527_pp0_iter4_reg;
                icmp_ln87_reg_1527_pp0_iter6_reg <= icmp_ln87_reg_1527_pp0_iter5_reg;
                icmp_ln87_reg_1527_pp0_iter7_reg <= icmp_ln87_reg_1527_pp0_iter6_reg;
                icmp_ln87_reg_1527_pp0_iter8_reg <= icmp_ln87_reg_1527_pp0_iter7_reg;
                icmp_ln87_reg_1527_pp0_iter9_reg <= icmp_ln87_reg_1527_pp0_iter8_reg;
                select_ln88_3_reg_1567_pp0_iter10_reg <= select_ln88_3_reg_1567_pp0_iter9_reg;
                select_ln88_3_reg_1567_pp0_iter11_reg <= select_ln88_3_reg_1567_pp0_iter10_reg;
                select_ln88_3_reg_1567_pp0_iter12_reg <= select_ln88_3_reg_1567_pp0_iter11_reg;
                select_ln88_3_reg_1567_pp0_iter13_reg <= select_ln88_3_reg_1567_pp0_iter12_reg;
                select_ln88_3_reg_1567_pp0_iter14_reg <= select_ln88_3_reg_1567_pp0_iter13_reg;
                select_ln88_3_reg_1567_pp0_iter15_reg <= select_ln88_3_reg_1567_pp0_iter14_reg;
                select_ln88_3_reg_1567_pp0_iter16_reg <= select_ln88_3_reg_1567_pp0_iter15_reg;
                select_ln88_3_reg_1567_pp0_iter17_reg <= select_ln88_3_reg_1567_pp0_iter16_reg;
                select_ln88_3_reg_1567_pp0_iter18_reg <= select_ln88_3_reg_1567_pp0_iter17_reg;
                select_ln88_3_reg_1567_pp0_iter2_reg <= select_ln88_3_reg_1567_pp0_iter1_reg;
                select_ln88_3_reg_1567_pp0_iter3_reg <= select_ln88_3_reg_1567_pp0_iter2_reg;
                select_ln88_3_reg_1567_pp0_iter4_reg <= select_ln88_3_reg_1567_pp0_iter3_reg;
                select_ln88_3_reg_1567_pp0_iter5_reg <= select_ln88_3_reg_1567_pp0_iter4_reg;
                select_ln88_3_reg_1567_pp0_iter6_reg <= select_ln88_3_reg_1567_pp0_iter5_reg;
                select_ln88_3_reg_1567_pp0_iter7_reg <= select_ln88_3_reg_1567_pp0_iter6_reg;
                select_ln88_3_reg_1567_pp0_iter8_reg <= select_ln88_3_reg_1567_pp0_iter7_reg;
                select_ln88_3_reg_1567_pp0_iter9_reg <= select_ln88_3_reg_1567_pp0_iter8_reg;
                select_ln88_4_reg_1572_pp0_iter10_reg <= select_ln88_4_reg_1572_pp0_iter9_reg;
                select_ln88_4_reg_1572_pp0_iter11_reg <= select_ln88_4_reg_1572_pp0_iter10_reg;
                select_ln88_4_reg_1572_pp0_iter12_reg <= select_ln88_4_reg_1572_pp0_iter11_reg;
                select_ln88_4_reg_1572_pp0_iter13_reg <= select_ln88_4_reg_1572_pp0_iter12_reg;
                select_ln88_4_reg_1572_pp0_iter14_reg <= select_ln88_4_reg_1572_pp0_iter13_reg;
                select_ln88_4_reg_1572_pp0_iter15_reg <= select_ln88_4_reg_1572_pp0_iter14_reg;
                select_ln88_4_reg_1572_pp0_iter16_reg <= select_ln88_4_reg_1572_pp0_iter15_reg;
                select_ln88_4_reg_1572_pp0_iter17_reg <= select_ln88_4_reg_1572_pp0_iter16_reg;
                select_ln88_4_reg_1572_pp0_iter18_reg <= select_ln88_4_reg_1572_pp0_iter17_reg;
                select_ln88_4_reg_1572_pp0_iter2_reg <= select_ln88_4_reg_1572_pp0_iter1_reg;
                select_ln88_4_reg_1572_pp0_iter3_reg <= select_ln88_4_reg_1572_pp0_iter2_reg;
                select_ln88_4_reg_1572_pp0_iter4_reg <= select_ln88_4_reg_1572_pp0_iter3_reg;
                select_ln88_4_reg_1572_pp0_iter5_reg <= select_ln88_4_reg_1572_pp0_iter4_reg;
                select_ln88_4_reg_1572_pp0_iter6_reg <= select_ln88_4_reg_1572_pp0_iter5_reg;
                select_ln88_4_reg_1572_pp0_iter7_reg <= select_ln88_4_reg_1572_pp0_iter6_reg;
                select_ln88_4_reg_1572_pp0_iter8_reg <= select_ln88_4_reg_1572_pp0_iter7_reg;
                select_ln88_4_reg_1572_pp0_iter9_reg <= select_ln88_4_reg_1572_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln91_3_reg_1541 <= add_ln91_3_fu_936_p2;
                add_ln91_4_reg_1546 <= add_ln91_4_fu_941_p2;
                add_ln99_reg_1562 <= add_ln99_fu_973_p2;
                and_ln88_reg_1551 <= and_ln88_fu_959_p2;
                icmp_ln88_reg_1536 <= icmp_ln88_fu_914_p2;
                select_ln88_3_reg_1567 <= select_ln88_3_fu_991_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln91_7_reg_1599 <= add_ln91_7_fu_1082_p2;
                empty_44_reg_1604 <= empty_44_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln91_reg_1501 <= grp_fu_1488_p3;
                mul_ln85_reg_1496 <= mul_ln85_fu_1482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln87_reg_1527 <= icmp_ln87_fu_896_p2;
                icmp_ln87_reg_1527_pp0_iter1_reg <= icmp_ln87_reg_1527;
                select_ln88_3_reg_1567_pp0_iter1_reg <= select_ln88_3_reg_1567;
                select_ln88_4_reg_1572_pp0_iter1_reg <= select_ln88_4_reg_1572;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_10_reg_1669 <= m_axi_src_V_RDATA(184 downto 176);
                p_Result_11_reg_1674 <= m_axi_src_V_RDATA(200 downto 192);
                p_Result_12_reg_1679 <= m_axi_src_V_RDATA(216 downto 208);
                p_Result_13_reg_1684 <= m_axi_src_V_RDATA(232 downto 224);
                p_Result_14_reg_1689 <= m_axi_src_V_RDATA(248 downto 240);
                p_Result_15_reg_1694 <= m_axi_src_V_RDATA(264 downto 256);
                p_Result_16_reg_1699 <= m_axi_src_V_RDATA(280 downto 272);
                p_Result_17_reg_1704 <= m_axi_src_V_RDATA(296 downto 288);
                p_Result_18_reg_1709 <= m_axi_src_V_RDATA(312 downto 304);
                p_Result_19_reg_1714 <= m_axi_src_V_RDATA(328 downto 320);
                p_Result_1_reg_1619 <= m_axi_src_V_RDATA(24 downto 16);
                p_Result_20_reg_1719 <= m_axi_src_V_RDATA(344 downto 336);
                p_Result_21_reg_1724 <= m_axi_src_V_RDATA(360 downto 352);
                p_Result_22_reg_1729 <= m_axi_src_V_RDATA(376 downto 368);
                p_Result_23_reg_1734 <= m_axi_src_V_RDATA(392 downto 384);
                p_Result_24_reg_1739 <= m_axi_src_V_RDATA(408 downto 400);
                p_Result_25_reg_1744 <= m_axi_src_V_RDATA(424 downto 416);
                p_Result_26_reg_1749 <= m_axi_src_V_RDATA(440 downto 432);
                p_Result_27_reg_1754 <= m_axi_src_V_RDATA(456 downto 448);
                p_Result_28_reg_1759 <= m_axi_src_V_RDATA(472 downto 464);
                p_Result_29_reg_1764 <= m_axi_src_V_RDATA(488 downto 480);
                p_Result_2_reg_1624 <= m_axi_src_V_RDATA(40 downto 32);
                p_Result_30_reg_1769 <= m_axi_src_V_RDATA(504 downto 496);
                p_Result_3_reg_1629 <= m_axi_src_V_RDATA(56 downto 48);
                p_Result_4_reg_1634 <= m_axi_src_V_RDATA(72 downto 64);
                p_Result_5_reg_1639 <= m_axi_src_V_RDATA(88 downto 80);
                p_Result_6_reg_1644 <= m_axi_src_V_RDATA(104 downto 96);
                p_Result_7_reg_1649 <= m_axi_src_V_RDATA(120 downto 112);
                p_Result_8_reg_1654 <= m_axi_src_V_RDATA(136 downto 128);
                p_Result_9_reg_1659 <= m_axi_src_V_RDATA(152 downto 144);
                p_Result_s_reg_1664 <= m_axi_src_V_RDATA(168 downto 160);
                trunc_ln647_reg_1614 <= trunc_ln647_fu_1103_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_896_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln87_reg_1556 <= select_ln87_fu_965_p3;
                select_ln88_4_reg_1572 <= select_ln88_4_fu_999_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln87_reg_1506 <= sext_ln87_fu_851_p1;
                sext_ln91_1_reg_1517 <= sext_ln91_1_fu_875_p1;
                    zext_ln87_reg_1522(25 downto 0) <= zext_ln87_fu_879_p1(25 downto 0);
                    zext_ln91_2_reg_1512(19 downto 0) <= zext_ln91_2_fu_871_p1(19 downto 0);
            end if;
        end if;
    end process;
    zext_ln91_2_reg_1512(20) <= '0';
    zext_ln87_reg_1522(27 downto 26) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter18, icmp_ln87_fu_896_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln87_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln87_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln101_fu_908_p2 <= std_logic_vector(unsigned(ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4) + unsigned(ap_const_lv15_35E2));
    add_ln203_5_fu_1440_p2 <= std_logic_vector(unsigned(zext_ln203_7_fu_1437_p1) + unsigned(add_ln203_fu_1431_p2));
    add_ln203_fu_1431_p2 <= std_logic_vector(unsigned(zext_ln203_fu_1427_p1) + unsigned(zext_ln88_2_fu_1417_p1));
    add_ln87_fu_902_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten37_phi_fu_746_p4) + unsigned(ap_const_lv7_1));
    add_ln88_1_fu_1074_p2 <= std_logic_vector(unsigned(zext_ln91_2_reg_1512) + unsigned(sext_ln88_fu_1070_p1));
    add_ln88_2_fu_1027_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten_reg_765));
    add_ln91_1_fu_887_p2 <= std_logic_vector(unsigned(zext_ln88_fu_883_p1) + unsigned(sext_ln87_reg_1506));
    add_ln91_2_fu_865_p2 <= std_logic_vector(unsigned(zext_ln91_1_fu_862_p1) + unsigned(zext_ln91_fu_858_p1));
    add_ln91_3_fu_936_p2 <= std_logic_vector(signed(sext_ln91_1_reg_1517) + signed(add_ln101_fu_908_p2));
    add_ln91_4_fu_941_p2 <= std_logic_vector(signed(sext_ln91_fu_892_p1) + signed(ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4));
    add_ln91_5_fu_1049_p2 <= std_logic_vector(unsigned(zext_ln88_1_fu_1046_p1) + unsigned(sext_ln87_reg_1506));
    add_ln91_6_fu_1058_p2 <= std_logic_vector(signed(sext_ln91_2_fu_1054_p1) + signed(select_ln87_reg_1556));
    add_ln91_7_fu_1082_p2 <= std_logic_vector(signed(sext_ln88_1_fu_1079_p1) + signed(zext_ln87_reg_1522));
    add_ln99_fu_973_p2 <= std_logic_vector(unsigned(select_ln88_fu_920_p3) + unsigned(ap_const_lv10_72));
    and_ln88_fu_959_p2 <= (xor_ln88_fu_947_p2 and icmp_ln89_fu_953_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_src_V_RVALID, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, icmp_ln87_reg_1527_pp0_iter17_reg, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_src_V_RVALID, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, icmp_ln87_reg_1527_pp0_iter17_reg, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state14_io)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(m_axi_src_V_ARREADY, empty_44_reg_1604)
    begin
                ap_block_state14_io <= ((empty_44_reg_1604 = ap_const_lv1_1) and (m_axi_src_V_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter18_assign_proc : process(m_axi_src_V_RVALID, icmp_ln87_reg_1527_pp0_iter17_reg)
    begin
                ap_block_state21_pp0_stage0_iter18 <= ((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (m_axi_src_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln87_fu_896_p2)
    begin
        if ((icmp_ln87_fu_896_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_791_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln87_reg_1527, ap_CS_fsm_pp0_stage0, h_0_reg_787, select_ln88_4_reg_1572, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_h_0_phi_fu_791_p4 <= select_ln88_4_reg_1572;
        else 
            ap_phi_mux_h_0_phi_fu_791_p4 <= h_0_reg_787;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten37_phi_fu_746_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln87_reg_1527, indvar_flatten37_reg_742, ap_CS_fsm_pp0_stage0, add_ln87_reg_1531, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten37_phi_fu_746_p4 <= add_ln87_reg_1531;
        else 
            ap_phi_mux_indvar_flatten37_phi_fu_746_p4 <= indvar_flatten37_reg_742;
        end if; 
    end process;


    ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln87_reg_1527, ap_CS_fsm_pp0_stage0, src_ptr_0_rec_reg_754, select_ln87_reg_1556, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln87_reg_1527 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4 <= select_ln87_reg_1556;
        else 
            ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4 <= src_ptr_0_rec_reg_754;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dest_0_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_0_V_ce0 <= ap_const_logic_1;
        else 
            dest_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_0_V_d0 <= trunc_ln647_reg_1614;

    dest_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_0_V_we0 <= ap_const_logic_1;
        else 
            dest_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_10_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_10_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_10_V_ce0 <= ap_const_logic_1;
        else 
            dest_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_10_V_d0 <= p_Result_s_reg_1664;

    dest_10_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_10_V_we0 <= ap_const_logic_1;
        else 
            dest_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_11_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_11_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_11_V_ce0 <= ap_const_logic_1;
        else 
            dest_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_11_V_d0 <= p_Result_10_reg_1669;

    dest_11_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_11_V_we0 <= ap_const_logic_1;
        else 
            dest_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_12_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_12_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_12_V_ce0 <= ap_const_logic_1;
        else 
            dest_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_12_V_d0 <= p_Result_11_reg_1674;

    dest_12_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_12_V_we0 <= ap_const_logic_1;
        else 
            dest_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_13_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_13_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_13_V_ce0 <= ap_const_logic_1;
        else 
            dest_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_13_V_d0 <= p_Result_12_reg_1679;

    dest_13_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_13_V_we0 <= ap_const_logic_1;
        else 
            dest_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_14_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_14_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_14_V_ce0 <= ap_const_logic_1;
        else 
            dest_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_14_V_d0 <= p_Result_13_reg_1684;

    dest_14_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_14_V_we0 <= ap_const_logic_1;
        else 
            dest_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_15_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_15_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_15_V_ce0 <= ap_const_logic_1;
        else 
            dest_15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_15_V_d0 <= p_Result_14_reg_1689;

    dest_15_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_15_V_we0 <= ap_const_logic_1;
        else 
            dest_15_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_16_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_16_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_16_V_ce0 <= ap_const_logic_1;
        else 
            dest_16_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_16_V_d0 <= p_Result_15_reg_1694;

    dest_16_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_16_V_we0 <= ap_const_logic_1;
        else 
            dest_16_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_17_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_17_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_17_V_ce0 <= ap_const_logic_1;
        else 
            dest_17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_17_V_d0 <= p_Result_16_reg_1699;

    dest_17_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_17_V_we0 <= ap_const_logic_1;
        else 
            dest_17_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_18_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_18_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_18_V_ce0 <= ap_const_logic_1;
        else 
            dest_18_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_18_V_d0 <= p_Result_17_reg_1704;

    dest_18_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_18_V_we0 <= ap_const_logic_1;
        else 
            dest_18_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_19_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_19_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_19_V_ce0 <= ap_const_logic_1;
        else 
            dest_19_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_19_V_d0 <= p_Result_18_reg_1709;

    dest_19_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_19_V_we0 <= ap_const_logic_1;
        else 
            dest_19_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_1_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_1_V_ce0 <= ap_const_logic_1;
        else 
            dest_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_1_V_d0 <= p_Result_1_reg_1619;

    dest_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_1_V_we0 <= ap_const_logic_1;
        else 
            dest_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_20_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_20_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_20_V_ce0 <= ap_const_logic_1;
        else 
            dest_20_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_20_V_d0 <= p_Result_19_reg_1714;

    dest_20_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_20_V_we0 <= ap_const_logic_1;
        else 
            dest_20_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_21_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_21_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_21_V_ce0 <= ap_const_logic_1;
        else 
            dest_21_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_21_V_d0 <= p_Result_20_reg_1719;

    dest_21_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_21_V_we0 <= ap_const_logic_1;
        else 
            dest_21_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_22_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_22_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_22_V_ce0 <= ap_const_logic_1;
        else 
            dest_22_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_22_V_d0 <= p_Result_21_reg_1724;

    dest_22_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_22_V_we0 <= ap_const_logic_1;
        else 
            dest_22_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_23_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_23_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_23_V_ce0 <= ap_const_logic_1;
        else 
            dest_23_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_23_V_d0 <= p_Result_22_reg_1729;

    dest_23_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_23_V_we0 <= ap_const_logic_1;
        else 
            dest_23_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_24_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_24_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_24_V_ce0 <= ap_const_logic_1;
        else 
            dest_24_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_24_V_d0 <= p_Result_23_reg_1734;

    dest_24_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_24_V_we0 <= ap_const_logic_1;
        else 
            dest_24_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_25_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_25_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_25_V_ce0 <= ap_const_logic_1;
        else 
            dest_25_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_25_V_d0 <= p_Result_24_reg_1739;

    dest_25_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_25_V_we0 <= ap_const_logic_1;
        else 
            dest_25_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_26_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_26_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_26_V_ce0 <= ap_const_logic_1;
        else 
            dest_26_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_26_V_d0 <= p_Result_25_reg_1744;

    dest_26_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_26_V_we0 <= ap_const_logic_1;
        else 
            dest_26_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_27_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_27_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_27_V_ce0 <= ap_const_logic_1;
        else 
            dest_27_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_27_V_d0 <= p_Result_26_reg_1749;

    dest_27_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_27_V_we0 <= ap_const_logic_1;
        else 
            dest_27_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_28_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_28_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_28_V_ce0 <= ap_const_logic_1;
        else 
            dest_28_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_28_V_d0 <= p_Result_27_reg_1754;

    dest_28_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_28_V_we0 <= ap_const_logic_1;
        else 
            dest_28_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_29_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_29_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_29_V_ce0 <= ap_const_logic_1;
        else 
            dest_29_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_29_V_d0 <= p_Result_28_reg_1759;

    dest_29_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_29_V_we0 <= ap_const_logic_1;
        else 
            dest_29_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_2_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_2_V_ce0 <= ap_const_logic_1;
        else 
            dest_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_2_V_d0 <= p_Result_2_reg_1624;

    dest_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_2_V_we0 <= ap_const_logic_1;
        else 
            dest_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_30_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_30_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_30_V_ce0 <= ap_const_logic_1;
        else 
            dest_30_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_30_V_d0 <= p_Result_29_reg_1764;

    dest_30_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_30_V_we0 <= ap_const_logic_1;
        else 
            dest_30_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_31_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_31_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_31_V_ce0 <= ap_const_logic_1;
        else 
            dest_31_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_31_V_d0 <= p_Result_30_reg_1769;

    dest_31_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_31_V_we0 <= ap_const_logic_1;
        else 
            dest_31_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_3_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_3_V_ce0 <= ap_const_logic_1;
        else 
            dest_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_3_V_d0 <= p_Result_3_reg_1629;

    dest_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_3_V_we0 <= ap_const_logic_1;
        else 
            dest_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_4_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_4_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_4_V_ce0 <= ap_const_logic_1;
        else 
            dest_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_4_V_d0 <= p_Result_4_reg_1634;

    dest_4_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_4_V_we0 <= ap_const_logic_1;
        else 
            dest_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_5_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_5_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_5_V_ce0 <= ap_const_logic_1;
        else 
            dest_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_5_V_d0 <= p_Result_5_reg_1639;

    dest_5_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_5_V_we0 <= ap_const_logic_1;
        else 
            dest_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_6_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_6_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_6_V_ce0 <= ap_const_logic_1;
        else 
            dest_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_6_V_d0 <= p_Result_6_reg_1644;

    dest_6_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_6_V_we0 <= ap_const_logic_1;
        else 
            dest_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_7_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_7_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_7_V_ce0 <= ap_const_logic_1;
        else 
            dest_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_7_V_d0 <= p_Result_7_reg_1649;

    dest_7_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_7_V_we0 <= ap_const_logic_1;
        else 
            dest_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_8_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_8_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_8_V_ce0 <= ap_const_logic_1;
        else 
            dest_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_8_V_d0 <= p_Result_8_reg_1654;

    dest_8_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_8_V_we0 <= ap_const_logic_1;
        else 
            dest_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_9_V_address0 <= zext_ln203_8_fu_1446_p1(7 - 1 downto 0);

    dest_9_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_9_V_ce0 <= ap_const_logic_1;
        else 
            dest_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dest_9_V_d0 <= p_Result_9_reg_1659;

    dest_9_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_1527_pp0_iter18_reg, ap_enable_reg_pp0_iter19)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            dest_9_V_we0 <= ap_const_logic_1;
        else 
            dest_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_44_fu_1087_p2 <= "1" when (grp_fu_1015_p2 = ap_const_lv7_0) else "0";

    grp_fu_1015_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1015_ce <= ap_const_logic_1;
        else 
            grp_fu_1015_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1015_p1 <= ap_const_lv7_7(4 - 1 downto 0);
    grp_fu_1488_p0 <= ap_const_lv16_31E(11 - 1 downto 0);
    grp_fu_1488_p1 <= grp_fu_1488_p10(5 - 1 downto 0);
    grp_fu_1488_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_offset),16));
    grp_fu_1488_p2 <= 
        ap_const_lv18_25880 when (src_offset(0) = '1') else 
        ap_const_lv18_0;
    h_fu_979_p2 <= std_logic_vector(unsigned(select_ln88_1_fu_928_p3) + unsigned(ap_const_lv4_1));
    icmp_ln87_fu_896_p2 <= "1" when (ap_phi_mux_indvar_flatten37_phi_fu_746_p4 = ap_const_lv7_62) else "0";
    icmp_ln88_fu_914_p2 <= "1" when (indvar_flatten_reg_765 = ap_const_lv6_31) else "0";
    icmp_ln89_fu_953_p2 <= "1" when (w_0_reg_798 = ap_const_lv4_8) else "0";
    m_axi_src_V_ARADDR <= sext_ln91_4_fu_1093_p1(32 - 1 downto 0);
    m_axi_src_V_ARBURST <= ap_const_lv2_0;
    m_axi_src_V_ARCACHE <= ap_const_lv4_0;
    m_axi_src_V_ARID <= ap_const_lv1_0;
    m_axi_src_V_ARLEN <= ap_const_lv32_7;
    m_axi_src_V_ARLOCK <= ap_const_lv2_0;
    m_axi_src_V_ARPROT <= ap_const_lv3_0;
    m_axi_src_V_ARQOS <= ap_const_lv4_0;
    m_axi_src_V_ARREGION <= ap_const_lv4_0;
    m_axi_src_V_ARSIZE <= ap_const_lv3_0;
    m_axi_src_V_ARUSER <= ap_const_lv1_0;

    m_axi_src_V_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter11, empty_44_reg_1604, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (empty_44_reg_1604 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            m_axi_src_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_src_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_V_AWADDR <= ap_const_lv32_0;
    m_axi_src_V_AWBURST <= ap_const_lv2_0;
    m_axi_src_V_AWCACHE <= ap_const_lv4_0;
    m_axi_src_V_AWID <= ap_const_lv1_0;
    m_axi_src_V_AWLEN <= ap_const_lv32_0;
    m_axi_src_V_AWLOCK <= ap_const_lv2_0;
    m_axi_src_V_AWPROT <= ap_const_lv3_0;
    m_axi_src_V_AWQOS <= ap_const_lv4_0;
    m_axi_src_V_AWREGION <= ap_const_lv4_0;
    m_axi_src_V_AWSIZE <= ap_const_lv3_0;
    m_axi_src_V_AWUSER <= ap_const_lv1_0;
    m_axi_src_V_AWVALID <= ap_const_logic_0;
    m_axi_src_V_BREADY <= ap_const_logic_0;

    m_axi_src_V_RREADY_assign_proc : process(ap_enable_reg_pp0_iter18, icmp_ln87_reg_1527_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            m_axi_src_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_src_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_src_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_src_V_WID <= ap_const_lv1_0;
    m_axi_src_V_WLAST <= ap_const_logic_0;
    m_axi_src_V_WSTRB <= ap_const_lv64_0;
    m_axi_src_V_WUSER <= ap_const_lv1_0;
    m_axi_src_V_WVALID <= ap_const_logic_0;
    mul_ln85_fu_1482_p0 <= ap_const_lv18_32C4(15 - 1 downto 0);
    mul_ln85_fu_1482_p1 <= mul_ln85_fu_1482_p10(5 - 1 downto 0);
    mul_ln85_fu_1482_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_offset),18));
    or_ln88_fu_985_p2 <= (icmp_ln88_fu_914_p2 or and_ln88_fu_959_p2);
    select_ln87_fu_965_p3 <= 
        add_ln101_fu_908_p2 when (icmp_ln88_fu_914_p2(0) = '1') else 
        ap_phi_mux_src_ptr_0_rec_phi_fu_758_p4;
    select_ln88_1_fu_928_p3 <= 
        ap_const_lv4_1 when (icmp_ln88_fu_914_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_791_p4;
    select_ln88_2_fu_1041_p3 <= 
        add_ln91_3_reg_1541 when (icmp_ln88_reg_1536(0) = '1') else 
        add_ln91_4_reg_1546;
    select_ln88_3_fu_991_p3 <= 
        ap_const_lv4_1 when (or_ln88_fu_985_p2(0) = '1') else 
        w_0_reg_798;
    select_ln88_4_fu_999_p3 <= 
        h_fu_979_p2 when (and_ln88_fu_959_p2(0) = '1') else 
        select_ln88_1_fu_928_p3;
    select_ln88_5_fu_1063_p3 <= 
        add_ln91_6_fu_1058_p2 when (and_ln88_reg_1551(0) = '1') else 
        select_ln88_2_fu_1041_p3;
    select_ln88_6_fu_1007_p3 <= 
        add_ln99_fu_973_p2 when (and_ln88_fu_959_p2(0) = '1') else 
        select_ln88_fu_920_p3;
    select_ln88_7_fu_1033_p3 <= 
        ap_const_lv6_1 when (icmp_ln88_fu_914_p2(0) = '1') else 
        add_ln88_2_fu_1027_p2;
    select_ln88_fu_920_p3 <= 
        ap_const_lv10_0 when (icmp_ln88_fu_914_p2(0) = '1') else 
        src_ptr_1_rec_reg_776;
        sext_ln87_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_fu_845_p2),11));

        sext_ln88_1_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln88_1_reg_1594_pp0_iter9_reg),28));

        sext_ln88_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln88_5_fu_1063_p3),21));

        sext_ln91_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_fu_845_p2),15));

        sext_ln91_2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln91_5_fu_1049_p2),15));

        sext_ln91_3_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln91_reg_1501),19));

        sext_ln91_4_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln91_7_reg_1599),64));

        sext_ln91_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln91_1_fu_887_p2),15));

    shl_ln_fu_829_p3 <= (trunc_ln85_fu_825_p1 & ap_const_lv3_0);

    src_V_blk_n_AR_assign_proc : process(m_axi_src_V_ARREADY, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0, empty_44_reg_1604)
    begin
        if (((empty_44_reg_1604 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            src_V_blk_n_AR <= m_axi_src_V_ARREADY;
        else 
            src_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    src_V_blk_n_R_assign_proc : process(m_axi_src_V_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter18, icmp_ln87_reg_1527_pp0_iter17_reg)
    begin
        if (((icmp_ln87_reg_1527_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            src_V_blk_n_R <= m_axi_src_V_RVALID;
        else 
            src_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    sub_ln85_fu_845_p2 <= std_logic_vector(unsigned(zext_ln85_3_fu_837_p1) - unsigned(zext_ln85_4_fu_841_p1));
    tmp_553_fu_1420_p3 <= (select_ln88_4_reg_1572_pp0_iter18_reg & ap_const_lv3_0);
    trunc_ln647_fu_1103_p1 <= m_axi_src_V_RDATA(9 - 1 downto 0);
    trunc_ln85_fu_825_p1 <= col_offset(4 - 1 downto 0);
    w_fu_1021_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln88_3_fu_991_p3));
    xor_ln88_fu_947_p2 <= (icmp_ln88_fu_914_p2 xor ap_const_lv1_1);
    zext_ln203_7_fu_1437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_3_reg_1567_pp0_iter18_reg),8));
    zext_ln203_8_fu_1446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_fu_1440_p2),64));
    zext_ln203_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_553_fu_1420_p3),8));
    zext_ln85_3_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_829_p3),8));
    zext_ln85_4_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_offset),8));
    zext_ln87_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_V_offset),28));
    zext_ln88_1_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln99_reg_1562),11));
    zext_ln88_2_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln88_4_reg_1572_pp0_iter18_reg),8));
    zext_ln88_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_ptr_1_rec_reg_776),11));
    zext_ln91_1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln85_reg_1496),20));
    zext_ln91_2_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_2_fu_865_p2),21));
    zext_ln91_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln91_3_fu_855_p1),20));
end behav;
