-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avgpool_7x7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buf_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buf_V_ce0 : OUT STD_LOGIC;
    buf_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    buf_V_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    buf_V_ce1 : OUT STD_LOGIC;
    buf_V_q1 : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of avgpool_7x7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_13_reg_139 : STD_LOGIC_VECTOR (13 downto 0);
    signal row_0_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln223_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln223_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln223_reg_432_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln225_fu_196_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_reg_436 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal buf_V_load_reg_465 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal buf_V_load_1_reg_470 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal buf_V_load_2_reg_485 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_V_load_3_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal buf_V_load_4_reg_500 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_V_load_5_reg_505 : STD_LOGIC_VECTOR (8 downto 0);
    signal row_fu_274_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_reg_510 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_V_load_6_reg_515 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_Val2_14_sum_engine_fu_163_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_14_reg_520 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln340_247_fu_360_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal p_Val2_14_sum_engine_fu_163_ap_ready : STD_LOGIC;
    signal ap_phi_mux_row_0_phi_fu_155_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln225_2_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_1_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_2_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_3_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sext_ln225_4_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln225_5_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_154_fu_184_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln225_fu_180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln225_1_fu_192_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_1_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_2_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_3_fu_224_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_4_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_5_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_6_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_7_fu_264_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_280_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_fu_284_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_287_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_V_fu_301_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_3_fu_306_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_122_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_17_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_344_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln388_fu_352_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln1148_fu_368_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln1148_fu_380_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_386_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1148_1_fu_396_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln1148_1_fu_406_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1148_1_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_571_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1148_1_fu_400_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1148_fu_420_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_424_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component sum_engine IS
    port (
        ap_ready : OUT STD_LOGIC;
        t0_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t1_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t2_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t3_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t4_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t5_V : IN STD_LOGIC_VECTOR (8 downto 0);
        t6_V : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    p_Val2_14_sum_engine_fu_163 : component sum_engine
    port map (
        ap_ready => p_Val2_14_sum_engine_fu_163_ap_ready,
        t0_V => buf_V_load_reg_465,
        t1_V => buf_V_load_1_reg_470,
        t2_V => buf_V_load_2_reg_485,
        t3_V => buf_V_load_3_reg_490,
        t4_V => buf_V_load_4_reg_500,
        t5_V => buf_V_load_5_reg_505,
        t6_V => buf_V_load_6_reg_515,
        ap_return => p_Val2_14_sum_engine_fu_163_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_13_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln223_reg_432_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_Val2_13_reg_139 <= select_ln340_247_fu_360_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_13_reg_139 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    row_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_0_reg_151 <= row_reg_510;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_0_reg_151 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln223_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln225_reg_436 <= add_ln225_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                ap_return <= r_V_fu_424_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                buf_V_load_1_reg_470 <= buf_V_q1;
                buf_V_load_reg_465 <= buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                buf_V_load_2_reg_485 <= buf_V_q0;
                buf_V_load_3_reg_490 <= buf_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                buf_V_load_4_reg_500 <= buf_V_q0;
                buf_V_load_5_reg_505 <= buf_V_q1;
                row_reg_510 <= row_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                buf_V_load_6_reg_515 <= buf_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln223_reg_432 <= icmp_ln223_fu_174_p2;
                icmp_ln223_reg_432_pp0_iter1_reg <= icmp_ln223_reg_432;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln223_reg_432_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Val2_14_reg_520 <= p_Val2_14_sum_engine_fu_163_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln223_fu_174_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln223_fu_174_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln223_fu_174_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln225_1_fu_202_p2 <= std_logic_vector(unsigned(add_ln225_fu_196_p2) + unsigned(ap_const_lv8_1));
    add_ln225_2_fu_213_p2 <= std_logic_vector(unsigned(add_ln225_fu_196_p2) + unsigned(ap_const_lv8_2));
    add_ln225_3_fu_224_p2 <= std_logic_vector(unsigned(add_ln225_reg_436) + unsigned(ap_const_lv8_3));
    add_ln225_4_fu_234_p2 <= std_logic_vector(unsigned(add_ln225_reg_436) + unsigned(ap_const_lv8_4));
    add_ln225_5_fu_244_p2 <= std_logic_vector(unsigned(add_ln225_reg_436) + unsigned(ap_const_lv8_5));
    add_ln225_6_fu_254_p2 <= std_logic_vector(unsigned(add_ln225_reg_436) + unsigned(ap_const_lv8_6));
    add_ln225_7_fu_264_p2 <= std_logic_vector(unsigned(add_ln225_reg_436) + unsigned(ap_const_lv8_7));
    add_ln225_fu_196_p2 <= std_logic_vector(unsigned(zext_ln225_fu_180_p1) + unsigned(zext_ln225_1_fu_192_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln223_fu_174_p2)
    begin
        if ((icmp_ln223_fu_174_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_155_p4_assign_proc : process(row_0_reg_151, icmp_ln223_reg_432, ap_CS_fsm_pp0_stage0, row_reg_510, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln223_reg_432 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_row_0_phi_fu_155_p4 <= row_reg_510;
        else 
            ap_phi_mux_row_0_phi_fu_155_p4 <= row_0_reg_151;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln225_2_fu_208_p1, sext_ln225_1_fu_229_p1, sext_ln225_3_fu_249_p1, ap_block_pp0_stage2, sext_ln225_5_fu_269_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buf_V_address0 <= sext_ln225_5_fu_269_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_V_address0 <= sext_ln225_3_fu_249_p1(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                buf_V_address0 <= sext_ln225_1_fu_229_p1(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                buf_V_address0 <= zext_ln225_2_fu_208_p1(7 - 1 downto 0);
            else 
                buf_V_address0 <= "XXXXXXX";
            end if;
        else 
            buf_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    buf_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, sext_ln225_fu_219_p1, sext_ln225_2_fu_239_p1, ap_block_pp0_stage2, sext_ln225_4_fu_259_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_V_address1 <= sext_ln225_4_fu_259_p1(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                buf_V_address1 <= sext_ln225_2_fu_239_p1(7 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                buf_V_address1 <= sext_ln225_fu_219_p1(7 - 1 downto 0);
            else 
                buf_V_address1 <= "XXXXXXX";
            end if;
        else 
            buf_V_address1 <= "XXXXXXX";
        end if; 
    end process;


    buf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_V_ce0 <= ap_const_logic_1;
        else 
            buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_V_ce1 <= ap_const_logic_1;
        else 
            buf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln223_fu_174_p2 <= "1" when (ap_phi_mux_row_0_phi_fu_155_p4 = ap_const_lv4_8) else "0";
        lhs_V_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_139),15));

    or_ln340_17_fu_338_p2 <= (xor_ln340_fu_332_p2 or p_Result_3_fu_306_p3);
    p_Result_3_fu_306_p3 <= sum_V_fu_301_p2(13 downto 13);
    p_Result_s_fu_293_p3 <= ret_V_fu_287_p2(14 downto 14);
    r_V_fu_424_p3 <= 
        sub_ln1148_1_fu_400_p2 when (tmp_571_fu_372_p3(0) = '1') else 
        zext_ln1148_fu_420_p1;
    ret_V_fu_287_p2 <= std_logic_vector(signed(lhs_V_fu_280_p1) + signed(rhs_V_fu_284_p1));
        rhs_V_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_reg_520),15));

    row_fu_274_p2 <= std_logic_vector(unsigned(row_0_reg_151) + unsigned(ap_const_lv4_1));
    select_ln340_247_fu_360_p3 <= 
        select_ln340_fu_344_p3 when (or_ln340_17_fu_338_p2(0) = '1') else 
        select_ln388_fu_352_p3;
    select_ln340_fu_344_p3 <= 
        ap_const_lv14_1FFF when (xor_ln340_122_fu_326_p2(0) = '1') else 
        sum_V_fu_301_p2;
    select_ln388_fu_352_p3 <= 
        ap_const_lv14_2000 when (underflow_fu_320_p2(0) = '1') else 
        sum_V_fu_301_p2;
        sext_ln1148_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1148_1_fu_406_p4),10));

        sext_ln1148_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_139),15));

        sext_ln225_1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_3_fu_224_p2),64));

        sext_ln225_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_4_fu_234_p2),64));

        sext_ln225_3_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_5_fu_244_p2),64));

        sext_ln225_4_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_6_fu_254_p2),64));

        sext_ln225_5_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_7_fu_264_p2),64));

        sext_ln225_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln225_2_fu_213_p2),64));

    sub_ln1148_1_fu_400_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(zext_ln1148_1_fu_396_p1));
    sub_ln1148_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(sext_ln1148_fu_368_p1));
    sum_V_fu_301_p2 <= std_logic_vector(signed(p_Val2_14_reg_520) + signed(p_Val2_13_reg_139));
    tmp_154_fu_184_p3 <= (ap_phi_mux_row_0_phi_fu_155_p4 & ap_const_lv3_0);
    tmp_571_fu_372_p3 <= p_Val2_13_reg_139(13 downto 13);
    tmp_s_fu_386_p4 <= sub_ln1148_fu_380_p2(14 downto 5);
    trunc_ln1148_1_fu_406_p4 <= p_Val2_13_reg_139(13 downto 5);
    underflow_fu_320_p2 <= (xor_ln786_5_fu_314_p2 and p_Result_s_fu_293_p3);
    xor_ln340_122_fu_326_p2 <= (p_Result_s_fu_293_p3 xor p_Result_3_fu_306_p3);
    xor_ln340_fu_332_p2 <= (p_Result_s_fu_293_p3 xor ap_const_lv1_1);
    xor_ln786_5_fu_314_p2 <= (p_Result_3_fu_306_p3 xor ap_const_lv1_1);
    zext_ln1148_1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_386_p4),11));
    zext_ln1148_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1148_1_fu_416_p1),11));
    zext_ln225_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_184_p3),8));
    zext_ln225_2_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_1_fu_202_p2),64));
    zext_ln225_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_row_0_phi_fu_155_p4),8));
end behav;
