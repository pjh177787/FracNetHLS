// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _compute_engine_16_HH_
#define _compute_engine_16_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "compute_engine_16bkb.h"

namespace ap_rtl {

struct compute_engine_16 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<16> > b_V;
    sc_in< sc_lv<2> > w_V;
    sc_out< sc_lv<5> > ap_return;


    // Module declarations
    compute_engine_16(sc_module_name name);
    SC_HAS_PROCESS(compute_engine_16);

    ~compute_engine_16();

    sc_trace_file* mVcdFile;

    compute_engine_16bkb* lut16_V_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > lut16_V_address0;
    sc_signal< sc_logic > lut16_V_ce0;
    sc_signal< sc_lv<3> > lut16_V_q0;
    sc_signal< sc_lv<4> > lut16_V_address1;
    sc_signal< sc_logic > lut16_V_ce1;
    sc_signal< sc_lv<3> > lut16_V_q1;
    sc_signal< sc_lv<4> > lut16_V_address2;
    sc_signal< sc_logic > lut16_V_ce2;
    sc_signal< sc_lv<3> > lut16_V_q2;
    sc_signal< sc_lv<4> > lut16_V_address3;
    sc_signal< sc_logic > lut16_V_ce3;
    sc_signal< sc_lv<3> > lut16_V_q3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<64> > zext_ln15_fu_119_p1;
    sc_signal< sc_lv<64> > zext_ln15_1_fu_134_p1;
    sc_signal< sc_lv<64> > zext_ln16_fu_149_p1;
    sc_signal< sc_lv<64> > zext_ln16_1_fu_164_p1;
    sc_signal< sc_lv<2> > xor_ln769_fu_99_p2;
    sc_signal< sc_lv<16> > sext_ln769_fu_105_p1;
    sc_signal< sc_lv<16> > r_V_fu_109_p2;
    sc_signal< sc_lv<4> > trunc_ln681_fu_115_p1;
    sc_signal< sc_lv<4> > p_Result_s_fu_124_p4;
    sc_signal< sc_lv<4> > p_Result_15_fu_139_p4;
    sc_signal< sc_lv<4> > p_Result_16_fu_154_p4;
    sc_signal< sc_lv<4> > zext_ln215_16_fu_173_p1;
    sc_signal< sc_lv<4> > zext_ln215_fu_169_p1;
    sc_signal< sc_lv<4> > zext_ln215_18_fu_187_p1;
    sc_signal< sc_lv<4> > zext_ln215_17_fu_183_p1;
    sc_signal< sc_lv<4> > add0_V_fu_177_p2;
    sc_signal< sc_lv<4> > add1_V_fu_191_p2;
    sc_signal< sc_lv<5> > rhs_V_fu_201_p1;
    sc_signal< sc_lv<5> > lhs_V_fu_197_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add0_V_fu_177_p2();
    void thread_add1_V_fu_191_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_lhs_V_fu_197_p1();
    void thread_lut16_V_address0();
    void thread_lut16_V_address1();
    void thread_lut16_V_address2();
    void thread_lut16_V_address3();
    void thread_lut16_V_ce0();
    void thread_lut16_V_ce1();
    void thread_lut16_V_ce2();
    void thread_lut16_V_ce3();
    void thread_p_Result_15_fu_139_p4();
    void thread_p_Result_16_fu_154_p4();
    void thread_p_Result_s_fu_124_p4();
    void thread_r_V_fu_109_p2();
    void thread_rhs_V_fu_201_p1();
    void thread_sext_ln769_fu_105_p1();
    void thread_trunc_ln681_fu_115_p1();
    void thread_xor_ln769_fu_99_p2();
    void thread_zext_ln15_1_fu_134_p1();
    void thread_zext_ln15_fu_119_p1();
    void thread_zext_ln16_1_fu_164_p1();
    void thread_zext_ln16_fu_149_p1();
    void thread_zext_ln215_16_fu_173_p1();
    void thread_zext_ln215_17_fu_183_p1();
    void thread_zext_ln215_18_fu_187_p1();
    void thread_zext_ln215_fu_169_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
