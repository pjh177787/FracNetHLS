// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "batch_norm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic batch_norm::ap_const_logic_1 = sc_dt::Log_1;
const bool batch_norm::ap_const_boolean_1 = true;
const sc_lv<10> batch_norm::ap_const_lv10_0 = "0000000000";
const sc_lv<18> batch_norm::ap_const_lv18_3FF = "1111111111";
const sc_lv<11> batch_norm::ap_const_lv11_3FF = "1111111111";
const sc_lv<1> batch_norm::ap_const_lv1_0 = "0";
const sc_lv<32> batch_norm::ap_const_lv32_A = "1010";
const sc_lv<32> batch_norm::ap_const_lv32_B = "1011";
const sc_lv<32> batch_norm::ap_const_lv32_11 = "10001";
const sc_lv<7> batch_norm::ap_const_lv7_0 = "0000000";
const sc_lv<12> batch_norm::ap_const_lv12_7FF = "11111111111";
const sc_logic batch_norm::ap_const_logic_0 = sc_dt::Log_0;

batch_norm::batch_norm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln731_fu_72_p2);
    sensitive << ( trunc_ln731_fu_68_p1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( or_ln785_fu_110_p2 );
    sensitive << ( p_Val2_23_fu_78_p3 );

    SC_METHOD(thread_icmp_ln785_fu_104_p2);
    sensitive << ( tmp_fu_94_p4 );

    SC_METHOD(thread_or_ln785_fu_110_p2);
    sensitive << ( p_Result_s_fu_86_p3 );
    sensitive << ( icmp_ln785_fu_104_p2 );

    SC_METHOD(thread_p_Result_s_fu_86_p3);
    sensitive << ( add_ln731_fu_72_p2 );

    SC_METHOD(thread_p_Val2_23_fu_78_p3);
    sensitive << ( add_ln731_fu_72_p2 );

    SC_METHOD(thread_r_V_9_fu_52_p2);
    sensitive << ( zext_ln1118_fu_48_p1 );
    sensitive << ( r_V_fu_36_p1 );

    SC_METHOD(thread_r_V_fu_36_p1);
    sensitive << ( sum_V );

    SC_METHOD(thread_ret_V_fu_62_p2);
    sensitive << ( trunc_ln703_fu_58_p1 );

    SC_METHOD(thread_tmp_fu_94_p4);
    sensitive << ( ret_V_fu_62_p2 );

    SC_METHOD(thread_tmp_s_fu_40_p3);
    sensitive << ( sum_V );

    SC_METHOD(thread_trunc_ln703_fu_58_p1);
    sensitive << ( r_V_9_fu_52_p2 );

    SC_METHOD(thread_trunc_ln731_fu_68_p1);
    sensitive << ( r_V_9_fu_52_p2 );

    SC_METHOD(thread_zext_ln1118_fu_48_p1);
    sensitive << ( tmp_s_fu_40_p3 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "batch_norm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sum_V, "(port)sum_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_s_fu_40_p3, "tmp_s_fu_40_p3");
    sc_trace(mVcdFile, zext_ln1118_fu_48_p1, "zext_ln1118_fu_48_p1");
    sc_trace(mVcdFile, r_V_fu_36_p1, "r_V_fu_36_p1");
    sc_trace(mVcdFile, r_V_9_fu_52_p2, "r_V_9_fu_52_p2");
    sc_trace(mVcdFile, trunc_ln703_fu_58_p1, "trunc_ln703_fu_58_p1");
    sc_trace(mVcdFile, trunc_ln731_fu_68_p1, "trunc_ln731_fu_68_p1");
    sc_trace(mVcdFile, add_ln731_fu_72_p2, "add_ln731_fu_72_p2");
    sc_trace(mVcdFile, ret_V_fu_62_p2, "ret_V_fu_62_p2");
    sc_trace(mVcdFile, tmp_fu_94_p4, "tmp_fu_94_p4");
    sc_trace(mVcdFile, p_Result_s_fu_86_p3, "p_Result_s_fu_86_p3");
    sc_trace(mVcdFile, icmp_ln785_fu_104_p2, "icmp_ln785_fu_104_p2");
    sc_trace(mVcdFile, or_ln785_fu_110_p2, "or_ln785_fu_110_p2");
    sc_trace(mVcdFile, p_Val2_23_fu_78_p3, "p_Val2_23_fu_78_p3");
#endif

    }
}

batch_norm::~batch_norm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void batch_norm::thread_add_ln731_fu_72_p2() {
    add_ln731_fu_72_p2 = (!ap_const_lv11_3FF.is_01() || !trunc_ln731_fu_68_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(ap_const_lv11_3FF) + sc_biguint<11>(trunc_ln731_fu_68_p1.read()));
}

void batch_norm::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void batch_norm::thread_ap_return() {
    ap_return = (!or_ln785_fu_110_p2.read()[0].is_01())? sc_lv<12>(): ((or_ln785_fu_110_p2.read()[0].to_bool())? ap_const_lv12_7FF: p_Val2_23_fu_78_p3.read());
}

void batch_norm::thread_icmp_ln785_fu_104_p2() {
    icmp_ln785_fu_104_p2 = (!tmp_fu_94_p4.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_94_p4.read() != ap_const_lv7_0);
}

void batch_norm::thread_or_ln785_fu_110_p2() {
    or_ln785_fu_110_p2 = (p_Result_s_fu_86_p3.read() | icmp_ln785_fu_104_p2.read());
}

void batch_norm::thread_p_Result_s_fu_86_p3() {
    p_Result_s_fu_86_p3 = add_ln731_fu_72_p2.read().range(10, 10);
}

void batch_norm::thread_p_Val2_23_fu_78_p3() {
    p_Val2_23_fu_78_p3 = esl_concat<11,1>(add_ln731_fu_72_p2.read(), ap_const_lv1_0);
}

void batch_norm::thread_r_V_9_fu_52_p2() {
    r_V_9_fu_52_p2 = (!zext_ln1118_fu_48_p1.read().is_01() || !r_V_fu_36_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(zext_ln1118_fu_48_p1.read()) - sc_biguint<19>(r_V_fu_36_p1.read()));
}

void batch_norm::thread_r_V_fu_36_p1() {
    r_V_fu_36_p1 = esl_zext<19,8>(sum_V.read());
}

void batch_norm::thread_ret_V_fu_62_p2() {
    ret_V_fu_62_p2 = (!ap_const_lv18_3FF.is_01() || !trunc_ln703_fu_58_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(ap_const_lv18_3FF) + sc_biguint<18>(trunc_ln703_fu_58_p1.read()));
}

void batch_norm::thread_tmp_fu_94_p4() {
    tmp_fu_94_p4 = ret_V_fu_62_p2.read().range(17, 11);
}

void batch_norm::thread_tmp_s_fu_40_p3() {
    tmp_s_fu_40_p3 = esl_concat<8,10>(sum_V.read(), ap_const_lv10_0);
}

void batch_norm::thread_trunc_ln703_fu_58_p1() {
    trunc_ln703_fu_58_p1 = r_V_9_fu_52_p2.read().range(18-1, 0);
}

void batch_norm::thread_trunc_ln731_fu_68_p1() {
    trunc_ln731_fu_68_p1 = r_V_9_fu_52_p2.read().range(11-1, 0);
}

void batch_norm::thread_zext_ln1118_fu_48_p1() {
    zext_ln1118_fu_48_p1 = esl_zext<19,18>(tmp_s_fu_40_p3.read());
}

}

