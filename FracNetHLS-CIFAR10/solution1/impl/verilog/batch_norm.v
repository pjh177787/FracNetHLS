// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module batch_norm (
        ap_ready,
        sum_V,
        weight_V,
        bias_V,
        ap_return
);


output   ap_ready;
input  [7:0] sum_V;
input  [10:0] weight_V;
input  [10:0] bias_V;
output  [13:0] ap_return;

wire  signed [10:0] sext_ln703_fu_62_p0;
wire  signed [18:0] sext_ln703_fu_62_p1;
wire  signed [18:0] r_V_4_fu_208_p2;
(* use_dsp48 = "no" *) wire   [18:0] ret_V_fu_66_p2;
wire  signed [10:0] sext_ln731_fu_79_p0;
wire  signed [12:0] sext_ln731_fu_79_p1;
wire   [12:0] trunc_ln731_fu_83_p1;
wire   [12:0] add_ln731_fu_86_p2;
wire   [5:0] tmp_fu_108_p4;
wire   [0:0] p_Result_7_fu_100_p3;
wire   [0:0] icmp_ln785_fu_118_p2;
wire   [0:0] p_Result_s_fu_71_p3;
wire   [0:0] or_ln785_fu_124_p2;
wire   [0:0] xor_ln785_fu_130_p2;
wire   [0:0] icmp_ln786_fu_148_p2;
wire   [0:0] xor_ln786_fu_142_p2;
wire   [0:0] or_ln786_fu_154_p2;
wire   [0:0] underflow_fu_160_p2;
wire   [0:0] overflow_fu_136_p2;
wire   [0:0] xor_ln340_fu_172_p2;
wire   [0:0] or_ln340_fu_166_p2;
wire   [13:0] p_Val2_10_fu_92_p3;
wire   [0:0] or_ln340_5_fu_178_p2;
wire   [13:0] select_ln340_fu_184_p3;
wire   [13:0] select_ln388_fu_192_p3;
wire   [7:0] r_V_4_fu_208_p0;
wire   [18:0] r_V_4_fu_208_p00;

pgconv32_2bit_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
pgconv32_2bit_mulcud_U13(
    .din0(r_V_4_fu_208_p0),
    .din1(weight_V),
    .dout(r_V_4_fu_208_p2)
);

assign add_ln731_fu_86_p2 = ($signed(sext_ln731_fu_79_p1) + $signed(trunc_ln731_fu_83_p1));

assign ap_ready = 1'b1;

assign ap_return = ((or_ln340_5_fu_178_p2[0:0] === 1'b1) ? select_ln340_fu_184_p3 : select_ln388_fu_192_p3);

assign icmp_ln785_fu_118_p2 = ((tmp_fu_108_p4 != 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_148_p2 = ((tmp_fu_108_p4 != 6'd63) ? 1'b1 : 1'b0);

assign or_ln340_5_fu_178_p2 = (xor_ln340_fu_172_p2 | overflow_fu_136_p2);

assign or_ln340_fu_166_p2 = (underflow_fu_160_p2 | overflow_fu_136_p2);

assign or_ln785_fu_124_p2 = (p_Result_7_fu_100_p3 | icmp_ln785_fu_118_p2);

assign or_ln786_fu_154_p2 = (xor_ln786_fu_142_p2 | icmp_ln786_fu_148_p2);

assign overflow_fu_136_p2 = (xor_ln785_fu_130_p2 & or_ln785_fu_124_p2);

assign p_Result_7_fu_100_p3 = add_ln731_fu_86_p2[32'd12];

assign p_Result_s_fu_71_p3 = ret_V_fu_66_p2[32'd18];

assign p_Val2_10_fu_92_p3 = {{add_ln731_fu_86_p2}, {1'd0}};

assign r_V_4_fu_208_p0 = r_V_4_fu_208_p00;

assign r_V_4_fu_208_p00 = sum_V;

assign ret_V_fu_66_p2 = ($signed(sext_ln703_fu_62_p1) + $signed(r_V_4_fu_208_p2));

assign select_ln340_fu_184_p3 = ((or_ln340_fu_166_p2[0:0] === 1'b1) ? 14'd8191 : p_Val2_10_fu_92_p3);

assign select_ln388_fu_192_p3 = ((underflow_fu_160_p2[0:0] === 1'b1) ? 14'd8192 : p_Val2_10_fu_92_p3);

assign sext_ln703_fu_62_p0 = bias_V;

assign sext_ln703_fu_62_p1 = sext_ln703_fu_62_p0;

assign sext_ln731_fu_79_p0 = bias_V;

assign sext_ln731_fu_79_p1 = sext_ln731_fu_79_p0;

assign tmp_fu_108_p4 = {{ret_V_fu_66_p2[18:13]}};

assign trunc_ln731_fu_83_p1 = r_V_4_fu_208_p2[12:0];

assign underflow_fu_160_p2 = (p_Result_s_fu_71_p3 & or_ln786_fu_154_p2);

assign xor_ln340_fu_172_p2 = (underflow_fu_160_p2 ^ 1'd1);

assign xor_ln785_fu_130_p2 = (p_Result_s_fu_71_p3 ^ 1'd1);

assign xor_ln786_fu_142_p2 = (p_Result_7_fu_100_p3 ^ 1'd1);

endmodule //batch_norm
