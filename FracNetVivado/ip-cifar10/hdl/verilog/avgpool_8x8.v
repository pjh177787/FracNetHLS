// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avgpool_8x8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inputs_0_V_address0,
        inputs_0_V_ce0,
        inputs_0_V_q0,
        inputs_1_V_address0,
        inputs_1_V_ce0,
        inputs_1_V_q0,
        inputs_2_V_address0,
        inputs_2_V_ce0,
        inputs_2_V_q0,
        inputs_3_V_address0,
        inputs_3_V_ce0,
        inputs_3_V_q0,
        inputs_4_V_address0,
        inputs_4_V_ce0,
        inputs_4_V_q0,
        inputs_5_V_address0,
        inputs_5_V_ce0,
        inputs_5_V_q0,
        inputs_6_V_address0,
        inputs_6_V_ce0,
        inputs_6_V_q0,
        inputs_7_V_address0,
        inputs_7_V_ce0,
        inputs_7_V_q0,
        outputs_V_address0,
        outputs_V_ce0,
        outputs_V_we0,
        outputs_V_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_state6 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state11 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] inputs_0_V_address0;
output   inputs_0_V_ce0;
input  [23:0] inputs_0_V_q0;
output  [13:0] inputs_1_V_address0;
output   inputs_1_V_ce0;
input  [23:0] inputs_1_V_q0;
output  [13:0] inputs_2_V_address0;
output   inputs_2_V_ce0;
input  [23:0] inputs_2_V_q0;
output  [13:0] inputs_3_V_address0;
output   inputs_3_V_ce0;
input  [23:0] inputs_3_V_q0;
output  [13:0] inputs_4_V_address0;
output   inputs_4_V_ce0;
input  [23:0] inputs_4_V_q0;
output  [13:0] inputs_5_V_address0;
output   inputs_5_V_ce0;
input  [23:0] inputs_5_V_q0;
output  [13:0] inputs_6_V_address0;
output   inputs_6_V_ce0;
input  [23:0] inputs_6_V_q0;
output  [13:0] inputs_7_V_address0;
output   inputs_7_V_ce0;
input  [23:0] inputs_7_V_q0;
output  [5:0] outputs_V_address0;
output   outputs_V_ce0;
output   outputs_V_we0;
output  [23:0] outputs_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inputs_0_V_ce0;
reg inputs_1_V_ce0;
reg inputs_2_V_ce0;
reg inputs_3_V_ce0;
reg inputs_4_V_ce0;
reg inputs_5_V_ce0;
reg inputs_6_V_ce0;
reg inputs_7_V_ce0;
reg outputs_V_ce0;
reg outputs_V_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten29_reg_441;
reg   [3:0] c0_0_reg_452;
reg   [7:0] indvar_flatten_reg_463;
reg   [3:0] i_0_reg_474;
reg   [3:0] j_0_reg_485;
reg   [6:0] c_0_reg_496;
reg   [6:0] c_0_reg_496_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [6:0] c_0_reg_496_pp1_iter2_reg;
wire   [0:0] icmp_ln313_fu_508_p2;
reg   [0:0] icmp_ln313_reg_1622;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln313_reg_1622_pp0_iter1_reg;
wire   [9:0] add_ln313_fu_514_p2;
reg   [9:0] add_ln313_reg_1626;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln320_1_fu_540_p3;
reg   [3:0] select_ln320_1_reg_1631;
wire   [3:0] select_ln323_fu_578_p3;
reg   [3:0] select_ln323_reg_1639;
wire   [3:0] select_ln323_1_fu_586_p3;
reg   [3:0] select_ln323_1_reg_1645;
wire   [7:0] select_ln314_fu_600_p3;
reg   [7:0] select_ln314_reg_1651;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] j_fu_676_p2;
reg   [3:0] j_reg_1696;
reg   [2:0] tmp_0_V_addr_1_reg_1701;
reg   [2:0] tmp_1_V_addr_reg_1706;
reg   [2:0] tmp_2_V_addr_reg_1711;
reg   [2:0] tmp_3_V_addr_reg_1716;
reg   [2:0] tmp_4_V_addr_reg_1721;
reg   [2:0] tmp_5_V_addr_reg_1726;
reg   [2:0] tmp_6_V_addr_reg_1731;
reg   [2:0] tmp_7_V_addr_reg_1736;
reg  signed [23:0] inputs_0_V_load_reg_1741;
reg  signed [23:0] inputs_1_V_load_reg_1747;
reg  signed [23:0] inputs_2_V_load_reg_1753;
reg  signed [23:0] inputs_3_V_load_reg_1759;
reg  signed [23:0] inputs_4_V_load_reg_1765;
reg  signed [23:0] inputs_5_V_load_reg_1771;
reg  signed [23:0] inputs_6_V_load_reg_1777;
reg  signed [23:0] inputs_7_V_load_reg_1783;
wire   [0:0] icmp_ln331_fu_1404_p2;
reg   [0:0] icmp_ln331_reg_1789;
reg   [0:0] icmp_ln331_reg_1789_pp1_iter1_reg;
reg   [0:0] icmp_ln331_reg_1789_pp1_iter2_reg;
wire   [6:0] c_fu_1410_p2;
reg   [6:0] c_reg_1793;
reg    ap_enable_reg_pp1_iter0;
reg   [0:0] tmp_780_reg_1838;
reg   [17:0] tmp_202_reg_1843;
reg   [17:0] tmp_203_reg_1848;
wire   [0:0] p_Result_s_fu_1506_p2;
reg   [0:0] p_Result_s_reg_1853;
reg   [0:0] p_Result_s_reg_1853_pp1_iter2_reg;
wire  signed [18:0] select_ln1148_fu_1524_p3;
reg  signed [18:0] select_ln1148_reg_1859;
reg   [0:0] p_Result_2_reg_1864;
reg   [0:0] tmp_782_reg_1870;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [2:0] tmp_0_V_address0;
reg    tmp_0_V_ce0;
reg    tmp_0_V_we0;
reg   [23:0] tmp_0_V_d0;
wire   [23:0] tmp_0_V_q0;
reg   [2:0] tmp_1_V_address0;
reg    tmp_1_V_ce0;
reg    tmp_1_V_we0;
wire   [23:0] tmp_1_V_d0;
wire   [23:0] tmp_1_V_q0;
reg   [2:0] tmp_2_V_address0;
reg    tmp_2_V_ce0;
reg    tmp_2_V_we0;
wire   [23:0] tmp_2_V_d0;
wire   [23:0] tmp_2_V_q0;
reg   [2:0] tmp_3_V_address0;
reg    tmp_3_V_ce0;
reg    tmp_3_V_we0;
wire   [23:0] tmp_3_V_d0;
wire   [23:0] tmp_3_V_q0;
reg   [2:0] tmp_4_V_address0;
reg    tmp_4_V_ce0;
reg    tmp_4_V_we0;
wire   [23:0] tmp_4_V_d0;
wire   [23:0] tmp_4_V_q0;
reg   [2:0] tmp_5_V_address0;
reg    tmp_5_V_ce0;
reg    tmp_5_V_we0;
wire   [23:0] tmp_5_V_d0;
wire   [23:0] tmp_5_V_q0;
reg   [2:0] tmp_6_V_address0;
reg    tmp_6_V_ce0;
reg    tmp_6_V_we0;
wire   [23:0] tmp_6_V_d0;
wire   [23:0] tmp_6_V_q0;
reg   [2:0] tmp_7_V_address0;
reg    tmp_7_V_ce0;
reg    tmp_7_V_we0;
wire   [23:0] tmp_7_V_d0;
wire   [23:0] tmp_7_V_q0;
reg   [9:0] ap_phi_mux_indvar_flatten29_phi_fu_445_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_c0_0_phi_fu_456_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_467_p4;
reg   [3:0] ap_phi_mux_i_0_phi_fu_478_p4;
reg   [3:0] ap_phi_mux_j_0_phi_fu_489_p4;
reg   [6:0] ap_phi_mux_c_0_phi_fu_500_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln1265_52_fu_664_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln320_fu_681_p1;
wire   [63:0] zext_ln333_1_fu_1426_p1;
wire   [63:0] zext_ln333_fu_1547_p1;
wire   [23:0] select_ln340_185_fu_772_p3;
wire   [0:0] icmp_ln314_fu_526_p2;
wire   [3:0] c0_fu_520_p2;
wire   [0:0] icmp_ln315_fu_554_p2;
wire   [0:0] xor_ln320_fu_548_p2;
wire   [3:0] select_ln320_fu_532_p3;
wire   [0:0] and_ln320_fu_560_p2;
wire   [0:0] or_ln323_fu_572_p2;
wire   [3:0] i_fu_566_p2;
wire   [7:0] add_ln314_1_fu_594_p2;
wire   [8:0] tmp_fu_611_p3;
wire   [9:0] zext_ln1265_fu_608_p1;
wire   [9:0] zext_ln1265_49_fu_618_p1;
wire   [9:0] add_ln1265_fu_622_p2;
wire   [9:0] zext_ln323_fu_628_p1;
wire   [9:0] add_ln1265_25_fu_631_p2;
wire   [14:0] zext_ln1265_50_fu_637_p1;
wire   [14:0] p_shl_cast_fu_641_p3;
wire   [14:0] add_ln1265_26_fu_649_p2;
wire   [14:0] zext_ln1265_51_fu_655_p1;
wire   [14:0] add_ln1265_27_fu_658_p2;
wire  signed [23:0] sext_ln703_fu_692_p0;
wire  signed [24:0] sext_ln703_fu_692_p1;
wire  signed [24:0] sext_ln703_55_fu_696_p1;
wire   [24:0] add_ln1192_fu_699_p2;
wire  signed [23:0] tmp_0_0_V_fu_713_p1;
wire   [23:0] tmp_0_0_V_fu_713_p2;
wire   [0:0] tmp_765_fu_718_p3;
wire   [0:0] tmp_764_fu_705_p3;
wire   [0:0] xor_ln786_97_fu_726_p2;
wire   [0:0] xor_ln340_47_fu_744_p2;
wire   [0:0] xor_ln340_fu_738_p2;
wire   [0:0] and_ln786_fu_732_p2;
wire   [0:0] or_ln340_229_fu_750_p2;
wire   [23:0] select_ln340_89_fu_756_p3;
wire   [23:0] tmp_0_0_V_1_fu_764_p3;
wire  signed [23:0] sext_ln703_56_fu_781_p0;
wire  signed [24:0] sext_ln703_56_fu_781_p1;
wire  signed [24:0] sext_ln703_57_fu_785_p1;
wire   [24:0] add_ln1192_71_fu_788_p2;
wire  signed [23:0] tmp_0_1_V_1_fu_802_p1;
wire   [23:0] tmp_0_1_V_1_fu_802_p2;
wire   [0:0] tmp_767_fu_807_p3;
wire   [0:0] tmp_766_fu_794_p3;
wire   [0:0] xor_ln786_98_fu_815_p2;
wire   [0:0] xor_ln340_49_fu_833_p2;
wire   [0:0] xor_ln340_48_fu_827_p2;
wire   [0:0] and_ln786_173_fu_821_p2;
wire   [0:0] or_ln340_230_fu_839_p2;
wire   [23:0] select_ln340_90_fu_845_p3;
wire   [23:0] tmp_0_1_V_2_fu_853_p3;
wire  signed [23:0] sext_ln703_58_fu_870_p0;
wire  signed [24:0] sext_ln703_58_fu_870_p1;
wire  signed [24:0] sext_ln703_59_fu_874_p1;
wire   [24:0] add_ln1192_72_fu_877_p2;
wire  signed [23:0] tmp_0_2_V_1_fu_891_p1;
wire   [23:0] tmp_0_2_V_1_fu_891_p2;
wire   [0:0] tmp_769_fu_896_p3;
wire   [0:0] tmp_768_fu_883_p3;
wire   [0:0] xor_ln786_99_fu_904_p2;
wire   [0:0] xor_ln340_51_fu_922_p2;
wire   [0:0] xor_ln340_50_fu_916_p2;
wire   [0:0] and_ln786_174_fu_910_p2;
wire   [0:0] or_ln340_231_fu_928_p2;
wire   [23:0] select_ln340_91_fu_934_p3;
wire   [23:0] tmp_0_2_V_2_fu_942_p3;
wire  signed [23:0] sext_ln703_60_fu_959_p0;
wire  signed [24:0] sext_ln703_60_fu_959_p1;
wire  signed [24:0] sext_ln703_61_fu_963_p1;
wire   [24:0] add_ln1192_73_fu_966_p2;
wire  signed [23:0] tmp_0_3_V_1_fu_980_p1;
wire   [23:0] tmp_0_3_V_1_fu_980_p2;
wire   [0:0] tmp_771_fu_985_p3;
wire   [0:0] tmp_770_fu_972_p3;
wire   [0:0] xor_ln786_100_fu_993_p2;
wire   [0:0] xor_ln340_53_fu_1011_p2;
wire   [0:0] xor_ln340_52_fu_1005_p2;
wire   [0:0] and_ln786_175_fu_999_p2;
wire   [0:0] or_ln340_232_fu_1017_p2;
wire   [23:0] select_ln340_92_fu_1023_p3;
wire   [23:0] tmp_0_3_V_2_fu_1031_p3;
wire  signed [23:0] sext_ln703_62_fu_1048_p0;
wire  signed [24:0] sext_ln703_62_fu_1048_p1;
wire  signed [24:0] sext_ln703_63_fu_1052_p1;
wire   [24:0] add_ln1192_74_fu_1055_p2;
wire  signed [23:0] tmp_0_4_V_1_fu_1069_p1;
wire   [23:0] tmp_0_4_V_1_fu_1069_p2;
wire   [0:0] tmp_773_fu_1074_p3;
wire   [0:0] tmp_772_fu_1061_p3;
wire   [0:0] xor_ln786_101_fu_1082_p2;
wire   [0:0] xor_ln340_55_fu_1100_p2;
wire   [0:0] xor_ln340_54_fu_1094_p2;
wire   [0:0] and_ln786_176_fu_1088_p2;
wire   [0:0] or_ln340_233_fu_1106_p2;
wire   [23:0] select_ln340_93_fu_1112_p3;
wire   [23:0] tmp_0_4_V_2_fu_1120_p3;
wire  signed [23:0] sext_ln703_64_fu_1137_p0;
wire  signed [24:0] sext_ln703_64_fu_1137_p1;
wire  signed [24:0] sext_ln703_65_fu_1141_p1;
wire   [24:0] add_ln1192_75_fu_1144_p2;
wire  signed [23:0] tmp_0_5_V_1_fu_1158_p1;
wire   [23:0] tmp_0_5_V_1_fu_1158_p2;
wire   [0:0] tmp_775_fu_1163_p3;
wire   [0:0] tmp_774_fu_1150_p3;
wire   [0:0] xor_ln786_102_fu_1171_p2;
wire   [0:0] xor_ln340_57_fu_1189_p2;
wire   [0:0] xor_ln340_56_fu_1183_p2;
wire   [0:0] and_ln786_177_fu_1177_p2;
wire   [0:0] or_ln340_234_fu_1195_p2;
wire   [23:0] select_ln340_94_fu_1201_p3;
wire   [23:0] tmp_0_5_V_2_fu_1209_p3;
wire  signed [23:0] sext_ln703_66_fu_1226_p0;
wire  signed [24:0] sext_ln703_66_fu_1226_p1;
wire  signed [24:0] sext_ln703_67_fu_1230_p1;
wire   [24:0] add_ln1192_76_fu_1233_p2;
wire  signed [23:0] tmp_0_6_V_1_fu_1247_p1;
wire   [23:0] tmp_0_6_V_1_fu_1247_p2;
wire   [0:0] tmp_777_fu_1252_p3;
wire   [0:0] tmp_776_fu_1239_p3;
wire   [0:0] xor_ln786_103_fu_1260_p2;
wire   [0:0] xor_ln340_59_fu_1278_p2;
wire   [0:0] xor_ln340_58_fu_1272_p2;
wire   [0:0] and_ln786_178_fu_1266_p2;
wire   [0:0] or_ln340_235_fu_1284_p2;
wire   [23:0] select_ln340_95_fu_1290_p3;
wire   [23:0] tmp_0_6_V_2_fu_1298_p3;
wire  signed [23:0] sext_ln703_68_fu_1315_p0;
wire  signed [24:0] sext_ln703_68_fu_1315_p1;
wire  signed [24:0] sext_ln703_69_fu_1319_p1;
wire   [24:0] add_ln1192_77_fu_1322_p2;
wire  signed [23:0] tmp_0_7_V_1_fu_1336_p1;
wire   [23:0] tmp_0_7_V_1_fu_1336_p2;
wire   [0:0] tmp_779_fu_1341_p3;
wire   [0:0] tmp_778_fu_1328_p3;
wire   [0:0] xor_ln786_104_fu_1349_p2;
wire   [0:0] xor_ln340_61_fu_1367_p2;
wire   [0:0] xor_ln340_60_fu_1361_p2;
wire   [0:0] and_ln786_179_fu_1355_p2;
wire   [0:0] or_ln340_236_fu_1373_p2;
wire   [23:0] select_ln340_96_fu_1379_p3;
wire   [23:0] tmp_0_7_V_2_fu_1387_p3;
wire   [2:0] trunc_ln333_1_fu_1416_p4;
wire   [2:0] p_Val2_s_fu_1442_p9;
wire   [23:0] p_Val2_s_fu_1442_p10;
wire   [39:0] t_V_fu_1464_p3;
wire   [39:0] sub_ln1148_fu_1480_p2;
wire   [18:0] zext_ln1148_fu_1512_p1;
wire   [18:0] sub_ln1148_16_fu_1515_p2;
wire   [18:0] zext_ln1148_16_fu_1521_p1;
wire   [0:0] or_ln785_fu_1555_p2;
wire   [0:0] xor_ln785_fu_1559_p2;
wire   [0:0] and_ln786_181_fu_1570_p2;
wire   [0:0] xor_ln786_fu_1574_p2;
wire   [0:0] underflow_fu_1580_p2;
wire   [0:0] overflow_fu_1564_p2;
wire   [0:0] or_ln340_fu_1585_p2;
wire  signed [23:0] p_Val2_5_fu_1552_p1;
wire   [0:0] or_ln340_237_fu_1591_p2;
wire   [23:0] select_ln340_fu_1597_p3;
wire   [23:0] select_ln388_fu_1605_p3;
wire    ap_CS_fsm_state11;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_0_V_address0),
    .ce0(tmp_0_V_ce0),
    .we0(tmp_0_V_we0),
    .d0(tmp_0_V_d0),
    .q0(tmp_0_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_1_V_address0),
    .ce0(tmp_1_V_ce0),
    .we0(tmp_1_V_we0),
    .d0(tmp_1_V_d0),
    .q0(tmp_1_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_2_V_address0),
    .ce0(tmp_2_V_ce0),
    .we0(tmp_2_V_we0),
    .d0(tmp_2_V_d0),
    .q0(tmp_2_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_3_V_address0),
    .ce0(tmp_3_V_ce0),
    .we0(tmp_3_V_we0),
    .d0(tmp_3_V_d0),
    .q0(tmp_3_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_4_V_address0),
    .ce0(tmp_4_V_ce0),
    .we0(tmp_4_V_we0),
    .d0(tmp_4_V_d0),
    .q0(tmp_4_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_5_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_5_V_address0),
    .ce0(tmp_5_V_ce0),
    .we0(tmp_5_V_we0),
    .d0(tmp_5_V_d0),
    .q0(tmp_5_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_6_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_6_V_address0),
    .ce0(tmp_6_V_ce0),
    .we0(tmp_6_V_we0),
    .d0(tmp_6_V_d0),
    .q0(tmp_6_V_q0)
);

avgpool_8x8_tmp_0_V #(
    .DataWidth( 24 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tmp_7_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tmp_7_V_address0),
    .ce0(tmp_7_V_ce0),
    .we0(tmp_7_V_we0),
    .d0(tmp_7_V_d0),
    .q0(tmp_7_V_q0)
);

FracNet_T_mux_83_bJp #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 24 ),
    .din2_WIDTH( 24 ),
    .din3_WIDTH( 24 ),
    .din4_WIDTH( 24 ),
    .din5_WIDTH( 24 ),
    .din6_WIDTH( 24 ),
    .din7_WIDTH( 24 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 24 ))
FracNet_T_mux_83_bJp_U278(
    .din0(tmp_0_V_q0),
    .din1(tmp_1_V_q0),
    .din2(tmp_2_V_q0),
    .din3(tmp_3_V_q0),
    .din4(tmp_4_V_q0),
    .din5(tmp_5_V_q0),
    .din6(tmp_6_V_q0),
    .din7(tmp_7_V_q0),
    .din8(p_Val2_s_fu_1442_p9),
    .dout(p_Val2_s_fu_1442_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        c0_0_reg_452 <= select_ln320_1_reg_1631;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c0_0_reg_452 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_0_reg_496 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln331_reg_1789 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_0_reg_496 <= c_reg_1793;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        i_0_reg_474 <= select_ln323_1_reg_1645;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_474 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        indvar_flatten29_reg_441 <= add_ln313_reg_1626;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten29_reg_441 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        indvar_flatten_reg_463 <= select_ln314_reg_1651;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_463 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        j_0_reg_485 <= j_reg_1696;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_485 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln313_reg_1626 <= add_ln313_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_0_reg_496_pp1_iter1_reg <= c_0_reg_496;
        icmp_ln331_reg_1789 <= icmp_ln331_fu_1404_p2;
        icmp_ln331_reg_1789_pp1_iter1_reg <= icmp_ln331_reg_1789;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        c_0_reg_496_pp1_iter2_reg <= c_0_reg_496_pp1_iter1_reg;
        icmp_ln331_reg_1789_pp1_iter2_reg <= icmp_ln331_reg_1789_pp1_iter1_reg;
        p_Result_s_reg_1853_pp1_iter2_reg <= p_Result_s_reg_1853;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        c_reg_1793 <= c_fu_1410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln313_reg_1622 <= icmp_ln313_fu_508_p2;
        icmp_ln313_reg_1622_pp0_iter1_reg <= icmp_ln313_reg_1622;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        inputs_0_V_load_reg_1741 <= inputs_0_V_q0;
        inputs_1_V_load_reg_1747 <= inputs_1_V_q0;
        inputs_2_V_load_reg_1753 <= inputs_2_V_q0;
        inputs_3_V_load_reg_1759 <= inputs_3_V_q0;
        inputs_4_V_load_reg_1765 <= inputs_4_V_q0;
        inputs_5_V_load_reg_1771 <= inputs_5_V_q0;
        inputs_6_V_load_reg_1777 <= inputs_6_V_q0;
        inputs_7_V_load_reg_1783 <= inputs_7_V_q0;
        tmp_0_V_addr_1_reg_1701 <= zext_ln320_fu_681_p1;
        tmp_1_V_addr_reg_1706 <= zext_ln320_fu_681_p1;
        tmp_2_V_addr_reg_1711 <= zext_ln320_fu_681_p1;
        tmp_3_V_addr_reg_1716 <= zext_ln320_fu_681_p1;
        tmp_4_V_addr_reg_1721 <= zext_ln320_fu_681_p1;
        tmp_5_V_addr_reg_1726 <= zext_ln320_fu_681_p1;
        tmp_6_V_addr_reg_1731 <= zext_ln320_fu_681_p1;
        tmp_7_V_addr_reg_1736 <= zext_ln320_fu_681_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622 == 1'd0))) begin
        j_reg_1696 <= j_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln331_reg_1789_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Result_2_reg_1864 <= select_ln1148_fu_1524_p3[32'd18];
        select_ln1148_reg_1859 <= select_ln1148_fu_1524_p3;
        tmp_782_reg_1870 <= select_ln1148_fu_1524_p3[32'd18];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln331_reg_1789 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        p_Result_s_reg_1853 <= p_Result_s_fu_1506_p2;
        tmp_202_reg_1843 <= {{sub_ln1148_fu_1480_p2[39:22]}};
        tmp_203_reg_1848 <= {{p_Val2_s_fu_1442_p10[23:6]}};
        tmp_780_reg_1838 <= p_Val2_s_fu_1442_p10[32'd23];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_fu_508_p2 == 1'd0))) begin
        select_ln314_reg_1651 <= select_ln314_fu_600_p3;
        select_ln320_1_reg_1631 <= select_ln320_1_fu_540_p3;
        select_ln323_1_reg_1645 <= select_ln323_1_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln313_fu_508_p2 == 1'd0))) begin
        select_ln323_reg_1639 <= select_ln323_fu_578_p3;
    end
end

always @ (*) begin
    if ((icmp_ln313_fu_508_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln331_fu_1404_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln313_reg_1622 == 1'd0))) begin
        ap_phi_mux_c0_0_phi_fu_456_p4 = select_ln320_1_reg_1631;
    end else begin
        ap_phi_mux_c0_0_phi_fu_456_p4 = c0_0_reg_452;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln331_reg_1789 == 1'd0))) begin
        ap_phi_mux_c_0_phi_fu_500_p4 = c_reg_1793;
    end else begin
        ap_phi_mux_c_0_phi_fu_500_p4 = c_0_reg_496;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln313_reg_1622 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_478_p4 = select_ln323_1_reg_1645;
    end else begin
        ap_phi_mux_i_0_phi_fu_478_p4 = i_0_reg_474;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln313_reg_1622 == 1'd0))) begin
        ap_phi_mux_indvar_flatten29_phi_fu_445_p4 = add_ln313_reg_1626;
    end else begin
        ap_phi_mux_indvar_flatten29_phi_fu_445_p4 = indvar_flatten29_reg_441;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln313_reg_1622 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_467_p4 = select_ln314_reg_1651;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_467_p4 = indvar_flatten_reg_463;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln313_reg_1622 == 1'd0))) begin
        ap_phi_mux_j_0_phi_fu_489_p4 = j_reg_1696;
    end else begin
        ap_phi_mux_j_0_phi_fu_489_p4 = j_0_reg_485;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_0_V_ce0 = 1'b1;
    end else begin
        inputs_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_1_V_ce0 = 1'b1;
    end else begin
        inputs_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_2_V_ce0 = 1'b1;
    end else begin
        inputs_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_3_V_ce0 = 1'b1;
    end else begin
        inputs_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_4_V_ce0 = 1'b1;
    end else begin
        inputs_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_5_V_ce0 = 1'b1;
    end else begin
        inputs_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_6_V_ce0 = 1'b1;
    end else begin
        inputs_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        inputs_7_V_ce0 = 1'b1;
    end else begin
        inputs_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        outputs_V_ce0 = 1'b1;
    end else begin
        outputs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln331_reg_1789_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        outputs_V_we0 = 1'b1;
    end else begin
        outputs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_0_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_0_V_address0 = tmp_0_V_addr_1_reg_1701;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_0_V_address0 = zext_ln320_fu_681_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_0_V_address0 = 64'd0;
    end else begin
        tmp_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_0_V_ce0 = 1'b1;
    end else begin
        tmp_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_0_V_d0 = select_ln340_185_fu_772_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_0_V_d0 = 24'd0;
    end else begin
        tmp_0_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0)))) begin
        tmp_0_V_we0 = 1'b1;
    end else begin
        tmp_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_1_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_1_V_address0 = tmp_1_V_addr_reg_1706;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_1_V_ce0 = 1'b1;
    end else begin
        tmp_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_1_V_we0 = 1'b1;
    end else begin
        tmp_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_2_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_2_V_address0 = tmp_2_V_addr_reg_1711;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_2_V_ce0 = 1'b1;
    end else begin
        tmp_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_2_V_we0 = 1'b1;
    end else begin
        tmp_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_3_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_3_V_address0 = tmp_3_V_addr_reg_1716;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_3_V_ce0 = 1'b1;
    end else begin
        tmp_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_3_V_we0 = 1'b1;
    end else begin
        tmp_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_4_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_4_V_address0 = tmp_4_V_addr_reg_1721;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_4_V_ce0 = 1'b1;
    end else begin
        tmp_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_4_V_we0 = 1'b1;
    end else begin
        tmp_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_5_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_5_V_address0 = tmp_5_V_addr_reg_1726;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_5_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_5_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_5_V_ce0 = 1'b1;
    end else begin
        tmp_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_5_V_we0 = 1'b1;
    end else begin
        tmp_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_6_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_6_V_address0 = tmp_6_V_addr_reg_1731;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_6_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_6_V_ce0 = 1'b1;
    end else begin
        tmp_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_6_V_we0 = 1'b1;
    end else begin
        tmp_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        tmp_7_V_address0 = zext_ln333_1_fu_1426_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_7_V_address0 = tmp_7_V_addr_reg_1736;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_V_address0 = zext_ln320_fu_681_p1;
    end else begin
        tmp_7_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tmp_7_V_ce0 = 1'b1;
    end else begin
        tmp_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln313_reg_1622_pp0_iter1_reg == 1'd0))) begin
        tmp_7_V_we0 = 1'b1;
    end else begin
        tmp_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln313_fu_508_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln313_fu_508_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln331_fu_1404_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln331_fu_1404_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_71_fu_788_p2 = ($signed(sext_ln703_56_fu_781_p1) + $signed(sext_ln703_57_fu_785_p1));

assign add_ln1192_72_fu_877_p2 = ($signed(sext_ln703_58_fu_870_p1) + $signed(sext_ln703_59_fu_874_p1));

assign add_ln1192_73_fu_966_p2 = ($signed(sext_ln703_60_fu_959_p1) + $signed(sext_ln703_61_fu_963_p1));

assign add_ln1192_74_fu_1055_p2 = ($signed(sext_ln703_62_fu_1048_p1) + $signed(sext_ln703_63_fu_1052_p1));

assign add_ln1192_75_fu_1144_p2 = ($signed(sext_ln703_64_fu_1137_p1) + $signed(sext_ln703_65_fu_1141_p1));

assign add_ln1192_76_fu_1233_p2 = ($signed(sext_ln703_66_fu_1226_p1) + $signed(sext_ln703_67_fu_1230_p1));

assign add_ln1192_77_fu_1322_p2 = ($signed(sext_ln703_68_fu_1315_p1) + $signed(sext_ln703_69_fu_1319_p1));

assign add_ln1192_fu_699_p2 = ($signed(sext_ln703_fu_692_p1) + $signed(sext_ln703_55_fu_696_p1));

assign add_ln1265_25_fu_631_p2 = (add_ln1265_fu_622_p2 + zext_ln323_fu_628_p1);

assign add_ln1265_26_fu_649_p2 = (zext_ln1265_50_fu_637_p1 + p_shl_cast_fu_641_p3);

assign add_ln1265_27_fu_658_p2 = (add_ln1265_26_fu_649_p2 + zext_ln1265_51_fu_655_p1);

assign add_ln1265_fu_622_p2 = (zext_ln1265_fu_608_p1 + zext_ln1265_49_fu_618_p1);

assign add_ln313_fu_514_p2 = (ap_phi_mux_indvar_flatten29_phi_fu_445_p4 + 10'd1);

assign add_ln314_1_fu_594_p2 = (ap_phi_mux_indvar_flatten_phi_fu_467_p4 + 8'd1);

assign and_ln320_fu_560_p2 = (xor_ln320_fu_548_p2 & icmp_ln315_fu_554_p2);

assign and_ln786_173_fu_821_p2 = (xor_ln786_98_fu_815_p2 & tmp_766_fu_794_p3);

assign and_ln786_174_fu_910_p2 = (xor_ln786_99_fu_904_p2 & tmp_768_fu_883_p3);

assign and_ln786_175_fu_999_p2 = (xor_ln786_100_fu_993_p2 & tmp_770_fu_972_p3);

assign and_ln786_176_fu_1088_p2 = (xor_ln786_101_fu_1082_p2 & tmp_772_fu_1061_p3);

assign and_ln786_177_fu_1177_p2 = (xor_ln786_102_fu_1171_p2 & tmp_774_fu_1150_p3);

assign and_ln786_178_fu_1266_p2 = (xor_ln786_103_fu_1260_p2 & tmp_776_fu_1239_p3);

assign and_ln786_179_fu_1355_p2 = (xor_ln786_104_fu_1349_p2 & tmp_778_fu_1328_p3);

assign and_ln786_181_fu_1570_p2 = (tmp_782_reg_1870 & p_Result_2_reg_1864);

assign and_ln786_fu_732_p2 = (xor_ln786_97_fu_726_p2 & tmp_764_fu_705_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign c0_fu_520_p2 = (ap_phi_mux_c0_0_phi_fu_456_p4 + 4'd1);

assign c_fu_1410_p2 = (ap_phi_mux_c_0_phi_fu_500_p4 + 7'd1);

assign i_fu_566_p2 = (select_ln320_fu_532_p3 + 4'd1);

assign icmp_ln313_fu_508_p2 = ((ap_phi_mux_indvar_flatten29_phi_fu_445_p4 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln314_fu_526_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_467_p4 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln315_fu_554_p2 = ((ap_phi_mux_j_0_phi_fu_489_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln331_fu_1404_p2 = ((ap_phi_mux_c_0_phi_fu_500_p4 == 7'd64) ? 1'b1 : 1'b0);

assign inputs_0_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_1_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_2_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_3_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_4_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_5_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_6_V_address0 = zext_ln1265_52_fu_664_p1;

assign inputs_7_V_address0 = zext_ln1265_52_fu_664_p1;

assign j_fu_676_p2 = (select_ln323_reg_1639 + 4'd1);

assign or_ln323_fu_572_p2 = (icmp_ln314_fu_526_p2 | and_ln320_fu_560_p2);

assign or_ln340_229_fu_750_p2 = (xor_ln340_47_fu_744_p2 | tmp_765_fu_718_p3);

assign or_ln340_230_fu_839_p2 = (xor_ln340_49_fu_833_p2 | tmp_767_fu_807_p3);

assign or_ln340_231_fu_928_p2 = (xor_ln340_51_fu_922_p2 | tmp_769_fu_896_p3);

assign or_ln340_232_fu_1017_p2 = (xor_ln340_53_fu_1011_p2 | tmp_771_fu_985_p3);

assign or_ln340_233_fu_1106_p2 = (xor_ln340_55_fu_1100_p2 | tmp_773_fu_1074_p3);

assign or_ln340_234_fu_1195_p2 = (xor_ln340_57_fu_1189_p2 | tmp_775_fu_1163_p3);

assign or_ln340_235_fu_1284_p2 = (xor_ln340_59_fu_1278_p2 | tmp_777_fu_1252_p3);

assign or_ln340_236_fu_1373_p2 = (xor_ln340_61_fu_1367_p2 | tmp_779_fu_1341_p3);

assign or_ln340_237_fu_1591_p2 = (xor_ln785_fu_1559_p2 | and_ln786_181_fu_1570_p2);

assign or_ln340_fu_1585_p2 = (underflow_fu_1580_p2 | overflow_fu_1564_p2);

assign or_ln785_fu_1555_p2 = (tmp_782_reg_1870 | p_Result_2_reg_1864);

assign outputs_V_address0 = zext_ln333_fu_1547_p1;

assign outputs_V_d0 = ((or_ln340_237_fu_1591_p2[0:0] === 1'b1) ? select_ln340_fu_1597_p3 : select_ln388_fu_1605_p3);

assign overflow_fu_1564_p2 = (xor_ln785_fu_1559_p2 & or_ln785_fu_1555_p2);

assign p_Result_s_fu_1506_p2 = (($signed(t_V_fu_1464_p3) < $signed(40'd1099507433473)) ? 1'b1 : 1'b0);

assign p_Val2_5_fu_1552_p1 = select_ln1148_reg_1859;

assign p_Val2_s_fu_1442_p9 = c_0_reg_496[2:0];

assign p_shl_cast_fu_641_p3 = {{add_ln1265_25_fu_631_p2}, {5'd0}};

assign select_ln1148_fu_1524_p3 = ((tmp_780_reg_1838[0:0] === 1'b1) ? sub_ln1148_16_fu_1515_p2 : zext_ln1148_16_fu_1521_p1);

assign select_ln314_fu_600_p3 = ((icmp_ln314_fu_526_p2[0:0] === 1'b1) ? 8'd1 : add_ln314_1_fu_594_p2);

assign select_ln320_1_fu_540_p3 = ((icmp_ln314_fu_526_p2[0:0] === 1'b1) ? c0_fu_520_p2 : ap_phi_mux_c0_0_phi_fu_456_p4);

assign select_ln320_fu_532_p3 = ((icmp_ln314_fu_526_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_i_0_phi_fu_478_p4);

assign select_ln323_1_fu_586_p3 = ((and_ln320_fu_560_p2[0:0] === 1'b1) ? i_fu_566_p2 : select_ln320_fu_532_p3);

assign select_ln323_fu_578_p3 = ((or_ln323_fu_572_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_0_phi_fu_489_p4);

assign select_ln340_185_fu_772_p3 = ((or_ln340_229_fu_750_p2[0:0] === 1'b1) ? select_ln340_89_fu_756_p3 : tmp_0_0_V_1_fu_764_p3);

assign select_ln340_89_fu_756_p3 = ((xor_ln340_fu_738_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_0_V_fu_713_p2);

assign select_ln340_90_fu_845_p3 = ((xor_ln340_48_fu_827_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_1_V_1_fu_802_p2);

assign select_ln340_91_fu_934_p3 = ((xor_ln340_50_fu_916_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_2_V_1_fu_891_p2);

assign select_ln340_92_fu_1023_p3 = ((xor_ln340_52_fu_1005_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_3_V_1_fu_980_p2);

assign select_ln340_93_fu_1112_p3 = ((xor_ln340_54_fu_1094_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_4_V_1_fu_1069_p2);

assign select_ln340_94_fu_1201_p3 = ((xor_ln340_56_fu_1183_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_5_V_1_fu_1158_p2);

assign select_ln340_95_fu_1290_p3 = ((xor_ln340_58_fu_1272_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_6_V_1_fu_1247_p2);

assign select_ln340_96_fu_1379_p3 = ((xor_ln340_60_fu_1361_p2[0:0] === 1'b1) ? 24'd8388607 : tmp_0_7_V_1_fu_1336_p2);

assign select_ln340_fu_1597_p3 = ((or_ln340_fu_1585_p2[0:0] === 1'b1) ? 24'd8388607 : p_Val2_5_fu_1552_p1);

assign select_ln388_fu_1605_p3 = ((underflow_fu_1580_p2[0:0] === 1'b1) ? 24'd8388608 : p_Val2_5_fu_1552_p1);

assign sext_ln703_55_fu_696_p1 = inputs_0_V_load_reg_1741;

assign sext_ln703_56_fu_781_p0 = tmp_1_V_q0;

assign sext_ln703_56_fu_781_p1 = sext_ln703_56_fu_781_p0;

assign sext_ln703_57_fu_785_p1 = inputs_1_V_load_reg_1747;

assign sext_ln703_58_fu_870_p0 = tmp_2_V_q0;

assign sext_ln703_58_fu_870_p1 = sext_ln703_58_fu_870_p0;

assign sext_ln703_59_fu_874_p1 = inputs_2_V_load_reg_1753;

assign sext_ln703_60_fu_959_p0 = tmp_3_V_q0;

assign sext_ln703_60_fu_959_p1 = sext_ln703_60_fu_959_p0;

assign sext_ln703_61_fu_963_p1 = inputs_3_V_load_reg_1759;

assign sext_ln703_62_fu_1048_p0 = tmp_4_V_q0;

assign sext_ln703_62_fu_1048_p1 = sext_ln703_62_fu_1048_p0;

assign sext_ln703_63_fu_1052_p1 = inputs_4_V_load_reg_1765;

assign sext_ln703_64_fu_1137_p0 = tmp_5_V_q0;

assign sext_ln703_64_fu_1137_p1 = sext_ln703_64_fu_1137_p0;

assign sext_ln703_65_fu_1141_p1 = inputs_5_V_load_reg_1771;

assign sext_ln703_66_fu_1226_p0 = tmp_6_V_q0;

assign sext_ln703_66_fu_1226_p1 = sext_ln703_66_fu_1226_p0;

assign sext_ln703_67_fu_1230_p1 = inputs_6_V_load_reg_1777;

assign sext_ln703_68_fu_1315_p0 = tmp_7_V_q0;

assign sext_ln703_68_fu_1315_p1 = sext_ln703_68_fu_1315_p0;

assign sext_ln703_69_fu_1319_p1 = inputs_7_V_load_reg_1783;

assign sext_ln703_fu_692_p0 = tmp_0_V_q0;

assign sext_ln703_fu_692_p1 = sext_ln703_fu_692_p0;

assign sub_ln1148_16_fu_1515_p2 = (19'd0 - zext_ln1148_fu_1512_p1);

assign sub_ln1148_fu_1480_p2 = (40'd0 - t_V_fu_1464_p3);

assign t_V_fu_1464_p3 = {{p_Val2_s_fu_1442_p10}, {16'd0}};

assign tmp_0_0_V_1_fu_764_p3 = ((and_ln786_fu_732_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_0_V_fu_713_p2);

assign tmp_0_0_V_fu_713_p1 = tmp_0_V_q0;

assign tmp_0_0_V_fu_713_p2 = ($signed(inputs_0_V_load_reg_1741) + $signed(tmp_0_0_V_fu_713_p1));

assign tmp_0_1_V_1_fu_802_p1 = tmp_1_V_q0;

assign tmp_0_1_V_1_fu_802_p2 = ($signed(inputs_1_V_load_reg_1747) + $signed(tmp_0_1_V_1_fu_802_p1));

assign tmp_0_1_V_2_fu_853_p3 = ((and_ln786_173_fu_821_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_1_V_1_fu_802_p2);

assign tmp_0_2_V_1_fu_891_p1 = tmp_2_V_q0;

assign tmp_0_2_V_1_fu_891_p2 = ($signed(inputs_2_V_load_reg_1753) + $signed(tmp_0_2_V_1_fu_891_p1));

assign tmp_0_2_V_2_fu_942_p3 = ((and_ln786_174_fu_910_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_2_V_1_fu_891_p2);

assign tmp_0_3_V_1_fu_980_p1 = tmp_3_V_q0;

assign tmp_0_3_V_1_fu_980_p2 = ($signed(inputs_3_V_load_reg_1759) + $signed(tmp_0_3_V_1_fu_980_p1));

assign tmp_0_3_V_2_fu_1031_p3 = ((and_ln786_175_fu_999_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_3_V_1_fu_980_p2);

assign tmp_0_4_V_1_fu_1069_p1 = tmp_4_V_q0;

assign tmp_0_4_V_1_fu_1069_p2 = ($signed(inputs_4_V_load_reg_1765) + $signed(tmp_0_4_V_1_fu_1069_p1));

assign tmp_0_4_V_2_fu_1120_p3 = ((and_ln786_176_fu_1088_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_4_V_1_fu_1069_p2);

assign tmp_0_5_V_1_fu_1158_p1 = tmp_5_V_q0;

assign tmp_0_5_V_1_fu_1158_p2 = ($signed(inputs_5_V_load_reg_1771) + $signed(tmp_0_5_V_1_fu_1158_p1));

assign tmp_0_5_V_2_fu_1209_p3 = ((and_ln786_177_fu_1177_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_5_V_1_fu_1158_p2);

assign tmp_0_6_V_1_fu_1247_p1 = tmp_6_V_q0;

assign tmp_0_6_V_1_fu_1247_p2 = ($signed(inputs_6_V_load_reg_1777) + $signed(tmp_0_6_V_1_fu_1247_p1));

assign tmp_0_6_V_2_fu_1298_p3 = ((and_ln786_178_fu_1266_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_6_V_1_fu_1247_p2);

assign tmp_0_7_V_1_fu_1336_p1 = tmp_7_V_q0;

assign tmp_0_7_V_1_fu_1336_p2 = ($signed(inputs_7_V_load_reg_1783) + $signed(tmp_0_7_V_1_fu_1336_p1));

assign tmp_0_7_V_2_fu_1387_p3 = ((and_ln786_179_fu_1355_p2[0:0] === 1'b1) ? 24'd8388608 : tmp_0_7_V_1_fu_1336_p2);

assign tmp_1_V_d0 = ((or_ln340_230_fu_839_p2[0:0] === 1'b1) ? select_ln340_90_fu_845_p3 : tmp_0_1_V_2_fu_853_p3);

assign tmp_2_V_d0 = ((or_ln340_231_fu_928_p2[0:0] === 1'b1) ? select_ln340_91_fu_934_p3 : tmp_0_2_V_2_fu_942_p3);

assign tmp_3_V_d0 = ((or_ln340_232_fu_1017_p2[0:0] === 1'b1) ? select_ln340_92_fu_1023_p3 : tmp_0_3_V_2_fu_1031_p3);

assign tmp_4_V_d0 = ((or_ln340_233_fu_1106_p2[0:0] === 1'b1) ? select_ln340_93_fu_1112_p3 : tmp_0_4_V_2_fu_1120_p3);

assign tmp_5_V_d0 = ((or_ln340_234_fu_1195_p2[0:0] === 1'b1) ? select_ln340_94_fu_1201_p3 : tmp_0_5_V_2_fu_1209_p3);

assign tmp_6_V_d0 = ((or_ln340_235_fu_1284_p2[0:0] === 1'b1) ? select_ln340_95_fu_1290_p3 : tmp_0_6_V_2_fu_1298_p3);

assign tmp_764_fu_705_p3 = add_ln1192_fu_699_p2[32'd24];

assign tmp_765_fu_718_p3 = tmp_0_0_V_fu_713_p2[32'd23];

assign tmp_766_fu_794_p3 = add_ln1192_71_fu_788_p2[32'd24];

assign tmp_767_fu_807_p3 = tmp_0_1_V_1_fu_802_p2[32'd23];

assign tmp_768_fu_883_p3 = add_ln1192_72_fu_877_p2[32'd24];

assign tmp_769_fu_896_p3 = tmp_0_2_V_1_fu_891_p2[32'd23];

assign tmp_770_fu_972_p3 = add_ln1192_73_fu_966_p2[32'd24];

assign tmp_771_fu_985_p3 = tmp_0_3_V_1_fu_980_p2[32'd23];

assign tmp_772_fu_1061_p3 = add_ln1192_74_fu_1055_p2[32'd24];

assign tmp_773_fu_1074_p3 = tmp_0_4_V_1_fu_1069_p2[32'd23];

assign tmp_774_fu_1150_p3 = add_ln1192_75_fu_1144_p2[32'd24];

assign tmp_775_fu_1163_p3 = tmp_0_5_V_1_fu_1158_p2[32'd23];

assign tmp_776_fu_1239_p3 = add_ln1192_76_fu_1233_p2[32'd24];

assign tmp_777_fu_1252_p3 = tmp_0_6_V_1_fu_1247_p2[32'd23];

assign tmp_778_fu_1328_p3 = add_ln1192_77_fu_1322_p2[32'd24];

assign tmp_779_fu_1341_p3 = tmp_0_7_V_1_fu_1336_p2[32'd23];

assign tmp_7_V_d0 = ((or_ln340_236_fu_1373_p2[0:0] === 1'b1) ? select_ln340_96_fu_1379_p3 : tmp_0_7_V_2_fu_1387_p3);

assign tmp_fu_611_p3 = {{select_ln320_1_reg_1631}, {5'd0}};

assign trunc_ln333_1_fu_1416_p4 = {{ap_phi_mux_c_0_phi_fu_500_p4[5:3]}};

assign underflow_fu_1580_p2 = (xor_ln786_fu_1574_p2 & p_Result_s_reg_1853_pp1_iter2_reg);

assign xor_ln320_fu_548_p2 = (icmp_ln314_fu_526_p2 ^ 1'd1);

assign xor_ln340_47_fu_744_p2 = (tmp_764_fu_705_p3 ^ 1'd1);

assign xor_ln340_48_fu_827_p2 = (tmp_767_fu_807_p3 ^ tmp_766_fu_794_p3);

assign xor_ln340_49_fu_833_p2 = (tmp_766_fu_794_p3 ^ 1'd1);

assign xor_ln340_50_fu_916_p2 = (tmp_769_fu_896_p3 ^ tmp_768_fu_883_p3);

assign xor_ln340_51_fu_922_p2 = (tmp_768_fu_883_p3 ^ 1'd1);

assign xor_ln340_52_fu_1005_p2 = (tmp_771_fu_985_p3 ^ tmp_770_fu_972_p3);

assign xor_ln340_53_fu_1011_p2 = (tmp_770_fu_972_p3 ^ 1'd1);

assign xor_ln340_54_fu_1094_p2 = (tmp_773_fu_1074_p3 ^ tmp_772_fu_1061_p3);

assign xor_ln340_55_fu_1100_p2 = (tmp_772_fu_1061_p3 ^ 1'd1);

assign xor_ln340_56_fu_1183_p2 = (tmp_775_fu_1163_p3 ^ tmp_774_fu_1150_p3);

assign xor_ln340_57_fu_1189_p2 = (tmp_774_fu_1150_p3 ^ 1'd1);

assign xor_ln340_58_fu_1272_p2 = (tmp_777_fu_1252_p3 ^ tmp_776_fu_1239_p3);

assign xor_ln340_59_fu_1278_p2 = (tmp_776_fu_1239_p3 ^ 1'd1);

assign xor_ln340_60_fu_1361_p2 = (tmp_779_fu_1341_p3 ^ tmp_778_fu_1328_p3);

assign xor_ln340_61_fu_1367_p2 = (tmp_778_fu_1328_p3 ^ 1'd1);

assign xor_ln340_fu_738_p2 = (tmp_765_fu_718_p3 ^ tmp_764_fu_705_p3);

assign xor_ln785_fu_1559_p2 = (p_Result_s_reg_1853_pp1_iter2_reg ^ 1'd1);

assign xor_ln786_100_fu_993_p2 = (tmp_771_fu_985_p3 ^ 1'd1);

assign xor_ln786_101_fu_1082_p2 = (tmp_773_fu_1074_p3 ^ 1'd1);

assign xor_ln786_102_fu_1171_p2 = (tmp_775_fu_1163_p3 ^ 1'd1);

assign xor_ln786_103_fu_1260_p2 = (tmp_777_fu_1252_p3 ^ 1'd1);

assign xor_ln786_104_fu_1349_p2 = (tmp_779_fu_1341_p3 ^ 1'd1);

assign xor_ln786_97_fu_726_p2 = (tmp_765_fu_718_p3 ^ 1'd1);

assign xor_ln786_98_fu_815_p2 = (tmp_767_fu_807_p3 ^ 1'd1);

assign xor_ln786_99_fu_904_p2 = (tmp_769_fu_896_p3 ^ 1'd1);

assign xor_ln786_fu_1574_p2 = (1'd1 ^ and_ln786_181_fu_1570_p2);

assign zext_ln1148_16_fu_1521_p1 = tmp_203_reg_1848;

assign zext_ln1148_fu_1512_p1 = tmp_202_reg_1843;

assign zext_ln1265_49_fu_618_p1 = tmp_fu_611_p3;

assign zext_ln1265_50_fu_637_p1 = add_ln1265_25_fu_631_p2;

assign zext_ln1265_51_fu_655_p1 = select_ln323_reg_1639;

assign zext_ln1265_52_fu_664_p1 = add_ln1265_27_fu_658_p2;

assign zext_ln1265_fu_608_p1 = select_ln320_1_reg_1631;

assign zext_ln320_fu_681_p1 = select_ln320_1_reg_1631;

assign zext_ln323_fu_628_p1 = select_ln323_1_reg_1645;

assign zext_ln333_1_fu_1426_p1 = trunc_ln333_1_fu_1416_p4;

assign zext_ln333_fu_1547_p1 = c_0_reg_496_pp1_iter2_reg;

endmodule //avgpool_8x8
