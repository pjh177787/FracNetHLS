// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bn1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_buf_0_V_address0,
        out_buf_0_V_ce0,
        out_buf_0_V_we0,
        out_buf_0_V_d0,
        out_buf_1_V_address0,
        out_buf_1_V_ce0,
        out_buf_1_V_we0,
        out_buf_1_V_d0,
        out_buf_2_V_address0,
        out_buf_2_V_ce0,
        out_buf_2_V_we0,
        out_buf_2_V_d0,
        out_buf_3_V_address0,
        out_buf_3_V_ce0,
        out_buf_3_V_we0,
        out_buf_3_V_d0,
        out_buf_4_V_address0,
        out_buf_4_V_ce0,
        out_buf_4_V_we0,
        out_buf_4_V_d0,
        out_buf_5_V_address0,
        out_buf_5_V_ce0,
        out_buf_5_V_we0,
        out_buf_5_V_d0,
        out_buf_6_V_address0,
        out_buf_6_V_ce0,
        out_buf_6_V_we0,
        out_buf_6_V_d0,
        out_buf_7_V_address0,
        out_buf_7_V_ce0,
        out_buf_7_V_we0,
        out_buf_7_V_d0,
        block_t0_0_V_address0,
        block_t0_0_V_ce0,
        block_t0_0_V_q0,
        block_t0_1_V_address0,
        block_t0_1_V_ce0,
        block_t0_1_V_q0,
        block_t0_2_V_address0,
        block_t0_2_V_ce0,
        block_t0_2_V_q0,
        block_t0_3_V_address0,
        block_t0_3_V_ce0,
        block_t0_3_V_q0,
        block_t0_4_V_address0,
        block_t0_4_V_ce0,
        block_t0_4_V_q0,
        block_t0_5_V_address0,
        block_t0_5_V_ce0,
        block_t0_5_V_q0,
        block_t0_6_V_address0,
        block_t0_6_V_ce0,
        block_t0_6_V_q0,
        block_t0_7_V_address0,
        block_t0_7_V_ce0,
        block_t0_7_V_q0,
        bn_weight_V_offset,
        channel_tile
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] out_buf_0_V_address0;
output   out_buf_0_V_ce0;
output   out_buf_0_V_we0;
output  [23:0] out_buf_0_V_d0;
output  [13:0] out_buf_1_V_address0;
output   out_buf_1_V_ce0;
output   out_buf_1_V_we0;
output  [23:0] out_buf_1_V_d0;
output  [13:0] out_buf_2_V_address0;
output   out_buf_2_V_ce0;
output   out_buf_2_V_we0;
output  [23:0] out_buf_2_V_d0;
output  [13:0] out_buf_3_V_address0;
output   out_buf_3_V_ce0;
output   out_buf_3_V_we0;
output  [23:0] out_buf_3_V_d0;
output  [13:0] out_buf_4_V_address0;
output   out_buf_4_V_ce0;
output   out_buf_4_V_we0;
output  [23:0] out_buf_4_V_d0;
output  [13:0] out_buf_5_V_address0;
output   out_buf_5_V_ce0;
output   out_buf_5_V_we0;
output  [23:0] out_buf_5_V_d0;
output  [13:0] out_buf_6_V_address0;
output   out_buf_6_V_ce0;
output   out_buf_6_V_we0;
output  [23:0] out_buf_6_V_d0;
output  [13:0] out_buf_7_V_address0;
output   out_buf_7_V_ce0;
output   out_buf_7_V_we0;
output  [23:0] out_buf_7_V_d0;
output  [10:0] block_t0_0_V_address0;
output   block_t0_0_V_ce0;
input  [15:0] block_t0_0_V_q0;
output  [10:0] block_t0_1_V_address0;
output   block_t0_1_V_ce0;
input  [15:0] block_t0_1_V_q0;
output  [10:0] block_t0_2_V_address0;
output   block_t0_2_V_ce0;
input  [15:0] block_t0_2_V_q0;
output  [10:0] block_t0_3_V_address0;
output   block_t0_3_V_ce0;
input  [15:0] block_t0_3_V_q0;
output  [10:0] block_t0_4_V_address0;
output   block_t0_4_V_ce0;
input  [15:0] block_t0_4_V_q0;
output  [10:0] block_t0_5_V_address0;
output   block_t0_5_V_ce0;
input  [15:0] block_t0_5_V_q0;
output  [10:0] block_t0_6_V_address0;
output   block_t0_6_V_ce0;
input  [15:0] block_t0_6_V_q0;
output  [10:0] block_t0_7_V_address0;
output   block_t0_7_V_ce0;
input  [15:0] block_t0_7_V_q0;
input  [1:0] bn_weight_V_offset;
input  [1:0] channel_tile;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_buf_0_V_ce0;
reg out_buf_0_V_we0;
reg out_buf_1_V_ce0;
reg out_buf_1_V_we0;
reg out_buf_2_V_ce0;
reg out_buf_2_V_we0;
reg out_buf_3_V_ce0;
reg out_buf_3_V_we0;
reg out_buf_4_V_ce0;
reg out_buf_4_V_we0;
reg out_buf_5_V_ce0;
reg out_buf_5_V_we0;
reg out_buf_6_V_ce0;
reg out_buf_6_V_we0;
reg out_buf_7_V_ce0;
reg out_buf_7_V_we0;
reg block_t0_0_V_ce0;
reg block_t0_1_V_ce0;
reg block_t0_2_V_ce0;
reg block_t0_3_V_ce0;
reg block_t0_4_V_ce0;
reg block_t0_5_V_ce0;
reg block_t0_6_V_ce0;
reg block_t0_7_V_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] bn1_weight_fix_V_0_address0;
reg    bn1_weight_fix_V_0_ce0;
wire   [15:0] bn1_weight_fix_V_0_q0;
wire   [2:0] bn1_bias_fix_V_0_address0;
reg    bn1_bias_fix_V_0_ce0;
wire   [21:0] bn1_bias_fix_V_0_q0;
wire   [2:0] bn1_weight_fix_V_1_address0;
reg    bn1_weight_fix_V_1_ce0;
wire   [15:0] bn1_weight_fix_V_1_q0;
wire   [2:0] bn1_bias_fix_V_1_address0;
reg    bn1_bias_fix_V_1_ce0;
wire   [20:0] bn1_bias_fix_V_1_q0;
wire   [2:0] bn1_weight_fix_V_2_address0;
reg    bn1_weight_fix_V_2_ce0;
wire   [15:0] bn1_weight_fix_V_2_q0;
wire   [2:0] bn1_bias_fix_V_2_address0;
reg    bn1_bias_fix_V_2_ce0;
wire   [19:0] bn1_bias_fix_V_2_q0;
wire   [2:0] bn1_weight_fix_V_3_address0;
reg    bn1_weight_fix_V_3_ce0;
wire   [15:0] bn1_weight_fix_V_3_q0;
wire   [2:0] bn1_bias_fix_V_3_address0;
reg    bn1_bias_fix_V_3_ce0;
wire   [21:0] bn1_bias_fix_V_3_q0;
wire   [2:0] bn1_weight_fix_V_4_address0;
reg    bn1_weight_fix_V_4_ce0;
wire   [15:0] bn1_weight_fix_V_4_q0;
wire   [2:0] bn1_bias_fix_V_4_address0;
reg    bn1_bias_fix_V_4_ce0;
wire   [21:0] bn1_bias_fix_V_4_q0;
wire   [2:0] bn1_weight_fix_V_5_address0;
reg    bn1_weight_fix_V_5_ce0;
wire   [14:0] bn1_weight_fix_V_5_q0;
wire   [2:0] bn1_bias_fix_V_5_address0;
reg    bn1_bias_fix_V_5_ce0;
wire   [18:0] bn1_bias_fix_V_5_q0;
wire   [2:0] bn1_weight_fix_V_6_address0;
reg    bn1_weight_fix_V_6_ce0;
wire   [15:0] bn1_weight_fix_V_6_q0;
wire   [2:0] bn1_bias_fix_V_6_address0;
reg    bn1_bias_fix_V_6_ce0;
wire   [20:0] bn1_bias_fix_V_6_q0;
wire   [2:0] bn1_weight_fix_V_7_address0;
reg    bn1_weight_fix_V_7_ce0;
wire   [15:0] bn1_weight_fix_V_7_q0;
wire   [2:0] bn1_bias_fix_V_7_address0;
reg    bn1_bias_fix_V_7_ce0;
wire   [18:0] bn1_bias_fix_V_7_q0;
reg   [10:0] indvar_flatten_reg_592;
reg   [5:0] row_0_reg_603;
reg   [5:0] col_0_reg_614;
wire   [7:0] add_ln203_fu_661_p2;
reg   [7:0] add_ln203_reg_2952;
wire    ap_CS_fsm_state2;
wire   [31:0] zext_ln1265_fu_667_p1;
reg   [31:0] zext_ln1265_reg_2957;
wire  signed [31:0] sext_ln1192_fu_671_p1;
reg  signed [31:0] sext_ln1192_reg_2962;
wire   [31:0] zext_ln1192_fu_675_p1;
reg   [31:0] zext_ln1192_reg_2967;
wire   [31:0] zext_ln1265_1_fu_679_p1;
reg   [31:0] zext_ln1265_1_reg_2972;
wire  signed [31:0] sext_ln1192_17_fu_683_p1;
reg  signed [31:0] sext_ln1192_17_reg_2977;
wire   [31:0] zext_ln1192_1_fu_687_p1;
reg   [31:0] zext_ln1192_1_reg_2982;
wire   [31:0] zext_ln1265_2_fu_691_p1;
reg   [31:0] zext_ln1265_2_reg_2987;
wire   [31:0] zext_ln1192_2_fu_695_p1;
reg   [31:0] zext_ln1192_2_reg_2992;
wire   [31:0] zext_ln1265_3_fu_699_p1;
reg   [31:0] zext_ln1265_3_reg_2997;
wire  signed [31:0] sext_ln1192_18_fu_703_p1;
reg  signed [31:0] sext_ln1192_18_reg_3002;
wire   [31:0] zext_ln1192_3_fu_707_p1;
reg   [31:0] zext_ln1192_3_reg_3007;
wire   [31:0] zext_ln1265_4_fu_711_p1;
reg   [31:0] zext_ln1265_4_reg_3012;
wire  signed [31:0] sext_ln1192_19_fu_715_p1;
reg  signed [31:0] sext_ln1192_19_reg_3017;
wire   [31:0] zext_ln1192_4_fu_719_p1;
reg   [31:0] zext_ln1192_4_reg_3022;
wire   [30:0] zext_ln1265_5_fu_723_p1;
reg   [30:0] zext_ln1265_5_reg_3027;
wire  signed [30:0] sext_ln1192_20_fu_727_p1;
reg  signed [30:0] sext_ln1192_20_reg_3032;
wire   [30:0] zext_ln1116_fu_731_p1;
reg   [30:0] zext_ln1116_reg_3037;
wire   [31:0] zext_ln1265_6_fu_735_p1;
reg   [31:0] zext_ln1265_6_reg_3042;
wire  signed [31:0] sext_ln1192_21_fu_739_p1;
reg  signed [31:0] sext_ln1192_21_reg_3047;
wire   [31:0] zext_ln1192_5_fu_743_p1;
reg   [31:0] zext_ln1192_5_reg_3052;
wire   [31:0] zext_ln1265_7_fu_747_p1;
reg   [31:0] zext_ln1265_7_reg_3057;
wire   [31:0] zext_ln1192_6_fu_751_p1;
reg   [31:0] zext_ln1192_6_reg_3062;
wire   [5:0] row_fu_755_p2;
reg   [5:0] row_reg_3067;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln123_fu_761_p2;
reg   [0:0] icmp_ln123_reg_3072;
reg   [0:0] icmp_ln123_reg_3072_pp0_iter1_reg;
reg   [0:0] icmp_ln123_reg_3072_pp0_iter2_reg;
reg   [0:0] icmp_ln123_reg_3072_pp0_iter3_reg;
reg   [0:0] icmp_ln123_reg_3072_pp0_iter4_reg;
wire   [10:0] add_ln123_fu_767_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln124_fu_773_p2;
reg   [0:0] icmp_ln124_reg_3081;
wire   [5:0] select_ln127_fu_779_p3;
reg   [5:0] select_ln127_reg_3086;
reg   [5:0] select_ln127_reg_3086_pp0_iter1_reg;
reg   [5:0] select_ln127_reg_3086_pp0_iter2_reg;
reg   [5:0] select_ln127_reg_3086_pp0_iter3_reg;
reg   [5:0] select_ln127_reg_3086_pp0_iter4_reg;
wire   [5:0] select_ln127_1_fu_787_p3;
reg   [5:0] select_ln127_1_reg_3091;
reg   [5:0] select_ln127_1_reg_3091_pp0_iter1_reg;
reg   [5:0] select_ln127_1_reg_3091_pp0_iter2_reg;
reg   [5:0] select_ln127_1_reg_3091_pp0_iter3_reg;
reg   [5:0] select_ln127_1_reg_3091_pp0_iter4_reg;
wire   [5:0] add_ln127_fu_795_p2;
reg   [5:0] add_ln127_reg_3097;
wire   [5:0] col_fu_801_p2;
reg   [5:0] col_reg_3102;
reg  signed [15:0] block_t0_0_V_load_reg_3148;
reg  signed [15:0] block_t0_1_V_load_reg_3153;
reg  signed [15:0] block_t0_2_V_load_reg_3158;
reg  signed [15:0] block_t0_3_V_load_reg_3163;
reg  signed [15:0] block_t0_4_V_load_reg_3168;
reg  signed [15:0] block_t0_5_V_load_reg_3173;
reg  signed [15:0] block_t0_6_V_load_reg_3178;
reg  signed [15:0] block_t0_7_V_load_reg_3183;
wire  signed [31:0] mul_ln1118_fu_2820_p2;
reg  signed [31:0] mul_ln1118_reg_3188;
wire  signed [31:0] mul_ln1118_49_fu_2825_p2;
reg  signed [31:0] mul_ln1118_49_reg_3194;
wire  signed [31:0] grp_fu_2830_p3;
reg  signed [31:0] add_ln1192_58_reg_3200;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_678_reg_3206;
reg   [23:0] trunc_ln708_64_reg_3212;
reg   [0:0] tmp_680_reg_3217;
wire   [0:0] icmp_ln879_70_fu_896_p2;
reg   [0:0] icmp_ln879_70_reg_3222;
reg   [3:0] tmp_74_reg_3227;
wire  signed [31:0] mul_ln1118_51_fu_2841_p2;
reg  signed [31:0] mul_ln1118_51_reg_3233;
wire  signed [31:0] mul_ln1118_52_fu_2846_p2;
reg  signed [31:0] mul_ln1118_52_reg_3239;
wire  signed [30:0] mul_ln1118_53_fu_2851_p2;
reg  signed [30:0] mul_ln1118_53_reg_3245;
wire  signed [31:0] mul_ln1118_54_fu_2856_p2;
reg  signed [31:0] mul_ln1118_54_reg_3251;
wire  signed [31:0] grp_fu_2861_p3;
reg  signed [31:0] add_ln1192_63_reg_3257;
reg   [0:0] tmp_708_reg_3263;
reg   [23:0] trunc_ln708_69_reg_3269;
reg   [0:0] tmp_710_reg_3274;
wire   [0:0] icmp_ln879_80_fu_958_p2;
reg   [0:0] icmp_ln879_80_reg_3279;
reg   [3:0] tmp_84_reg_3284;
reg   [0:0] tmp_666_reg_3290;
wire   [23:0] add_ln415_fu_1019_p2;
reg   [23:0] add_ln415_reg_3296;
wire   [0:0] and_ln416_fu_1039_p2;
reg   [0:0] and_ln416_reg_3302;
wire   [0:0] tmp_670_fu_1045_p3;
reg   [0:0] tmp_670_reg_3308;
wire   [0:0] icmp_ln879_67_fu_1079_p2;
reg   [0:0] icmp_ln879_67_reg_3313;
wire   [0:0] icmp_ln768_fu_1085_p2;
reg   [0:0] icmp_ln768_reg_3319;
wire   [0:0] and_ln786_fu_1119_p2;
reg   [0:0] and_ln786_reg_3324;
reg   [0:0] tmp_672_reg_3330;
wire   [23:0] add_ln415_59_fu_1171_p2;
reg   [23:0] add_ln415_59_reg_3336;
wire   [0:0] and_ln416_65_fu_1191_p2;
reg   [0:0] and_ln416_65_reg_3342;
wire   [0:0] tmp_676_fu_1197_p3;
reg   [0:0] tmp_676_reg_3348;
wire   [0:0] icmp_ln879_69_fu_1231_p2;
reg   [0:0] icmp_ln879_69_reg_3353;
wire   [0:0] icmp_ln768_33_fu_1237_p2;
reg   [0:0] icmp_ln768_33_reg_3359;
wire   [0:0] and_ln786_1_fu_1271_p2;
reg   [0:0] and_ln786_1_reg_3364;
wire   [23:0] select_ln340_162_fu_1450_p3;
reg   [23:0] select_ln340_162_reg_3370;
reg   [0:0] tmp_684_reg_3375;
wire   [23:0] add_ln415_61_fu_1504_p2;
reg   [23:0] add_ln415_61_reg_3381;
wire   [0:0] and_ln416_67_fu_1524_p2;
reg   [0:0] and_ln416_67_reg_3387;
wire   [0:0] tmp_688_fu_1530_p3;
reg   [0:0] tmp_688_reg_3393;
wire   [0:0] icmp_ln879_73_fu_1564_p2;
reg   [0:0] icmp_ln879_73_reg_3398;
wire   [0:0] icmp_ln768_35_fu_1570_p2;
reg   [0:0] icmp_ln768_35_reg_3404;
wire   [0:0] and_ln786_3_fu_1604_p2;
reg   [0:0] and_ln786_3_reg_3409;
reg   [0:0] tmp_690_reg_3415;
wire   [23:0] add_ln415_62_fu_1656_p2;
reg   [23:0] add_ln415_62_reg_3421;
wire   [0:0] and_ln416_68_fu_1676_p2;
reg   [0:0] and_ln416_68_reg_3427;
wire   [0:0] tmp_694_fu_1682_p3;
reg   [0:0] tmp_694_reg_3433;
wire   [0:0] icmp_ln879_75_fu_1716_p2;
reg   [0:0] icmp_ln879_75_reg_3438;
wire   [0:0] icmp_ln768_36_fu_1722_p2;
reg   [0:0] icmp_ln768_36_reg_3444;
wire   [0:0] and_ln786_4_fu_1756_p2;
reg   [0:0] and_ln786_4_reg_3449;
reg   [0:0] tmp_696_reg_3455;
wire   [23:0] add_ln415_63_fu_1808_p2;
reg   [23:0] add_ln415_63_reg_3461;
wire   [0:0] and_ln416_69_fu_1828_p2;
reg   [0:0] and_ln416_69_reg_3467;
wire   [0:0] tmp_700_fu_1834_p3;
reg   [0:0] tmp_700_reg_3473;
wire   [0:0] icmp_ln879_77_fu_1868_p2;
reg   [0:0] icmp_ln879_77_reg_3478;
wire   [0:0] icmp_ln768_37_fu_1874_p2;
reg   [0:0] icmp_ln768_37_reg_3484;
wire   [0:0] and_ln786_5_fu_1908_p2;
reg   [0:0] and_ln786_5_reg_3489;
reg   [0:0] tmp_702_reg_3495;
wire   [23:0] add_ln415_64_fu_1960_p2;
reg   [23:0] add_ln415_64_reg_3501;
wire   [0:0] and_ln416_70_fu_1980_p2;
reg   [0:0] and_ln416_70_reg_3507;
wire   [0:0] tmp_706_fu_1986_p3;
reg   [0:0] tmp_706_reg_3513;
wire   [0:0] icmp_ln879_79_fu_2020_p2;
reg   [0:0] icmp_ln879_79_reg_3518;
wire   [0:0] icmp_ln768_38_fu_2026_p2;
reg   [0:0] icmp_ln768_38_reg_3524;
wire   [0:0] and_ln786_6_fu_2060_p2;
reg   [0:0] and_ln786_6_reg_3529;
wire   [23:0] select_ln340_167_fu_2239_p3;
reg   [23:0] select_ln340_167_reg_3535;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [5:0] ap_phi_mux_row_0_phi_fu_607_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_col_0_phi_fu_618_p4;
wire   [63:0] bn_weight_V_offset_c_fu_625_p1;
wire   [63:0] zext_ln446_5_fu_843_p1;
wire   [63:0] zext_ln203_10_fu_2286_p1;
wire   [6:0] tmp_183_fu_649_p3;
wire   [7:0] zext_ln203_fu_645_p1;
wire   [7:0] zext_ln203_6_fu_657_p1;
wire  signed [21:0] sext_ln1192_fu_671_p0;
wire  signed [21:0] zext_ln1192_fu_675_p0;
wire  signed [20:0] sext_ln1192_17_fu_683_p0;
wire  signed [20:0] zext_ln1192_1_fu_687_p0;
wire  signed [21:0] sext_ln1192_18_fu_703_p0;
wire  signed [21:0] zext_ln1192_3_fu_707_p0;
wire  signed [21:0] sext_ln1192_19_fu_715_p0;
wire  signed [21:0] zext_ln1192_4_fu_719_p0;
wire  signed [18:0] sext_ln1192_20_fu_727_p0;
wire  signed [18:0] zext_ln1116_fu_731_p0;
wire  signed [20:0] sext_ln1192_21_fu_739_p0;
wire  signed [20:0] zext_ln1192_5_fu_743_p0;
wire   [5:0] select_ln127_2_fu_807_p3;
wire   [10:0] tmp_665_fu_816_p3;
wire   [11:0] zext_ln127_1_fu_812_p1;
wire   [11:0] zext_ln446_fu_824_p1;
wire   [11:0] add_ln446_fu_828_p2;
wire   [11:0] zext_ln446_4_fu_834_p1;
wire   [11:0] add_ln446_2_fu_837_p2;
wire   [2:0] tmp_73_fu_887_p4;
wire   [2:0] tmp_83_fu_949_p4;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_fu_973_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln713_fu_995_p2;
wire   [0:0] tmp_668_fu_1007_p3;
wire   [23:0] zext_ln415_fu_1015_p1;
wire   [23:0] trunc_ln9_fu_985_p4;
wire   [0:0] tmp_669_fu_1025_p3;
wire   [0:0] tmp_667_fu_999_p3;
wire   [0:0] xor_ln416_fu_1033_p2;
wire   [2:0] tmp_s_fu_1053_p4;
wire   [3:0] tmp_70_fu_1069_p4;
wire   [0:0] tmp_671_fu_1091_p3;
wire   [0:0] icmp_ln879_fu_1063_p2;
wire   [0:0] xor_ln779_fu_1099_p2;
wire   [0:0] and_ln779_fu_1105_p2;
wire   [0:0] select_ln416_fu_1111_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_57_fu_1125_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln713_16_fu_1147_p2;
wire   [0:0] tmp_674_fu_1159_p3;
wire   [23:0] zext_ln415_76_fu_1167_p1;
wire   [23:0] trunc_ln708_s_fu_1137_p4;
wire   [0:0] tmp_675_fu_1177_p3;
wire   [0:0] tmp_673_fu_1151_p3;
wire   [0:0] xor_ln416_87_fu_1185_p2;
wire   [2:0] tmp_71_fu_1205_p4;
wire   [3:0] tmp_72_fu_1221_p4;
wire   [0:0] tmp_677_fu_1243_p3;
wire   [0:0] icmp_ln879_68_fu_1215_p2;
wire   [0:0] xor_ln779_56_fu_1251_p2;
wire   [0:0] and_ln779_1_fu_1257_p2;
wire   [0:0] select_ln416_33_fu_1263_p3;
wire   [23:0] zext_ln415_77_fu_1284_p1;
wire   [23:0] add_ln415_60_fu_1287_p2;
wire   [0:0] tmp_681_fu_1292_p3;
wire   [0:0] tmp_679_fu_1277_p3;
wire   [0:0] xor_ln416_88_fu_1300_p2;
wire   [0:0] and_ln416_66_fu_1306_p2;
wire   [0:0] icmp_ln879_71_fu_1320_p2;
wire   [0:0] icmp_ln768_34_fu_1325_p2;
wire   [0:0] tmp_683_fu_1338_p3;
wire   [0:0] xor_ln779_57_fu_1345_p2;
wire   [0:0] and_ln779_2_fu_1351_p2;
wire   [0:0] select_ln777_34_fu_1330_p3;
wire   [0:0] tmp_682_fu_1312_p3;
wire   [0:0] xor_ln785_2_fu_1370_p2;
wire   [0:0] or_ln785_2_fu_1376_p2;
wire   [0:0] xor_ln785_132_fu_1382_p2;
wire   [0:0] select_ln416_34_fu_1356_p3;
wire   [0:0] and_ln781_2_fu_1364_p2;
wire   [0:0] and_ln786_2_fu_1393_p2;
wire   [0:0] or_ln786_73_fu_1399_p2;
wire   [0:0] xor_ln786_90_fu_1405_p2;
wire   [0:0] and_ln786_152_fu_1411_p2;
wire   [0:0] and_ln785_66_fu_1387_p2;
wire   [0:0] or_ln340_211_fu_1422_p2;
wire   [0:0] or_ln340_2_fu_1416_p2;
wire   [0:0] or_ln340_189_fu_1428_p2;
wire   [23:0] select_ln340_2_fu_1434_p3;
wire   [23:0] select_ln388_2_fu_1442_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_59_fu_1458_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln713_17_fu_1480_p2;
wire   [0:0] tmp_686_fu_1492_p3;
wire   [23:0] zext_ln415_78_fu_1500_p1;
wire   [23:0] trunc_ln708_65_fu_1470_p4;
wire   [0:0] tmp_687_fu_1510_p3;
wire   [0:0] tmp_685_fu_1484_p3;
wire   [0:0] xor_ln416_89_fu_1518_p2;
wire   [2:0] tmp_75_fu_1538_p4;
wire   [3:0] tmp_76_fu_1554_p4;
wire   [0:0] tmp_689_fu_1576_p3;
wire   [0:0] icmp_ln879_72_fu_1548_p2;
wire   [0:0] xor_ln779_58_fu_1584_p2;
wire   [0:0] and_ln779_3_fu_1590_p2;
wire   [0:0] select_ln416_35_fu_1596_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_60_fu_1610_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln713_18_fu_1632_p2;
wire   [0:0] tmp_692_fu_1644_p3;
wire   [23:0] zext_ln415_79_fu_1652_p1;
wire   [23:0] trunc_ln708_66_fu_1622_p4;
wire   [0:0] tmp_693_fu_1662_p3;
wire   [0:0] tmp_691_fu_1636_p3;
wire   [0:0] xor_ln416_90_fu_1670_p2;
wire   [2:0] tmp_77_fu_1690_p4;
wire   [3:0] tmp_78_fu_1706_p4;
wire   [0:0] tmp_695_fu_1728_p3;
wire   [0:0] icmp_ln879_74_fu_1700_p2;
wire   [0:0] xor_ln779_59_fu_1736_p2;
wire   [0:0] and_ln779_4_fu_1742_p2;
wire   [0:0] select_ln416_36_fu_1748_p3;
(* use_dsp48 = "no" *) wire   [30:0] add_ln1192_61_fu_1762_p2;
(* use_dsp48 = "no" *) wire   [30:0] add_ln713_19_fu_1784_p2;
wire   [0:0] tmp_698_fu_1796_p3;
wire   [23:0] zext_ln415_80_fu_1804_p1;
wire   [23:0] trunc_ln708_67_fu_1774_p4;
wire   [0:0] tmp_699_fu_1814_p3;
wire   [0:0] tmp_697_fu_1788_p3;
wire   [0:0] xor_ln416_91_fu_1822_p2;
wire   [1:0] tmp_79_fu_1842_p4;
wire   [2:0] tmp_80_fu_1858_p4;
wire   [0:0] tmp_701_fu_1880_p3;
wire   [0:0] icmp_ln879_76_fu_1852_p2;
wire   [0:0] xor_ln779_60_fu_1888_p2;
wire   [0:0] and_ln779_5_fu_1894_p2;
wire   [0:0] select_ln416_37_fu_1900_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_62_fu_1914_p2;
(* use_dsp48 = "no" *) wire   [31:0] add_ln713_20_fu_1936_p2;
wire   [0:0] tmp_704_fu_1948_p3;
wire   [23:0] zext_ln415_81_fu_1956_p1;
wire   [23:0] trunc_ln708_68_fu_1926_p4;
wire   [0:0] tmp_705_fu_1966_p3;
wire   [0:0] tmp_703_fu_1940_p3;
wire   [0:0] xor_ln416_92_fu_1974_p2;
wire   [2:0] tmp_81_fu_1994_p4;
wire   [3:0] tmp_82_fu_2010_p4;
wire   [0:0] tmp_707_fu_2032_p3;
wire   [0:0] icmp_ln879_78_fu_2004_p2;
wire   [0:0] xor_ln779_61_fu_2040_p2;
wire   [0:0] and_ln779_6_fu_2046_p2;
wire   [0:0] select_ln416_38_fu_2052_p3;
wire   [23:0] zext_ln415_82_fu_2073_p1;
wire   [23:0] add_ln415_65_fu_2076_p2;
wire   [0:0] tmp_711_fu_2081_p3;
wire   [0:0] tmp_709_fu_2066_p3;
wire   [0:0] xor_ln416_93_fu_2089_p2;
wire   [0:0] and_ln416_71_fu_2095_p2;
wire   [0:0] icmp_ln879_81_fu_2109_p2;
wire   [0:0] icmp_ln768_39_fu_2114_p2;
wire   [0:0] tmp_713_fu_2127_p3;
wire   [0:0] xor_ln779_62_fu_2134_p2;
wire   [0:0] and_ln779_7_fu_2140_p2;
wire   [0:0] select_ln777_39_fu_2119_p3;
wire   [0:0] tmp_712_fu_2101_p3;
wire   [0:0] xor_ln785_7_fu_2159_p2;
wire   [0:0] or_ln785_7_fu_2165_p2;
wire   [0:0] xor_ln785_137_fu_2171_p2;
wire   [0:0] select_ln416_39_fu_2145_p3;
wire   [0:0] and_ln781_7_fu_2153_p2;
wire   [0:0] and_ln786_7_fu_2182_p2;
wire   [0:0] or_ln786_78_fu_2188_p2;
wire   [0:0] xor_ln786_95_fu_2194_p2;
wire   [0:0] and_ln786_157_fu_2200_p2;
wire   [0:0] and_ln785_71_fu_2176_p2;
wire   [0:0] or_ln340_216_fu_2211_p2;
wire   [0:0] or_ln340_7_fu_2205_p2;
wire   [0:0] or_ln340_199_fu_2217_p2;
wire   [23:0] select_ln340_7_fu_2223_p3;
wire   [23:0] select_ln388_7_fu_2231_p3;
wire   [7:0] zext_ln127_fu_2247_p1;
wire   [7:0] add_ln203_4_fu_2250_p2;
wire   [12:0] tmp_664_fu_2259_p3;
wire   [14:0] zext_ln203_7_fu_2255_p1;
wire   [14:0] zext_ln203_8_fu_2267_p1;
wire   [14:0] add_ln203_5_fu_2271_p2;
wire   [14:0] zext_ln203_9_fu_2277_p1;
wire   [14:0] add_ln203_6_fu_2280_p2;
wire   [0:0] select_ln777_fu_2298_p3;
wire   [0:0] xor_ln785_fu_2307_p2;
wire   [0:0] or_ln785_fu_2313_p2;
wire   [0:0] xor_ln785_130_fu_2318_p2;
wire   [0:0] and_ln781_fu_2303_p2;
wire   [0:0] or_ln786_fu_2329_p2;
wire   [0:0] xor_ln786_fu_2334_p2;
wire   [0:0] and_ln786_150_fu_2340_p2;
wire   [0:0] and_ln785_fu_2323_p2;
wire   [0:0] or_ln340_209_fu_2351_p2;
wire   [0:0] or_ln340_fu_2345_p2;
wire   [0:0] or_ln340_185_fu_2356_p2;
wire   [23:0] select_ln340_fu_2362_p3;
wire   [23:0] select_ln388_fu_2369_p3;
wire   [0:0] select_ln777_33_fu_2385_p3;
wire   [0:0] xor_ln785_1_fu_2394_p2;
wire   [0:0] or_ln785_1_fu_2400_p2;
wire   [0:0] xor_ln785_131_fu_2405_p2;
wire   [0:0] and_ln781_1_fu_2390_p2;
wire   [0:0] or_ln786_72_fu_2416_p2;
wire   [0:0] xor_ln786_89_fu_2421_p2;
wire   [0:0] and_ln786_151_fu_2427_p2;
wire   [0:0] and_ln785_65_fu_2410_p2;
wire   [0:0] or_ln340_210_fu_2438_p2;
wire   [0:0] or_ln340_1_fu_2432_p2;
wire   [0:0] or_ln340_187_fu_2443_p2;
wire   [23:0] select_ln340_1_fu_2449_p3;
wire   [23:0] select_ln388_1_fu_2456_p3;
wire   [0:0] select_ln777_35_fu_2472_p3;
wire   [0:0] xor_ln785_3_fu_2481_p2;
wire   [0:0] or_ln785_3_fu_2487_p2;
wire   [0:0] xor_ln785_133_fu_2492_p2;
wire   [0:0] and_ln781_3_fu_2477_p2;
wire   [0:0] or_ln786_74_fu_2503_p2;
wire   [0:0] xor_ln786_91_fu_2508_p2;
wire   [0:0] and_ln786_153_fu_2514_p2;
wire   [0:0] and_ln785_67_fu_2497_p2;
wire   [0:0] or_ln340_212_fu_2525_p2;
wire   [0:0] or_ln340_3_fu_2519_p2;
wire   [0:0] or_ln340_191_fu_2530_p2;
wire   [23:0] select_ln340_3_fu_2536_p3;
wire   [23:0] select_ln388_3_fu_2543_p3;
wire   [0:0] select_ln777_36_fu_2559_p3;
wire   [0:0] xor_ln785_4_fu_2568_p2;
wire   [0:0] or_ln785_4_fu_2574_p2;
wire   [0:0] xor_ln785_134_fu_2579_p2;
wire   [0:0] and_ln781_4_fu_2564_p2;
wire   [0:0] or_ln786_75_fu_2590_p2;
wire   [0:0] xor_ln786_92_fu_2595_p2;
wire   [0:0] and_ln786_154_fu_2601_p2;
wire   [0:0] and_ln785_68_fu_2584_p2;
wire   [0:0] or_ln340_213_fu_2612_p2;
wire   [0:0] or_ln340_4_fu_2606_p2;
wire   [0:0] or_ln340_193_fu_2617_p2;
wire   [23:0] select_ln340_4_fu_2623_p3;
wire   [23:0] select_ln388_4_fu_2630_p3;
wire   [0:0] select_ln777_37_fu_2646_p3;
wire   [0:0] xor_ln785_5_fu_2655_p2;
wire   [0:0] or_ln785_5_fu_2661_p2;
wire   [0:0] xor_ln785_135_fu_2666_p2;
wire   [0:0] and_ln781_5_fu_2651_p2;
wire   [0:0] or_ln786_76_fu_2677_p2;
wire   [0:0] xor_ln786_93_fu_2682_p2;
wire   [0:0] and_ln786_155_fu_2688_p2;
wire   [0:0] and_ln785_69_fu_2671_p2;
wire   [0:0] or_ln340_214_fu_2699_p2;
wire   [0:0] or_ln340_5_fu_2693_p2;
wire   [0:0] or_ln340_195_fu_2704_p2;
wire   [23:0] select_ln340_5_fu_2710_p3;
wire   [23:0] select_ln388_5_fu_2717_p3;
wire   [0:0] select_ln777_38_fu_2733_p3;
wire   [0:0] xor_ln785_6_fu_2742_p2;
wire   [0:0] or_ln785_6_fu_2748_p2;
wire   [0:0] xor_ln785_136_fu_2753_p2;
wire   [0:0] and_ln781_6_fu_2738_p2;
wire   [0:0] or_ln786_77_fu_2764_p2;
wire   [0:0] xor_ln786_94_fu_2769_p2;
wire   [0:0] and_ln786_156_fu_2775_p2;
wire   [0:0] and_ln785_70_fu_2758_p2;
wire   [0:0] or_ln340_215_fu_2786_p2;
wire   [0:0] or_ln340_6_fu_2780_p2;
wire   [0:0] or_ln340_197_fu_2791_p2;
wire   [23:0] select_ln340_6_fu_2797_p3;
wire   [23:0] select_ln388_6_fu_2804_p3;
wire   [15:0] mul_ln1118_fu_2820_p0;
wire   [15:0] mul_ln1118_49_fu_2825_p0;
wire   [15:0] grp_fu_2830_p0;
wire   [19:0] grp_fu_2830_p2;
wire   [15:0] mul_ln1118_51_fu_2841_p0;
wire   [15:0] mul_ln1118_52_fu_2846_p0;
wire   [14:0] mul_ln1118_53_fu_2851_p0;
wire   [15:0] mul_ln1118_54_fu_2856_p0;
wire   [15:0] grp_fu_2861_p0;
wire   [18:0] grp_fu_2861_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

bn1_bn1_weight_fibnm #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_0_address0),
    .ce0(bn1_weight_fix_V_0_ce0),
    .q0(bn1_weight_fix_V_0_q0)
);

bn1_bn1_bias_fix_bom #(
    .DataWidth( 22 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_0_address0),
    .ce0(bn1_bias_fix_V_0_ce0),
    .q0(bn1_bias_fix_V_0_q0)
);

bn1_bn1_weight_fibpm #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_1_address0),
    .ce0(bn1_weight_fix_V_1_ce0),
    .q0(bn1_weight_fix_V_1_q0)
);

bn1_bn1_bias_fix_bqm #(
    .DataWidth( 21 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_1_address0),
    .ce0(bn1_bias_fix_V_1_ce0),
    .q0(bn1_bias_fix_V_1_q0)
);

bn1_bn1_weight_fibrm #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_2_address0),
    .ce0(bn1_weight_fix_V_2_ce0),
    .q0(bn1_weight_fix_V_2_q0)
);

bn1_bn1_bias_fix_bsm #(
    .DataWidth( 20 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_2_address0),
    .ce0(bn1_bias_fix_V_2_ce0),
    .q0(bn1_bias_fix_V_2_q0)
);

bn1_bn1_weight_fibtn #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_3_address0),
    .ce0(bn1_weight_fix_V_3_ce0),
    .q0(bn1_weight_fix_V_3_q0)
);

bn1_bn1_bias_fix_bun #(
    .DataWidth( 22 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_3_address0),
    .ce0(bn1_bias_fix_V_3_ce0),
    .q0(bn1_bias_fix_V_3_q0)
);

bn1_bn1_weight_fibvn #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_4_address0),
    .ce0(bn1_weight_fix_V_4_ce0),
    .q0(bn1_weight_fix_V_4_q0)
);

bn1_bn1_bias_fix_bwn #(
    .DataWidth( 22 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_4_address0),
    .ce0(bn1_bias_fix_V_4_ce0),
    .q0(bn1_bias_fix_V_4_q0)
);

bn1_bn1_weight_fibxn #(
    .DataWidth( 15 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_5_address0),
    .ce0(bn1_weight_fix_V_5_ce0),
    .q0(bn1_weight_fix_V_5_q0)
);

bn1_bn1_bias_fix_byn #(
    .DataWidth( 19 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_5_address0),
    .ce0(bn1_bias_fix_V_5_ce0),
    .q0(bn1_bias_fix_V_5_q0)
);

bn1_bn1_weight_fibzo #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_6_address0),
    .ce0(bn1_weight_fix_V_6_ce0),
    .q0(bn1_weight_fix_V_6_q0)
);

bn1_bn1_bias_fix_bAo #(
    .DataWidth( 21 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_6_address0),
    .ce0(bn1_bias_fix_V_6_ce0),
    .q0(bn1_bias_fix_V_6_q0)
);

bn1_bn1_weight_fibBo #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_weight_fix_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_weight_fix_V_7_address0),
    .ce0(bn1_weight_fix_V_7_ce0),
    .q0(bn1_weight_fix_V_7_q0)
);

bn1_bn1_bias_fix_bCo #(
    .DataWidth( 19 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
bn1_bias_fix_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn1_bias_fix_V_7_address0),
    .ce0(bn1_bias_fix_V_7_ce0),
    .q0(bn1_bias_fix_V_7_q0)
);

FracNet_T_mul_mulbDo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FracNet_T_mul_mulbDo_U106(
    .din0(mul_ln1118_fu_2820_p0),
    .din1(block_t0_0_V_load_reg_3148),
    .dout(mul_ln1118_fu_2820_p2)
);

FracNet_T_mul_mulbDo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FracNet_T_mul_mulbDo_U107(
    .din0(mul_ln1118_49_fu_2825_p0),
    .din1(block_t0_1_V_load_reg_3153),
    .dout(mul_ln1118_49_fu_2825_p2)
);

FracNet_T_mac_mulbEo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 32 ))
FracNet_T_mac_mulbEo_U108(
    .din0(grp_fu_2830_p0),
    .din1(block_t0_2_V_load_reg_3158),
    .din2(grp_fu_2830_p2),
    .dout(grp_fu_2830_p3)
);

FracNet_T_mul_mulbDo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FracNet_T_mul_mulbDo_U109(
    .din0(mul_ln1118_51_fu_2841_p0),
    .din1(block_t0_3_V_load_reg_3163),
    .dout(mul_ln1118_51_fu_2841_p2)
);

FracNet_T_mul_mulbDo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FracNet_T_mul_mulbDo_U110(
    .din0(mul_ln1118_52_fu_2846_p0),
    .din1(block_t0_4_V_load_reg_3168),
    .dout(mul_ln1118_52_fu_2846_p2)
);

FracNet_T_mul_mulbFp #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
FracNet_T_mul_mulbFp_U111(
    .din0(mul_ln1118_53_fu_2851_p0),
    .din1(block_t0_5_V_load_reg_3173),
    .dout(mul_ln1118_53_fu_2851_p2)
);

FracNet_T_mul_mulbDo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
FracNet_T_mul_mulbDo_U112(
    .din0(mul_ln1118_54_fu_2856_p0),
    .din1(block_t0_6_V_load_reg_3178),
    .dout(mul_ln1118_54_fu_2856_p2)
);

FracNet_T_mac_mulbGp #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 32 ))
FracNet_T_mac_mulbGp_U113(
    .din0(grp_fu_2861_p0),
    .din1(block_t0_7_V_load_reg_3183),
    .din2(grp_fu_2861_p2),
    .dout(grp_fu_2861_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_0_reg_614 <= col_reg_3102;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        col_0_reg_614 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_761_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_592 <= add_ln123_fu_767_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_592 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_0_reg_603 <= select_ln127_1_reg_3091;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        row_0_reg_603 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        add_ln1192_58_reg_3200 <= grp_fu_2830_p3;
        add_ln1192_63_reg_3257 <= grp_fu_2861_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_761_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln127_reg_3097 <= add_ln127_fu_795_p2;
        icmp_ln124_reg_3081 <= icmp_ln124_fu_773_p2;
        select_ln127_reg_3086 <= select_ln127_fu_779_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln203_reg_2952 <= add_ln203_fu_661_p2;
        sext_ln1192_17_reg_2977 <= sext_ln1192_17_fu_683_p1;
        sext_ln1192_18_reg_3002 <= sext_ln1192_18_fu_703_p1;
        sext_ln1192_19_reg_3017 <= sext_ln1192_19_fu_715_p1;
        sext_ln1192_20_reg_3032 <= sext_ln1192_20_fu_727_p1;
        sext_ln1192_21_reg_3047 <= sext_ln1192_21_fu_739_p1;
        sext_ln1192_reg_2962 <= sext_ln1192_fu_671_p1;
        zext_ln1116_reg_3037[18 : 0] <= zext_ln1116_fu_731_p1[18 : 0];
        zext_ln1192_1_reg_2982[20 : 0] <= zext_ln1192_1_fu_687_p1[20 : 0];
        zext_ln1192_2_reg_2992[19 : 0] <= zext_ln1192_2_fu_695_p1[19 : 0];
        zext_ln1192_3_reg_3007[21 : 0] <= zext_ln1192_3_fu_707_p1[21 : 0];
        zext_ln1192_4_reg_3022[21 : 0] <= zext_ln1192_4_fu_719_p1[21 : 0];
        zext_ln1192_5_reg_3052[20 : 0] <= zext_ln1192_5_fu_743_p1[20 : 0];
        zext_ln1192_6_reg_3062[18 : 0] <= zext_ln1192_6_fu_751_p1[18 : 0];
        zext_ln1192_reg_2967[21 : 0] <= zext_ln1192_fu_675_p1[21 : 0];
        zext_ln1265_1_reg_2972[15 : 0] <= zext_ln1265_1_fu_679_p1[15 : 0];
        zext_ln1265_2_reg_2987[15 : 0] <= zext_ln1265_2_fu_691_p1[15 : 0];
        zext_ln1265_3_reg_2997[15 : 0] <= zext_ln1265_3_fu_699_p1[15 : 0];
        zext_ln1265_4_reg_3012[15 : 0] <= zext_ln1265_4_fu_711_p1[15 : 0];
        zext_ln1265_5_reg_3027[14 : 0] <= zext_ln1265_5_fu_723_p1[14 : 0];
        zext_ln1265_6_reg_3042[15 : 0] <= zext_ln1265_6_fu_735_p1[15 : 0];
        zext_ln1265_7_reg_3057[15 : 0] <= zext_ln1265_7_fu_747_p1[15 : 0];
        zext_ln1265_reg_2957[15 : 0] <= zext_ln1265_fu_667_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_59_reg_3336 <= add_ln415_59_fu_1171_p2;
        add_ln415_61_reg_3381 <= add_ln415_61_fu_1504_p2;
        add_ln415_62_reg_3421 <= add_ln415_62_fu_1656_p2;
        add_ln415_63_reg_3461 <= add_ln415_63_fu_1808_p2;
        add_ln415_64_reg_3501 <= add_ln415_64_fu_1960_p2;
        add_ln415_reg_3296 <= add_ln415_fu_1019_p2;
        and_ln416_65_reg_3342 <= and_ln416_65_fu_1191_p2;
        and_ln416_67_reg_3387 <= and_ln416_67_fu_1524_p2;
        and_ln416_68_reg_3427 <= and_ln416_68_fu_1676_p2;
        and_ln416_69_reg_3467 <= and_ln416_69_fu_1828_p2;
        and_ln416_70_reg_3507 <= and_ln416_70_fu_1980_p2;
        and_ln416_reg_3302 <= and_ln416_fu_1039_p2;
        and_ln786_1_reg_3364 <= and_ln786_1_fu_1271_p2;
        and_ln786_3_reg_3409 <= and_ln786_3_fu_1604_p2;
        and_ln786_4_reg_3449 <= and_ln786_4_fu_1756_p2;
        and_ln786_5_reg_3489 <= and_ln786_5_fu_1908_p2;
        and_ln786_6_reg_3529 <= and_ln786_6_fu_2060_p2;
        and_ln786_reg_3324 <= and_ln786_fu_1119_p2;
        icmp_ln768_33_reg_3359 <= icmp_ln768_33_fu_1237_p2;
        icmp_ln768_35_reg_3404 <= icmp_ln768_35_fu_1570_p2;
        icmp_ln768_36_reg_3444 <= icmp_ln768_36_fu_1722_p2;
        icmp_ln768_37_reg_3484 <= icmp_ln768_37_fu_1874_p2;
        icmp_ln768_38_reg_3524 <= icmp_ln768_38_fu_2026_p2;
        icmp_ln768_reg_3319 <= icmp_ln768_fu_1085_p2;
        icmp_ln879_67_reg_3313 <= icmp_ln879_67_fu_1079_p2;
        icmp_ln879_69_reg_3353 <= icmp_ln879_69_fu_1231_p2;
        icmp_ln879_73_reg_3398 <= icmp_ln879_73_fu_1564_p2;
        icmp_ln879_75_reg_3438 <= icmp_ln879_75_fu_1716_p2;
        icmp_ln879_77_reg_3478 <= icmp_ln879_77_fu_1868_p2;
        icmp_ln879_79_reg_3518 <= icmp_ln879_79_fu_2020_p2;
        select_ln340_162_reg_3370 <= select_ln340_162_fu_1450_p3;
        select_ln340_167_reg_3535 <= select_ln340_167_fu_2239_p3;
        tmp_666_reg_3290 <= add_ln1192_fu_973_p2[32'd31];
        tmp_670_reg_3308 <= add_ln415_fu_1019_p2[32'd23];
        tmp_672_reg_3330 <= add_ln1192_57_fu_1125_p2[32'd31];
        tmp_676_reg_3348 <= add_ln415_59_fu_1171_p2[32'd23];
        tmp_684_reg_3375 <= add_ln1192_59_fu_1458_p2[32'd31];
        tmp_688_reg_3393 <= add_ln415_61_fu_1504_p2[32'd23];
        tmp_690_reg_3415 <= add_ln1192_60_fu_1610_p2[32'd31];
        tmp_694_reg_3433 <= add_ln415_62_fu_1656_p2[32'd23];
        tmp_696_reg_3455 <= add_ln1192_61_fu_1762_p2[32'd30];
        tmp_700_reg_3473 <= add_ln415_63_fu_1808_p2[32'd23];
        tmp_702_reg_3495 <= add_ln1192_62_fu_1914_p2[32'd31];
        tmp_706_reg_3513 <= add_ln415_64_fu_1960_p2[32'd23];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        block_t0_0_V_load_reg_3148 <= block_t0_0_V_q0;
        block_t0_1_V_load_reg_3153 <= block_t0_1_V_q0;
        block_t0_2_V_load_reg_3158 <= block_t0_2_V_q0;
        block_t0_3_V_load_reg_3163 <= block_t0_3_V_q0;
        block_t0_4_V_load_reg_3168 <= block_t0_4_V_q0;
        block_t0_5_V_load_reg_3173 <= block_t0_5_V_q0;
        block_t0_6_V_load_reg_3178 <= block_t0_6_V_q0;
        block_t0_7_V_load_reg_3183 <= block_t0_7_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_761_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_reg_3102 <= col_fu_801_p2;
        select_ln127_1_reg_3091 <= select_ln127_1_fu_787_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln123_reg_3072 <= icmp_ln123_fu_761_p2;
        icmp_ln123_reg_3072_pp0_iter1_reg <= icmp_ln123_reg_3072;
        row_reg_3067 <= row_fu_755_p2;
        select_ln127_1_reg_3091_pp0_iter1_reg <= select_ln127_1_reg_3091;
        select_ln127_reg_3086_pp0_iter1_reg <= select_ln127_reg_3086;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln123_reg_3072_pp0_iter2_reg <= icmp_ln123_reg_3072_pp0_iter1_reg;
        icmp_ln123_reg_3072_pp0_iter3_reg <= icmp_ln123_reg_3072_pp0_iter2_reg;
        icmp_ln123_reg_3072_pp0_iter4_reg <= icmp_ln123_reg_3072_pp0_iter3_reg;
        select_ln127_1_reg_3091_pp0_iter2_reg <= select_ln127_1_reg_3091_pp0_iter1_reg;
        select_ln127_1_reg_3091_pp0_iter3_reg <= select_ln127_1_reg_3091_pp0_iter2_reg;
        select_ln127_1_reg_3091_pp0_iter4_reg <= select_ln127_1_reg_3091_pp0_iter3_reg;
        select_ln127_reg_3086_pp0_iter2_reg <= select_ln127_reg_3086_pp0_iter1_reg;
        select_ln127_reg_3086_pp0_iter3_reg <= select_ln127_reg_3086_pp0_iter2_reg;
        select_ln127_reg_3086_pp0_iter4_reg <= select_ln127_reg_3086_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_reg_3072_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln879_70_reg_3222 <= icmp_ln879_70_fu_896_p2;
        icmp_ln879_80_reg_3279 <= icmp_ln879_80_fu_958_p2;
        mul_ln1118_49_reg_3194 <= mul_ln1118_49_fu_2825_p2;
        mul_ln1118_51_reg_3233 <= mul_ln1118_51_fu_2841_p2;
        mul_ln1118_52_reg_3239 <= mul_ln1118_52_fu_2846_p2;
        mul_ln1118_53_reg_3245 <= mul_ln1118_53_fu_2851_p2;
        mul_ln1118_54_reg_3251 <= mul_ln1118_54_fu_2856_p2;
        mul_ln1118_reg_3188 <= mul_ln1118_fu_2820_p2;
        tmp_678_reg_3206 <= grp_fu_2830_p3[32'd31];
        tmp_680_reg_3217 <= grp_fu_2830_p3[32'd3];
        tmp_708_reg_3263 <= grp_fu_2861_p3[32'd31];
        tmp_710_reg_3274 <= grp_fu_2861_p3[32'd3];
        tmp_74_reg_3227 <= {{grp_fu_2830_p3[31:28]}};
        tmp_84_reg_3284 <= {{grp_fu_2861_p3[31:28]}};
        trunc_ln708_64_reg_3212 <= {{grp_fu_2830_p3[27:4]}};
        trunc_ln708_69_reg_3269 <= {{grp_fu_2861_p3[27:4]}};
    end
end

always @ (*) begin
    if ((icmp_ln123_fu_761_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln123_reg_3072 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_0_phi_fu_618_p4 = col_reg_3102;
    end else begin
        ap_phi_mux_col_0_phi_fu_618_p4 = col_0_reg_614;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln123_reg_3072 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_0_phi_fu_607_p4 = select_ln127_1_reg_3091;
    end else begin
        ap_phi_mux_row_0_phi_fu_607_p4 = row_0_reg_603;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_0_V_ce0 = 1'b1;
    end else begin
        block_t0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_1_V_ce0 = 1'b1;
    end else begin
        block_t0_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_2_V_ce0 = 1'b1;
    end else begin
        block_t0_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_3_V_ce0 = 1'b1;
    end else begin
        block_t0_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_4_V_ce0 = 1'b1;
    end else begin
        block_t0_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_5_V_ce0 = 1'b1;
    end else begin
        block_t0_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_6_V_ce0 = 1'b1;
    end else begin
        block_t0_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_t0_7_V_ce0 = 1'b1;
    end else begin
        block_t0_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_0_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_1_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_2_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_3_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_4_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_5_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_6_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_bias_fix_V_7_ce0 = 1'b1;
    end else begin
        bn1_bias_fix_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_0_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_1_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_2_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_3_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_4_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_5_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_6_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        bn1_weight_fix_V_7_ce0 = 1'b1;
    end else begin
        bn1_weight_fix_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_0_V_ce0 = 1'b1;
    end else begin
        out_buf_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_0_V_we0 = 1'b1;
    end else begin
        out_buf_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_1_V_ce0 = 1'b1;
    end else begin
        out_buf_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_1_V_we0 = 1'b1;
    end else begin
        out_buf_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_2_V_ce0 = 1'b1;
    end else begin
        out_buf_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_2_V_we0 = 1'b1;
    end else begin
        out_buf_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_3_V_ce0 = 1'b1;
    end else begin
        out_buf_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_3_V_we0 = 1'b1;
    end else begin
        out_buf_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_4_V_ce0 = 1'b1;
    end else begin
        out_buf_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_4_V_we0 = 1'b1;
    end else begin
        out_buf_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_5_V_ce0 = 1'b1;
    end else begin
        out_buf_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_5_V_we0 = 1'b1;
    end else begin
        out_buf_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_6_V_ce0 = 1'b1;
    end else begin
        out_buf_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_6_V_we0 = 1'b1;
    end else begin
        out_buf_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_7_V_ce0 = 1'b1;
    end else begin
        out_buf_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_3072_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_buf_7_V_we0 = 1'b1;
    end else begin
        out_buf_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln123_fu_761_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln123_fu_761_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_57_fu_1125_p2 = ($signed(mul_ln1118_49_reg_3194) + $signed(sext_ln1192_17_reg_2977));

assign add_ln1192_59_fu_1458_p2 = ($signed(mul_ln1118_51_reg_3233) + $signed(sext_ln1192_18_reg_3002));

assign add_ln1192_60_fu_1610_p2 = ($signed(mul_ln1118_52_reg_3239) + $signed(sext_ln1192_19_reg_3017));

assign add_ln1192_61_fu_1762_p2 = ($signed(mul_ln1118_53_reg_3245) + $signed(sext_ln1192_20_reg_3032));

assign add_ln1192_62_fu_1914_p2 = ($signed(mul_ln1118_54_reg_3251) + $signed(sext_ln1192_21_reg_3047));

assign add_ln1192_fu_973_p2 = ($signed(mul_ln1118_reg_3188) + $signed(sext_ln1192_reg_2962));

assign add_ln123_fu_767_p2 = (indvar_flatten_reg_592 + 11'd1);

assign add_ln127_fu_795_p2 = (6'd2 + ap_phi_mux_row_0_phi_fu_607_p4);

assign add_ln203_4_fu_2250_p2 = (add_ln203_reg_2952 + zext_ln127_fu_2247_p1);

assign add_ln203_5_fu_2271_p2 = (zext_ln203_7_fu_2255_p1 + zext_ln203_8_fu_2267_p1);

assign add_ln203_6_fu_2280_p2 = (add_ln203_5_fu_2271_p2 + zext_ln203_9_fu_2277_p1);

assign add_ln203_fu_661_p2 = (zext_ln203_fu_645_p1 + zext_ln203_6_fu_657_p1);

assign add_ln415_59_fu_1171_p2 = (zext_ln415_76_fu_1167_p1 + trunc_ln708_s_fu_1137_p4);

assign add_ln415_60_fu_1287_p2 = (zext_ln415_77_fu_1284_p1 + trunc_ln708_64_reg_3212);

assign add_ln415_61_fu_1504_p2 = (zext_ln415_78_fu_1500_p1 + trunc_ln708_65_fu_1470_p4);

assign add_ln415_62_fu_1656_p2 = (zext_ln415_79_fu_1652_p1 + trunc_ln708_66_fu_1622_p4);

assign add_ln415_63_fu_1808_p2 = (zext_ln415_80_fu_1804_p1 + trunc_ln708_67_fu_1774_p4);

assign add_ln415_64_fu_1960_p2 = (zext_ln415_81_fu_1956_p1 + trunc_ln708_68_fu_1926_p4);

assign add_ln415_65_fu_2076_p2 = (zext_ln415_82_fu_2073_p1 + trunc_ln708_69_reg_3269);

assign add_ln415_fu_1019_p2 = (zext_ln415_fu_1015_p1 + trunc_ln9_fu_985_p4);

assign add_ln446_2_fu_837_p2 = (add_ln446_fu_828_p2 + zext_ln446_4_fu_834_p1);

assign add_ln446_fu_828_p2 = (zext_ln127_1_fu_812_p1 + zext_ln446_fu_824_p1);

assign add_ln713_16_fu_1147_p2 = ($signed(mul_ln1118_49_reg_3194) + $signed(zext_ln1192_1_reg_2982));

assign add_ln713_17_fu_1480_p2 = ($signed(mul_ln1118_51_reg_3233) + $signed(zext_ln1192_3_reg_3007));

assign add_ln713_18_fu_1632_p2 = ($signed(mul_ln1118_52_reg_3239) + $signed(zext_ln1192_4_reg_3022));

assign add_ln713_19_fu_1784_p2 = ($signed(mul_ln1118_53_reg_3245) + $signed(zext_ln1116_reg_3037));

assign add_ln713_20_fu_1936_p2 = ($signed(mul_ln1118_54_reg_3251) + $signed(zext_ln1192_5_reg_3052));

assign add_ln713_fu_995_p2 = ($signed(mul_ln1118_reg_3188) + $signed(zext_ln1192_reg_2967));

assign and_ln416_65_fu_1191_p2 = (xor_ln416_87_fu_1185_p2 & tmp_673_fu_1151_p3);

assign and_ln416_66_fu_1306_p2 = (xor_ln416_88_fu_1300_p2 & tmp_679_fu_1277_p3);

assign and_ln416_67_fu_1524_p2 = (xor_ln416_89_fu_1518_p2 & tmp_685_fu_1484_p3);

assign and_ln416_68_fu_1676_p2 = (xor_ln416_90_fu_1670_p2 & tmp_691_fu_1636_p3);

assign and_ln416_69_fu_1828_p2 = (xor_ln416_91_fu_1822_p2 & tmp_697_fu_1788_p3);

assign and_ln416_70_fu_1980_p2 = (xor_ln416_92_fu_1974_p2 & tmp_703_fu_1940_p3);

assign and_ln416_71_fu_2095_p2 = (xor_ln416_93_fu_2089_p2 & tmp_709_fu_2066_p3);

assign and_ln416_fu_1039_p2 = (xor_ln416_fu_1033_p2 & tmp_667_fu_999_p3);

assign and_ln779_1_fu_1257_p2 = (xor_ln779_56_fu_1251_p2 & icmp_ln879_68_fu_1215_p2);

assign and_ln779_2_fu_1351_p2 = (xor_ln779_57_fu_1345_p2 & icmp_ln879_70_reg_3222);

assign and_ln779_3_fu_1590_p2 = (xor_ln779_58_fu_1584_p2 & icmp_ln879_72_fu_1548_p2);

assign and_ln779_4_fu_1742_p2 = (xor_ln779_59_fu_1736_p2 & icmp_ln879_74_fu_1700_p2);

assign and_ln779_5_fu_1894_p2 = (xor_ln779_60_fu_1888_p2 & icmp_ln879_76_fu_1852_p2);

assign and_ln779_6_fu_2046_p2 = (xor_ln779_61_fu_2040_p2 & icmp_ln879_78_fu_2004_p2);

assign and_ln779_7_fu_2140_p2 = (xor_ln779_62_fu_2134_p2 & icmp_ln879_80_reg_3279);

assign and_ln779_fu_1105_p2 = (xor_ln779_fu_1099_p2 & icmp_ln879_fu_1063_p2);

assign and_ln781_1_fu_2390_p2 = (icmp_ln879_69_reg_3353 & and_ln416_65_reg_3342);

assign and_ln781_2_fu_1364_p2 = (icmp_ln879_71_fu_1320_p2 & and_ln416_66_fu_1306_p2);

assign and_ln781_3_fu_2477_p2 = (icmp_ln879_73_reg_3398 & and_ln416_67_reg_3387);

assign and_ln781_4_fu_2564_p2 = (icmp_ln879_75_reg_3438 & and_ln416_68_reg_3427);

assign and_ln781_5_fu_2651_p2 = (icmp_ln879_77_reg_3478 & and_ln416_69_reg_3467);

assign and_ln781_6_fu_2738_p2 = (icmp_ln879_79_reg_3518 & and_ln416_70_reg_3507);

assign and_ln781_7_fu_2153_p2 = (icmp_ln879_81_fu_2109_p2 & and_ln416_71_fu_2095_p2);

assign and_ln781_fu_2303_p2 = (icmp_ln879_67_reg_3313 & and_ln416_reg_3302);

assign and_ln785_65_fu_2410_p2 = (xor_ln785_131_fu_2405_p2 & or_ln785_1_fu_2400_p2);

assign and_ln785_66_fu_1387_p2 = (xor_ln785_132_fu_1382_p2 & or_ln785_2_fu_1376_p2);

assign and_ln785_67_fu_2497_p2 = (xor_ln785_133_fu_2492_p2 & or_ln785_3_fu_2487_p2);

assign and_ln785_68_fu_2584_p2 = (xor_ln785_134_fu_2579_p2 & or_ln785_4_fu_2574_p2);

assign and_ln785_69_fu_2671_p2 = (xor_ln785_135_fu_2666_p2 & or_ln785_5_fu_2661_p2);

assign and_ln785_70_fu_2758_p2 = (xor_ln785_136_fu_2753_p2 & or_ln785_6_fu_2748_p2);

assign and_ln785_71_fu_2176_p2 = (xor_ln785_137_fu_2171_p2 & or_ln785_7_fu_2165_p2);

assign and_ln785_fu_2323_p2 = (xor_ln785_130_fu_2318_p2 & or_ln785_fu_2313_p2);

assign and_ln786_150_fu_2340_p2 = (xor_ln786_fu_2334_p2 & tmp_666_reg_3290);

assign and_ln786_151_fu_2427_p2 = (xor_ln786_89_fu_2421_p2 & tmp_672_reg_3330);

assign and_ln786_152_fu_1411_p2 = (xor_ln786_90_fu_1405_p2 & tmp_678_reg_3206);

assign and_ln786_153_fu_2514_p2 = (xor_ln786_91_fu_2508_p2 & tmp_684_reg_3375);

assign and_ln786_154_fu_2601_p2 = (xor_ln786_92_fu_2595_p2 & tmp_690_reg_3415);

assign and_ln786_155_fu_2688_p2 = (xor_ln786_93_fu_2682_p2 & tmp_696_reg_3455);

assign and_ln786_156_fu_2775_p2 = (xor_ln786_94_fu_2769_p2 & tmp_702_reg_3495);

assign and_ln786_157_fu_2200_p2 = (xor_ln786_95_fu_2194_p2 & tmp_708_reg_3263);

assign and_ln786_1_fu_1271_p2 = (tmp_676_fu_1197_p3 & select_ln416_33_fu_1263_p3);

assign and_ln786_2_fu_1393_p2 = (tmp_682_fu_1312_p3 & select_ln416_34_fu_1356_p3);

assign and_ln786_3_fu_1604_p2 = (tmp_688_fu_1530_p3 & select_ln416_35_fu_1596_p3);

assign and_ln786_4_fu_1756_p2 = (tmp_694_fu_1682_p3 & select_ln416_36_fu_1748_p3);

assign and_ln786_5_fu_1908_p2 = (tmp_700_fu_1834_p3 & select_ln416_37_fu_1900_p3);

assign and_ln786_6_fu_2060_p2 = (tmp_706_fu_1986_p3 & select_ln416_38_fu_2052_p3);

assign and_ln786_7_fu_2182_p2 = (tmp_712_fu_2101_p3 & select_ln416_39_fu_2145_p3);

assign and_ln786_fu_1119_p2 = (tmp_670_fu_1045_p3 & select_ln416_fu_1111_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign block_t0_0_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_1_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_2_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_3_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_4_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_5_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_6_V_address0 = zext_ln446_5_fu_843_p1;

assign block_t0_7_V_address0 = zext_ln446_5_fu_843_p1;

assign bn1_bias_fix_V_0_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_1_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_2_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_3_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_4_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_5_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_6_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_bias_fix_V_7_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_0_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_1_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_2_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_3_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_4_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_5_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_6_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn1_weight_fix_V_7_address0 = bn_weight_V_offset_c_fu_625_p1;

assign bn_weight_V_offset_c_fu_625_p1 = bn_weight_V_offset;

assign col_fu_801_p2 = (6'd1 + select_ln127_fu_779_p3);

assign grp_fu_2830_p0 = zext_ln1265_2_reg_2987;

assign grp_fu_2830_p2 = zext_ln1192_2_reg_2992;

assign grp_fu_2861_p0 = zext_ln1265_7_reg_3057;

assign grp_fu_2861_p2 = zext_ln1192_6_reg_3062;

assign icmp_ln123_fu_761_p2 = ((indvar_flatten_reg_592 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_773_p2 = ((ap_phi_mux_col_0_phi_fu_618_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln768_33_fu_1237_p2 = ((tmp_72_fu_1221_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_34_fu_1325_p2 = ((tmp_74_reg_3227 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_35_fu_1570_p2 = ((tmp_76_fu_1554_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_36_fu_1722_p2 = ((tmp_78_fu_1706_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_37_fu_1874_p2 = ((tmp_80_fu_1858_p4 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_38_fu_2026_p2 = ((tmp_82_fu_2010_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_39_fu_2114_p2 = ((tmp_84_reg_3284 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1085_p2 = ((tmp_70_fu_1069_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_67_fu_1079_p2 = ((tmp_70_fu_1069_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_68_fu_1215_p2 = ((tmp_71_fu_1205_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_69_fu_1231_p2 = ((tmp_72_fu_1221_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_70_fu_896_p2 = ((tmp_73_fu_887_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_71_fu_1320_p2 = ((tmp_74_reg_3227 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_72_fu_1548_p2 = ((tmp_75_fu_1538_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_73_fu_1564_p2 = ((tmp_76_fu_1554_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_74_fu_1700_p2 = ((tmp_77_fu_1690_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_75_fu_1716_p2 = ((tmp_78_fu_1706_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_76_fu_1852_p2 = ((tmp_79_fu_1842_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln879_77_fu_1868_p2 = ((tmp_80_fu_1858_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_78_fu_2004_p2 = ((tmp_81_fu_1994_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_79_fu_2020_p2 = ((tmp_82_fu_2010_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_80_fu_958_p2 = ((tmp_83_fu_949_p4 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln879_81_fu_2109_p2 = ((tmp_84_reg_3284 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1063_p2 = ((tmp_s_fu_1053_p4 == 3'd7) ? 1'b1 : 1'b0);

assign mul_ln1118_49_fu_2825_p0 = zext_ln1265_1_reg_2972;

assign mul_ln1118_51_fu_2841_p0 = zext_ln1265_3_reg_2997;

assign mul_ln1118_52_fu_2846_p0 = zext_ln1265_4_reg_3012;

assign mul_ln1118_53_fu_2851_p0 = zext_ln1265_5_reg_3027;

assign mul_ln1118_54_fu_2856_p0 = zext_ln1265_6_reg_3042;

assign mul_ln1118_fu_2820_p0 = zext_ln1265_reg_2957;

assign or_ln340_185_fu_2356_p2 = (or_ln340_209_fu_2351_p2 | and_ln781_fu_2303_p2);

assign or_ln340_187_fu_2443_p2 = (or_ln340_210_fu_2438_p2 | and_ln781_1_fu_2390_p2);

assign or_ln340_189_fu_1428_p2 = (or_ln340_211_fu_1422_p2 | and_ln781_2_fu_1364_p2);

assign or_ln340_191_fu_2530_p2 = (or_ln340_212_fu_2525_p2 | and_ln781_3_fu_2477_p2);

assign or_ln340_193_fu_2617_p2 = (or_ln340_213_fu_2612_p2 | and_ln781_4_fu_2564_p2);

assign or_ln340_195_fu_2704_p2 = (or_ln340_214_fu_2699_p2 | and_ln781_5_fu_2651_p2);

assign or_ln340_197_fu_2791_p2 = (or_ln340_215_fu_2786_p2 | and_ln781_6_fu_2738_p2);

assign or_ln340_199_fu_2217_p2 = (or_ln340_216_fu_2211_p2 | and_ln781_7_fu_2153_p2);

assign or_ln340_1_fu_2432_p2 = (and_ln786_151_fu_2427_p2 | and_ln785_65_fu_2410_p2);

assign or_ln340_209_fu_2351_p2 = (xor_ln785_130_fu_2318_p2 | and_ln786_reg_3324);

assign or_ln340_210_fu_2438_p2 = (xor_ln785_131_fu_2405_p2 | and_ln786_1_reg_3364);

assign or_ln340_211_fu_1422_p2 = (xor_ln785_132_fu_1382_p2 | and_ln786_2_fu_1393_p2);

assign or_ln340_212_fu_2525_p2 = (xor_ln785_133_fu_2492_p2 | and_ln786_3_reg_3409);

assign or_ln340_213_fu_2612_p2 = (xor_ln785_134_fu_2579_p2 | and_ln786_4_reg_3449);

assign or_ln340_214_fu_2699_p2 = (xor_ln785_135_fu_2666_p2 | and_ln786_5_reg_3489);

assign or_ln340_215_fu_2786_p2 = (xor_ln785_136_fu_2753_p2 | and_ln786_6_reg_3529);

assign or_ln340_216_fu_2211_p2 = (xor_ln785_137_fu_2171_p2 | and_ln786_7_fu_2182_p2);

assign or_ln340_2_fu_1416_p2 = (and_ln786_152_fu_1411_p2 | and_ln785_66_fu_1387_p2);

assign or_ln340_3_fu_2519_p2 = (and_ln786_153_fu_2514_p2 | and_ln785_67_fu_2497_p2);

assign or_ln340_4_fu_2606_p2 = (and_ln786_154_fu_2601_p2 | and_ln785_68_fu_2584_p2);

assign or_ln340_5_fu_2693_p2 = (and_ln786_155_fu_2688_p2 | and_ln785_69_fu_2671_p2);

assign or_ln340_6_fu_2780_p2 = (and_ln786_156_fu_2775_p2 | and_ln785_70_fu_2758_p2);

assign or_ln340_7_fu_2205_p2 = (and_ln786_157_fu_2200_p2 | and_ln785_71_fu_2176_p2);

assign or_ln340_fu_2345_p2 = (and_ln786_150_fu_2340_p2 | and_ln785_fu_2323_p2);

assign or_ln785_1_fu_2400_p2 = (xor_ln785_1_fu_2394_p2 | tmp_676_reg_3348);

assign or_ln785_2_fu_1376_p2 = (xor_ln785_2_fu_1370_p2 | tmp_682_fu_1312_p3);

assign or_ln785_3_fu_2487_p2 = (xor_ln785_3_fu_2481_p2 | tmp_688_reg_3393);

assign or_ln785_4_fu_2574_p2 = (xor_ln785_4_fu_2568_p2 | tmp_694_reg_3433);

assign or_ln785_5_fu_2661_p2 = (xor_ln785_5_fu_2655_p2 | tmp_700_reg_3473);

assign or_ln785_6_fu_2748_p2 = (xor_ln785_6_fu_2742_p2 | tmp_706_reg_3513);

assign or_ln785_7_fu_2165_p2 = (xor_ln785_7_fu_2159_p2 | tmp_712_fu_2101_p3);

assign or_ln785_fu_2313_p2 = (xor_ln785_fu_2307_p2 | tmp_670_reg_3308);

assign or_ln786_72_fu_2416_p2 = (and_ln786_1_reg_3364 | and_ln781_1_fu_2390_p2);

assign or_ln786_73_fu_1399_p2 = (and_ln786_2_fu_1393_p2 | and_ln781_2_fu_1364_p2);

assign or_ln786_74_fu_2503_p2 = (and_ln786_3_reg_3409 | and_ln781_3_fu_2477_p2);

assign or_ln786_75_fu_2590_p2 = (and_ln786_4_reg_3449 | and_ln781_4_fu_2564_p2);

assign or_ln786_76_fu_2677_p2 = (and_ln786_5_reg_3489 | and_ln781_5_fu_2651_p2);

assign or_ln786_77_fu_2764_p2 = (and_ln786_6_reg_3529 | and_ln781_6_fu_2738_p2);

assign or_ln786_78_fu_2188_p2 = (and_ln786_7_fu_2182_p2 | and_ln781_7_fu_2153_p2);

assign or_ln786_fu_2329_p2 = (and_ln786_reg_3324 | and_ln781_fu_2303_p2);

assign out_buf_0_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_0_V_d0 = ((or_ln340_185_fu_2356_p2[0:0] === 1'b1) ? select_ln340_fu_2362_p3 : select_ln388_fu_2369_p3);

assign out_buf_1_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_1_V_d0 = ((or_ln340_187_fu_2443_p2[0:0] === 1'b1) ? select_ln340_1_fu_2449_p3 : select_ln388_1_fu_2456_p3);

assign out_buf_2_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_2_V_d0 = select_ln340_162_reg_3370;

assign out_buf_3_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_3_V_d0 = ((or_ln340_191_fu_2530_p2[0:0] === 1'b1) ? select_ln340_3_fu_2536_p3 : select_ln388_3_fu_2543_p3);

assign out_buf_4_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_4_V_d0 = ((or_ln340_193_fu_2617_p2[0:0] === 1'b1) ? select_ln340_4_fu_2623_p3 : select_ln388_4_fu_2630_p3);

assign out_buf_5_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_5_V_d0 = ((or_ln340_195_fu_2704_p2[0:0] === 1'b1) ? select_ln340_5_fu_2710_p3 : select_ln388_5_fu_2717_p3);

assign out_buf_6_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_6_V_d0 = ((or_ln340_197_fu_2791_p2[0:0] === 1'b1) ? select_ln340_6_fu_2797_p3 : select_ln388_6_fu_2804_p3);

assign out_buf_7_V_address0 = zext_ln203_10_fu_2286_p1;

assign out_buf_7_V_d0 = select_ln340_167_reg_3535;

assign row_fu_755_p2 = (ap_phi_mux_row_0_phi_fu_607_p4 + 6'd1);

assign select_ln127_1_fu_787_p3 = ((icmp_ln124_fu_773_p2[0:0] === 1'b1) ? row_fu_755_p2 : ap_phi_mux_row_0_phi_fu_607_p4);

assign select_ln127_2_fu_807_p3 = ((icmp_ln124_reg_3081[0:0] === 1'b1) ? add_ln127_reg_3097 : row_reg_3067);

assign select_ln127_fu_779_p3 = ((icmp_ln124_fu_773_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_col_0_phi_fu_618_p4);

assign select_ln340_162_fu_1450_p3 = ((or_ln340_189_fu_1428_p2[0:0] === 1'b1) ? select_ln340_2_fu_1434_p3 : select_ln388_2_fu_1442_p3);

assign select_ln340_167_fu_2239_p3 = ((or_ln340_199_fu_2217_p2[0:0] === 1'b1) ? select_ln340_7_fu_2223_p3 : select_ln388_7_fu_2231_p3);

assign select_ln340_1_fu_2449_p3 = ((or_ln340_1_fu_2432_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_59_reg_3336);

assign select_ln340_2_fu_1434_p3 = ((or_ln340_2_fu_1416_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_60_fu_1287_p2);

assign select_ln340_3_fu_2536_p3 = ((or_ln340_3_fu_2519_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_61_reg_3381);

assign select_ln340_4_fu_2623_p3 = ((or_ln340_4_fu_2606_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_62_reg_3421);

assign select_ln340_5_fu_2710_p3 = ((or_ln340_5_fu_2693_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_63_reg_3461);

assign select_ln340_6_fu_2797_p3 = ((or_ln340_6_fu_2780_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_64_reg_3501);

assign select_ln340_7_fu_2223_p3 = ((or_ln340_7_fu_2205_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_65_fu_2076_p2);

assign select_ln340_fu_2362_p3 = ((or_ln340_fu_2345_p2[0:0] === 1'b1) ? 24'd8388607 : add_ln415_reg_3296);

assign select_ln388_1_fu_2456_p3 = ((and_ln786_151_fu_2427_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_59_reg_3336);

assign select_ln388_2_fu_1442_p3 = ((and_ln786_152_fu_1411_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_60_fu_1287_p2);

assign select_ln388_3_fu_2543_p3 = ((and_ln786_153_fu_2514_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_61_reg_3381);

assign select_ln388_4_fu_2630_p3 = ((and_ln786_154_fu_2601_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_62_reg_3421);

assign select_ln388_5_fu_2717_p3 = ((and_ln786_155_fu_2688_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_63_reg_3461);

assign select_ln388_6_fu_2804_p3 = ((and_ln786_156_fu_2775_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_64_reg_3501);

assign select_ln388_7_fu_2231_p3 = ((and_ln786_157_fu_2200_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_65_fu_2076_p2);

assign select_ln388_fu_2369_p3 = ((and_ln786_150_fu_2340_p2[0:0] === 1'b1) ? 24'd8388608 : add_ln415_reg_3296);

assign select_ln416_33_fu_1263_p3 = ((and_ln416_65_fu_1191_p2[0:0] === 1'b1) ? and_ln779_1_fu_1257_p2 : icmp_ln879_69_fu_1231_p2);

assign select_ln416_34_fu_1356_p3 = ((and_ln416_66_fu_1306_p2[0:0] === 1'b1) ? and_ln779_2_fu_1351_p2 : icmp_ln879_71_fu_1320_p2);

assign select_ln416_35_fu_1596_p3 = ((and_ln416_67_fu_1524_p2[0:0] === 1'b1) ? and_ln779_3_fu_1590_p2 : icmp_ln879_73_fu_1564_p2);

assign select_ln416_36_fu_1748_p3 = ((and_ln416_68_fu_1676_p2[0:0] === 1'b1) ? and_ln779_4_fu_1742_p2 : icmp_ln879_75_fu_1716_p2);

assign select_ln416_37_fu_1900_p3 = ((and_ln416_69_fu_1828_p2[0:0] === 1'b1) ? and_ln779_5_fu_1894_p2 : icmp_ln879_77_fu_1868_p2);

assign select_ln416_38_fu_2052_p3 = ((and_ln416_70_fu_1980_p2[0:0] === 1'b1) ? and_ln779_6_fu_2046_p2 : icmp_ln879_79_fu_2020_p2);

assign select_ln416_39_fu_2145_p3 = ((and_ln416_71_fu_2095_p2[0:0] === 1'b1) ? and_ln779_7_fu_2140_p2 : icmp_ln879_81_fu_2109_p2);

assign select_ln416_fu_1111_p3 = ((and_ln416_fu_1039_p2[0:0] === 1'b1) ? and_ln779_fu_1105_p2 : icmp_ln879_67_fu_1079_p2);

assign select_ln777_33_fu_2385_p3 = ((and_ln416_65_reg_3342[0:0] === 1'b1) ? icmp_ln879_69_reg_3353 : icmp_ln768_33_reg_3359);

assign select_ln777_34_fu_1330_p3 = ((and_ln416_66_fu_1306_p2[0:0] === 1'b1) ? icmp_ln879_71_fu_1320_p2 : icmp_ln768_34_fu_1325_p2);

assign select_ln777_35_fu_2472_p3 = ((and_ln416_67_reg_3387[0:0] === 1'b1) ? icmp_ln879_73_reg_3398 : icmp_ln768_35_reg_3404);

assign select_ln777_36_fu_2559_p3 = ((and_ln416_68_reg_3427[0:0] === 1'b1) ? icmp_ln879_75_reg_3438 : icmp_ln768_36_reg_3444);

assign select_ln777_37_fu_2646_p3 = ((and_ln416_69_reg_3467[0:0] === 1'b1) ? icmp_ln879_77_reg_3478 : icmp_ln768_37_reg_3484);

assign select_ln777_38_fu_2733_p3 = ((and_ln416_70_reg_3507[0:0] === 1'b1) ? icmp_ln879_79_reg_3518 : icmp_ln768_38_reg_3524);

assign select_ln777_39_fu_2119_p3 = ((and_ln416_71_fu_2095_p2[0:0] === 1'b1) ? icmp_ln879_81_fu_2109_p2 : icmp_ln768_39_fu_2114_p2);

assign select_ln777_fu_2298_p3 = ((and_ln416_reg_3302[0:0] === 1'b1) ? icmp_ln879_67_reg_3313 : icmp_ln768_reg_3319);

assign sext_ln1192_17_fu_683_p0 = bn1_bias_fix_V_1_q0;

assign sext_ln1192_17_fu_683_p1 = sext_ln1192_17_fu_683_p0;

assign sext_ln1192_18_fu_703_p0 = bn1_bias_fix_V_3_q0;

assign sext_ln1192_18_fu_703_p1 = sext_ln1192_18_fu_703_p0;

assign sext_ln1192_19_fu_715_p0 = bn1_bias_fix_V_4_q0;

assign sext_ln1192_19_fu_715_p1 = sext_ln1192_19_fu_715_p0;

assign sext_ln1192_20_fu_727_p0 = bn1_bias_fix_V_5_q0;

assign sext_ln1192_20_fu_727_p1 = sext_ln1192_20_fu_727_p0;

assign sext_ln1192_21_fu_739_p0 = bn1_bias_fix_V_6_q0;

assign sext_ln1192_21_fu_739_p1 = sext_ln1192_21_fu_739_p0;

assign sext_ln1192_fu_671_p0 = bn1_bias_fix_V_0_q0;

assign sext_ln1192_fu_671_p1 = sext_ln1192_fu_671_p0;

assign tmp_183_fu_649_p3 = {{channel_tile}, {5'd0}};

assign tmp_664_fu_2259_p3 = {{add_ln203_4_fu_2250_p2}, {5'd0}};

assign tmp_665_fu_816_p3 = {{select_ln127_2_fu_807_p3}, {5'd0}};

assign tmp_667_fu_999_p3 = add_ln1192_fu_973_p2[32'd27];

assign tmp_668_fu_1007_p3 = add_ln713_fu_995_p2[32'd3];

assign tmp_669_fu_1025_p3 = add_ln415_fu_1019_p2[32'd23];

assign tmp_670_fu_1045_p3 = add_ln415_fu_1019_p2[32'd23];

assign tmp_671_fu_1091_p3 = add_ln1192_fu_973_p2[32'd28];

assign tmp_673_fu_1151_p3 = add_ln1192_57_fu_1125_p2[32'd27];

assign tmp_674_fu_1159_p3 = add_ln713_16_fu_1147_p2[32'd3];

assign tmp_675_fu_1177_p3 = add_ln415_59_fu_1171_p2[32'd23];

assign tmp_676_fu_1197_p3 = add_ln415_59_fu_1171_p2[32'd23];

assign tmp_677_fu_1243_p3 = add_ln1192_57_fu_1125_p2[32'd28];

assign tmp_679_fu_1277_p3 = add_ln1192_58_reg_3200[32'd27];

assign tmp_681_fu_1292_p3 = add_ln415_60_fu_1287_p2[32'd23];

assign tmp_682_fu_1312_p3 = add_ln415_60_fu_1287_p2[32'd23];

assign tmp_683_fu_1338_p3 = add_ln1192_58_reg_3200[32'd28];

assign tmp_685_fu_1484_p3 = add_ln1192_59_fu_1458_p2[32'd27];

assign tmp_686_fu_1492_p3 = add_ln713_17_fu_1480_p2[32'd3];

assign tmp_687_fu_1510_p3 = add_ln415_61_fu_1504_p2[32'd23];

assign tmp_688_fu_1530_p3 = add_ln415_61_fu_1504_p2[32'd23];

assign tmp_689_fu_1576_p3 = add_ln1192_59_fu_1458_p2[32'd28];

assign tmp_691_fu_1636_p3 = add_ln1192_60_fu_1610_p2[32'd27];

assign tmp_692_fu_1644_p3 = add_ln713_18_fu_1632_p2[32'd3];

assign tmp_693_fu_1662_p3 = add_ln415_62_fu_1656_p2[32'd23];

assign tmp_694_fu_1682_p3 = add_ln415_62_fu_1656_p2[32'd23];

assign tmp_695_fu_1728_p3 = add_ln1192_60_fu_1610_p2[32'd28];

assign tmp_697_fu_1788_p3 = add_ln1192_61_fu_1762_p2[32'd27];

assign tmp_698_fu_1796_p3 = add_ln713_19_fu_1784_p2[32'd3];

assign tmp_699_fu_1814_p3 = add_ln415_63_fu_1808_p2[32'd23];

assign tmp_700_fu_1834_p3 = add_ln415_63_fu_1808_p2[32'd23];

assign tmp_701_fu_1880_p3 = add_ln1192_61_fu_1762_p2[32'd28];

assign tmp_703_fu_1940_p3 = add_ln1192_62_fu_1914_p2[32'd27];

assign tmp_704_fu_1948_p3 = add_ln713_20_fu_1936_p2[32'd3];

assign tmp_705_fu_1966_p3 = add_ln415_64_fu_1960_p2[32'd23];

assign tmp_706_fu_1986_p3 = add_ln415_64_fu_1960_p2[32'd23];

assign tmp_707_fu_2032_p3 = add_ln1192_62_fu_1914_p2[32'd28];

assign tmp_709_fu_2066_p3 = add_ln1192_63_reg_3257[32'd27];

assign tmp_70_fu_1069_p4 = {{add_ln1192_fu_973_p2[31:28]}};

assign tmp_711_fu_2081_p3 = add_ln415_65_fu_2076_p2[32'd23];

assign tmp_712_fu_2101_p3 = add_ln415_65_fu_2076_p2[32'd23];

assign tmp_713_fu_2127_p3 = add_ln1192_63_reg_3257[32'd28];

assign tmp_71_fu_1205_p4 = {{add_ln1192_57_fu_1125_p2[31:29]}};

assign tmp_72_fu_1221_p4 = {{add_ln1192_57_fu_1125_p2[31:28]}};

assign tmp_73_fu_887_p4 = {{grp_fu_2830_p3[31:29]}};

assign tmp_75_fu_1538_p4 = {{add_ln1192_59_fu_1458_p2[31:29]}};

assign tmp_76_fu_1554_p4 = {{add_ln1192_59_fu_1458_p2[31:28]}};

assign tmp_77_fu_1690_p4 = {{add_ln1192_60_fu_1610_p2[31:29]}};

assign tmp_78_fu_1706_p4 = {{add_ln1192_60_fu_1610_p2[31:28]}};

assign tmp_79_fu_1842_p4 = {{add_ln1192_61_fu_1762_p2[30:29]}};

assign tmp_80_fu_1858_p4 = {{add_ln1192_61_fu_1762_p2[30:28]}};

assign tmp_81_fu_1994_p4 = {{add_ln1192_62_fu_1914_p2[31:29]}};

assign tmp_82_fu_2010_p4 = {{add_ln1192_62_fu_1914_p2[31:28]}};

assign tmp_83_fu_949_p4 = {{grp_fu_2861_p3[31:29]}};

assign tmp_s_fu_1053_p4 = {{add_ln1192_fu_973_p2[31:29]}};

assign trunc_ln708_65_fu_1470_p4 = {{add_ln1192_59_fu_1458_p2[27:4]}};

assign trunc_ln708_66_fu_1622_p4 = {{add_ln1192_60_fu_1610_p2[27:4]}};

assign trunc_ln708_67_fu_1774_p4 = {{add_ln1192_61_fu_1762_p2[27:4]}};

assign trunc_ln708_68_fu_1926_p4 = {{add_ln1192_62_fu_1914_p2[27:4]}};

assign trunc_ln708_s_fu_1137_p4 = {{add_ln1192_57_fu_1125_p2[27:4]}};

assign trunc_ln9_fu_985_p4 = {{add_ln1192_fu_973_p2[27:4]}};

assign xor_ln416_87_fu_1185_p2 = (tmp_675_fu_1177_p3 ^ 1'd1);

assign xor_ln416_88_fu_1300_p2 = (tmp_681_fu_1292_p3 ^ 1'd1);

assign xor_ln416_89_fu_1518_p2 = (tmp_687_fu_1510_p3 ^ 1'd1);

assign xor_ln416_90_fu_1670_p2 = (tmp_693_fu_1662_p3 ^ 1'd1);

assign xor_ln416_91_fu_1822_p2 = (tmp_699_fu_1814_p3 ^ 1'd1);

assign xor_ln416_92_fu_1974_p2 = (tmp_705_fu_1966_p3 ^ 1'd1);

assign xor_ln416_93_fu_2089_p2 = (tmp_711_fu_2081_p3 ^ 1'd1);

assign xor_ln416_fu_1033_p2 = (tmp_669_fu_1025_p3 ^ 1'd1);

assign xor_ln779_56_fu_1251_p2 = (tmp_677_fu_1243_p3 ^ 1'd1);

assign xor_ln779_57_fu_1345_p2 = (tmp_683_fu_1338_p3 ^ 1'd1);

assign xor_ln779_58_fu_1584_p2 = (tmp_689_fu_1576_p3 ^ 1'd1);

assign xor_ln779_59_fu_1736_p2 = (tmp_695_fu_1728_p3 ^ 1'd1);

assign xor_ln779_60_fu_1888_p2 = (tmp_701_fu_1880_p3 ^ 1'd1);

assign xor_ln779_61_fu_2040_p2 = (tmp_707_fu_2032_p3 ^ 1'd1);

assign xor_ln779_62_fu_2134_p2 = (tmp_713_fu_2127_p3 ^ 1'd1);

assign xor_ln779_fu_1099_p2 = (tmp_671_fu_1091_p3 ^ 1'd1);

assign xor_ln785_130_fu_2318_p2 = (tmp_666_reg_3290 ^ 1'd1);

assign xor_ln785_131_fu_2405_p2 = (tmp_672_reg_3330 ^ 1'd1);

assign xor_ln785_132_fu_1382_p2 = (tmp_678_reg_3206 ^ 1'd1);

assign xor_ln785_133_fu_2492_p2 = (tmp_684_reg_3375 ^ 1'd1);

assign xor_ln785_134_fu_2579_p2 = (tmp_690_reg_3415 ^ 1'd1);

assign xor_ln785_135_fu_2666_p2 = (tmp_696_reg_3455 ^ 1'd1);

assign xor_ln785_136_fu_2753_p2 = (tmp_702_reg_3495 ^ 1'd1);

assign xor_ln785_137_fu_2171_p2 = (tmp_708_reg_3263 ^ 1'd1);

assign xor_ln785_1_fu_2394_p2 = (select_ln777_33_fu_2385_p3 ^ 1'd1);

assign xor_ln785_2_fu_1370_p2 = (select_ln777_34_fu_1330_p3 ^ 1'd1);

assign xor_ln785_3_fu_2481_p2 = (select_ln777_35_fu_2472_p3 ^ 1'd1);

assign xor_ln785_4_fu_2568_p2 = (select_ln777_36_fu_2559_p3 ^ 1'd1);

assign xor_ln785_5_fu_2655_p2 = (select_ln777_37_fu_2646_p3 ^ 1'd1);

assign xor_ln785_6_fu_2742_p2 = (select_ln777_38_fu_2733_p3 ^ 1'd1);

assign xor_ln785_7_fu_2159_p2 = (select_ln777_39_fu_2119_p3 ^ 1'd1);

assign xor_ln785_fu_2307_p2 = (select_ln777_fu_2298_p3 ^ 1'd1);

assign xor_ln786_89_fu_2421_p2 = (or_ln786_72_fu_2416_p2 ^ 1'd1);

assign xor_ln786_90_fu_1405_p2 = (or_ln786_73_fu_1399_p2 ^ 1'd1);

assign xor_ln786_91_fu_2508_p2 = (or_ln786_74_fu_2503_p2 ^ 1'd1);

assign xor_ln786_92_fu_2595_p2 = (or_ln786_75_fu_2590_p2 ^ 1'd1);

assign xor_ln786_93_fu_2682_p2 = (or_ln786_76_fu_2677_p2 ^ 1'd1);

assign xor_ln786_94_fu_2769_p2 = (or_ln786_77_fu_2764_p2 ^ 1'd1);

assign xor_ln786_95_fu_2194_p2 = (or_ln786_78_fu_2188_p2 ^ 1'd1);

assign xor_ln786_fu_2334_p2 = (or_ln786_fu_2329_p2 ^ 1'd1);

assign zext_ln1116_fu_731_p0 = bn1_bias_fix_V_5_q0;

assign zext_ln1116_fu_731_p1 = $unsigned(zext_ln1116_fu_731_p0);

assign zext_ln1192_1_fu_687_p0 = bn1_bias_fix_V_1_q0;

assign zext_ln1192_1_fu_687_p1 = $unsigned(zext_ln1192_1_fu_687_p0);

assign zext_ln1192_2_fu_695_p1 = bn1_bias_fix_V_2_q0;

assign zext_ln1192_3_fu_707_p0 = bn1_bias_fix_V_3_q0;

assign zext_ln1192_3_fu_707_p1 = $unsigned(zext_ln1192_3_fu_707_p0);

assign zext_ln1192_4_fu_719_p0 = bn1_bias_fix_V_4_q0;

assign zext_ln1192_4_fu_719_p1 = $unsigned(zext_ln1192_4_fu_719_p0);

assign zext_ln1192_5_fu_743_p0 = bn1_bias_fix_V_6_q0;

assign zext_ln1192_5_fu_743_p1 = $unsigned(zext_ln1192_5_fu_743_p0);

assign zext_ln1192_6_fu_751_p1 = bn1_bias_fix_V_7_q0;

assign zext_ln1192_fu_675_p0 = bn1_bias_fix_V_0_q0;

assign zext_ln1192_fu_675_p1 = $unsigned(zext_ln1192_fu_675_p0);

assign zext_ln1265_1_fu_679_p1 = bn1_weight_fix_V_1_q0;

assign zext_ln1265_2_fu_691_p1 = bn1_weight_fix_V_2_q0;

assign zext_ln1265_3_fu_699_p1 = bn1_weight_fix_V_3_q0;

assign zext_ln1265_4_fu_711_p1 = bn1_weight_fix_V_4_q0;

assign zext_ln1265_5_fu_723_p1 = bn1_weight_fix_V_5_q0;

assign zext_ln1265_6_fu_735_p1 = bn1_weight_fix_V_6_q0;

assign zext_ln1265_7_fu_747_p1 = bn1_weight_fix_V_7_q0;

assign zext_ln1265_fu_667_p1 = bn1_weight_fix_V_0_q0;

assign zext_ln127_1_fu_812_p1 = select_ln127_2_fu_807_p3;

assign zext_ln127_fu_2247_p1 = select_ln127_1_reg_3091_pp0_iter4_reg;

assign zext_ln203_10_fu_2286_p1 = add_ln203_6_fu_2280_p2;

assign zext_ln203_6_fu_657_p1 = tmp_183_fu_649_p3;

assign zext_ln203_7_fu_2255_p1 = add_ln203_4_fu_2250_p2;

assign zext_ln203_8_fu_2267_p1 = tmp_664_fu_2259_p3;

assign zext_ln203_9_fu_2277_p1 = select_ln127_reg_3086_pp0_iter4_reg;

assign zext_ln203_fu_645_p1 = channel_tile;

assign zext_ln415_76_fu_1167_p1 = tmp_674_fu_1159_p3;

assign zext_ln415_77_fu_1284_p1 = tmp_680_reg_3217;

assign zext_ln415_78_fu_1500_p1 = tmp_686_fu_1492_p3;

assign zext_ln415_79_fu_1652_p1 = tmp_692_fu_1644_p3;

assign zext_ln415_80_fu_1804_p1 = tmp_698_fu_1796_p3;

assign zext_ln415_81_fu_1956_p1 = tmp_704_fu_1948_p3;

assign zext_ln415_82_fu_2073_p1 = tmp_710_reg_3274;

assign zext_ln415_fu_1015_p1 = tmp_668_fu_1007_p3;

assign zext_ln446_4_fu_834_p1 = col_reg_3102;

assign zext_ln446_5_fu_843_p1 = add_ln446_2_fu_837_p2;

assign zext_ln446_fu_824_p1 = tmp_665_fu_816_p3;

always @ (posedge ap_clk) begin
    zext_ln1265_reg_2957[31:16] <= 16'b0000000000000000;
    zext_ln1192_reg_2967[31:22] <= 10'b0000000000;
    zext_ln1265_1_reg_2972[31:16] <= 16'b0000000000000000;
    zext_ln1192_1_reg_2982[31:21] <= 11'b00000000000;
    zext_ln1265_2_reg_2987[31:16] <= 16'b0000000000000000;
    zext_ln1192_2_reg_2992[31:20] <= 12'b000000000000;
    zext_ln1265_3_reg_2997[31:16] <= 16'b0000000000000000;
    zext_ln1192_3_reg_3007[31:22] <= 10'b0000000000;
    zext_ln1265_4_reg_3012[31:16] <= 16'b0000000000000000;
    zext_ln1192_4_reg_3022[31:22] <= 10'b0000000000;
    zext_ln1265_5_reg_3027[30:15] <= 16'b0000000000000000;
    zext_ln1116_reg_3037[30:19] <= 12'b000000000000;
    zext_ln1265_6_reg_3042[31:16] <= 16'b0000000000000000;
    zext_ln1192_5_reg_3052[31:21] <= 11'b00000000000;
    zext_ln1265_7_reg_3057[31:16] <= 16'b0000000000000000;
    zext_ln1192_6_reg_3062[31:19] <= 13'b0000000000000;
end

endmodule //bn1
