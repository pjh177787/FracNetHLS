-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbck_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbck_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000000100000000000000000000000000000000", 
    1 => "1110001000100100100000110101011100000000000000000000000000000000", 
    2 => "0111111111010101101110100000101100000000000000000000000000000000", 
    3 => "1111111111110111111111111111101100000000000000000000000000000000", 
    4 => "1111111101000111101011111111111100000000000000000000000000000000", 
    5 => "1001000101100000010000001010001100000000000000000000000000000000", 
    6 => "0110101000011100000000000000000000000000000000000000000000000000", 
    7 => "0000101111010110000000000000000000000000000000000000000000000000", 
    8 => "0111000010100011000000000000000000000000000000000000000000000000", 
    9 => "1101001100111100000000000000000000000000000000000000000000000000", 
    10 => "0010100100000101000000000000000000000000000000000000000000000000", 
    11 => "0101000100110110000000000000000000000000000000000000000000000000", 
    12 => "1110000100100011000000000000000000000000000000000000000000000000", 
    13 => "1101000010010100000000000000000000000000000000000000000000000000", 
    14 => "0111001010001011000000000000000000000000000000000000000000000000", 
    15 => "1111000010110110000000000000000000000000000000000000000000000000", 
    16 => "0110110001110110000000000000000000000000000000000000000000000000", 
    17 => "0110011011001100000000000000000000000000000000000000000000000000", 
    18 => "0001110001101010000000000000000000000000000000000000000000000000", 
    19 => "0010011010101011000000000000000000000000000000000000000000000000", 
    20 => "1001011100100111000000000000000000000000000000000000000000000000", 
    21 => "0000001001011111000000000000000000000000000000000000000000000000", 
    22 => "1111111011101010110011101110001000000000000000000000000000000000", 
    23 => "1011110000101001101111111011110100000000000000000000000000000000", 
    24 => "1010110000100001101101100010110000000000000000000000000000000000", 
    25 => "0101100011100100011111010111010100000000000000000000000000000000", 
    26 => "0001001110001000001110101100110100000000000000000000000000000000", 
    27 => "1110111101000110110011001001000000000000000000000000000000000000", 
    28 => "1001000010001000011010101100010100000000000000000000000000000000", 
    29 => "1010010111110100010000011110111100000000000000000000000000000000", 
    30 => "1111111010001010000010111001110100000000000000000000000000000000", 
    31 => "1100000000001110111001110011001000000000000000000000000000000000", 
    32 => "1000011101101111111101010110001000000000000000000000000000000000", 
    33 => "1100010001100111001111001000110100000000000000000000000000000000", 
    34 => "0001101000110000011011100000111100000000000000000000000000000000", 
    35 => "0100100100100101111111001110001100000000000000000000000000000000", 
    36 => "0001110100000011111100110010111000000000000000000000000000000000", 
    37 => "1101001100110111111001010010001000000000000000000000000000000000", 
    38 => "1001100111010000001011000111101100000000000000000000000000000000", 
    39 => "0001110001100001110111110010001000000000000000000000000000000000", 
    40 => "0100101101101101010011010111101000000000000000000000000000000000", 
    41 => "0011101000010111010100100011110100000000000000000000000000000000", 
    42 => "0001001111010011000101010101101100000000000000000000000000000000", 
    43 => "1001000001000110011000100010010100000000000000000000000000000000", 
    44 => "1111000001001111000000111010111000000000000000000000000000000000", 
    45 => "1101000111011011001001111111110100000000000000000000000000000000", 
    46 => "0100010110111000011101011001100000000000000000000000000000000000", 
    47 => "1000010110111001111011011110110000000000000000000000000000000000", 
    48 => "1110101110100001111111010110001000000000000000000000000000000000", 
    49 => "1111010011111100100110011101000100000000000000000000000000000000", 
    50 => "0101010000001101010000110110110011010001000111110100011001000110", 
    51 => "1110101000101100011101000110000001101000000010001100001001100100", 
    52 => "1000110000000011001010100101100011001110011110001010101011011001", 
    53 => "0000110011111011101010100101111000000101011010110001011110111110", 
    54 => "0111010001101111010100100000111101011010001011111000000001100111", 
    55 => "0110011101111110000100010010010011110111101111011100011100100111", 
    56 => "1011101111001001100101000000011110111100100000011111110111110000", 
    57 => "1011111000111010100111011100111100110110111101101001110101100101", 
    58 => "1111000001101111011111111010111100111001111111110100011010010110", 
    59 => "0000001100110110100001010000011111000111011011000111001010100000", 
    60 => "1101001101110111101000100100010010101110110100100000000000110111", 
    61 => "1011010000000111011111100111010111101100001011111000101100101110", 
    62 => "1100001001010100010000100111011101011011111011000101010010110000", 
    63 => "1110010001100101001000100010001001100011111011100110010001110111", 
    64 => "0110111000000011101111000100011110101000010100001010110111110001", 
    65 => "1100111001110000010000000010001001110111100100110001111100111001", 
    66 => "0011011110010010101010010011110010101100011000011011100101011101", 
    67 => "0100010010111101110100111100011011011001111110101011011001100100", 
    68 => "0110111000010001101111100111110001100000110011111100101011101100", 
    69 => "0011110001111100100101010011101101000100011011000000110100101110", 
    70 => "1001011000011110101000101010000000110111001101101011100101011111", 
    71 => "0001101010000010100010000001000000100110100010101000101110010101", 
    72 => "0001100100011111100011100010110000000101000000000000100110100110", 
    73 => "1111011101110000011001111110000110110001001100111111111010010010", 
    74 => "1000011110011011101011100101110001011100000001111110010001010110", 
    75 => "1111000011111100001110011100010101100110111011100111101011000000", 
    76 => "1101101110000011000000111010101011011001011011111001001010000011", 
    77 => "0111010101010111010011010101011111000111010101100110101001110110", 
    78 => "0011010101100110010110000000001100011100000100010000010110001110", 
    79 => "1111100100011011101001111011110100111101100100111000110101011110", 
    80 => "0101100101000011010001110010010111110110011101110001010011001101", 
    81 => "0010011010101000010010011011100111100011001010001110100000011110", 
    82 => "1100100110110000100000100110010010111110010010111011010010001100", 
    83 => "1101011100110000110110010010100111010010100000010001101000001000", 
    84 => "0111110011100011010011010000000000110111000010011010001010111110", 
    85 => "1111100010100001000011111001100110111001000101000001101110011000", 
    86 => "1100101001011001011101011001010001110011010101011010010001101110", 
    87 => "1001000000110001010011110001100000000011100011000000101001111000", 
    88 => "1011101000010001011001000101010000000010001001101001000010111111", 
    89 => "0101100101010011010011111001100010011011101111011001010010011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbck is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbck is
    component pg_conv3x3_tile_cbck_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbck_rom_U :  component pg_conv3x3_tile_cbck_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


