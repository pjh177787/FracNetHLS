-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cKfY_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cKfY_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101111111111111111111111111111000000000000000000000000000000000", 
    1 => "1000000000001100100010110110111100000000000000000000000000000000", 
    2 => "1001110100100001010000101100010100000000000000000000000000000000", 
    3 => "1111111111111111111101111111111000000000000000000000000000000000", 
    4 => "0110010101000000100100101011011100000000000000000000000000000000", 
    5 => "1000000000101000101010000000000000000000000000000000000000000000", 
    6 => "1011101110101111000000000000000000000000000000000000000000000000", 
    7 => "1111110101101011000000000000000000000000000000000000000000000000", 
    8 => "1100111010101110000000000000000000000000000000000000000000000000", 
    9 => "1110101100101111000000000000000000000000000000000000000000000000", 
    10 => "0110110100111110000000000000000000000000000000000000000000000000", 
    11 => "1110110100101110000000000000000000000000000000000000000000000000", 
    12 => "0011111101111110000000000000000000000000000000000000000000000000", 
    13 => "1110010010100010000000000000000000000000000000000000000000000000", 
    14 => "1010010010000110000000000000000000000000000000000000000000000000", 
    15 => "0100011111000010000000000000000000000000000000000000000000000000", 
    16 => "0000001011001000000000000000000000000000000000000000000000000000", 
    17 => "1011100001110001000000000000000000000000000000000000000000000000", 
    18 => "1100110011110001000000000000000000000000000000000000000000000000", 
    19 => "1110000101100101000000000000000000000000000000000000000000000000", 
    20 => "0100101110011001000000000000000000000000000000000000000000000000", 
    21 => "0000001101000100000000000000000000000000000000000000000000000000", 
    22 => "1010111011010000011101010101000000000000000000000000000000000000", 
    23 => "0110000000100101011000100110011000000000000000000000000000000000", 
    24 => "0110101001111100011000001110000100000000000000000000000000000000", 
    25 => "1101110111011000001001011111000100000000000000000000000000000000", 
    26 => "0011110111111001100111001101100100000000000000000000000000000000", 
    27 => "1000101000100101011000011000011100000000000000000000000000000000", 
    28 => "0101100110101011110110000100010100000000000000000000000000000000", 
    29 => "0001000001010100001100111101111100000000000000000000000000000000", 
    30 => "0110100000110110111001001100010000000000000000000000000000000000", 
    31 => "0111100100110001000011110100111100000000000000000000000000000000", 
    32 => "0010001110101011110111100110101000000000000000000000000000000000", 
    33 => "0001110001111110000110010101101000000000000000000000000000000000", 
    34 => "1011110000100001101011001101100000000000000000000000000000000000", 
    35 => "1001010001100001000110110010011100000000000000000000000000000000", 
    36 => "1110110111111011011111110000110000000000000000000000000000000000", 
    37 => "1101110100110100001010100111100100000000000000000000000000000000", 
    38 => "0101100011100000110110100101110000000000000000000000000000000000", 
    39 => "1001111100010110010100110001110100000000000000000000000000000000", 
    40 => "1110111001101001111110011001010000000000000000000000000000000000", 
    41 => "0100110001111111001111110111000000000000000000000000000000000000", 
    42 => "1100010000000000000101011010011000000000000000000000000000000000", 
    43 => "0010010001100001000010100100000100000000000000000000000000000000", 
    44 => "1000011000101100000110000010110100000000000000000000000000000000", 
    45 => "0000010100101011000010010101100100000000000000000000000000000000", 
    46 => "0010010000000010011100011001010100000000000000000000000000000000", 
    47 => "1001100011001011011000000011010000000000000000000000000000000000", 
    48 => "1110010001001011010001001110010000000000000000000000000000000000", 
    49 => "0000000100001001000000111000101000000000000000000000000000000000", 
    50 => "1101000001111000100001100100011111111100001110101011011000010110", 
    51 => "1000101001010101110010100010111000101000111101011000101100101101", 
    52 => "1010010110111001101000101111011111100001111110011110011011111111", 
    53 => "0010010100110101110110100010101100110100111111010101100010111011", 
    54 => "1011000001001110010010100100011110111100001101100100100000101001", 
    55 => "1011101111001000001111110001011010100101110010100011111101000100", 
    56 => "0100010010010110011000101111000011010011010111011110001010110001", 
    57 => "1100001101000101010100000000011101011010101101001110000100000001", 
    58 => "0100001001000000110110010011011010111010101000001101010000101101", 
    59 => "1001011001001001010101100111011010100111110010100001101000010101", 
    60 => "1001101001001000000110101000110111101001100100011000100110011100", 
    61 => "0001011001011111010001011001010000101110001011100000010101100101", 
    62 => "1101001000001111000101101010010001001000101000110111101000000110", 
    63 => "1000010000110111011111100001100111011110001000100100001001011101", 
    64 => "1111111100110111010111011111100010011101010000010000101001001100", 
    65 => "0001100001010001101011100010001010000010010010011010110101110110", 
    66 => "1010000111100100110100110000100001000111100011101010101000011111", 
    67 => "1011001011010101110011110010100110110110110100011000110010100001", 
    68 => "1110100010110100010110000011101111010110001000010101111110101001", 
    69 => "1000010110000010001111001100111111011111011000100001110001011011", 
    70 => "0100110100111110111000100100111000100101011000000000101001001011", 
    71 => "1100000001011011010001000100011101011010010000101110100001000000", 
    72 => "0001001100101100111101011010001101110101001110010011110100011011", 
    73 => "0101010001001111001110111000011001101001011100010101001010111110", 
    74 => "0100101101010101100010100100011100010101110010001011110110111011", 
    75 => "1111001110000111111100000000101000100110011001000101100101110001", 
    76 => "1101001011110001110000110100100010010100110111011000111000010000", 
    77 => "1000100111110001010111011111101000000010010011001011110101010001", 
    78 => "1110010110101111001100111000001111100010101000010100001010011101", 
    79 => "0000101110110010110101010100110010000101011000011111000011100000", 
    80 => "0111010001011110000100010110010111101001100100100010000100111011", 
    81 => "0100001101010111111001000110000110011110001101100000100101000111", 
    82 => "1100100111011010001111010101001110110111000010110011010110001100", 
    83 => "0010100111110011110101000011101001010110000000110000001100000000", 
    84 => "1010010010100111101001100110110100100010011111010110100001011100", 
    85 => "0011001001111000111001011011001000111110010001001010000011110011", 
    86 => "1001010001111001011100010111000111110001010010110001111110010100", 
    87 => "0001000001101010011110000000010001100111001110111000101011101100", 
    88 => "1000011000111111001110111110000000100000100011011110000011110100", 
    89 => "0111111001111110010001110011110011000101010010100011100010011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cKfY is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cKfY is
    component pg_conv3x3_tile_cKfY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cKfY_rom_U :  component pg_conv3x3_tile_cKfY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


