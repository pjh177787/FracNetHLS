-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cCeG_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cCeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001000000000000000000100000100000000000000000000000000000000000", 
    1 => "0001111101111110111101001001100000000000000000000000000000000000", 
    2 => "0000010000000001100001000111100000000000000000000000000000000000", 
    3 => "0000000000000000000000000010000000000000000000000000000000000000", 
    4 => "0010111110111011011110011010001100000000000000000000000000000000", 
    5 => "1111111111111101111111111111111100000000000000000000000000000000", 
    6 => "0000111010011111000000000000000000000000000000000000000000000000", 
    7 => "0010001000000110000000000000000000000000000000000000000000000000", 
    8 => "1010000010110011000000000000000000000000000000000000000000000000", 
    9 => "0010001110000000000000000000000000000000000000000000000000000000", 
    10 => "0000101011000010000000000000000000000000000000000000000000000000", 
    11 => "0110001011001001000000000000000000000000000000000000000000000000", 
    12 => "0101001010100001000000000000000000000000000000000000000000000000", 
    13 => "1000100010001100000000000000000000000000000000000000000000000000", 
    14 => "0101001110100101000000000000000000000000000000000000000000000000", 
    15 => "0110001110100001000000000000000000000000000000000000000000000000", 
    16 => "0001111000010111000000000000000000000000000000000000000000000000", 
    17 => "0011111001110111000000000000000000000000000000000000000000000000", 
    18 => "0001000001000000000000000000000000000000000000000000000000000000", 
    19 => "0001011101111011000000000000000000000000000000000000000000000000", 
    20 => "0011011110111001000000000000000000000000000000000000000000000000", 
    21 => "1110101001010000000000000000000000000000000000000000000000000000", 
    22 => "0100000000100001101110001000010100000000000000000000000000000000", 
    23 => "0101011100111110110000010100001100000000000000000000000000000000", 
    24 => "1101101011000100110100011010110100000000000000000000000000000000", 
    25 => "0110100010110101111110001000011000000000000000000000000000000000", 
    26 => "1110011011110111110001001011111000000000000000000000000000000000", 
    27 => "0001010111111011100110110011101100000000000000000000000000000000", 
    28 => "0001000011011101000100001101010100000000000000000000000000000000", 
    29 => "1111111011111110011111001101100000000000000000000000000000000000", 
    30 => "1001010111010110001101110101001000000000000000000000000000000000", 
    31 => "1100010101111000101001111011111000000000000000000000000000000000", 
    32 => "1110010011101111111111000011001000000000000000000000000000000000", 
    33 => "1110111101110100110011011011010000000000000000000000000000000000", 
    34 => "0010010111011000011101110101111000000000000000000000000000000000", 
    35 => "0011111100100101011011000100000100000000000000000000000000000000", 
    36 => "0110110100100101111100110110101000000000000000000000000000000000", 
    37 => "0001100000001001101011101000101100000000000000000000000000000000", 
    38 => "0100000001000110010100101011100000000000000000000000000000000000", 
    39 => "0111101011010111100110011011001100000000000000000000000000000000", 
    40 => "0011101110000001100110001111101100000000000000000000000000000000", 
    41 => "1110101111000011001100111011001000000000000000000000000000000000", 
    42 => "1011011111000011100001110100011100000000000000000000000000000000", 
    43 => "0100010110110011100011011110001000000000000000000000000000000000", 
    44 => "0011010011001011000110100111101000000000000000000000000000000000", 
    45 => "1011101011100001110111101011100100000000000000000000000000000000", 
    46 => "1011110110111111110010010011111000000000000000000000000000000000", 
    47 => "0101010000101000001010101011011000000000000000000000000000000000", 
    48 => "0000011111000101110101000000000100000000000000000000000000000000", 
    49 => "1100111111001001111111000101000000000000000000000000000000000000", 
    50 => "1111100000001101000010001000011110111100110011001000101010010011", 
    51 => "1101011011101101010100010010110111010110001001010001100101000001", 
    52 => "1100000100110100110010000101001100000000111001001110111000110100", 
    53 => "0100101001110100111111000010100111011010111101001111110100000000", 
    54 => "0100111110111000010100000101101001001111100110110101000101000010", 
    55 => "1010011011101101111110111000110010010100101011111100100110000101", 
    56 => "0000111000101111010101110110011000001110011100100000000101000011", 
    57 => "0100100100111110011010001101111000001000100010111100100001101001", 
    58 => "1011010110000010000001010011001001100011011011101010011000010110", 
    59 => "0110001000100110001110111011111110001001001101111101011010010011", 
    60 => "0011110001111000101110101101000100110111000000101001100001111111", 
    61 => "0101011101001100000001011100011000111111100000001010111111110011", 
    62 => "1010001011001110101010111000100010110100000111110010110010011010", 
    63 => "0111010100010100110001011011010011110101100100010111010110101011", 
    64 => "1100001010010011000010110000010000111110011010101000001110111110", 
    65 => "1111010101100010001111001001101001000011110001000100011010111110", 
    66 => "1111111011110000011011001000011111101010011100001000000111100010", 
    67 => "0101110000100000000110100100101010001011111010001001001010101100", 
    68 => "0110111010111000111001000100100011011001111101101010100101101001", 
    69 => "0000010001000101100001000011110010001100101110010011100001000101", 
    70 => "1100011010001100010101101111100000000110101010010111111011011101", 
    71 => "0010111110010101100100100000000100010000110111101101100010001010", 
    72 => "1100101111001000010101110101000010000100111010100100011111100100", 
    73 => "0100011010100100110011111110001010010111101111111000101000010101", 
    74 => "0010100110001010001000111111100101010100110001110001111001001001", 
    75 => "0010111101101000110001101111100101001110010011010010111100110100", 
    76 => "1110010010010111101100100011111101010001111001000010001011000101", 
    77 => "1011111110010101101100101100110001110101010000100001000010110010", 
    78 => "1010010100110001001101100110111000000111100000011100010001101111", 
    79 => "1110001001111101011010001011111110010111000100101010000000110010", 
    80 => "1000101100001000001110110101100001000000101110111101101000001011", 
    81 => "1100001011010000011000110000110011100001100100001100101010101100", 
    82 => "0001110000001101100010111111001110001110101010000011101101100110", 
    83 => "1011111011010011010100000000010100000011010000101111100010101110", 
    84 => "0101010111100100001011010001100010000011111011100111010000111010", 
    85 => "0011011100010011000001101011110101000101001001111111111010001110", 
    86 => "1101101001111011100100011001000010011011010110110001100000100011", 
    87 => "0101111100010000011011011010010000100101000100111011011010110110", 
    88 => "1010001100111010110010001010100011101011011000000011100100011101", 
    89 => "0000111110000001000001110010010110100001001011000000100001001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cCeG is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cCeG is
    component pg_conv3x3_tile_cCeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cCeG_rom_U :  component pg_conv3x3_tile_cCeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


