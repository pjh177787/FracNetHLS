-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cmb6_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cmb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111001100101010110101101100000000000000000000000000000000000", 
    1 => "1111011111111111111011111110111000000000000000000000000000000000", 
    2 => "1100000000000101000001100001011000000000000000000000000000000000", 
    3 => "1111111110110110000011111111100100000000000000000000000000000000", 
    4 => "1101010110000110010100000000000000000000000000000000000000000000", 
    5 => "0000000000001000001000001000000000000000000000000000000000000000", 
    6 => "0001100100000111000000000000000000000000000000000000000000000000", 
    7 => "0011101000101011000000000000000000000000000000000000000000000000", 
    8 => "1000010100111101000000000000000000000000000000000000000000000000", 
    9 => "1001100100100011000000000000000000000000000000000000000000000000", 
    10 => "0001000001000011000000000000000000000000000000000000000000000000", 
    11 => "1001000001001011000000000000000000000000000000000000000000000000", 
    12 => "1001111110100111000000000000000000000000000000000000000000000000", 
    13 => "0111010110111100000000000000000000000000000000000000000000000000", 
    14 => "1000111110101111000000000000000000000000000000000000000000000000", 
    15 => "1111001110011110000000000000000000000000000000000000000000000000", 
    16 => "1111011000010000000000000000000000000000000000000000000000000000", 
    17 => "0001100101010011000000000000000000000000000000000000000000000000", 
    18 => "0110010111110001000000000000000000000000000000000000000000000000", 
    19 => "1110111011001000000000000000000000000000000000000000000000000000", 
    20 => "1111000001001011000000000000000000000000000000000000000000000000", 
    21 => "0000000011100001000000000000000000000000000000000000000000000000", 
    22 => "0001010010111011010111000011100000000000000000000000000000000000", 
    23 => "0011010000010101001101000010110000000000000000000000000000000000", 
    24 => "0101111100011010010111000001101000000000000000000000000000000000", 
    25 => "0000100101101100000100011010111100000000000000000000000000000000", 
    26 => "1101010001110000010000100110011100000000000000000000000000000000", 
    27 => "0010101000000101000110100000010000000000000000000000000000000000", 
    28 => "0001110010010001010000000011100000000000000000000000000000000000", 
    29 => "0010110111001001101111001010110100000000000000000000000000000000", 
    30 => "1110000110100110110101101010110000000000000000000000000000000000", 
    31 => "0100011100100100110111100001011000000000000000000000000000000000", 
    32 => "0110110101011001000011001001101100000000000000000000000000000000", 
    33 => "0010010101001010110001010101001000000000000000000000000000000000", 
    34 => "0101000000000000011100011001011100000000000000000000000000000000", 
    35 => "1101010100000110010101010001110000000000000000000000000000000000", 
    36 => "0011111011001011010111111001100100000000000000000000000000000000", 
    37 => "0111100001100100000000101110000100000000000000000000000000000000", 
    38 => "1101000011110010111000000111111000000000000000000000000000000000", 
    39 => "1100101011100100111110000001101000000000000000000000000000000000", 
    40 => "1111111011000110111000011000100100000000000000000000000000000000", 
    41 => "1000011110001001111111010111110100000000000000000000000000000000", 
    42 => "1111000101000000000011010011001000000000000000000000000000000000", 
    43 => "0101110111000011011111110001101000000000000000000000000000000000", 
    44 => "1000110001101111010001011001111000000000000000000000000000000000", 
    45 => "0101110010001000000110100100010000000000000000000000000000000000", 
    46 => "1011111101111111001001000011100100000000000000000000000000000000", 
    47 => "1111110110011011001010101001100100000000000000000000000000000000", 
    48 => "1110000101011000011000101111011000000000000000000000000000000000", 
    49 => "0100011011101001111100110110001100000000000000000000000000000000", 
    50 => "1010100010110010001010000101010101111000011110011010100001101101", 
    51 => "0100110111111110011001010010011111111101111100100111001110000111", 
    52 => "0101010100111011001001110111001011010001011010110100011010111111", 
    53 => "0100100000100110011010100111010101011011010100001110100010111111", 
    54 => "1011001000000011100001011100001110101010000010111010111101001010", 
    55 => "1011000010000010000010101110010101111010100111001110101010111101", 
    56 => "0011111110011100000000110100000110000111000010010000001101100000", 
    57 => "0100010101010111001111100001101100001101110100110101101000001001", 
    58 => "0100001001110110010001011111001011110100001101101101000010011110", 
    59 => "0000001001111100110001111110111000110101001010100000011101001110", 
    60 => "1000110011101101011001111100000001011101101101100101110111011001", 
    61 => "0110100101101101001110000101001100101001000000111000011000000110", 
    62 => "1000110100101110010001010110101001011110001011100110010001011001", 
    63 => "1000111111011000110000010100110000000111010110110101111101011001", 
    64 => "0111000110000011001010101101000000101110100011010100011011110001", 
    65 => "1111101010110010101010001100011110111101110000001101111111110001", 
    66 => "1000011100101000101111101111000111000111010000001001100010011000", 
    67 => "0010100001010101011011000111011011001010010010100010110100100010", 
    68 => "0011000011000011100010110010111100010000000000001011100000110010", 
    69 => "0000001111111010110001111100101011111000011001000000111111010000", 
    70 => "1100001100110100000111101000011011111010110001001001101010010110", 
    71 => "1001001110001101100111011000101010010001011011101011000101001000", 
    72 => "0111101111110000001111000000101011011101001110111100111101111010", 
    73 => "0110000001110101110111001110011000010101001100100011001111111101", 
    74 => "0000010001001011111101011101000110100010001100000011000101000101", 
    75 => "1100000011010000000010011110110111011111111000001011000110111011", 
    76 => "1001000110010011100011101110110000000101001101110010110110001100", 
    77 => "1011110111110011110111001010110010000100101010111100100011111011", 
    78 => "0001111011100011010110001101111010011111011011001111000011110000", 
    79 => "0001111011110000100001101111101010010011100110110100000001110100", 
    80 => "1001111001001111001101100100111101001110010001100110000101000001", 
    81 => "0000100001010111001001110000110101110010000110000100000101011000", 
    82 => "1101101101110000111010010111000100100011101110010001111101100010", 
    83 => "0000110111100011100100101110110101111010111101001110101111001000", 
    84 => "1101001100100100101111101001010010001001001111110001100010111000", 
    85 => "1011011011010100110001001011101101100010100001100111010100010110", 
    86 => "1100010010001011000011110011011010011100011011011110001100110010", 
    87 => "1100110101011010000000100000001001001010100110010001011010011111", 
    88 => "0001001100100001100111010000001110101000010011001111100001001110", 
    89 => "0000101011010110001010110010010100110011000110110111100101111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cmb6 is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cmb6 is
    component pg_conv3x3_tile_cmb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cmb6_rom_U :  component pg_conv3x3_tile_cmb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


