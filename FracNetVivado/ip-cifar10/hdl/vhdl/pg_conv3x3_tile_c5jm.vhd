-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c5jm_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c5jm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0001011111101111100101111011010100000000000000000000000000000000", 
    1 => "0000000000000000000000000000000100000000000000000000000000000000", 
    2 => "0000000000000100000000000000000100000000000000000000000000000000", 
    3 => "1000111011111111111111111111111000000000000000000000000000000000", 
    4 => "1001000110110110111011111111100000000000000000000000000000000000", 
    5 => "0000000000000000000000000000000000000000000000000000000000000000", 
    6 => "1111010001111011000000000000000000000000000000000000000000000000", 
    7 => "1001111011100101000000000000000000000000000000000000000000000000", 
    8 => "0100110110111101000000000000000000000000000000000000000000000000", 
    9 => "1001111101101101000000000000000000000000000000000000000000000000", 
    10 => "1000110111011101000000000000000000000000000000000000000000000000", 
    11 => "0000111110100101000000000000000000000000000000000000000000000000", 
    12 => "0100100111111101000000000000000000000000000000000000000000000000", 
    13 => "0001010000010101000000000000000000000000000000000000000000000000", 
    14 => "0110100001000100000000000000000000000000000000000000000000000000", 
    15 => "0001110110000100000000000000000000000000000000000000000000000000", 
    16 => "1010001010000111000000000000000000000000000000000000000000000000", 
    17 => "1111100001010101000000000000000000000000000000000000000000000000", 
    18 => "0000101011101100000000000000000000000000000000000000000000000000", 
    19 => "0100010101010010000000000000000000000000000000000000000000000000", 
    20 => "0000011010111011000000000000000000000000000000000000000000000000", 
    21 => "0000011100000011000000000000000000000000000000000000000000000000", 
    22 => "0111101011010110001100101110011000000000000000000000000000000000", 
    23 => "0111000000011000001000101100010100000000000000000000000000000000", 
    24 => "1110011111011011001101111001100000000000000000000000000000000000", 
    25 => "0000000010111001000000010000001000000000000000000000000000000000", 
    26 => "1010101011100100101110101110101000000000000000000000000000000000", 
    27 => "0101001100110001110111010001110000000000000000000000000000000000", 
    28 => "0011011101111010010101101011111000000000000000000000000000000000", 
    29 => "1001011101111110101101110001111100000000000000000000000000000000", 
    30 => "0101100000100101101100001100011100000000000000000000000000000000", 
    31 => "1111000101111010011010101000111100000000000000000000000000000000", 
    32 => "0011000111011101100100001001100100000000000000000000000000000000", 
    33 => "1101010000000110001100011010011000000000000000000000000000000000", 
    34 => "1110000011100000001011101111011000000000000000000000000000000000", 
    35 => "0111100011000100001010101000010100000000000000000000000000000000", 
    36 => "0101111010010000000101110001010100000000000000000000000000000000", 
    37 => "0000000000010101001001110100001000000000000000000000000000000000", 
    38 => "0010101010010100100010000010001100000000000000000000000000000000", 
    39 => "0000111100010010100111010011101100000000000000000000000000000000", 
    40 => "1101000111010000111011101001011100000000000000000000000000000000", 
    41 => "0001111100010101000100010000001000000000000000000000000000000000", 
    42 => "1011101100110111101101011010000000000000000000000000000000000000", 
    43 => "0110000000100000001010100000000000000000000000000000000000000000", 
    44 => "0000010101110010011001010001010000000000000000000000000000000000", 
    45 => "0101001001110100100101000000011100000000000000000000000000000000", 
    46 => "1001101001010100010100110010000000000000000000000000000000000000", 
    47 => "0100101010110010010010101110010100000000000000000000000000000000", 
    48 => "0111000110011111101101100111011100000000000000000000000000000000", 
    49 => "1010010111011010011100011011010100000000000000000000000000000000", 
    50 => "1000011000101001001100011110100010000001000110100111101101001010", 
    51 => "0100000000001101010000100111010111110000011000110110111010110111", 
    52 => "0010101011110001101011001011100101001000101110010100101001101001", 
    53 => "0001000001001011001100100011010101110010010001100110001010111011", 
    54 => "1011101100001001000000100010111011101100101111100000001111000000", 
    55 => "1101000001010101110000100001000111001000110100011110011010101011", 
    56 => "1101001100001110000101010010011011100001011110110100011010011010", 
    57 => "0110000100010000001010001001100011111000000010001101111100101101", 
    58 => "1110101101100111010000000100001101001011011111110010010000100111", 
    59 => "0110101000001010001101001010100100110100110010001111101000110000", 
    60 => "0011101001100011000111101101100101001000110011111100100001010100", 
    61 => "0111101011011010100010101000100100111010100000001001101100011101", 
    62 => "1100010001110010011101100011111111101100011001100101100001000101", 
    63 => "0000000111100010011101101001010101101111011000101111110011110101", 
    64 => "0110100011111111010000010111110111011000111011011101000011000111", 
    65 => "1011011011101001101001101101110100010100110101011010101111101000", 
    66 => "0111001111111110100001101010010011010111010101110110111011001101", 
    67 => "0101011001010000100011100000000111001111010010110001100010010100", 
    68 => "0010100011101100001111011110010000111001111111100000000111101010", 
    69 => "1011101010010001100111110001010010000110100000000011110101000100", 
    70 => "1000011101000000010101001010100101000111010001000111110101100010", 
    71 => "1100101100010100110101001110101010011110001000111000100011000110", 
    72 => "1011011000110010100111111011100001110011001111111010101000100100", 
    73 => "0101011000011011011101110010100001001001001110110011000100000000", 
    74 => "0010101011010111101001000010010100100110001100011011010101100010", 
    75 => "1100001011000101011011010000011000011110000101001010100111101010", 
    76 => "0010110010001010111011000011011110101100000011010011111101011110", 
    77 => "1001111100110000010001000100000111011110100110101110011111011111", 
    78 => "0011100100110110001101101110110101010001100111101000001011010110", 
    79 => "0011000001111111100011100010011000110001000000110000001000101101", 
    80 => "0101001110011111000011000001101101000111001000101010000110001010", 
    81 => "0100010010001111100100000101010010110000110100101111111011001110", 
    82 => "0011101011110111000111000110100101011001001000110001001100001100", 
    83 => "1001000101001111110011010101000011111101000110000001110100000111", 
    84 => "0100000100000001110101011110111110000110110000011011100001010010", 
    85 => "0011111010010000101000000110111011100100111011000110110101101010", 
    86 => "0011010111111001110011000010010111011000100100010000000011100110", 
    87 => "1011000111110011010001111110110000000010011001111001001001101101", 
    88 => "1101010101001110110101111100110000010001011001011111011100100000", 
    89 => "0001101001010111000101110101110000001000011011101110001101000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c5jm is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c5jm is
    component pg_conv3x3_tile_c5jm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c5jm_rom_U :  component pg_conv3x3_tile_c5jm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


