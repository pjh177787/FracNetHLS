-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cXh4_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000110000010000000000000000000000000000000000", 
    1 => "0000000000000000000100000000000000000000000000000000000000000000", 
    2 => "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "1111111111111100111111011111111100000000000000000000000000000000", 
    4 => "1111111111111111111111111110111100000000000000000000000000000000", 
    5 => "0000000000000000000000001100010000000000000000000000000000000000", 
    6 => "1111010001010000000000000000000000000000000000000000000000000000", 
    7 => "0111000111110101000000000000000000000000000000000000000000000000", 
    8 => "1101000001110010000000000000000000000000000000000000000000000000", 
    9 => "0100000001110110000000000000000000000000000000000000000000000000", 
    10 => "1000000000111110000000000000000000000000000000000000000000000000", 
    11 => "0000011011100010000000000000000000000000000000000000000000000000", 
    12 => "1000001110001110000000000000000000000000000000000000000000000000", 
    13 => "1111001011001000000000000000000000000000000000000000000000000000", 
    14 => "0111010001110010000000000000000000000000000000000000000000000000", 
    15 => "1101110100110000000000000000000000000000000000000000000000000000", 
    16 => "0111011111011010000000000000000000000000000000000000000000000000", 
    17 => "0101000101100111000000000000000000000000000000000000000000000000", 
    18 => "1111111110111110000000000000000000000000000000000000000000000000", 
    19 => "0110001100110110000000000000000000000000000000000000000000000000", 
    20 => "1111111010101101000000000000000000000000000000000000000000000000", 
    21 => "0100001001100110000000000000000000000000000000000000000000000000", 
    22 => "0111101110010110101110010011010100000000000000000000000000000000", 
    23 => "1010001111010110101111110001010000000000000000000000000000000000", 
    24 => "1111110010111001011011000001100100000000000000000000000000000000", 
    25 => "0001000000001010000000101010000000000000000000000000000000000000", 
    26 => "0011000000011101001100000000000100000000000000000000000000000000", 
    27 => "1100000011111000100010101010010000000000000000000000000000000000", 
    28 => "0101110100101000011110001011110100000000000000000000000000000000", 
    29 => "0011000001010011000100110110001100000000000000000000000000000000", 
    30 => "0111101000100110110001001101010000000000000000000000000000000000", 
    31 => "0010001000000000111000010001100100000000000000000000000000000000", 
    32 => "0101100101100000011111000101101000000000000000000000000000000000", 
    33 => "1100110000000110011001010001110000000000000000000000000000000000", 
    34 => "0000010011010011100100100000110000000000000000000000000000000000", 
    35 => "0111001000110001010000000001100100000000000000000000000000000000", 
    36 => "1101110010110100011111011010000000000000000000000000000000000000", 
    37 => "1101001110101100110010011000011000000000000000000000000000000000", 
    38 => "0100011110000110011111110000110000000000000000000000000000000000", 
    39 => "0010011100100100111111110000100000000000000000000000000000000000", 
    40 => "0101101011010000101010001111100000000000000000000000000000000000", 
    41 => "1111010110000110110001010110011000000000000000000000000000000000", 
    42 => "1101100000100000011001001111011100000000000000000000000000000000", 
    43 => "1100010000101100010100111000011100000000000000000000000000000000", 
    44 => "0100000000100110110111001010011100000000000000000000000000000000", 
    45 => "0110000110001001000100010100111100000000000000000000000000000000", 
    46 => "1011110111011010011010101111100000000000000000000000000000000000", 
    47 => "1010010111110101110011111100100000000000000000000000000000000000", 
    48 => "1110110101011100011100001011001100000000000000000000000000000000", 
    49 => "1110101000110110100111010010110000000000000000000000000000000000", 
    50 => "0111101111010000101011101101111100111011110110011000100000111001", 
    51 => "1000110010101110011111010011001000110100001111100010111101011110", 
    52 => "1001001011111101010101110010110010010011000011111101011011001000", 
    53 => "0110001011000001110010000110010011110010010001001111101001000100", 
    54 => "0011101110100000001111101011100000000110101010010111111101110100", 
    55 => "0110110101011011101001100100001011101101110011011111111111000100", 
    56 => "0100100000010000001010100001100011001000010111001100111000111000", 
    57 => "0110101000010011101111001011100001101011110000011000111110111000", 
    58 => "0111000011000100101011100011011010001000001111001010010010100111", 
    59 => "1110111101110001100000001100001000110111111001111100001001110111", 
    60 => "1001011011000001011001110101011001100110000000011110110101000111", 
    61 => "0000010010101011011111111000111101001011101111110001010011100001", 
    62 => "1000011100000110011000010000011000111111001001100101000100000111", 
    63 => "0100010001111100010100000100010100011101010011000101000111101001", 
    64 => "1000011001010111100101110110011011000101101010011010001001111111", 
    65 => "1011000011001010110010011011011010100110001011101001111110111010", 
    66 => "1011100001000000001111101000111101111011100001010101110101010100", 
    67 => "0101000111010001011001010111100110010001101000100110011110011000", 
    68 => "1000101001001010010000010000111110111000110111100101000110000111", 
    69 => "0100111111111011011111000011110101110111011000001011111010000110", 
    70 => "1110101010001101111001101010010001011011101101011100111100111111", 
    71 => "0100010010110110000010100110011001001000100110101001001011010011", 
    72 => "0000000101011101100111100000010100100101110111110001111001000000", 
    73 => "1001101000111011100101100011111111000110010100000100011101101100", 
    74 => "0001011110011110001010110101010101110111110110101110000101010011", 
    75 => "1101011110101110011001011011111101010110101011101111100101001110", 
    76 => "0111011100100000001000110011110000010110011000111110100010101000", 
    77 => "1011101100010111000011101101100011100111010111110000101000001011", 
    78 => "1001110010111000110000011010101110011110110010110001000100000011", 
    79 => "1011001001000001010111000011110001001111110000100111001001101110", 
    80 => "1001110010110100100110110101000011100010111011000010010100111101", 
    81 => "1100111110010110010001111110101001000011010100110101010001010001", 
    82 => "0001001011110100011110110011001111001001111011101010001001111111", 
    83 => "0001101000010001101101011010111101011111101001100010010101011010", 
    84 => "1111100011010010001011101000000111110110011000111010101100001001", 
    85 => "0010111100110101010011101101000100010000100001100011100101101101", 
    86 => "0010110011001011011001110011110010110010110110011011100100110111", 
    87 => "0001010101010010001010111010111010011101011010110010010100101111", 
    88 => "1001000001001111101010010010011001100000101011001111011111011110", 
    89 => "1011011111101010010100010101100010110111011100100111011101011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cXh4 is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cXh4 is
    component pg_conv3x3_tile_cXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cXh4_rom_U :  component pg_conv3x3_tile_cXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


