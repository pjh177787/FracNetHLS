-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c4jc_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c4jc_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000010011010011111010111101111100000000000000000000000000000000", 
    1 => "0000000011001001010000000010001100000000000000000000000000000000", 
    2 => "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "1111111111111111111111111111111000000000000000000000000000000000", 
    4 => "1111111111111111111111111111100000000000000000000000000000000000", 
    5 => "1000000000000000000000000000000000000000000000000000000000000000", 
    6 => "0111000001100100000000000000000000000000000000000000000000000000", 
    7 => "0011011011111101000000000000000000000000000000000000000000000000", 
    8 => "0111000000100101000000000000000000000000000000000000000000000000", 
    9 => "1001010110101110000000000000000000000000000000000000000000000000", 
    10 => "1101110001110100000000000000000000000000000000000000000000000000", 
    11 => "1001111110001100000000000000000000000000000000000000000000000000", 
    12 => "0111000101110110000000000000000000000000000000000000000000000000", 
    13 => "0001111111011110000000000000000000000000000000000000000000000000", 
    14 => "0000101110001100000000000000000000000000000000000000000000000000", 
    15 => "0000110000010000000000000000000000000000000000000000000000000000", 
    16 => "1111001011001010000000000000000000000000000000000000000000000000", 
    17 => "1111001100000101000000000000000000000000000000000000000000000000", 
    18 => "0010101111001110000000000000000000000000000000000000000000000000", 
    19 => "0100001100011010000000000000000000000000000000000000000000000000", 
    20 => "0000011010101010000000000000000000000000000000000000000000000000", 
    21 => "1000010000000110000000000000000000000000000000000000000000000000", 
    22 => "0011000000011101001000101110011000000000000000000000000000000000", 
    23 => "0011001010001101001000101001000100000000000000000000000000000000", 
    24 => "0001011000011001001011100010111000000000000000000000000000000000", 
    25 => "1000000101111010100000010111001100000000000000000000000000000000", 
    26 => "0001011101111110000000110111101100000000000000000000000000000000", 
    27 => "0011011100000110110100111110111100000000000000000000000000000000", 
    28 => "0100000010010100000001000011111000000000000000000000000000000000", 
    29 => "1000000000101110100111101010011100000000000000000000000000000000", 
    30 => "0101000001110110000000100010011000000000000000000000000000000000", 
    31 => "0111000001100101011001101011010000000000000000000000000000000000", 
    32 => "0011010101011010000000100100101100000000000000000000000000000000", 
    33 => "0000000000000100100110001000011100000000000000000000000000000000", 
    34 => "0011100011100010101011100010010000000000000000000000000000000000", 
    35 => "0100011111011001100101000101100000000000000000000000000000000000", 
    36 => "1001000001000000100111000000011100000000000000000000000000000000", 
    37 => "1000000000111011100011110110001000000000000000000000000000000000", 
    38 => "0001101011100100101011001110101100000000000000000000000000000000", 
    39 => "0001001000100010101111100100110100000000000000000000000000000000", 
    40 => "0001001111001000000110001111100100000000000000000000000000000000", 
    41 => "1000011101010010100101010000000000000000000000000000000000000000", 
    42 => "0010001110110101101111010110100000000000000000000000000000000000", 
    43 => "0010000001001011001000100110001000000000000000000000000000000000", 
    44 => "0000100101111000010000000001100000000000000000000000000000000000", 
    45 => "0111100111110110101101010100001100000000000000000000000000000000", 
    46 => "1001111001010101010001110011100000000000000000000000000000000000", 
    47 => "1100101010110010010000000010111000000000000000000000000000000000", 
    48 => "0111000110011001001110100011001100000000000000000000000000000000", 
    49 => "0111010111011011001100001101011100000000000000000000000000000000", 
    50 => "1111111100010010001111110110001100101011000110100011101101001111", 
    51 => "0111101111110000110100001000010111000011011110000000110110110001", 
    52 => "1001011001110101101111001001000010001000101101001100111100101110", 
    53 => "0011100011010010010010101011000000001100110000010100001000110000", 
    54 => "1100110111011100010011101001000011100101001111100100101100101001", 
    55 => "1100000101010001000001100000001101001011000110001110011000100011", 
    56 => "0000001110011011000111000011001000000001110010010011011110010000", 
    57 => "1110111000111110111010101011011010101011011010000100111000111111", 
    58 => "1000111101100010011111010101101100001011011000011010100100001000", 
    59 => "0100000111001010000001010100100000100101100010001111101101110000", 
    60 => "1001101100101100010111011110110010011010110111111000000000000110", 
    61 => "0001010001011110101000111100101101000100000111111011001100101111", 
    62 => "1100010011110100010101110111011011110010001000101100110001110101", 
    63 => "0110110001110100011101101011101001011010011000000000010001101111", 
    64 => "0010100010011011010001011111010000000100010010111111000011110101", 
    65 => "0001111101111100110001101100101000011010110101011001101101101000", 
    66 => "0011101101110100010101110111101001010111110001000111111111011101", 
    67 => "0101011100110101000010101011110111001111011001110000100010110000", 
    68 => "0000110011101100000101001110000011001001110110101100010011101000", 
    69 => "1001101010111000110011110001001111001110100001101001100100100111", 
    70 => "0010001111000010101000101001101101011011110100001000100001001011", 
    71 => "1000011000110010111111100100111010100110010000001000100011000010", 
    72 => "1111001100110011100011111011001011111011001111111001111000000100", 
    73 => "0101011100110110001100101010101101000111110000110011100000110011", 
    74 => "0011000001110111110001100010010101000011101110001010010110101111", 
    75 => "0000010010000101011110100000000001010100001010010110001110101000", 
    76 => "0010100010001010000000010010011100101100001000010010101111011101", 
    77 => "0000111111101000010011010000000000101111001100101100011110001011", 
    78 => "0010111100110001111101101100010001010100110110100100000010101011", 
    79 => "0101110001010101110001100000011100101100101000110010011100001111", 
    80 => "0100010010000011001001000011001100000111111010111011001000011010", 
    81 => "0100010011101110100100001100010011110000110010111001110010001010", 
    82 => "0001110010010111000101010010101100110101001010110001101100011100", 
    83 => "0001100000000110100011010001100110111111001111000001111001100001", 
    84 => "0001010111110101110101011000111110001010111010001110100110001010", 
    85 => "0111111110111100100000001111011011100100111101000110100101101111", 
    86 => "0000110001110000110010000000111111001001100100000100000000101110", 
    87 => "1000001101100000111011011111110010110111010000101110010001101100", 
    88 => "1100110001000111100101111011010100010111001011011111001000100100", 
    89 => "0001001001000101110101010001110010001001110110001111101100001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c4jc is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c4jc is
    component pg_conv3x3_tile_c4jc_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c4jc_rom_U :  component pg_conv3x3_tile_c4jc_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


