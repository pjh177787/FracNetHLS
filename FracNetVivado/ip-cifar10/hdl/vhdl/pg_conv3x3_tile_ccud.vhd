-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_ccud_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_ccud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111111111111111100000000000000000000000000000000", 
    1 => "1111101000000011100011101111111100000000000000000000000000000000", 
    2 => "1111111111111111111111111111111100000000000000000000000000000000", 
    3 => "0000000000100000001000000000001100000000000000000000000000000000", 
    4 => "0000000000000001000001000110000100000000000000000000000000000000", 
    5 => "0011110111110101010101100111100000000000000000000000000000000000", 
    6 => "0000001110111011000000000000000000000000000000000000000000000000", 
    7 => "0111000000110000000000000000000000000000000000000000000000000000", 
    8 => "0001011000011111000000000000000000000000000000000000000000000000", 
    9 => "0111000100001010000000000000000000000000000000000000000000000000", 
    10 => "0011000011000000000000000000000000000000000000000000000000000000", 
    11 => "0000011100010110000000000000000000000000000000000000000000000000", 
    12 => "1000011110001100000000000000000000000000000000000000000000000000", 
    13 => "0100010000101000000000000000000000000000000000000000000000000000", 
    14 => "0010010000110010000000000000000000000000000000000000000000000000", 
    15 => "1110010101110001000000000000000000000000000000000000000000000000", 
    16 => "1000111111111110000000000000000000000000000000000000000000000000", 
    17 => "1000101111111100000000000000000000000000000000000000000000000000", 
    18 => "1010011101100011000000000000000000000000000000000000000000000000", 
    19 => "0011100011011010000000000000000000000000000000000000000000000000", 
    20 => "1011101001010011000000000000000000000000000000000000000000000000", 
    21 => "0100001010000100000000000000000000000000000000000000000000000000", 
    22 => "0010111011111000111101111101010100000000000000000000000000000000", 
    23 => "1000100110110011000110101001100100000000000000000000000000000000", 
    24 => "1001101011011101101110001010010100000000000000000000000000000000", 
    25 => "0110111011010110101001100011110000000000000000000000000000000000", 
    26 => "0100110111110110110110010101010000000000000000000000000000000000", 
    27 => "0001100011001001011111111111100100000000000000000000000000000000", 
    28 => "0011111000010000011101110000000100000000000000000000000000000000", 
    29 => "0111010111011001010001110101001100000000000000000000000000000000", 
    30 => "0001111010110011111100100110110000000000000000000000000000000000", 
    31 => "0011010100010000001001100010110000000000000000000000000000000000", 
    32 => "1011000101000101011011000000100000000000000000000000000000000000", 
    33 => "1011110101011001000011101101010100000000000000000000000000000000", 
    34 => "1011010100001110110000010111000100000000000000000000000000000000", 
    35 => "0101010111011001000110001010011000000000000000000000000000000000", 
    36 => "0000000110001010010101010001011100000000000000000000000000000000", 
    37 => "0110010111011001000001011001011100000000000000000000000000000000", 
    38 => "0001111000010100000101101011101100000000000000000000000000000000", 
    39 => "0100111011100101011101000100101100000000000000000000000000000000", 
    40 => "0010110110110011111111010010110000000000000000000000000000000000", 
    41 => "0001101111110110110110010110111000000000000000000000000000000000", 
    42 => "1100000011110100111000001110011100000000000000000000000000000000", 
    43 => "0100111011100010110100010100100000000000000000000000000000000000", 
    44 => "0110110111001011110000011101000000000000000000000000000000000000", 
    45 => "1010011111001111010111111000101100000000000000000000000000000000", 
    46 => "1010110101110100100111000000000100000000000000000000000000000000", 
    47 => "0101000011010000100011000100001100000000000000000000000000000000", 
    48 => "1101000001101011001000101111101000000000000000000000000000000000", 
    49 => "1100100110000001110100000000000000000000000000000000000000000000", 
    50 => "0010011110001111010111101011000100100110000110110101111001000000", 
    51 => "0101010111001110010000110000011011110101100111100100010100010100", 
    52 => "1111010110010100010000011010011110110100101001010001100111100011", 
    53 => "0100001000110111000001010010011101001000101100110001111010111011", 
    54 => "1101110010110000010011010110101011101110001101100000110101100100", 
    55 => "0110001010100101011010100100001001001001001101000101011101101011", 
    56 => "1110101100101111001000100111001111001011010111010110001010111110", 
    57 => "0001010010100010000010110000001100001100111000001000100100000100", 
    58 => "0111110100111100101000000110101001011100010000100000010000010010", 
    59 => "0100000010001011010010011011110000111100111110000011110111000000", 
    60 => "1001101110011001000001011100010101011011001010110000000101000101", 
    61 => "0110100010101010001000110111000001111100011110110000010000010111", 
    62 => "1100101001110110110001110011100010011010011001101000100000111110", 
    63 => "1111100001101010000111111100100111011010000001001000100000110110", 
    64 => "0100101010010011010100001000101001101111110010111011000111001001", 
    65 => "1010011100000100001110100100000110001100101110010100000100010011", 
    66 => "1000101000011101100010100010110110010100000101010000100000111001", 
    67 => "1000001100111001010010000100101110101110000001010100100000011111", 
    68 => "0101000011110110100000100000101001001000110011100000011001101001", 
    69 => "1010111111010011101000111100011011011100000010001101010111001011", 
    70 => "1100110011100000001010000000001011101010001010100000011000111110", 
    71 => "1000100110110101001100001111101101100011101110100110000001101101", 
    72 => "1111100000111011010000000101010110011000010101110000001000010111", 
    73 => "1001110100010101010011100111010101010101100111100100111001011100", 
    74 => "0001000110101101111000100010001110010000000011111010101110000010", 
    75 => "0101100011101110011101011110111100011011111010100001110001101110", 
    76 => "1110000100100111000110000011101101010110110011101110111000101010", 
    77 => "1001101101010010110000001000100111011011110100001011011110101011", 
    78 => "1100011100010111110011110100001011110010100101111000010000001011", 
    79 => "1100101101100010000100011000000010011010001001100111001100010110", 
    80 => "0110001111100100001101001001001110111000101010101110101101011110", 
    81 => "1011011011110001010000000101010110111110100100101010100001101101", 
    82 => "1111110101000110110001110100001111011111111010111011111100111000", 
    83 => "1000000100110001110011110100011010100101010001101010000001001100", 
    84 => "1101000111010001011111100101101111010101011101110000010010011010", 
    85 => "1011110111010011001011010001010110100100000010110000101010011110", 
    86 => "0000001010110110011011000000010111011011101110001001001010001111", 
    87 => "1010001001010010000000011011101100000110100001000011001000111111", 
    88 => "1000110100110101010011111000111011111111101001001101111000100000", 
    89 => "0011100001110001000000010111001111100111100010010010110110110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_ccud is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_ccud is
    component pg_conv3x3_tile_ccud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_ccud_rom_U :  component pg_conv3x3_tile_ccud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


