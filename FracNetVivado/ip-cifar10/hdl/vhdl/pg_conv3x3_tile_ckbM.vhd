-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_ckbM_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_ckbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1000100110100001011111100101110000000000000000000000000000000000", 
    1 => "1011010101010000000000100100001100000000000000000000000000000000", 
    2 => "1111111111111111110111110111111100000000000000000000000000000000", 
    3 => "0111111111111111110111111111111100000000000000000000000000000000", 
    4 => "0101101011100100100110001101111100000000000000000000000000000000", 
    5 => "1000000001001100010100101100111000000000000000000000000000000000", 
    6 => "0010001000010100000000000000000000000000000000000000000000000000", 
    7 => "0100101000101100000000000000000000000000000000000000000000000000", 
    8 => "1011000000111000000000000000000000000000000000000000000000000000", 
    9 => "1001101100101100000000000000000000000000000000000000000000000000", 
    10 => "0010001011000011000000000000000000000000000000000000000000000000", 
    11 => "1000101100111101000000000000000000000000000000000000000000000000", 
    12 => "1001111010100110000000000000000000000000000000000000000000000000", 
    13 => "0101001011000000000000000000000000000000000000000000000000000000", 
    14 => "0000111011111100000000000000000000000000000000000000000000000000", 
    15 => "0000110000101111000000000000000000000000000000000000000000000000", 
    16 => "0111101100000101000000000000000000000000000000000000000000000000", 
    17 => "0101000101011110000000000000000000000000000000000000000000000000", 
    18 => "0100110010110111000000000000000000000000000000000000000000000000", 
    19 => "1011101111110101000000000000000000000000000000000000000000000000", 
    20 => "1101100101000011000000000000000000000000000000000000000000000000", 
    21 => "0000000001100110000000000000000000000000000000000000000000000000", 
    22 => "0111110110011111001110010011001000000000000000000000000000000000", 
    23 => "1100111111101010110111111101100000000000000000000000000000000000", 
    24 => "0011100110011011010110001100101100000000000000000000000000000000", 
    25 => "1110001111000011111100100101000100000000000000000000000000000000", 
    26 => "1101110011100000010100001110010000000000000000000000000000000000", 
    27 => "1011111101110010011110111111100100000000000000000000000000000000", 
    28 => "1100011111010000010001111011110000000000000000000000000000000000", 
    29 => "0110000000111001001010100000100100000000000000000000000000000000", 
    30 => "0100010010111100010001101100100100000000000000000000000000000000", 
    31 => "0001111111010001000100100101100000000000000000000000000000000000", 
    32 => "1010111010101011000100111001001100000000000000000000000000000000", 
    33 => "1101101111110100111010111110110100000000000000000000000000000000", 
    34 => "0100110001110001101111001001001100000000000000000000000000000000", 
    35 => "1001110011100010110011001101101000000000000000000000000000000000", 
    36 => "0011101111011001011100101111111100000000000000000000000000000000", 
    37 => "0000011111001011100101010100110100000000000000000000000000000000", 
    38 => "1101010111111010011010001110011000000000000000000000000000000000", 
    39 => "0111010011010011100010001101100100000000000000000000000000000000", 
    40 => "1100000011011100110000110000010000000000000000000000000000000000", 
    41 => "0101100001000000011111101011001000000000000000000000000000000000", 
    42 => "1101001001000000001111011111001100000000000000000000000000000000", 
    43 => "1001010111101101111101111001111000000000000000000000000000000000", 
    44 => "0100011011101010110111011100111000000000000000000000000000000000", 
    45 => "1100110111011110011101111110001000000000000000000000000000000000", 
    46 => "1011111100011011001110100111100100000000000000000000000000000000", 
    47 => "1100110111001111011100011110001000000000000000000000000000000000", 
    48 => "1100101111011100111100101111000000000000000000000000000000000000", 
    49 => "1001000100110101111111111110111100000000000000000000000000000000", 
    50 => "1001011000111111101000110100011011101011010111011010010010001111", 
    51 => "0110111000110000110011000101000101000010110001011011100101101001", 
    52 => "0100000000111001000110101111110101010001011011111001111011111101", 
    53 => "0100110110111110111001010100100001001111101111111111010011100111", 
    54 => "0011101101010011100101001001000110100001101000110011101101100101", 
    55 => "0001011111111000010100111000010000010101001010010011011111000000", 
    56 => "0011101110011000110101011110010000001111100100010001101101110000", 
    57 => "1110001110101111111110001111000011010011000111011111011011101111", 
    58 => "1100000001110111110011001010001010101100101101000011100010001101", 
    59 => "0010111001100000111011100011100010100001111000101111001101011010", 
    60 => "0011000111011110101000000100001001101100101010101000110111100101", 
    61 => "1110110000100100011010010110000000100000000111101000010000011111", 
    62 => "1000001011001010010100100010101000011100000001001101110101010010", 
    63 => "0000011000011011111011111111010001011010001011000010110001101100", 
    64 => "1110101011110110111011001101100001111111010111010101110101111001", 
    65 => "0001111000111101111101011011011010110101011011110010010111100110", 
    66 => "0100000110111000110001010100101111001100000011110000010010101110", 
    67 => "0000111101000001011111100001000001010011111011000111101000111011", 
    68 => "1001000001011001100111010000110101010010100010000111100010100110", 
    69 => "1000001101011110110011011000101011111101001100010100110101111001", 
    70 => "0100000011101001000001101001010010101010000011100000010111000110", 
    71 => "1111100111111000100011110001110010010001010011111010101010010100", 
    72 => "1010101001000100101011111011000011111000001000111011010100111110", 
    73 => "0010101101110001010010000110011101000011110100100001001101101100", 
    74 => "1101000011001001110100010101011101000100111111010101010111101101", 
    75 => "0101001111010001100000011010110101100111011101110011110100000100", 
    76 => "1001101101000011011011000000000000100111100000000011111101111001", 
    77 => "0000010100110110111101001011110110100101111000001110011110111111", 
    78 => "1111111101101001010111001001011010001100011001000010000111100000", 
    79 => "1001111100010000001001011100101011000011000100101001010001000010", 
    80 => "0111100001010100101111011000011010101010111000001110101110100110", 
    81 => "0110010001110110101001101001000101111100001110100111101111011000", 
    82 => "1101001101010111111000111000101010000011000000001010101010001011", 
    83 => "0000100111000110000100111010011111110000001000001010011101010000", 
    84 => "1101110000101100000111101100111011000101110101101001011010110110", 
    85 => "1101011101111100010000001111101101000010100001100011011100101110", 
    86 => "1000111110110010000011110111000111000110101000011110000101100101", 
    87 => "0000110000011111000110111000101000011000001110010000111010111010", 
    88 => "1101101110111011000000011011001111001000110111011000000010001100", 
    89 => "1110000101100000000111111101100100110011111000111100011010110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_ckbM is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_ckbM is
    component pg_conv3x3_tile_ckbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_ckbM_rom_U :  component pg_conv3x3_tile_ckbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


