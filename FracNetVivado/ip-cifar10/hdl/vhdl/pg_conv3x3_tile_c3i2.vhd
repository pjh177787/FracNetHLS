-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c3i2_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c3i2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111101101101101111100111100000000000000000000000000000000", 
    1 => "1111101111111111011111001011011100000000000000000000000000000000", 
    2 => "0000000000000000010000001000000100000000000000000000000000000000", 
    3 => "1110010010101101011110011111111000000000000000000000000000000000", 
    4 => "1001000110010111010010110101100000000000000000000000000000000000", 
    5 => "1000000001000000000001000000000100000000000000000000000000000000", 
    6 => "0111110111101111000000000000000000000000000000000000000000000000", 
    7 => "1101010000111001000000000000000000000000000000000000000000000000", 
    8 => "0101100111111011000000000000000000000000000000000000000000000000", 
    9 => "1001010011111011000000000000000000000000000000000000000000000000", 
    10 => "1001100001001111000000000000000000000000000000000000000000000000", 
    11 => "1011111011011100000000000000000000000000000000000000000000000000", 
    12 => "0110101111001110000000000000000000000000000000000000000000000000", 
    13 => "0111010011111111000000000000000000000000000000000000000000000000", 
    14 => "1000111111100100000000000000000000000000000000000000000000000000", 
    15 => "0101100100111000000000000000000000000000000000000000000000000000", 
    16 => "1010001110001000000000000000000000000000000000000000000000000000", 
    17 => "0001011110001001000000000000000000000000000000000000000000000000", 
    18 => "0110101111010110000000000000000000000000000000000000000000000000", 
    19 => "0101101100011001000000000000000000000000000000000000000000000000", 
    20 => "0001011000110100000000000000000000000000000000000000000000000000", 
    21 => "0001000000100100000000000000000000000000000000000000000000000000", 
    22 => "0100000001010010000000001111001100000000000000000000000000000000", 
    23 => "0001001000110000000001000001101000000000000000000000000000000000", 
    24 => "1101010000110001000111001010011000000000000000000000000000000000", 
    25 => "0000001011101101001010001110010100000000000000000000000000000000", 
    26 => "0011011111011111110111111101111100000000000000000000000000000000", 
    27 => "0110000100010100011011101010011100000000000000000000000000000000", 
    28 => "1000101110011001000001101011110100000000000000000000000000000000", 
    29 => "0000100000100100101010001011000000000000000000000000000000000000", 
    30 => "1100010001010100001100000001010000000000000000000000000000000000", 
    31 => "1111100111110100100111000001100000000000000000000000000000000000", 
    32 => "1101010000000110010001100100011000000000000000000000000000000000", 
    33 => "0001100001001100000010001110011100000000000000000000000000000000", 
    34 => "0111100001110111000101000000011100000000000000000000000000000000", 
    35 => "0000011100101010101100110101100100000000000000000000000000000000", 
    36 => "0001000011010010100101001001011100000000000000000000000000000000", 
    37 => "0011001101111001101010100110101100000000000000000000000000000000", 
    38 => "0001101011000001101010011101111000000000000000000000000000000000", 
    39 => "1111001001111010010000101011010100000000000000000000000000000000", 
    40 => "0011011000010011001100101110110000000000000000000000000000000000", 
    41 => "1010110111001011111000100100001000000000000000000000000000000000", 
    42 => "0010001110110101101111010111101000000000000000000000000000000000", 
    43 => "1001100001111111011110111010101000000000000000000000000000000000", 
    44 => "1100010101111011010110100000100000000000000000000000000000000000", 
    45 => "0010111111110010101101000100011100000000000000000000000000000000", 
    46 => "1100011101010101010100110000100100000000000000000000000000000000", 
    47 => "1101011011000010011100010010111000000000000000000000000000000000", 
    48 => "1111000110011101001010100011001000000000000000000000000000000000", 
    49 => "1111010010011100011110111100011100000000000000000000000000000000", 
    50 => "1101011100100011001101110101101001101000001110101011111101011010", 
    51 => "0011101111011101000101011011011100000010101010111001100101000001", 
    52 => "1000010100111101100000011010011001110101101110100100001110001111", 
    53 => "0000110111011011011110110000100100001101010100110000000100010000", 
    54 => "0001001111000000110101100001100100000010110011110111100101000000", 
    55 => "1100010101101110100111111101010110111011001110001110101000111111", 
    56 => "0100101110000011101111100111101000000001100010011011101111111000", 
    57 => "1010010100011010011000000101000010111001001000100100010010100101", 
    58 => "0011010110100011011000111000101100110000000101101010101010010000", 
    59 => "1111000000001110001001110000000000101000000001101011011011011100", 
    60 => "1101001100101110011101110100111100011001001111110100000000100010", 
    61 => "0001010111011111101001110111111100000101001111110010011101100011", 
    62 => "1000011001100010010100101011100100000010111011000011101001011101", 
    63 => "1110010001111000110111010011001111011110011100100010000100110011", 
    64 => "0011000010111011110001010101010000110010000011101110000111010111", 
    65 => "0001001100001100110001110100010010110111011000000001101101101010", 
    66 => "0001111001110010010111010111110001110111010101010101111011001101", 
    67 => "0101010001010000000111111111111110001111001000100001100000110000", 
    68 => "1000110110101100101111010110000010101001101111010000001010111111", 
    69 => "0001001111001011110000011000110110111110000001000010001100010110", 
    70 => "1000100101101111100010100001011101111000001001110000101111001110", 
    71 => "0001010010100010001100100000011010110111001010011000001011010000", 
    72 => "1111000100111010000101100001010001011000001001110001111000000100", 
    73 => "1101001110110100011000101000101111010011100010111110101010010011", 
    74 => "1011101001110000100101110011010101001011111010001111001110111111", 
    75 => "1100100011001101111101100000000000000100111011001110001101000100", 
    76 => "0010100010001100100011001011001100101110001100000010100111011010", 
    77 => "0010110110100000000100010100100001101011101110111111011000111001", 
    78 => "0101110100010100011110110000101101110000010001111101010000101010", 
    79 => "1100110011010100110101000000111010101001110000100110110001001011", 
    80 => "0100101000010101111100000010001111001111011000000011100010001001", 
    81 => "0110000010101111000100011100010110010010110110100011111110001011", 
    82 => "0010100000000010001101100111100101111001001000010000101000111100", 
    83 => "1101110100100110100010110011100111111101010110111101011101100101", 
    84 => "1001010101110001011101011011111010000010011000001110111100011000", 
    85 => "0011010110001100101000011110001011100010111011001111001100111111", 
    86 => "0011111101011011111011011001011111101001100110000101010101010100", 
    87 => "1011101101110000111111011011110000010010010000101001111001101101", 
    88 => "0111110101010010000101110011111101011101011000111001001110100000", 
    89 => "0111011001100101011001001001110010011111111110101011101101011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c3i2 is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c3i2 is
    component pg_conv3x3_tile_c3i2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c3i2_rom_U :  component pg_conv3x3_tile_c3i2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


