-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bn1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_buf_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_0_V_ce0 : OUT STD_LOGIC;
    out_buf_0_V_we0 : OUT STD_LOGIC;
    out_buf_0_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_1_V_ce0 : OUT STD_LOGIC;
    out_buf_1_V_we0 : OUT STD_LOGIC;
    out_buf_1_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_2_V_ce0 : OUT STD_LOGIC;
    out_buf_2_V_we0 : OUT STD_LOGIC;
    out_buf_2_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_3_V_ce0 : OUT STD_LOGIC;
    out_buf_3_V_we0 : OUT STD_LOGIC;
    out_buf_3_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_4_V_ce0 : OUT STD_LOGIC;
    out_buf_4_V_we0 : OUT STD_LOGIC;
    out_buf_4_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_5_V_ce0 : OUT STD_LOGIC;
    out_buf_5_V_we0 : OUT STD_LOGIC;
    out_buf_5_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_6_V_ce0 : OUT STD_LOGIC;
    out_buf_6_V_we0 : OUT STD_LOGIC;
    out_buf_6_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_buf_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    out_buf_7_V_ce0 : OUT STD_LOGIC;
    out_buf_7_V_we0 : OUT STD_LOGIC;
    out_buf_7_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    block_t0_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_0_V_ce0 : OUT STD_LOGIC;
    block_t0_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_1_V_ce0 : OUT STD_LOGIC;
    block_t0_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_2_V_ce0 : OUT STD_LOGIC;
    block_t0_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_3_V_ce0 : OUT STD_LOGIC;
    block_t0_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_4_V_ce0 : OUT STD_LOGIC;
    block_t0_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_5_V_ce0 : OUT STD_LOGIC;
    block_t0_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_6_V_ce0 : OUT STD_LOGIC;
    block_t0_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    block_t0_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    block_t0_7_V_ce0 : OUT STD_LOGIC;
    block_t0_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bn_weight_V_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    channel_tile : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of bn1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv24_7FFFFF : STD_LOGIC_VECTOR (23 downto 0) := "011111111111111111111111";
    constant ap_const_lv24_800000 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bn1_weight_fix_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_0_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_0_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_0_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal bn1_weight_fix_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_1_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_1_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_1_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal bn1_weight_fix_V_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_2_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_2_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal bn1_weight_fix_V_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_3_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_3_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_3_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal bn1_weight_fix_V_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_4_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_4_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_4_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal bn1_weight_fix_V_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_5_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_5_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bn1_bias_fix_V_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_5_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_5_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal bn1_weight_fix_V_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_6_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_6_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_6_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal bn1_weight_fix_V_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_weight_fix_V_7_ce0 : STD_LOGIC;
    signal bn1_weight_fix_V_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bn1_bias_fix_V_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal bn1_bias_fix_V_7_ce0 : STD_LOGIC;
    signal bn1_bias_fix_V_7_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal indvar_flatten_reg_592 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_0_reg_603 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_0_reg_614 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_fu_661_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_reg_2952 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln1265_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_reg_2957 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_reg_2962 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_reg_2967 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_1_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_1_reg_2972 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_17_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_17_reg_2977 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_1_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_1_reg_2982 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_2_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_2_reg_2987 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_2_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_2_reg_2992 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_3_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_3_reg_2997 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_18_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_18_reg_3002 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_3_fu_707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_3_reg_3007 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_4_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_4_reg_3012 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_19_fu_715_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_19_reg_3017 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_4_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_4_reg_3022 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_5_fu_723_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1265_5_reg_3027 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1192_20_fu_727_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1192_20_reg_3032 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1116_fu_731_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1116_reg_3037 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1265_6_fu_735_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_6_reg_3042 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_21_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1192_21_reg_3047 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_5_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_5_reg_3052 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_7_fu_747_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1265_7_reg_3057 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_6_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1192_6_reg_3062 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_755_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_reg_3067 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln123_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_3072 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_3072_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_3072_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_3072_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_3072_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln123_fu_767_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln124_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_reg_3081 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln127_fu_779_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_reg_3086 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_reg_3086_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_reg_3086_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_reg_3086_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_reg_3086_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_fu_787_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_reg_3091 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_reg_3091_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_reg_3091_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_reg_3091_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln127_1_reg_3091_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_fu_795_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_reg_3097 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_fu_801_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_reg_3102 : STD_LOGIC_VECTOR (5 downto 0);
    signal block_t0_0_V_load_reg_3148 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_1_V_load_reg_3153 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_2_V_load_reg_3158 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_3_V_load_reg_3163 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_4_V_load_reg_3168 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_5_V_load_reg_3173 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_6_V_load_reg_3178 : STD_LOGIC_VECTOR (15 downto 0);
    signal block_t0_7_V_load_reg_3183 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_2820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_reg_3188 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_49_fu_2825_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_49_reg_3194 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2830_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_58_reg_3200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_678_reg_3206 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_64_reg_3212 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_680_reg_3217 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_70_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_70_reg_3222 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_3227 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1118_51_fu_2841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_51_reg_3233 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_52_fu_2846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_52_reg_3239 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_53_fu_2851_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_53_reg_3245 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1118_54_fu_2856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_54_reg_3251 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_63_reg_3257 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_708_reg_3263 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_69_reg_3269 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_710_reg_3274 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_80_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_80_reg_3279 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_3284 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_666_reg_3290 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_1019_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_reg_3296 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_fu_1039_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_reg_3302 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_670_fu_1045_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_670_reg_3308 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_67_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_67_reg_3313 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_3319 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_3324 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_672_reg_3330 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_59_fu_1171_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_59_reg_3336 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_65_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_65_reg_3342 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_676_fu_1197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_676_reg_3348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_69_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_69_reg_3353 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_33_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_33_reg_3359 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_1_reg_3364 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_162_fu_1450_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln340_162_reg_3370 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_684_reg_3375 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_61_fu_1504_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_61_reg_3381 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_67_fu_1524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_67_reg_3387 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_688_fu_1530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_688_reg_3393 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_73_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_73_reg_3398 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_35_fu_1570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_35_reg_3404 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_1604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_reg_3409 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_690_reg_3415 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_62_fu_1656_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_62_reg_3421 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_68_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_68_reg_3427 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_694_fu_1682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_694_reg_3433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_75_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_75_reg_3438 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_36_fu_1722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_36_reg_3444 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_1756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_reg_3449 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_696_reg_3455 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_63_fu_1808_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_63_reg_3461 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_69_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_69_reg_3467 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_700_fu_1834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_700_reg_3473 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_77_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_77_reg_3478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_37_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_37_reg_3484 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_1908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_reg_3489 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_702_reg_3495 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_64_fu_1960_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_64_reg_3501 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln416_70_fu_1980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_70_reg_3507 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_706_fu_1986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_706_reg_3513 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_79_fu_2020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_79_reg_3518 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_38_fu_2026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_38_reg_3524 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_2060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_reg_3529 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_167_fu_2239_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln340_167_reg_3535 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_row_0_phi_fu_607_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_col_0_phi_fu_618_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal bn_weight_V_offset_c_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln446_5_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_10_fu_2286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_183_fu_649_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_645_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln203_6_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1192_fu_671_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln1192_fu_675_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_17_fu_683_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1192_1_fu_687_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1192_18_fu_703_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln1192_3_fu_707_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_19_fu_715_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln1192_4_fu_719_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1192_20_fu_727_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1116_fu_731_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1192_21_fu_739_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1192_5_fu_743_p0 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln127_2_fu_807_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_665_fu_816_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln127_1_fu_812_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln446_fu_824_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln446_fu_828_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln446_4_fu_834_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln446_2_fu_837_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_fu_887_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_83_fu_949_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln1192_fu_973_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_fu_973_p2 : signal is "no";
    signal add_ln713_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln713_fu_995_p2 : signal is "no";
    signal tmp_668_fu_1007_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_1015_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln9_fu_985_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_669_fu_1025_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_667_fu_999_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1053_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_fu_1069_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_671_fu_1091_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_fu_1111_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_57_fu_1125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_57_fu_1125_p2 : signal is "no";
    signal add_ln713_16_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln713_16_fu_1147_p2 : signal is "no";
    signal tmp_674_fu_1159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_76_fu_1167_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_s_fu_1137_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_675_fu_1177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_673_fu_1151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_87_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_1205_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_72_fu_1221_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_677_fu_1243_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_68_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_56_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_1_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_33_fu_1263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_77_fu_1284_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_60_fu_1287_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_681_fu_1292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_679_fu_1277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_88_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_66_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_71_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_34_fu_1325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_683_fu_1338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_57_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_2_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_34_fu_1330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_682_fu_1312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_132_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_34_fu_1356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_73_fu_1399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_90_fu_1405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_152_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_66_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_211_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_189_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_1434_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_2_fu_1442_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1192_59_fu_1458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_59_fu_1458_p2 : signal is "no";
    signal add_ln713_17_fu_1480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln713_17_fu_1480_p2 : signal is "no";
    signal tmp_686_fu_1492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_78_fu_1500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_65_fu_1470_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_687_fu_1510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_685_fu_1484_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_89_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_1538_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_76_fu_1554_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_689_fu_1576_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_72_fu_1548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_58_fu_1584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_3_fu_1590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_35_fu_1596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_60_fu_1610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_60_fu_1610_p2 : signal is "no";
    signal add_ln713_18_fu_1632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln713_18_fu_1632_p2 : signal is "no";
    signal tmp_692_fu_1644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_79_fu_1652_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_66_fu_1622_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_693_fu_1662_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_691_fu_1636_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_90_fu_1670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_1690_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_78_fu_1706_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_695_fu_1728_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_74_fu_1700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_59_fu_1736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_4_fu_1742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_36_fu_1748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_61_fu_1762_p2 : STD_LOGIC_VECTOR (30 downto 0);
    attribute use_dsp48 of add_ln1192_61_fu_1762_p2 : signal is "no";
    signal add_ln713_19_fu_1784_p2 : STD_LOGIC_VECTOR (30 downto 0);
    attribute use_dsp48 of add_ln713_19_fu_1784_p2 : signal is "no";
    signal tmp_698_fu_1796_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_80_fu_1804_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_67_fu_1774_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_699_fu_1814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_697_fu_1788_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_91_fu_1822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_1842_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_80_fu_1858_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_701_fu_1880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_76_fu_1852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_60_fu_1888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_5_fu_1894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_37_fu_1900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_62_fu_1914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln1192_62_fu_1914_p2 : signal is "no";
    signal add_ln713_20_fu_1936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln713_20_fu_1936_p2 : signal is "no";
    signal tmp_704_fu_1948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_81_fu_1956_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_68_fu_1926_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_705_fu_1966_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_703_fu_1940_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_92_fu_1974_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_1994_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_82_fu_2010_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_707_fu_2032_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_78_fu_2004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_61_fu_2040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_6_fu_2046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_38_fu_2052_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_82_fu_2073_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln415_65_fu_2076_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_711_fu_2081_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_709_fu_2066_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_93_fu_2089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_71_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_81_fu_2109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_39_fu_2114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_713_fu_2127_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_62_fu_2134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_7_fu_2140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_39_fu_2119_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_712_fu_2101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_2159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_7_fu_2165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_137_fu_2171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_39_fu_2145_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_7_fu_2153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_2182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_78_fu_2188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_95_fu_2194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_157_fu_2200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_71_fu_2176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_216_fu_2211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_2205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_199_fu_2217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_7_fu_2223_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_7_fu_2231_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln127_fu_2247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_4_fu_2250_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_664_fu_2259_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_7_fu_2255_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_8_fu_2267_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_5_fu_2271_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln203_9_fu_2277_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_6_fu_2280_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln777_fu_2298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_2307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_2313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_130_fu_2318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_2303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_2329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_2334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_150_fu_2340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_2323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_209_fu_2351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_2345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_185_fu_2356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_2362_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_fu_2369_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln777_33_fu_2385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_2394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_2400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_131_fu_2405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_fu_2390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_72_fu_2416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_89_fu_2421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_151_fu_2427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_65_fu_2410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_210_fu_2438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_2432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_187_fu_2443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_2449_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_1_fu_2456_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln777_35_fu_2472_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_2481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_3_fu_2487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_133_fu_2492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_3_fu_2477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_74_fu_2503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_91_fu_2508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_153_fu_2514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_67_fu_2497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_212_fu_2525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_2519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_191_fu_2530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_2536_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_3_fu_2543_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln777_36_fu_2559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_2568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_4_fu_2574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_134_fu_2579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_4_fu_2564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_75_fu_2590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_92_fu_2595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_154_fu_2601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_68_fu_2584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_213_fu_2612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_2606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_193_fu_2617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_2623_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_4_fu_2630_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln777_37_fu_2646_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_fu_2655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_5_fu_2661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_135_fu_2666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_5_fu_2651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_76_fu_2677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_93_fu_2682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_155_fu_2688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_69_fu_2671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_214_fu_2699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_2693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_195_fu_2704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_5_fu_2710_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_5_fu_2717_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln777_38_fu_2733_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_6_fu_2742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_6_fu_2748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_136_fu_2753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_6_fu_2738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_77_fu_2764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_94_fu_2769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_156_fu_2775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_70_fu_2758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_215_fu_2786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_2780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_197_fu_2791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_2797_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln388_6_fu_2804_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_fu_2820_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_49_fu_2825_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2830_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2830_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1118_51_fu_2841_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_52_fu_2846_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_53_fu_2851_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_54_fu_2856_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2861_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2861_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component FracNet_T_mul_mulbDo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_T_mac_mulbEo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_T_mul_mulbFp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component FracNet_T_mac_mulbGp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bn1_bn1_weight_fibnm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bom IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component bn1_bn1_weight_fibpm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bqm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component bn1_bn1_weight_fibrm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bsm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component bn1_bn1_weight_fibtn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bun IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component bn1_bn1_weight_fibvn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bwn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component bn1_bn1_weight_fibxn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component bn1_bn1_bias_fix_byn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component bn1_bn1_weight_fibzo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bAo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component bn1_bn1_weight_fibBo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bn1_bn1_bias_fix_bCo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    bn1_weight_fix_V_0_U : component bn1_bn1_weight_fibnm
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_0_address0,
        ce0 => bn1_weight_fix_V_0_ce0,
        q0 => bn1_weight_fix_V_0_q0);

    bn1_bias_fix_V_0_U : component bn1_bn1_bias_fix_bom
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_0_address0,
        ce0 => bn1_bias_fix_V_0_ce0,
        q0 => bn1_bias_fix_V_0_q0);

    bn1_weight_fix_V_1_U : component bn1_bn1_weight_fibpm
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_1_address0,
        ce0 => bn1_weight_fix_V_1_ce0,
        q0 => bn1_weight_fix_V_1_q0);

    bn1_bias_fix_V_1_U : component bn1_bn1_bias_fix_bqm
    generic map (
        DataWidth => 21,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_1_address0,
        ce0 => bn1_bias_fix_V_1_ce0,
        q0 => bn1_bias_fix_V_1_q0);

    bn1_weight_fix_V_2_U : component bn1_bn1_weight_fibrm
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_2_address0,
        ce0 => bn1_weight_fix_V_2_ce0,
        q0 => bn1_weight_fix_V_2_q0);

    bn1_bias_fix_V_2_U : component bn1_bn1_bias_fix_bsm
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_2_address0,
        ce0 => bn1_bias_fix_V_2_ce0,
        q0 => bn1_bias_fix_V_2_q0);

    bn1_weight_fix_V_3_U : component bn1_bn1_weight_fibtn
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_3_address0,
        ce0 => bn1_weight_fix_V_3_ce0,
        q0 => bn1_weight_fix_V_3_q0);

    bn1_bias_fix_V_3_U : component bn1_bn1_bias_fix_bun
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_3_address0,
        ce0 => bn1_bias_fix_V_3_ce0,
        q0 => bn1_bias_fix_V_3_q0);

    bn1_weight_fix_V_4_U : component bn1_bn1_weight_fibvn
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_4_address0,
        ce0 => bn1_weight_fix_V_4_ce0,
        q0 => bn1_weight_fix_V_4_q0);

    bn1_bias_fix_V_4_U : component bn1_bn1_bias_fix_bwn
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_4_address0,
        ce0 => bn1_bias_fix_V_4_ce0,
        q0 => bn1_bias_fix_V_4_q0);

    bn1_weight_fix_V_5_U : component bn1_bn1_weight_fibxn
    generic map (
        DataWidth => 15,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_5_address0,
        ce0 => bn1_weight_fix_V_5_ce0,
        q0 => bn1_weight_fix_V_5_q0);

    bn1_bias_fix_V_5_U : component bn1_bn1_bias_fix_byn
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_5_address0,
        ce0 => bn1_bias_fix_V_5_ce0,
        q0 => bn1_bias_fix_V_5_q0);

    bn1_weight_fix_V_6_U : component bn1_bn1_weight_fibzo
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_6_address0,
        ce0 => bn1_weight_fix_V_6_ce0,
        q0 => bn1_weight_fix_V_6_q0);

    bn1_bias_fix_V_6_U : component bn1_bn1_bias_fix_bAo
    generic map (
        DataWidth => 21,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_6_address0,
        ce0 => bn1_bias_fix_V_6_ce0,
        q0 => bn1_bias_fix_V_6_q0);

    bn1_weight_fix_V_7_U : component bn1_bn1_weight_fibBo
    generic map (
        DataWidth => 16,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_weight_fix_V_7_address0,
        ce0 => bn1_weight_fix_V_7_ce0,
        q0 => bn1_weight_fix_V_7_q0);

    bn1_bias_fix_V_7_U : component bn1_bn1_bias_fix_bCo
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bn1_bias_fix_V_7_address0,
        ce0 => bn1_bias_fix_V_7_ce0,
        q0 => bn1_bias_fix_V_7_q0);

    FracNet_T_mul_mulbDo_U106 : component FracNet_T_mul_mulbDo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_fu_2820_p0,
        din1 => block_t0_0_V_load_reg_3148,
        dout => mul_ln1118_fu_2820_p2);

    FracNet_T_mul_mulbDo_U107 : component FracNet_T_mul_mulbDo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_49_fu_2825_p0,
        din1 => block_t0_1_V_load_reg_3153,
        dout => mul_ln1118_49_fu_2825_p2);

    FracNet_T_mac_mulbEo_U108 : component FracNet_T_mac_mulbEo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 20,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_2830_p0,
        din1 => block_t0_2_V_load_reg_3158,
        din2 => grp_fu_2830_p2,
        dout => grp_fu_2830_p3);

    FracNet_T_mul_mulbDo_U109 : component FracNet_T_mul_mulbDo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_51_fu_2841_p0,
        din1 => block_t0_3_V_load_reg_3163,
        dout => mul_ln1118_51_fu_2841_p2);

    FracNet_T_mul_mulbDo_U110 : component FracNet_T_mul_mulbDo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_52_fu_2846_p0,
        din1 => block_t0_4_V_load_reg_3168,
        dout => mul_ln1118_52_fu_2846_p2);

    FracNet_T_mul_mulbFp_U111 : component FracNet_T_mul_mulbFp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln1118_53_fu_2851_p0,
        din1 => block_t0_5_V_load_reg_3173,
        dout => mul_ln1118_53_fu_2851_p2);

    FracNet_T_mul_mulbDo_U112 : component FracNet_T_mul_mulbDo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_54_fu_2856_p0,
        din1 => block_t0_6_V_load_reg_3178,
        dout => mul_ln1118_54_fu_2856_p2);

    FracNet_T_mac_mulbGp_U113 : component FracNet_T_mac_mulbGp
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 19,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_2861_p0,
        din1 => block_t0_7_V_load_reg_3183,
        din2 => grp_fu_2861_p2,
        dout => grp_fu_2861_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_0_reg_614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_0_reg_614 <= col_reg_3102;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                col_0_reg_614 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_761_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_592 <= add_ln123_fu_767_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_592 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    row_0_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_0_reg_603 <= select_ln127_1_reg_3091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                row_0_reg_603 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add_ln1192_58_reg_3200 <= grp_fu_2830_p3;
                add_ln1192_63_reg_3257 <= grp_fu_2861_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_761_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln127_reg_3097 <= add_ln127_fu_795_p2;
                icmp_ln124_reg_3081 <= icmp_ln124_fu_773_p2;
                select_ln127_reg_3086 <= select_ln127_fu_779_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln203_reg_2952 <= add_ln203_fu_661_p2;
                sext_ln1192_17_reg_2977 <= sext_ln1192_17_fu_683_p1;
                sext_ln1192_18_reg_3002 <= sext_ln1192_18_fu_703_p1;
                sext_ln1192_19_reg_3017 <= sext_ln1192_19_fu_715_p1;
                sext_ln1192_20_reg_3032 <= sext_ln1192_20_fu_727_p1;
                sext_ln1192_21_reg_3047 <= sext_ln1192_21_fu_739_p1;
                sext_ln1192_reg_2962 <= sext_ln1192_fu_671_p1;
                    zext_ln1116_reg_3037(18 downto 0) <= zext_ln1116_fu_731_p1(18 downto 0);
                    zext_ln1192_1_reg_2982(20 downto 0) <= zext_ln1192_1_fu_687_p1(20 downto 0);
                    zext_ln1192_2_reg_2992(19 downto 0) <= zext_ln1192_2_fu_695_p1(19 downto 0);
                    zext_ln1192_3_reg_3007(21 downto 0) <= zext_ln1192_3_fu_707_p1(21 downto 0);
                    zext_ln1192_4_reg_3022(21 downto 0) <= zext_ln1192_4_fu_719_p1(21 downto 0);
                    zext_ln1192_5_reg_3052(20 downto 0) <= zext_ln1192_5_fu_743_p1(20 downto 0);
                    zext_ln1192_6_reg_3062(18 downto 0) <= zext_ln1192_6_fu_751_p1(18 downto 0);
                    zext_ln1192_reg_2967(21 downto 0) <= zext_ln1192_fu_675_p1(21 downto 0);
                    zext_ln1265_1_reg_2972(15 downto 0) <= zext_ln1265_1_fu_679_p1(15 downto 0);
                    zext_ln1265_2_reg_2987(15 downto 0) <= zext_ln1265_2_fu_691_p1(15 downto 0);
                    zext_ln1265_3_reg_2997(15 downto 0) <= zext_ln1265_3_fu_699_p1(15 downto 0);
                    zext_ln1265_4_reg_3012(15 downto 0) <= zext_ln1265_4_fu_711_p1(15 downto 0);
                    zext_ln1265_5_reg_3027(14 downto 0) <= zext_ln1265_5_fu_723_p1(14 downto 0);
                    zext_ln1265_6_reg_3042(15 downto 0) <= zext_ln1265_6_fu_735_p1(15 downto 0);
                    zext_ln1265_7_reg_3057(15 downto 0) <= zext_ln1265_7_fu_747_p1(15 downto 0);
                    zext_ln1265_reg_2957(15 downto 0) <= zext_ln1265_fu_667_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln415_59_reg_3336 <= add_ln415_59_fu_1171_p2;
                add_ln415_61_reg_3381 <= add_ln415_61_fu_1504_p2;
                add_ln415_62_reg_3421 <= add_ln415_62_fu_1656_p2;
                add_ln415_63_reg_3461 <= add_ln415_63_fu_1808_p2;
                add_ln415_64_reg_3501 <= add_ln415_64_fu_1960_p2;
                add_ln415_reg_3296 <= add_ln415_fu_1019_p2;
                and_ln416_65_reg_3342 <= and_ln416_65_fu_1191_p2;
                and_ln416_67_reg_3387 <= and_ln416_67_fu_1524_p2;
                and_ln416_68_reg_3427 <= and_ln416_68_fu_1676_p2;
                and_ln416_69_reg_3467 <= and_ln416_69_fu_1828_p2;
                and_ln416_70_reg_3507 <= and_ln416_70_fu_1980_p2;
                and_ln416_reg_3302 <= and_ln416_fu_1039_p2;
                and_ln786_1_reg_3364 <= and_ln786_1_fu_1271_p2;
                and_ln786_3_reg_3409 <= and_ln786_3_fu_1604_p2;
                and_ln786_4_reg_3449 <= and_ln786_4_fu_1756_p2;
                and_ln786_5_reg_3489 <= and_ln786_5_fu_1908_p2;
                and_ln786_6_reg_3529 <= and_ln786_6_fu_2060_p2;
                and_ln786_reg_3324 <= and_ln786_fu_1119_p2;
                icmp_ln768_33_reg_3359 <= icmp_ln768_33_fu_1237_p2;
                icmp_ln768_35_reg_3404 <= icmp_ln768_35_fu_1570_p2;
                icmp_ln768_36_reg_3444 <= icmp_ln768_36_fu_1722_p2;
                icmp_ln768_37_reg_3484 <= icmp_ln768_37_fu_1874_p2;
                icmp_ln768_38_reg_3524 <= icmp_ln768_38_fu_2026_p2;
                icmp_ln768_reg_3319 <= icmp_ln768_fu_1085_p2;
                icmp_ln879_67_reg_3313 <= icmp_ln879_67_fu_1079_p2;
                icmp_ln879_69_reg_3353 <= icmp_ln879_69_fu_1231_p2;
                icmp_ln879_73_reg_3398 <= icmp_ln879_73_fu_1564_p2;
                icmp_ln879_75_reg_3438 <= icmp_ln879_75_fu_1716_p2;
                icmp_ln879_77_reg_3478 <= icmp_ln879_77_fu_1868_p2;
                icmp_ln879_79_reg_3518 <= icmp_ln879_79_fu_2020_p2;
                select_ln340_162_reg_3370 <= select_ln340_162_fu_1450_p3;
                select_ln340_167_reg_3535 <= select_ln340_167_fu_2239_p3;
                tmp_666_reg_3290 <= add_ln1192_fu_973_p2(31 downto 31);
                tmp_670_reg_3308 <= add_ln415_fu_1019_p2(23 downto 23);
                tmp_672_reg_3330 <= add_ln1192_57_fu_1125_p2(31 downto 31);
                tmp_676_reg_3348 <= add_ln415_59_fu_1171_p2(23 downto 23);
                tmp_684_reg_3375 <= add_ln1192_59_fu_1458_p2(31 downto 31);
                tmp_688_reg_3393 <= add_ln415_61_fu_1504_p2(23 downto 23);
                tmp_690_reg_3415 <= add_ln1192_60_fu_1610_p2(31 downto 31);
                tmp_694_reg_3433 <= add_ln415_62_fu_1656_p2(23 downto 23);
                tmp_696_reg_3455 <= add_ln1192_61_fu_1762_p2(30 downto 30);
                tmp_700_reg_3473 <= add_ln415_63_fu_1808_p2(23 downto 23);
                tmp_702_reg_3495 <= add_ln1192_62_fu_1914_p2(31 downto 31);
                tmp_706_reg_3513 <= add_ln415_64_fu_1960_p2(23 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                block_t0_0_V_load_reg_3148 <= block_t0_0_V_q0;
                block_t0_1_V_load_reg_3153 <= block_t0_1_V_q0;
                block_t0_2_V_load_reg_3158 <= block_t0_2_V_q0;
                block_t0_3_V_load_reg_3163 <= block_t0_3_V_q0;
                block_t0_4_V_load_reg_3168 <= block_t0_4_V_q0;
                block_t0_5_V_load_reg_3173 <= block_t0_5_V_q0;
                block_t0_6_V_load_reg_3178 <= block_t0_6_V_q0;
                block_t0_7_V_load_reg_3183 <= block_t0_7_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_761_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                col_reg_3102 <= col_fu_801_p2;
                select_ln127_1_reg_3091 <= select_ln127_1_fu_787_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln123_reg_3072 <= icmp_ln123_fu_761_p2;
                icmp_ln123_reg_3072_pp0_iter1_reg <= icmp_ln123_reg_3072;
                row_reg_3067 <= row_fu_755_p2;
                select_ln127_1_reg_3091_pp0_iter1_reg <= select_ln127_1_reg_3091;
                select_ln127_reg_3086_pp0_iter1_reg <= select_ln127_reg_3086;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln123_reg_3072_pp0_iter2_reg <= icmp_ln123_reg_3072_pp0_iter1_reg;
                icmp_ln123_reg_3072_pp0_iter3_reg <= icmp_ln123_reg_3072_pp0_iter2_reg;
                icmp_ln123_reg_3072_pp0_iter4_reg <= icmp_ln123_reg_3072_pp0_iter3_reg;
                select_ln127_1_reg_3091_pp0_iter2_reg <= select_ln127_1_reg_3091_pp0_iter1_reg;
                select_ln127_1_reg_3091_pp0_iter3_reg <= select_ln127_1_reg_3091_pp0_iter2_reg;
                select_ln127_1_reg_3091_pp0_iter4_reg <= select_ln127_1_reg_3091_pp0_iter3_reg;
                select_ln127_reg_3086_pp0_iter2_reg <= select_ln127_reg_3086_pp0_iter1_reg;
                select_ln127_reg_3086_pp0_iter3_reg <= select_ln127_reg_3086_pp0_iter2_reg;
                select_ln127_reg_3086_pp0_iter4_reg <= select_ln127_reg_3086_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_reg_3072_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln879_70_reg_3222 <= icmp_ln879_70_fu_896_p2;
                icmp_ln879_80_reg_3279 <= icmp_ln879_80_fu_958_p2;
                mul_ln1118_49_reg_3194 <= mul_ln1118_49_fu_2825_p2;
                mul_ln1118_51_reg_3233 <= mul_ln1118_51_fu_2841_p2;
                mul_ln1118_52_reg_3239 <= mul_ln1118_52_fu_2846_p2;
                mul_ln1118_53_reg_3245 <= mul_ln1118_53_fu_2851_p2;
                mul_ln1118_54_reg_3251 <= mul_ln1118_54_fu_2856_p2;
                mul_ln1118_reg_3188 <= mul_ln1118_fu_2820_p2;
                tmp_678_reg_3206 <= grp_fu_2830_p3(31 downto 31);
                tmp_680_reg_3217 <= grp_fu_2830_p3(3 downto 3);
                tmp_708_reg_3263 <= grp_fu_2861_p3(31 downto 31);
                tmp_710_reg_3274 <= grp_fu_2861_p3(3 downto 3);
                tmp_74_reg_3227 <= grp_fu_2830_p3(31 downto 28);
                tmp_84_reg_3284 <= grp_fu_2861_p3(31 downto 28);
                trunc_ln708_64_reg_3212 <= grp_fu_2830_p3(27 downto 4);
                trunc_ln708_69_reg_3269 <= grp_fu_2861_p3(27 downto 4);
            end if;
        end if;
    end process;
    zext_ln1265_reg_2957(31 downto 16) <= "0000000000000000";
    zext_ln1192_reg_2967(31 downto 22) <= "0000000000";
    zext_ln1265_1_reg_2972(31 downto 16) <= "0000000000000000";
    zext_ln1192_1_reg_2982(31 downto 21) <= "00000000000";
    zext_ln1265_2_reg_2987(31 downto 16) <= "0000000000000000";
    zext_ln1192_2_reg_2992(31 downto 20) <= "000000000000";
    zext_ln1265_3_reg_2997(31 downto 16) <= "0000000000000000";
    zext_ln1192_3_reg_3007(31 downto 22) <= "0000000000";
    zext_ln1265_4_reg_3012(31 downto 16) <= "0000000000000000";
    zext_ln1192_4_reg_3022(31 downto 22) <= "0000000000";
    zext_ln1265_5_reg_3027(30 downto 15) <= "0000000000000000";
    zext_ln1116_reg_3037(30 downto 19) <= "000000000000";
    zext_ln1265_6_reg_3042(31 downto 16) <= "0000000000000000";
    zext_ln1192_5_reg_3052(31 downto 21) <= "00000000000";
    zext_ln1265_7_reg_3057(31 downto 16) <= "0000000000000000";
    zext_ln1192_6_reg_3062(31 downto 19) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln123_fu_761_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln123_fu_761_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln123_fu_761_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1192_57_fu_1125_p2 <= std_logic_vector(signed(mul_ln1118_49_reg_3194) + signed(sext_ln1192_17_reg_2977));
    add_ln1192_59_fu_1458_p2 <= std_logic_vector(signed(mul_ln1118_51_reg_3233) + signed(sext_ln1192_18_reg_3002));
    add_ln1192_60_fu_1610_p2 <= std_logic_vector(signed(mul_ln1118_52_reg_3239) + signed(sext_ln1192_19_reg_3017));
    add_ln1192_61_fu_1762_p2 <= std_logic_vector(signed(mul_ln1118_53_reg_3245) + signed(sext_ln1192_20_reg_3032));
    add_ln1192_62_fu_1914_p2 <= std_logic_vector(signed(mul_ln1118_54_reg_3251) + signed(sext_ln1192_21_reg_3047));
    add_ln1192_fu_973_p2 <= std_logic_vector(signed(mul_ln1118_reg_3188) + signed(sext_ln1192_reg_2962));
    add_ln123_fu_767_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_592) + unsigned(ap_const_lv11_1));
    add_ln127_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(ap_phi_mux_row_0_phi_fu_607_p4));
    add_ln203_4_fu_2250_p2 <= std_logic_vector(unsigned(add_ln203_reg_2952) + unsigned(zext_ln127_fu_2247_p1));
    add_ln203_5_fu_2271_p2 <= std_logic_vector(unsigned(zext_ln203_7_fu_2255_p1) + unsigned(zext_ln203_8_fu_2267_p1));
    add_ln203_6_fu_2280_p2 <= std_logic_vector(unsigned(add_ln203_5_fu_2271_p2) + unsigned(zext_ln203_9_fu_2277_p1));
    add_ln203_fu_661_p2 <= std_logic_vector(unsigned(zext_ln203_fu_645_p1) + unsigned(zext_ln203_6_fu_657_p1));
    add_ln415_59_fu_1171_p2 <= std_logic_vector(unsigned(zext_ln415_76_fu_1167_p1) + unsigned(trunc_ln708_s_fu_1137_p4));
    add_ln415_60_fu_1287_p2 <= std_logic_vector(unsigned(zext_ln415_77_fu_1284_p1) + unsigned(trunc_ln708_64_reg_3212));
    add_ln415_61_fu_1504_p2 <= std_logic_vector(unsigned(zext_ln415_78_fu_1500_p1) + unsigned(trunc_ln708_65_fu_1470_p4));
    add_ln415_62_fu_1656_p2 <= std_logic_vector(unsigned(zext_ln415_79_fu_1652_p1) + unsigned(trunc_ln708_66_fu_1622_p4));
    add_ln415_63_fu_1808_p2 <= std_logic_vector(unsigned(zext_ln415_80_fu_1804_p1) + unsigned(trunc_ln708_67_fu_1774_p4));
    add_ln415_64_fu_1960_p2 <= std_logic_vector(unsigned(zext_ln415_81_fu_1956_p1) + unsigned(trunc_ln708_68_fu_1926_p4));
    add_ln415_65_fu_2076_p2 <= std_logic_vector(unsigned(zext_ln415_82_fu_2073_p1) + unsigned(trunc_ln708_69_reg_3269));
    add_ln415_fu_1019_p2 <= std_logic_vector(unsigned(zext_ln415_fu_1015_p1) + unsigned(trunc_ln9_fu_985_p4));
    add_ln446_2_fu_837_p2 <= std_logic_vector(unsigned(add_ln446_fu_828_p2) + unsigned(zext_ln446_4_fu_834_p1));
    add_ln446_fu_828_p2 <= std_logic_vector(unsigned(zext_ln127_1_fu_812_p1) + unsigned(zext_ln446_fu_824_p1));
    add_ln713_16_fu_1147_p2 <= std_logic_vector(signed(mul_ln1118_49_reg_3194) + signed(zext_ln1192_1_reg_2982));
    add_ln713_17_fu_1480_p2 <= std_logic_vector(signed(mul_ln1118_51_reg_3233) + signed(zext_ln1192_3_reg_3007));
    add_ln713_18_fu_1632_p2 <= std_logic_vector(signed(mul_ln1118_52_reg_3239) + signed(zext_ln1192_4_reg_3022));
    add_ln713_19_fu_1784_p2 <= std_logic_vector(signed(mul_ln1118_53_reg_3245) + signed(zext_ln1116_reg_3037));
    add_ln713_20_fu_1936_p2 <= std_logic_vector(signed(mul_ln1118_54_reg_3251) + signed(zext_ln1192_5_reg_3052));
    add_ln713_fu_995_p2 <= std_logic_vector(signed(mul_ln1118_reg_3188) + signed(zext_ln1192_reg_2967));
    and_ln416_65_fu_1191_p2 <= (xor_ln416_87_fu_1185_p2 and tmp_673_fu_1151_p3);
    and_ln416_66_fu_1306_p2 <= (xor_ln416_88_fu_1300_p2 and tmp_679_fu_1277_p3);
    and_ln416_67_fu_1524_p2 <= (xor_ln416_89_fu_1518_p2 and tmp_685_fu_1484_p3);
    and_ln416_68_fu_1676_p2 <= (xor_ln416_90_fu_1670_p2 and tmp_691_fu_1636_p3);
    and_ln416_69_fu_1828_p2 <= (xor_ln416_91_fu_1822_p2 and tmp_697_fu_1788_p3);
    and_ln416_70_fu_1980_p2 <= (xor_ln416_92_fu_1974_p2 and tmp_703_fu_1940_p3);
    and_ln416_71_fu_2095_p2 <= (xor_ln416_93_fu_2089_p2 and tmp_709_fu_2066_p3);
    and_ln416_fu_1039_p2 <= (xor_ln416_fu_1033_p2 and tmp_667_fu_999_p3);
    and_ln779_1_fu_1257_p2 <= (xor_ln779_56_fu_1251_p2 and icmp_ln879_68_fu_1215_p2);
    and_ln779_2_fu_1351_p2 <= (xor_ln779_57_fu_1345_p2 and icmp_ln879_70_reg_3222);
    and_ln779_3_fu_1590_p2 <= (xor_ln779_58_fu_1584_p2 and icmp_ln879_72_fu_1548_p2);
    and_ln779_4_fu_1742_p2 <= (xor_ln779_59_fu_1736_p2 and icmp_ln879_74_fu_1700_p2);
    and_ln779_5_fu_1894_p2 <= (xor_ln779_60_fu_1888_p2 and icmp_ln879_76_fu_1852_p2);
    and_ln779_6_fu_2046_p2 <= (xor_ln779_61_fu_2040_p2 and icmp_ln879_78_fu_2004_p2);
    and_ln779_7_fu_2140_p2 <= (xor_ln779_62_fu_2134_p2 and icmp_ln879_80_reg_3279);
    and_ln779_fu_1105_p2 <= (xor_ln779_fu_1099_p2 and icmp_ln879_fu_1063_p2);
    and_ln781_1_fu_2390_p2 <= (icmp_ln879_69_reg_3353 and and_ln416_65_reg_3342);
    and_ln781_2_fu_1364_p2 <= (icmp_ln879_71_fu_1320_p2 and and_ln416_66_fu_1306_p2);
    and_ln781_3_fu_2477_p2 <= (icmp_ln879_73_reg_3398 and and_ln416_67_reg_3387);
    and_ln781_4_fu_2564_p2 <= (icmp_ln879_75_reg_3438 and and_ln416_68_reg_3427);
    and_ln781_5_fu_2651_p2 <= (icmp_ln879_77_reg_3478 and and_ln416_69_reg_3467);
    and_ln781_6_fu_2738_p2 <= (icmp_ln879_79_reg_3518 and and_ln416_70_reg_3507);
    and_ln781_7_fu_2153_p2 <= (icmp_ln879_81_fu_2109_p2 and and_ln416_71_fu_2095_p2);
    and_ln781_fu_2303_p2 <= (icmp_ln879_67_reg_3313 and and_ln416_reg_3302);
    and_ln785_65_fu_2410_p2 <= (xor_ln785_131_fu_2405_p2 and or_ln785_1_fu_2400_p2);
    and_ln785_66_fu_1387_p2 <= (xor_ln785_132_fu_1382_p2 and or_ln785_2_fu_1376_p2);
    and_ln785_67_fu_2497_p2 <= (xor_ln785_133_fu_2492_p2 and or_ln785_3_fu_2487_p2);
    and_ln785_68_fu_2584_p2 <= (xor_ln785_134_fu_2579_p2 and or_ln785_4_fu_2574_p2);
    and_ln785_69_fu_2671_p2 <= (xor_ln785_135_fu_2666_p2 and or_ln785_5_fu_2661_p2);
    and_ln785_70_fu_2758_p2 <= (xor_ln785_136_fu_2753_p2 and or_ln785_6_fu_2748_p2);
    and_ln785_71_fu_2176_p2 <= (xor_ln785_137_fu_2171_p2 and or_ln785_7_fu_2165_p2);
    and_ln785_fu_2323_p2 <= (xor_ln785_130_fu_2318_p2 and or_ln785_fu_2313_p2);
    and_ln786_150_fu_2340_p2 <= (xor_ln786_fu_2334_p2 and tmp_666_reg_3290);
    and_ln786_151_fu_2427_p2 <= (xor_ln786_89_fu_2421_p2 and tmp_672_reg_3330);
    and_ln786_152_fu_1411_p2 <= (xor_ln786_90_fu_1405_p2 and tmp_678_reg_3206);
    and_ln786_153_fu_2514_p2 <= (xor_ln786_91_fu_2508_p2 and tmp_684_reg_3375);
    and_ln786_154_fu_2601_p2 <= (xor_ln786_92_fu_2595_p2 and tmp_690_reg_3415);
    and_ln786_155_fu_2688_p2 <= (xor_ln786_93_fu_2682_p2 and tmp_696_reg_3455);
    and_ln786_156_fu_2775_p2 <= (xor_ln786_94_fu_2769_p2 and tmp_702_reg_3495);
    and_ln786_157_fu_2200_p2 <= (xor_ln786_95_fu_2194_p2 and tmp_708_reg_3263);
    and_ln786_1_fu_1271_p2 <= (tmp_676_fu_1197_p3 and select_ln416_33_fu_1263_p3);
    and_ln786_2_fu_1393_p2 <= (tmp_682_fu_1312_p3 and select_ln416_34_fu_1356_p3);
    and_ln786_3_fu_1604_p2 <= (tmp_688_fu_1530_p3 and select_ln416_35_fu_1596_p3);
    and_ln786_4_fu_1756_p2 <= (tmp_694_fu_1682_p3 and select_ln416_36_fu_1748_p3);
    and_ln786_5_fu_1908_p2 <= (tmp_700_fu_1834_p3 and select_ln416_37_fu_1900_p3);
    and_ln786_6_fu_2060_p2 <= (tmp_706_fu_1986_p3 and select_ln416_38_fu_2052_p3);
    and_ln786_7_fu_2182_p2 <= (tmp_712_fu_2101_p3 and select_ln416_39_fu_2145_p3);
    and_ln786_fu_1119_p2 <= (tmp_670_fu_1045_p3 and select_ln416_fu_1111_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln123_fu_761_p2)
    begin
        if ((icmp_ln123_fu_761_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_0_phi_fu_618_p4_assign_proc : process(col_0_reg_614, ap_CS_fsm_pp0_stage0, icmp_ln123_reg_3072, col_reg_3102, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln123_reg_3072 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_col_0_phi_fu_618_p4 <= col_reg_3102;
        else 
            ap_phi_mux_col_0_phi_fu_618_p4 <= col_0_reg_614;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_607_p4_assign_proc : process(row_0_reg_603, ap_CS_fsm_pp0_stage0, icmp_ln123_reg_3072, select_ln127_1_reg_3091, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln123_reg_3072 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_row_0_phi_fu_607_p4 <= select_ln127_1_reg_3091;
        else 
            ap_phi_mux_row_0_phi_fu_607_p4 <= row_0_reg_603;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_0_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_0_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_1_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_1_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_2_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_2_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_3_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_3_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_4_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_4_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_5_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_5_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_6_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_6_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_t0_7_V_address0 <= zext_ln446_5_fu_843_p1(11 - 1 downto 0);

    block_t0_7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            block_t0_7_V_ce0 <= ap_const_logic_1;
        else 
            block_t0_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_0_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_0_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_1_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_1_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_2_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_2_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_3_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_3_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_4_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_4_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_5_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_5_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_6_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_6_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_bias_fix_V_7_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_bias_fix_V_7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_bias_fix_V_7_ce0 <= ap_const_logic_1;
        else 
            bn1_bias_fix_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_0_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_0_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_1_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_1_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_2_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_2_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_3_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_3_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_4_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_4_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_4_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_5_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_5_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_5_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_6_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_6_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_6_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn1_weight_fix_V_7_address0 <= bn_weight_V_offset_c_fu_625_p1(3 - 1 downto 0);

    bn1_weight_fix_V_7_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            bn1_weight_fix_V_7_ce0 <= ap_const_logic_1;
        else 
            bn1_weight_fix_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bn_weight_V_offset_c_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn_weight_V_offset),64));
    col_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln127_fu_779_p3));
    grp_fu_2830_p0 <= zext_ln1265_2_reg_2987(16 - 1 downto 0);
    grp_fu_2830_p2 <= zext_ln1192_2_reg_2992(20 - 1 downto 0);
    grp_fu_2861_p0 <= zext_ln1265_7_reg_3057(16 - 1 downto 0);
    grp_fu_2861_p2 <= zext_ln1192_6_reg_3062(19 - 1 downto 0);
    icmp_ln123_fu_761_p2 <= "1" when (indvar_flatten_reg_592 = ap_const_lv11_400) else "0";
    icmp_ln124_fu_773_p2 <= "1" when (ap_phi_mux_col_0_phi_fu_618_p4 = ap_const_lv6_20) else "0";
    icmp_ln768_33_fu_1237_p2 <= "1" when (tmp_72_fu_1221_p4 = ap_const_lv4_0) else "0";
    icmp_ln768_34_fu_1325_p2 <= "1" when (tmp_74_reg_3227 = ap_const_lv4_0) else "0";
    icmp_ln768_35_fu_1570_p2 <= "1" when (tmp_76_fu_1554_p4 = ap_const_lv4_0) else "0";
    icmp_ln768_36_fu_1722_p2 <= "1" when (tmp_78_fu_1706_p4 = ap_const_lv4_0) else "0";
    icmp_ln768_37_fu_1874_p2 <= "1" when (tmp_80_fu_1858_p4 = ap_const_lv3_0) else "0";
    icmp_ln768_38_fu_2026_p2 <= "1" when (tmp_82_fu_2010_p4 = ap_const_lv4_0) else "0";
    icmp_ln768_39_fu_2114_p2 <= "1" when (tmp_84_reg_3284 = ap_const_lv4_0) else "0";
    icmp_ln768_fu_1085_p2 <= "1" when (tmp_70_fu_1069_p4 = ap_const_lv4_0) else "0";
    icmp_ln879_67_fu_1079_p2 <= "1" when (tmp_70_fu_1069_p4 = ap_const_lv4_F) else "0";
    icmp_ln879_68_fu_1215_p2 <= "1" when (tmp_71_fu_1205_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_69_fu_1231_p2 <= "1" when (tmp_72_fu_1221_p4 = ap_const_lv4_F) else "0";
    icmp_ln879_70_fu_896_p2 <= "1" when (tmp_73_fu_887_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_71_fu_1320_p2 <= "1" when (tmp_74_reg_3227 = ap_const_lv4_F) else "0";
    icmp_ln879_72_fu_1548_p2 <= "1" when (tmp_75_fu_1538_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_73_fu_1564_p2 <= "1" when (tmp_76_fu_1554_p4 = ap_const_lv4_F) else "0";
    icmp_ln879_74_fu_1700_p2 <= "1" when (tmp_77_fu_1690_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_75_fu_1716_p2 <= "1" when (tmp_78_fu_1706_p4 = ap_const_lv4_F) else "0";
    icmp_ln879_76_fu_1852_p2 <= "1" when (tmp_79_fu_1842_p4 = ap_const_lv2_3) else "0";
    icmp_ln879_77_fu_1868_p2 <= "1" when (tmp_80_fu_1858_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_78_fu_2004_p2 <= "1" when (tmp_81_fu_1994_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_79_fu_2020_p2 <= "1" when (tmp_82_fu_2010_p4 = ap_const_lv4_F) else "0";
    icmp_ln879_80_fu_958_p2 <= "1" when (tmp_83_fu_949_p4 = ap_const_lv3_7) else "0";
    icmp_ln879_81_fu_2109_p2 <= "1" when (tmp_84_reg_3284 = ap_const_lv4_F) else "0";
    icmp_ln879_fu_1063_p2 <= "1" when (tmp_s_fu_1053_p4 = ap_const_lv3_7) else "0";
    mul_ln1118_49_fu_2825_p0 <= zext_ln1265_1_reg_2972(16 - 1 downto 0);
    mul_ln1118_51_fu_2841_p0 <= zext_ln1265_3_reg_2997(16 - 1 downto 0);
    mul_ln1118_52_fu_2846_p0 <= zext_ln1265_4_reg_3012(16 - 1 downto 0);
    mul_ln1118_53_fu_2851_p0 <= zext_ln1265_5_reg_3027(15 - 1 downto 0);
    mul_ln1118_54_fu_2856_p0 <= zext_ln1265_6_reg_3042(16 - 1 downto 0);
    mul_ln1118_fu_2820_p0 <= zext_ln1265_reg_2957(16 - 1 downto 0);
    or_ln340_185_fu_2356_p2 <= (or_ln340_209_fu_2351_p2 or and_ln781_fu_2303_p2);
    or_ln340_187_fu_2443_p2 <= (or_ln340_210_fu_2438_p2 or and_ln781_1_fu_2390_p2);
    or_ln340_189_fu_1428_p2 <= (or_ln340_211_fu_1422_p2 or and_ln781_2_fu_1364_p2);
    or_ln340_191_fu_2530_p2 <= (or_ln340_212_fu_2525_p2 or and_ln781_3_fu_2477_p2);
    or_ln340_193_fu_2617_p2 <= (or_ln340_213_fu_2612_p2 or and_ln781_4_fu_2564_p2);
    or_ln340_195_fu_2704_p2 <= (or_ln340_214_fu_2699_p2 or and_ln781_5_fu_2651_p2);
    or_ln340_197_fu_2791_p2 <= (or_ln340_215_fu_2786_p2 or and_ln781_6_fu_2738_p2);
    or_ln340_199_fu_2217_p2 <= (or_ln340_216_fu_2211_p2 or and_ln781_7_fu_2153_p2);
    or_ln340_1_fu_2432_p2 <= (and_ln786_151_fu_2427_p2 or and_ln785_65_fu_2410_p2);
    or_ln340_209_fu_2351_p2 <= (xor_ln785_130_fu_2318_p2 or and_ln786_reg_3324);
    or_ln340_210_fu_2438_p2 <= (xor_ln785_131_fu_2405_p2 or and_ln786_1_reg_3364);
    or_ln340_211_fu_1422_p2 <= (xor_ln785_132_fu_1382_p2 or and_ln786_2_fu_1393_p2);
    or_ln340_212_fu_2525_p2 <= (xor_ln785_133_fu_2492_p2 or and_ln786_3_reg_3409);
    or_ln340_213_fu_2612_p2 <= (xor_ln785_134_fu_2579_p2 or and_ln786_4_reg_3449);
    or_ln340_214_fu_2699_p2 <= (xor_ln785_135_fu_2666_p2 or and_ln786_5_reg_3489);
    or_ln340_215_fu_2786_p2 <= (xor_ln785_136_fu_2753_p2 or and_ln786_6_reg_3529);
    or_ln340_216_fu_2211_p2 <= (xor_ln785_137_fu_2171_p2 or and_ln786_7_fu_2182_p2);
    or_ln340_2_fu_1416_p2 <= (and_ln786_152_fu_1411_p2 or and_ln785_66_fu_1387_p2);
    or_ln340_3_fu_2519_p2 <= (and_ln786_153_fu_2514_p2 or and_ln785_67_fu_2497_p2);
    or_ln340_4_fu_2606_p2 <= (and_ln786_154_fu_2601_p2 or and_ln785_68_fu_2584_p2);
    or_ln340_5_fu_2693_p2 <= (and_ln786_155_fu_2688_p2 or and_ln785_69_fu_2671_p2);
    or_ln340_6_fu_2780_p2 <= (and_ln786_156_fu_2775_p2 or and_ln785_70_fu_2758_p2);
    or_ln340_7_fu_2205_p2 <= (and_ln786_157_fu_2200_p2 or and_ln785_71_fu_2176_p2);
    or_ln340_fu_2345_p2 <= (and_ln786_150_fu_2340_p2 or and_ln785_fu_2323_p2);
    or_ln785_1_fu_2400_p2 <= (xor_ln785_1_fu_2394_p2 or tmp_676_reg_3348);
    or_ln785_2_fu_1376_p2 <= (xor_ln785_2_fu_1370_p2 or tmp_682_fu_1312_p3);
    or_ln785_3_fu_2487_p2 <= (xor_ln785_3_fu_2481_p2 or tmp_688_reg_3393);
    or_ln785_4_fu_2574_p2 <= (xor_ln785_4_fu_2568_p2 or tmp_694_reg_3433);
    or_ln785_5_fu_2661_p2 <= (xor_ln785_5_fu_2655_p2 or tmp_700_reg_3473);
    or_ln785_6_fu_2748_p2 <= (xor_ln785_6_fu_2742_p2 or tmp_706_reg_3513);
    or_ln785_7_fu_2165_p2 <= (xor_ln785_7_fu_2159_p2 or tmp_712_fu_2101_p3);
    or_ln785_fu_2313_p2 <= (xor_ln785_fu_2307_p2 or tmp_670_reg_3308);
    or_ln786_72_fu_2416_p2 <= (and_ln786_1_reg_3364 or and_ln781_1_fu_2390_p2);
    or_ln786_73_fu_1399_p2 <= (and_ln786_2_fu_1393_p2 or and_ln781_2_fu_1364_p2);
    or_ln786_74_fu_2503_p2 <= (and_ln786_3_reg_3409 or and_ln781_3_fu_2477_p2);
    or_ln786_75_fu_2590_p2 <= (and_ln786_4_reg_3449 or and_ln781_4_fu_2564_p2);
    or_ln786_76_fu_2677_p2 <= (and_ln786_5_reg_3489 or and_ln781_5_fu_2651_p2);
    or_ln786_77_fu_2764_p2 <= (and_ln786_6_reg_3529 or and_ln781_6_fu_2738_p2);
    or_ln786_78_fu_2188_p2 <= (and_ln786_7_fu_2182_p2 or and_ln781_7_fu_2153_p2);
    or_ln786_fu_2329_p2 <= (and_ln786_reg_3324 or and_ln781_fu_2303_p2);
    out_buf_0_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_0_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_0_V_d0 <= 
        select_ln340_fu_2362_p3 when (or_ln340_185_fu_2356_p2(0) = '1') else 
        select_ln388_fu_2369_p3;

    out_buf_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_0_V_we0 <= ap_const_logic_1;
        else 
            out_buf_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_1_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_1_V_d0 <= 
        select_ln340_1_fu_2449_p3 when (or_ln340_187_fu_2443_p2(0) = '1') else 
        select_ln388_1_fu_2456_p3;

    out_buf_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_1_V_we0 <= ap_const_logic_1;
        else 
            out_buf_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_2_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_2_V_d0 <= select_ln340_162_reg_3370;

    out_buf_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_2_V_we0 <= ap_const_logic_1;
        else 
            out_buf_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_3_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_3_V_d0 <= 
        select_ln340_3_fu_2536_p3 when (or_ln340_191_fu_2530_p2(0) = '1') else 
        select_ln388_3_fu_2543_p3;

    out_buf_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_3_V_we0 <= ap_const_logic_1;
        else 
            out_buf_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_4_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_4_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_4_V_d0 <= 
        select_ln340_4_fu_2623_p3 when (or_ln340_193_fu_2617_p2(0) = '1') else 
        select_ln388_4_fu_2630_p3;

    out_buf_4_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_4_V_we0 <= ap_const_logic_1;
        else 
            out_buf_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_5_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_5_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_5_V_d0 <= 
        select_ln340_5_fu_2710_p3 when (or_ln340_195_fu_2704_p2(0) = '1') else 
        select_ln388_5_fu_2717_p3;

    out_buf_5_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_5_V_we0 <= ap_const_logic_1;
        else 
            out_buf_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_6_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_6_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_6_V_d0 <= 
        select_ln340_6_fu_2797_p3 when (or_ln340_197_fu_2791_p2(0) = '1') else 
        select_ln388_6_fu_2804_p3;

    out_buf_6_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_6_V_we0 <= ap_const_logic_1;
        else 
            out_buf_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_V_address0 <= zext_ln203_10_fu_2286_p1(14 - 1 downto 0);

    out_buf_7_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_7_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_7_V_d0 <= select_ln340_167_reg_3535;

    out_buf_7_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln123_reg_3072_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln123_reg_3072_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            out_buf_7_V_we0 <= ap_const_logic_1;
        else 
            out_buf_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_755_p2 <= std_logic_vector(unsigned(ap_phi_mux_row_0_phi_fu_607_p4) + unsigned(ap_const_lv6_1));
    select_ln127_1_fu_787_p3 <= 
        row_fu_755_p2 when (icmp_ln124_fu_773_p2(0) = '1') else 
        ap_phi_mux_row_0_phi_fu_607_p4;
    select_ln127_2_fu_807_p3 <= 
        add_ln127_reg_3097 when (icmp_ln124_reg_3081(0) = '1') else 
        row_reg_3067;
    select_ln127_fu_779_p3 <= 
        ap_const_lv6_0 when (icmp_ln124_fu_773_p2(0) = '1') else 
        ap_phi_mux_col_0_phi_fu_618_p4;
    select_ln340_162_fu_1450_p3 <= 
        select_ln340_2_fu_1434_p3 when (or_ln340_189_fu_1428_p2(0) = '1') else 
        select_ln388_2_fu_1442_p3;
    select_ln340_167_fu_2239_p3 <= 
        select_ln340_7_fu_2223_p3 when (or_ln340_199_fu_2217_p2(0) = '1') else 
        select_ln388_7_fu_2231_p3;
    select_ln340_1_fu_2449_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_1_fu_2432_p2(0) = '1') else 
        add_ln415_59_reg_3336;
    select_ln340_2_fu_1434_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_2_fu_1416_p2(0) = '1') else 
        add_ln415_60_fu_1287_p2;
    select_ln340_3_fu_2536_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_3_fu_2519_p2(0) = '1') else 
        add_ln415_61_reg_3381;
    select_ln340_4_fu_2623_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_4_fu_2606_p2(0) = '1') else 
        add_ln415_62_reg_3421;
    select_ln340_5_fu_2710_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_5_fu_2693_p2(0) = '1') else 
        add_ln415_63_reg_3461;
    select_ln340_6_fu_2797_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_6_fu_2780_p2(0) = '1') else 
        add_ln415_64_reg_3501;
    select_ln340_7_fu_2223_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_7_fu_2205_p2(0) = '1') else 
        add_ln415_65_fu_2076_p2;
    select_ln340_fu_2362_p3 <= 
        ap_const_lv24_7FFFFF when (or_ln340_fu_2345_p2(0) = '1') else 
        add_ln415_reg_3296;
    select_ln388_1_fu_2456_p3 <= 
        ap_const_lv24_800000 when (and_ln786_151_fu_2427_p2(0) = '1') else 
        add_ln415_59_reg_3336;
    select_ln388_2_fu_1442_p3 <= 
        ap_const_lv24_800000 when (and_ln786_152_fu_1411_p2(0) = '1') else 
        add_ln415_60_fu_1287_p2;
    select_ln388_3_fu_2543_p3 <= 
        ap_const_lv24_800000 when (and_ln786_153_fu_2514_p2(0) = '1') else 
        add_ln415_61_reg_3381;
    select_ln388_4_fu_2630_p3 <= 
        ap_const_lv24_800000 when (and_ln786_154_fu_2601_p2(0) = '1') else 
        add_ln415_62_reg_3421;
    select_ln388_5_fu_2717_p3 <= 
        ap_const_lv24_800000 when (and_ln786_155_fu_2688_p2(0) = '1') else 
        add_ln415_63_reg_3461;
    select_ln388_6_fu_2804_p3 <= 
        ap_const_lv24_800000 when (and_ln786_156_fu_2775_p2(0) = '1') else 
        add_ln415_64_reg_3501;
    select_ln388_7_fu_2231_p3 <= 
        ap_const_lv24_800000 when (and_ln786_157_fu_2200_p2(0) = '1') else 
        add_ln415_65_fu_2076_p2;
    select_ln388_fu_2369_p3 <= 
        ap_const_lv24_800000 when (and_ln786_150_fu_2340_p2(0) = '1') else 
        add_ln415_reg_3296;
    select_ln416_33_fu_1263_p3 <= 
        and_ln779_1_fu_1257_p2 when (and_ln416_65_fu_1191_p2(0) = '1') else 
        icmp_ln879_69_fu_1231_p2;
    select_ln416_34_fu_1356_p3 <= 
        and_ln779_2_fu_1351_p2 when (and_ln416_66_fu_1306_p2(0) = '1') else 
        icmp_ln879_71_fu_1320_p2;
    select_ln416_35_fu_1596_p3 <= 
        and_ln779_3_fu_1590_p2 when (and_ln416_67_fu_1524_p2(0) = '1') else 
        icmp_ln879_73_fu_1564_p2;
    select_ln416_36_fu_1748_p3 <= 
        and_ln779_4_fu_1742_p2 when (and_ln416_68_fu_1676_p2(0) = '1') else 
        icmp_ln879_75_fu_1716_p2;
    select_ln416_37_fu_1900_p3 <= 
        and_ln779_5_fu_1894_p2 when (and_ln416_69_fu_1828_p2(0) = '1') else 
        icmp_ln879_77_fu_1868_p2;
    select_ln416_38_fu_2052_p3 <= 
        and_ln779_6_fu_2046_p2 when (and_ln416_70_fu_1980_p2(0) = '1') else 
        icmp_ln879_79_fu_2020_p2;
    select_ln416_39_fu_2145_p3 <= 
        and_ln779_7_fu_2140_p2 when (and_ln416_71_fu_2095_p2(0) = '1') else 
        icmp_ln879_81_fu_2109_p2;
    select_ln416_fu_1111_p3 <= 
        and_ln779_fu_1105_p2 when (and_ln416_fu_1039_p2(0) = '1') else 
        icmp_ln879_67_fu_1079_p2;
    select_ln777_33_fu_2385_p3 <= 
        icmp_ln879_69_reg_3353 when (and_ln416_65_reg_3342(0) = '1') else 
        icmp_ln768_33_reg_3359;
    select_ln777_34_fu_1330_p3 <= 
        icmp_ln879_71_fu_1320_p2 when (and_ln416_66_fu_1306_p2(0) = '1') else 
        icmp_ln768_34_fu_1325_p2;
    select_ln777_35_fu_2472_p3 <= 
        icmp_ln879_73_reg_3398 when (and_ln416_67_reg_3387(0) = '1') else 
        icmp_ln768_35_reg_3404;
    select_ln777_36_fu_2559_p3 <= 
        icmp_ln879_75_reg_3438 when (and_ln416_68_reg_3427(0) = '1') else 
        icmp_ln768_36_reg_3444;
    select_ln777_37_fu_2646_p3 <= 
        icmp_ln879_77_reg_3478 when (and_ln416_69_reg_3467(0) = '1') else 
        icmp_ln768_37_reg_3484;
    select_ln777_38_fu_2733_p3 <= 
        icmp_ln879_79_reg_3518 when (and_ln416_70_reg_3507(0) = '1') else 
        icmp_ln768_38_reg_3524;
    select_ln777_39_fu_2119_p3 <= 
        icmp_ln879_81_fu_2109_p2 when (and_ln416_71_fu_2095_p2(0) = '1') else 
        icmp_ln768_39_fu_2114_p2;
    select_ln777_fu_2298_p3 <= 
        icmp_ln879_67_reg_3313 when (and_ln416_reg_3302(0) = '1') else 
        icmp_ln768_reg_3319;
    sext_ln1192_17_fu_683_p0 <= bn1_bias_fix_V_1_q0;
        sext_ln1192_17_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_17_fu_683_p0),32));

    sext_ln1192_18_fu_703_p0 <= bn1_bias_fix_V_3_q0;
        sext_ln1192_18_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_18_fu_703_p0),32));

    sext_ln1192_19_fu_715_p0 <= bn1_bias_fix_V_4_q0;
        sext_ln1192_19_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_19_fu_715_p0),32));

    sext_ln1192_20_fu_727_p0 <= bn1_bias_fix_V_5_q0;
        sext_ln1192_20_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_20_fu_727_p0),31));

    sext_ln1192_21_fu_739_p0 <= bn1_bias_fix_V_6_q0;
        sext_ln1192_21_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_21_fu_739_p0),32));

    sext_ln1192_fu_671_p0 <= bn1_bias_fix_V_0_q0;
        sext_ln1192_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1192_fu_671_p0),32));

    tmp_183_fu_649_p3 <= (channel_tile & ap_const_lv5_0);
    tmp_664_fu_2259_p3 <= (add_ln203_4_fu_2250_p2 & ap_const_lv5_0);
    tmp_665_fu_816_p3 <= (select_ln127_2_fu_807_p3 & ap_const_lv5_0);
    tmp_667_fu_999_p3 <= add_ln1192_fu_973_p2(27 downto 27);
    tmp_668_fu_1007_p3 <= add_ln713_fu_995_p2(3 downto 3);
    tmp_669_fu_1025_p3 <= add_ln415_fu_1019_p2(23 downto 23);
    tmp_670_fu_1045_p3 <= add_ln415_fu_1019_p2(23 downto 23);
    tmp_671_fu_1091_p3 <= add_ln1192_fu_973_p2(28 downto 28);
    tmp_673_fu_1151_p3 <= add_ln1192_57_fu_1125_p2(27 downto 27);
    tmp_674_fu_1159_p3 <= add_ln713_16_fu_1147_p2(3 downto 3);
    tmp_675_fu_1177_p3 <= add_ln415_59_fu_1171_p2(23 downto 23);
    tmp_676_fu_1197_p3 <= add_ln415_59_fu_1171_p2(23 downto 23);
    tmp_677_fu_1243_p3 <= add_ln1192_57_fu_1125_p2(28 downto 28);
    tmp_679_fu_1277_p3 <= add_ln1192_58_reg_3200(27 downto 27);
    tmp_681_fu_1292_p3 <= add_ln415_60_fu_1287_p2(23 downto 23);
    tmp_682_fu_1312_p3 <= add_ln415_60_fu_1287_p2(23 downto 23);
    tmp_683_fu_1338_p3 <= add_ln1192_58_reg_3200(28 downto 28);
    tmp_685_fu_1484_p3 <= add_ln1192_59_fu_1458_p2(27 downto 27);
    tmp_686_fu_1492_p3 <= add_ln713_17_fu_1480_p2(3 downto 3);
    tmp_687_fu_1510_p3 <= add_ln415_61_fu_1504_p2(23 downto 23);
    tmp_688_fu_1530_p3 <= add_ln415_61_fu_1504_p2(23 downto 23);
    tmp_689_fu_1576_p3 <= add_ln1192_59_fu_1458_p2(28 downto 28);
    tmp_691_fu_1636_p3 <= add_ln1192_60_fu_1610_p2(27 downto 27);
    tmp_692_fu_1644_p3 <= add_ln713_18_fu_1632_p2(3 downto 3);
    tmp_693_fu_1662_p3 <= add_ln415_62_fu_1656_p2(23 downto 23);
    tmp_694_fu_1682_p3 <= add_ln415_62_fu_1656_p2(23 downto 23);
    tmp_695_fu_1728_p3 <= add_ln1192_60_fu_1610_p2(28 downto 28);
    tmp_697_fu_1788_p3 <= add_ln1192_61_fu_1762_p2(27 downto 27);
    tmp_698_fu_1796_p3 <= add_ln713_19_fu_1784_p2(3 downto 3);
    tmp_699_fu_1814_p3 <= add_ln415_63_fu_1808_p2(23 downto 23);
    tmp_700_fu_1834_p3 <= add_ln415_63_fu_1808_p2(23 downto 23);
    tmp_701_fu_1880_p3 <= add_ln1192_61_fu_1762_p2(28 downto 28);
    tmp_703_fu_1940_p3 <= add_ln1192_62_fu_1914_p2(27 downto 27);
    tmp_704_fu_1948_p3 <= add_ln713_20_fu_1936_p2(3 downto 3);
    tmp_705_fu_1966_p3 <= add_ln415_64_fu_1960_p2(23 downto 23);
    tmp_706_fu_1986_p3 <= add_ln415_64_fu_1960_p2(23 downto 23);
    tmp_707_fu_2032_p3 <= add_ln1192_62_fu_1914_p2(28 downto 28);
    tmp_709_fu_2066_p3 <= add_ln1192_63_reg_3257(27 downto 27);
    tmp_70_fu_1069_p4 <= add_ln1192_fu_973_p2(31 downto 28);
    tmp_711_fu_2081_p3 <= add_ln415_65_fu_2076_p2(23 downto 23);
    tmp_712_fu_2101_p3 <= add_ln415_65_fu_2076_p2(23 downto 23);
    tmp_713_fu_2127_p3 <= add_ln1192_63_reg_3257(28 downto 28);
    tmp_71_fu_1205_p4 <= add_ln1192_57_fu_1125_p2(31 downto 29);
    tmp_72_fu_1221_p4 <= add_ln1192_57_fu_1125_p2(31 downto 28);
    tmp_73_fu_887_p4 <= grp_fu_2830_p3(31 downto 29);
    tmp_75_fu_1538_p4 <= add_ln1192_59_fu_1458_p2(31 downto 29);
    tmp_76_fu_1554_p4 <= add_ln1192_59_fu_1458_p2(31 downto 28);
    tmp_77_fu_1690_p4 <= add_ln1192_60_fu_1610_p2(31 downto 29);
    tmp_78_fu_1706_p4 <= add_ln1192_60_fu_1610_p2(31 downto 28);
    tmp_79_fu_1842_p4 <= add_ln1192_61_fu_1762_p2(30 downto 29);
    tmp_80_fu_1858_p4 <= add_ln1192_61_fu_1762_p2(30 downto 28);
    tmp_81_fu_1994_p4 <= add_ln1192_62_fu_1914_p2(31 downto 29);
    tmp_82_fu_2010_p4 <= add_ln1192_62_fu_1914_p2(31 downto 28);
    tmp_83_fu_949_p4 <= grp_fu_2861_p3(31 downto 29);
    tmp_s_fu_1053_p4 <= add_ln1192_fu_973_p2(31 downto 29);
    trunc_ln708_65_fu_1470_p4 <= add_ln1192_59_fu_1458_p2(27 downto 4);
    trunc_ln708_66_fu_1622_p4 <= add_ln1192_60_fu_1610_p2(27 downto 4);
    trunc_ln708_67_fu_1774_p4 <= add_ln1192_61_fu_1762_p2(27 downto 4);
    trunc_ln708_68_fu_1926_p4 <= add_ln1192_62_fu_1914_p2(27 downto 4);
    trunc_ln708_s_fu_1137_p4 <= add_ln1192_57_fu_1125_p2(27 downto 4);
    trunc_ln9_fu_985_p4 <= add_ln1192_fu_973_p2(27 downto 4);
    xor_ln416_87_fu_1185_p2 <= (tmp_675_fu_1177_p3 xor ap_const_lv1_1);
    xor_ln416_88_fu_1300_p2 <= (tmp_681_fu_1292_p3 xor ap_const_lv1_1);
    xor_ln416_89_fu_1518_p2 <= (tmp_687_fu_1510_p3 xor ap_const_lv1_1);
    xor_ln416_90_fu_1670_p2 <= (tmp_693_fu_1662_p3 xor ap_const_lv1_1);
    xor_ln416_91_fu_1822_p2 <= (tmp_699_fu_1814_p3 xor ap_const_lv1_1);
    xor_ln416_92_fu_1974_p2 <= (tmp_705_fu_1966_p3 xor ap_const_lv1_1);
    xor_ln416_93_fu_2089_p2 <= (tmp_711_fu_2081_p3 xor ap_const_lv1_1);
    xor_ln416_fu_1033_p2 <= (tmp_669_fu_1025_p3 xor ap_const_lv1_1);
    xor_ln779_56_fu_1251_p2 <= (tmp_677_fu_1243_p3 xor ap_const_lv1_1);
    xor_ln779_57_fu_1345_p2 <= (tmp_683_fu_1338_p3 xor ap_const_lv1_1);
    xor_ln779_58_fu_1584_p2 <= (tmp_689_fu_1576_p3 xor ap_const_lv1_1);
    xor_ln779_59_fu_1736_p2 <= (tmp_695_fu_1728_p3 xor ap_const_lv1_1);
    xor_ln779_60_fu_1888_p2 <= (tmp_701_fu_1880_p3 xor ap_const_lv1_1);
    xor_ln779_61_fu_2040_p2 <= (tmp_707_fu_2032_p3 xor ap_const_lv1_1);
    xor_ln779_62_fu_2134_p2 <= (tmp_713_fu_2127_p3 xor ap_const_lv1_1);
    xor_ln779_fu_1099_p2 <= (tmp_671_fu_1091_p3 xor ap_const_lv1_1);
    xor_ln785_130_fu_2318_p2 <= (tmp_666_reg_3290 xor ap_const_lv1_1);
    xor_ln785_131_fu_2405_p2 <= (tmp_672_reg_3330 xor ap_const_lv1_1);
    xor_ln785_132_fu_1382_p2 <= (tmp_678_reg_3206 xor ap_const_lv1_1);
    xor_ln785_133_fu_2492_p2 <= (tmp_684_reg_3375 xor ap_const_lv1_1);
    xor_ln785_134_fu_2579_p2 <= (tmp_690_reg_3415 xor ap_const_lv1_1);
    xor_ln785_135_fu_2666_p2 <= (tmp_696_reg_3455 xor ap_const_lv1_1);
    xor_ln785_136_fu_2753_p2 <= (tmp_702_reg_3495 xor ap_const_lv1_1);
    xor_ln785_137_fu_2171_p2 <= (tmp_708_reg_3263 xor ap_const_lv1_1);
    xor_ln785_1_fu_2394_p2 <= (select_ln777_33_fu_2385_p3 xor ap_const_lv1_1);
    xor_ln785_2_fu_1370_p2 <= (select_ln777_34_fu_1330_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_2481_p2 <= (select_ln777_35_fu_2472_p3 xor ap_const_lv1_1);
    xor_ln785_4_fu_2568_p2 <= (select_ln777_36_fu_2559_p3 xor ap_const_lv1_1);
    xor_ln785_5_fu_2655_p2 <= (select_ln777_37_fu_2646_p3 xor ap_const_lv1_1);
    xor_ln785_6_fu_2742_p2 <= (select_ln777_38_fu_2733_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_2159_p2 <= (select_ln777_39_fu_2119_p3 xor ap_const_lv1_1);
    xor_ln785_fu_2307_p2 <= (select_ln777_fu_2298_p3 xor ap_const_lv1_1);
    xor_ln786_89_fu_2421_p2 <= (or_ln786_72_fu_2416_p2 xor ap_const_lv1_1);
    xor_ln786_90_fu_1405_p2 <= (or_ln786_73_fu_1399_p2 xor ap_const_lv1_1);
    xor_ln786_91_fu_2508_p2 <= (or_ln786_74_fu_2503_p2 xor ap_const_lv1_1);
    xor_ln786_92_fu_2595_p2 <= (or_ln786_75_fu_2590_p2 xor ap_const_lv1_1);
    xor_ln786_93_fu_2682_p2 <= (or_ln786_76_fu_2677_p2 xor ap_const_lv1_1);
    xor_ln786_94_fu_2769_p2 <= (or_ln786_77_fu_2764_p2 xor ap_const_lv1_1);
    xor_ln786_95_fu_2194_p2 <= (or_ln786_78_fu_2188_p2 xor ap_const_lv1_1);
    xor_ln786_fu_2334_p2 <= (or_ln786_fu_2329_p2 xor ap_const_lv1_1);
    zext_ln1116_fu_731_p0 <= bn1_bias_fix_V_5_q0;
    zext_ln1116_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1116_fu_731_p0),31));
    zext_ln1192_1_fu_687_p0 <= bn1_bias_fix_V_1_q0;
    zext_ln1192_1_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1192_1_fu_687_p0),32));
    zext_ln1192_2_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_bias_fix_V_2_q0),32));
    zext_ln1192_3_fu_707_p0 <= bn1_bias_fix_V_3_q0;
    zext_ln1192_3_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1192_3_fu_707_p0),32));
    zext_ln1192_4_fu_719_p0 <= bn1_bias_fix_V_4_q0;
    zext_ln1192_4_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1192_4_fu_719_p0),32));
    zext_ln1192_5_fu_743_p0 <= bn1_bias_fix_V_6_q0;
    zext_ln1192_5_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1192_5_fu_743_p0),32));
    zext_ln1192_6_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_bias_fix_V_7_q0),32));
    zext_ln1192_fu_675_p0 <= bn1_bias_fix_V_0_q0;
    zext_ln1192_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1192_fu_675_p0),32));
    zext_ln1265_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_1_q0),32));
    zext_ln1265_2_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_2_q0),32));
    zext_ln1265_3_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_3_q0),32));
    zext_ln1265_4_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_4_q0),32));
    zext_ln1265_5_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_5_q0),31));
    zext_ln1265_6_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_6_q0),32));
    zext_ln1265_7_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_7_q0),32));
    zext_ln1265_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bn1_weight_fix_V_0_q0),32));
    zext_ln127_1_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln127_2_fu_807_p3),12));
    zext_ln127_fu_2247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln127_1_reg_3091_pp0_iter4_reg),8));
    zext_ln203_10_fu_2286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_fu_2280_p2),64));
    zext_ln203_6_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_183_fu_649_p3),8));
    zext_ln203_7_fu_2255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_4_fu_2250_p2),15));
    zext_ln203_8_fu_2267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_664_fu_2259_p3),15));
    zext_ln203_9_fu_2277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln127_reg_3086_pp0_iter4_reg),15));
    zext_ln203_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channel_tile),8));
    zext_ln415_76_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_674_fu_1159_p3),24));
    zext_ln415_77_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_680_reg_3217),24));
    zext_ln415_78_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_686_fu_1492_p3),24));
    zext_ln415_79_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_692_fu_1644_p3),24));
    zext_ln415_80_fu_1804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_698_fu_1796_p3),24));
    zext_ln415_81_fu_1956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_704_fu_1948_p3),24));
    zext_ln415_82_fu_2073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_710_reg_3274),24));
    zext_ln415_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_668_fu_1007_p3),24));
    zext_ln446_4_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_3102),12));
    zext_ln446_5_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln446_2_fu_837_p2),64));
    zext_ln446_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_665_fu_816_p3),12));
end behav;
