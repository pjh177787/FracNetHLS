-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbgk_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbgk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0111111111111111111111111111111100000000000000000000000000000000", 
    1 => "0111111011011011111111101011111100000000000000000000000000000000", 
    2 => "0111111111110111101111111100111100000000000000000000000000000000", 
    3 => "0000000000000000100010000000000100000000000000000000000000000000", 
    4 to 5=> "0000000000000000000000000000000000000000000000000000000000000000", 
    6 => "1010100100101101000000000000000000000000000000000000000000000000", 
    7 => "0110101110111100000000000000000000000000000000000000000000000000", 
    8 => "1011001010111011000000000000000000000000000000000000000000000000", 
    9 => "1110001101101001000000000000000000000000000000000000000000000000", 
    10 => "0010110000000101000000000000000000000000000000000000000000000000", 
    11 => "0111001101100110000000000000000000000000000000000000000000000000", 
    12 => "1110000001100001000000000000000000000000000000000000000000000000", 
    13 => "0110001001111000000000000000000000000000000000000000000000000000", 
    14 => "0111001111111011000000000000000000000000000000000000000000000000", 
    15 => "0011110000110111000000000000000000000000000000000000000000000000", 
    16 => "1111110001110010000000000000000000000000000000000000000000000000", 
    17 => "1100001110100100000000000000000000000000000000000000000000000000", 
    18 => "0010110001111011000000000000000000000000000000000000000000000000", 
    19 => "0010010010111011000000000000000000000000000000000000000000000000", 
    20 => "1001011100100110000000000000000000000000000000000000000000000000", 
    21 => "0000010011011100000000000000000000000000000000000000000000000000", 
    22 => "1110011110101101110001111010110100000000000000000000000000000000", 
    23 => "1101111110111010110011111010100000000000000000000000000000000000", 
    24 => "1011110111110010111111110110111000000000000000000000000000000000", 
    25 => "0011000100111001001100110010000000000000000000000000000000000000", 
    26 => "0001010101011001100111010111101100000000000000000000000000000000", 
    27 => "0000010001101011100000100100001000000000000000000000000000000000", 
    28 => "0011100001000000111010100100011100000000000000000000000000000000", 
    29 => "0010100000001101001101100011110000000000000000000000000000000000", 
    30 => "0000101010001111110110011100111100000000000000000000000000000000", 
    31 => "1011001001011100000000101001100000000000000000000000000000000000", 
    32 => "0010010001111110010101100000101000000000000000000000000000000000", 
    33 => "0000000100011011000101100011111000000000000000000000000000000000", 
    34 => "0010011000001100011011100111011100000000000000000000000000000000", 
    35 => "0011010110000001000110010000110000000000000000000000000000000000", 
    36 => "0000110010100001001010001111100100000000000000000000000000000000", 
    37 => "1111011001111100011001001101010000000000000000000000000000000000", 
    38 => "1110000001011001001100100011001100000000000000000000000000000000", 
    39 => "0000011111001000000011010011101000000000000000000000000000000000", 
    40 => "0001100001100011000000011010101000000000000000000000000000000000", 
    41 => "1101100000100110110001001010011000000000000000000000000000000000", 
    42 => "1101001000000010000000100010111100000000000000000000000000000000", 
    43 => "1111000001000100011000000010001100000000000000000000000000000000", 
    44 => "0100100011001001001000101111001000000000000000000000000000000000", 
    45 => "0100001001001011000000000011100000000000000000000000000000000000", 
    46 => "0100001110101001011001011011100000000000000000000000000000000000", 
    47 => "1010011110111000010010011011110000000000000000000000000000000000", 
    48 => "0010101100100001101111010100001100000000000000000000000000000000", 
    49 => "0011011001110010000000001100000100000000000000000000000000000000", 
    50 => "0010100000110111100010000110100111111000011101101100101011101101", 
    51 => "1000100000110001111011000100110000101000001001011111110111101000", 
    52 => "1011000000100100010101100010011010100000001001100111011000001110", 
    53 => "0101011101010000010100010000101101001101001001100101000110001001", 
    54 => "1000000000000110001101000011000000000010011101001110011000101000", 
    55 => "1000010000100100110010101010010111010010101101010110011010101100", 
    56 => "0110101100110111101000001011001101111001111100011111110010110011", 
    57 => "0000111101011110001010110010000010100100111110000010101011010110", 
    58 => "1001001010101110011010010101001111011010010001101010100001110000", 
    59 => "1101001001110110011010100001010110111010100111110100000000110100", 
    60 => "1001100110000011000011001001110111001000000100111110111101111110", 
    61 => "1111100111001011001111010101111110101001100110110001011000110100", 
    62 => "0101000001010000111000010001100000100010110000001100010010110010", 
    63 => "1010011000100101011000101011110111100000001011011100100000111110", 
    64 => "0101101001001100000100010000010110001000010010010000111010110001", 
    65 => "0000110100010110010101100000111000101011101111101001110100001110", 
    66 => "0101101001111000010100001010000010100100111101000001111110001111", 
    67 => "0110010101011100011101010111101000010010001001111001011001100110", 
    68 => "1100001101100001011101001101010001000011011010010101001011111010", 
    69 => "0000111110111000101001100110100100000000101010111001101110001100", 
    70 => "1010001000011101110101011010110111111110001101010101100110100001", 
    71 => "1001111011000010010110011000111001001000011000000111111110110000", 
    72 => "1010100001100111111011111101110111000110101000001000111010011001", 
    73 => "0010001100101101100111110000010000011011110111101001100111110100", 
    74 => "1100010110011110111010001111110100101100000100101010100001101100", 
    75 => "0110011000000100011111100000010000001011110100000110101100110111", 
    76 => "1100101001001000000011100010000011001010001001001011110000110110", 
    77 => "1000010011100111101100111010010101000100101101001010000101010011", 
    78 => "0100000001110001110000100010010011111010001111000101010000100100", 
    79 => "1100000110111000111001100111101111100101001010101011001101010100", 
    80 => "0101011000000110001101110110110101100001000110100011010000001110", 
    81 => "0100001101101010010011111010110011000001001000001011100100110100", 
    82 => "0000100110110001111100001110110010111101100010010111100011101001", 
    83 => "0101011000011001100111010011010010011110100100111100111001001100", 
    84 => "1010010010101111000101110000111111110100111001001110100010101010", 
    85 => "0101110011000101001111110111101110010100011111100111100111111110", 
    86 => "0001010011001011011010000101111011100010101110111010110101001100", 
    87 => "0001010100111011010001111011100011001000101011001000101001111110", 
    88 => "0100001110001101111001001110010010101111011010101110101101111010", 
    89 => "1011011001011011010011001011011111100111001001100001010010001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbgk is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbgk is
    component pg_conv3x3_tile_cbgk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbgk_rom_U :  component pg_conv3x3_tile_cbgk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


