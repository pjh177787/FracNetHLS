-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FracNet_T is
generic (
    C_M_AXI_IMG_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_IMG_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMG_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_RESULT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RESULT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RESULT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMG_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMG_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMG_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_RESULT_USER_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RESULT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_IMG_AWVALID : OUT STD_LOGIC;
    m_axi_IMG_AWREADY : IN STD_LOGIC;
    m_axi_IMG_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ADDR_WIDTH-1 downto 0);
    m_axi_IMG_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ID_WIDTH-1 downto 0);
    m_axi_IMG_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMG_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_AWUSER_WIDTH-1 downto 0);
    m_axi_IMG_WVALID : OUT STD_LOGIC;
    m_axi_IMG_WREADY : IN STD_LOGIC;
    m_axi_IMG_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_DATA_WIDTH-1 downto 0);
    m_axi_IMG_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_DATA_WIDTH/8-1 downto 0);
    m_axi_IMG_WLAST : OUT STD_LOGIC;
    m_axi_IMG_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ID_WIDTH-1 downto 0);
    m_axi_IMG_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_WUSER_WIDTH-1 downto 0);
    m_axi_IMG_ARVALID : OUT STD_LOGIC;
    m_axi_IMG_ARREADY : IN STD_LOGIC;
    m_axi_IMG_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ADDR_WIDTH-1 downto 0);
    m_axi_IMG_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ID_WIDTH-1 downto 0);
    m_axi_IMG_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_IMG_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_IMG_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_IMG_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMG_ARUSER_WIDTH-1 downto 0);
    m_axi_IMG_RVALID : IN STD_LOGIC;
    m_axi_IMG_RREADY : OUT STD_LOGIC;
    m_axi_IMG_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_DATA_WIDTH-1 downto 0);
    m_axi_IMG_RLAST : IN STD_LOGIC;
    m_axi_IMG_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_ID_WIDTH-1 downto 0);
    m_axi_IMG_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_RUSER_WIDTH-1 downto 0);
    m_axi_IMG_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BVALID : IN STD_LOGIC;
    m_axi_IMG_BREADY : OUT STD_LOGIC;
    m_axi_IMG_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_IMG_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_ID_WIDTH-1 downto 0);
    m_axi_IMG_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMG_BUSER_WIDTH-1 downto 0);
    m_axi_RESULT_AWVALID : OUT STD_LOGIC;
    m_axi_RESULT_AWREADY : IN STD_LOGIC;
    m_axi_RESULT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_RESULT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_RESULT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_AWUSER_WIDTH-1 downto 0);
    m_axi_RESULT_WVALID : OUT STD_LOGIC;
    m_axi_RESULT_WREADY : IN STD_LOGIC;
    m_axi_RESULT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_RESULT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH/8-1 downto 0);
    m_axi_RESULT_WLAST : OUT STD_LOGIC;
    m_axi_RESULT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_WUSER_WIDTH-1 downto 0);
    m_axi_RESULT_ARVALID : OUT STD_LOGIC;
    m_axi_RESULT_ARREADY : IN STD_LOGIC;
    m_axi_RESULT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ADDR_WIDTH-1 downto 0);
    m_axi_RESULT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_RESULT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_RESULT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_RESULT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RESULT_ARUSER_WIDTH-1 downto 0);
    m_axi_RESULT_RVALID : IN STD_LOGIC;
    m_axi_RESULT_RREADY : OUT STD_LOGIC;
    m_axi_RESULT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_DATA_WIDTH-1 downto 0);
    m_axi_RESULT_RLAST : IN STD_LOGIC;
    m_axi_RESULT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_RUSER_WIDTH-1 downto 0);
    m_axi_RESULT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BVALID : IN STD_LOGIC;
    m_axi_RESULT_BREADY : OUT STD_LOGIC;
    m_axi_RESULT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_RESULT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_ID_WIDTH-1 downto 0);
    m_axi_RESULT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RESULT_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of FracNet_T is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FracNet_T,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.663850,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=332,HLS_SYN_DSP=60,HLS_SYN_FF=115496,HLS_SYN_LUT=147018,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv7_3A : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv7_42 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv7_4A : STD_LOGIC_VECTOR (6 downto 0) := "1001010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv7_52 : STD_LOGIC_VECTOR (6 downto 0) := "1010010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_FFFFE8 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_V : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_0_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv1_thres_ce0 : STD_LOGIC;
    signal layer1_0_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer1_0_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer1_0_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer1_0_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer1_0_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer1_0_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_conv2_thres_ce0 : STD_LOGIC;
    signal layer1_0_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer1_0_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer1_0_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer1_0_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer1_0_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_0_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer1_0_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv1_thres_ce0 : STD_LOGIC;
    signal layer1_1_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer1_1_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer1_1_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer1_1_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer1_1_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer1_1_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_conv2_thres_ce0 : STD_LOGIC;
    signal layer1_1_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer1_1_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer1_1_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer1_1_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer1_1_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_1_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer1_1_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv1_thres_ce0 : STD_LOGIC;
    signal layer1_2_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer1_2_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer1_2_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer1_2_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer1_2_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer1_2_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_conv2_thres_ce0 : STD_LOGIC;
    signal layer1_2_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer1_2_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer1_2_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer1_2_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer1_2_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer1_2_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer1_2_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv1_thres_ce0 : STD_LOGIC;
    signal layer2_0_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer2_0_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer2_0_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer2_0_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer2_0_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer2_0_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_conv2_thres_ce0 : STD_LOGIC;
    signal layer2_0_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer2_0_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer2_0_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer2_0_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer2_0_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_0_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer2_0_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv1_thres_ce0 : STD_LOGIC;
    signal layer2_1_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer2_1_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer2_1_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer2_1_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer2_1_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer2_1_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_conv2_thres_ce0 : STD_LOGIC;
    signal layer2_1_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer2_1_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer2_1_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer2_1_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer2_1_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_1_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer2_1_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv1_thres_ce0 : STD_LOGIC;
    signal layer2_2_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer2_2_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer2_2_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer2_2_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer2_2_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer2_2_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_conv2_thres_ce0 : STD_LOGIC;
    signal layer2_2_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer2_2_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer2_2_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer2_2_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer2_2_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer2_2_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer2_2_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv1_thres_ce0 : STD_LOGIC;
    signal layer3_0_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer3_0_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer3_0_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer3_0_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer3_0_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer3_0_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_conv2_thres_ce0 : STD_LOGIC;
    signal layer3_0_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer3_0_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer3_0_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer3_0_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer3_0_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_0_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer3_0_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv1_thres_ce0 : STD_LOGIC;
    signal layer3_1_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer3_1_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer3_1_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer3_1_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer3_1_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer3_1_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_conv2_thres_ce0 : STD_LOGIC;
    signal layer3_1_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer3_1_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer3_1_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer3_1_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer3_1_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_1_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer3_1_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_7_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_6_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_5_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_4_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_3_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_2_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_1_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv1_thres_ce0 : STD_LOGIC;
    signal layer3_2_conv1_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_7_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_6_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_5_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_4_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_3_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_2_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_1_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_weight_s_ce0 : STD_LOGIC;
    signal layer3_2_bn1_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_7_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_6_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_5_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_4_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_3_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_2_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_1_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_weight_s_ce0 : STD_LOGIC;
    signal layer3_2_bn3_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn1_bias_fi_ce0 : STD_LOGIC;
    signal layer3_2_bn1_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn3_bias_fi_ce0 : STD_LOGIC;
    signal layer3_2_bn3_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_15_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_14_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_13_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_12_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_11_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_10_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_9_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_8_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_7_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_6_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_5_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_4_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_3_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_2_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_1_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_shi_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_7_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_6_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_5_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_4_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_3_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_2_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_1_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu1_pre_ce0 : STD_LOGIC;
    signal layer3_2_rprelu1_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_7_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_6_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_5_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_4_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_3_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_2_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_1_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_conv2_thres_ce0 : STD_LOGIC;
    signal layer3_2_conv2_thres_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_7_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_6_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_5_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_4_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_3_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_2_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_1_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_weight_s_ce0 : STD_LOGIC;
    signal layer3_2_bn2_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_7_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_6_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_5_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_4_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_3_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_2_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_1_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_weight_s_ce0 : STD_LOGIC;
    signal layer3_2_bn4_weight_s_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn2_bias_fi_ce0 : STD_LOGIC;
    signal layer3_2_bn2_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_7_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_6_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_5_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_4_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_3_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_2_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_1_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_bn4_bias_fi_ce0 : STD_LOGIC;
    signal layer3_2_bn4_bias_fi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_15_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_15_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_14_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_14_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_13_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_13_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_12_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_12_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_11_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_11_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_10_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_10_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_9_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_9_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_8_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_8_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_7_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_6_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_5_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_4_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_3_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_2_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_1_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_shi_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_shi_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_7_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_7_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_6_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_6_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_5_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_5_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_4_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_4_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_3_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_3_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_2_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_2_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_1_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer3_2_rprelu2_pre_ce0 : STD_LOGIC;
    signal layer3_2_rprelu2_pre_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal IMG_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln69_reg_8002 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln69_reg_8002_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal RESULT_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal RESULT_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal IMG_AWREADY : STD_LOGIC;
    signal IMG_WREADY : STD_LOGIC;
    signal IMG_ARVALID : STD_LOGIC;
    signal IMG_ARREADY : STD_LOGIC;
    signal IMG_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal IMG_RVALID : STD_LOGIC;
    signal IMG_RREADY : STD_LOGIC;
    signal IMG_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal IMG_RLAST : STD_LOGIC;
    signal IMG_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BVALID : STD_LOGIC;
    signal IMG_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal IMG_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal IMG_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_AWVALID : STD_LOGIC;
    signal RESULT_AWREADY : STD_LOGIC;
    signal RESULT_WVALID : STD_LOGIC;
    signal RESULT_WREADY : STD_LOGIC;
    signal RESULT_ARREADY : STD_LOGIC;
    signal RESULT_RVALID : STD_LOGIC;
    signal RESULT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal RESULT_RLAST : STD_LOGIC;
    signal RESULT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal RESULT_BVALID : STD_LOGIC;
    signal RESULT_BREADY : STD_LOGIC;
    signal RESULT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal RESULT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal RESULT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_reg_3018 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_0_reg_3029 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_3040 : STD_LOGIC_VECTOR (11 downto 0);
    signal row_0_reg_3051 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_0_reg_3062 : STD_LOGIC_VECTOR (5 downto 0);
    signal RESULT_addr_reg_7991 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_864_fu_6894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_864_reg_7997 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln69_fu_6898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln69_reg_8002_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_8002_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_6904_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln73_1_fu_6930_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_1_reg_8011_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln73_2_fu_6968_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_2_reg_8017_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_fu_6976_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln73_3_reg_8023_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal col_fu_6984_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln70_fu_6996_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_5_fu_7045_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln321_5_reg_8041 : STD_LOGIC_VECTOR (63 downto 0);
    signal IMG_addr_read_reg_8052 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_out_1_fu_7098_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_1_reg_8062 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln104_fu_7104_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln104_reg_8067 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln89_fu_7092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_in_fu_7116_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_in_reg_8075 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln113_fu_7122_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln113_reg_8080 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln104_fu_7110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln118_fu_7127_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln118_reg_8085 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_fu_7139_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_reg_8093 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln166_fu_7145_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln166_reg_8098 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln142_fu_7133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln171_fu_7150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln171_reg_8103 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln172_fu_7156_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln172_reg_8108 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal c_out_2_fu_7175_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_2_reg_8124 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln216_fu_7181_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln216_reg_8129 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln192_fu_7169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln221_fu_7186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln221_reg_8134 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln222_fu_7192_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln222_reg_8139 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal c_out_3_fu_7211_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_3_reg_8155 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln266_fu_7217_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln266_reg_8160 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln242_fu_7205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln271_fu_7222_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln271_reg_8165 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln272_fu_7228_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln272_reg_8170 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal c_out_4_fu_7247_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_4_reg_8186 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln316_fu_7257_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln316_reg_8191 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln292_fu_7241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln321_fu_7262_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln321_reg_8196 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln322_fu_7268_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln322_reg_8201 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal c_out_5_fu_7287_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_5_reg_8217 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal zext_ln366_fu_7293_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln366_reg_8222 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln342_fu_7281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln371_fu_7298_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln371_reg_8227 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln372_fu_7304_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln372_reg_8232 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal c_out_6_fu_7323_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_out_6_reg_8248 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal zext_ln416_fu_7329_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln416_reg_8253 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln392_fu_7317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln421_fu_7334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln421_reg_8258 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln422_fu_7340_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln422_reg_8263 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal c_out_7_fu_7359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_7_reg_8279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln477_fu_7365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln477_reg_8284 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln454_fu_7353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln482_fu_7370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln482_reg_8289 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln483_fu_7376_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln483_reg_8294 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal c_out_8_fu_7395_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_8_reg_8310 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal zext_ln537_fu_7401_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln537_reg_8315 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln514_fu_7389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln542_fu_7406_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln542_reg_8320 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln543_fu_7412_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln543_reg_8325 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal c_out_9_fu_7431_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_9_reg_8341 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal zext_ln586_fu_7441_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln586_reg_8346 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln563_fu_7425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_fu_7446_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_weight_ptr_reg_8351 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln592_fu_7452_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln592_reg_8356 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal c_out_10_fu_7471_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_10_reg_8372 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal zext_ln636_fu_7477_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln636_reg_8377 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln613_fu_7465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_20_fu_7482_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weight_ptr_20_reg_8382 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln642_fu_7488_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln642_reg_8387 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal c_out_11_fu_7507_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_11_reg_8403 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal zext_ln685_fu_7513_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln685_reg_8408 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln662_fu_7501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_21_fu_7518_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weight_ptr_21_reg_8413 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln691_fu_7524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln691_reg_8418 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal c_out_12_fu_7543_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out_12_reg_8434 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal zext_ln735_fu_7549_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln735_reg_8439 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln712_fu_7537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_22_fu_7554_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weight_ptr_22_reg_8444 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln741_fu_7560_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln741_reg_8449 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal c_out_13_fu_7579_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_13_reg_8465 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal zext_ln796_fu_7585_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln796_reg_8470 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln773_fu_7573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_23_fu_7590_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weight_ptr_23_reg_8475 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_out_14_fu_7602_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_14_reg_8483 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal zext_ln856_fu_7612_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln856_reg_8488 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln833_fu_7596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_weight_ptr_24_fu_7617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_weight_ptr_24_reg_8493 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_out_15_fu_7629_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_15_reg_8501 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal conv_weight_ptr_25_fu_7635_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_weight_ptr_25_reg_8506 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln882_fu_7623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_out_16_fu_7647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_16_reg_8514 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal conv_weight_ptr_26_fu_7653_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_weight_ptr_26_reg_8519 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln932_fu_7641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_out_17_fu_7665_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_17_reg_8527 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal conv_weight_ptr_27_fu_7671_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_weight_ptr_27_reg_8532 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln981_fu_7659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_out_18_fu_7683_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out_18_reg_8540 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal conv_weight_ptr_28_fu_7689_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_weight_ptr_28_reg_8545 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1031_fu_7677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_7701_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_8553 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal icmp_ln1085_fu_7695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal linear_out_buf_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_3_reg_8563 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal p_Result_8_reg_8569 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_7720_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_reg_8575 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln935_fu_7726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_8580 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_V_4_fu_7731_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_4_reg_8585 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln944_fu_7762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_8592 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_7768_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln944_reg_8599 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln947_fu_7772_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln947_reg_8604 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln943_fu_7776_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_8609 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_7871_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_8614 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal icmp_ln958_fu_7879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_8619 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_5_reg_8624 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal tmp_788_reg_8629 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln935_fu_7984_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_8634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal msb_fmap_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal msb_fmap_0_V_ce0 : STD_LOGIC;
    signal msb_fmap_0_V_we0 : STD_LOGIC;
    signal msb_fmap_0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal msb_fmap_0_V_ce1 : STD_LOGIC;
    signal msb_fmap_0_V_we1 : STD_LOGIC;
    signal msb_fmap_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal msb_fmap_1_V_ce0 : STD_LOGIC;
    signal msb_fmap_1_V_we0 : STD_LOGIC;
    signal msb_fmap_1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal msb_fmap_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal msb_fmap_2_V_ce0 : STD_LOGIC;
    signal msb_fmap_2_V_we0 : STD_LOGIC;
    signal msb_fmap_2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lsb_fmap_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lsb_fmap_0_V_ce0 : STD_LOGIC;
    signal lsb_fmap_0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal lsb_fmap_0_V_ce1 : STD_LOGIC;
    signal lsb_fmap_0_V_we1 : STD_LOGIC;
    signal out_buf_0_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_0_V_ce0 : STD_LOGIC;
    signal out_buf_0_0_V_we0 : STD_LOGIC;
    signal out_buf_0_0_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_0_V_ce1 : STD_LOGIC;
    signal out_buf_0_0_V_we1 : STD_LOGIC;
    signal out_buf_0_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_1_V_ce0 : STD_LOGIC;
    signal out_buf_0_1_V_we0 : STD_LOGIC;
    signal out_buf_0_1_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_1_V_ce1 : STD_LOGIC;
    signal out_buf_0_1_V_we1 : STD_LOGIC;
    signal out_buf_0_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_2_V_ce0 : STD_LOGIC;
    signal out_buf_0_2_V_we0 : STD_LOGIC;
    signal out_buf_0_2_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_2_V_ce1 : STD_LOGIC;
    signal out_buf_0_2_V_we1 : STD_LOGIC;
    signal out_buf_0_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_3_V_ce0 : STD_LOGIC;
    signal out_buf_0_3_V_we0 : STD_LOGIC;
    signal out_buf_0_3_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_3_V_ce1 : STD_LOGIC;
    signal out_buf_0_3_V_we1 : STD_LOGIC;
    signal out_buf_0_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_4_V_ce0 : STD_LOGIC;
    signal out_buf_0_4_V_we0 : STD_LOGIC;
    signal out_buf_0_4_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_4_V_ce1 : STD_LOGIC;
    signal out_buf_0_4_V_we1 : STD_LOGIC;
    signal out_buf_0_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_5_V_ce0 : STD_LOGIC;
    signal out_buf_0_5_V_we0 : STD_LOGIC;
    signal out_buf_0_5_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_5_V_ce1 : STD_LOGIC;
    signal out_buf_0_5_V_we1 : STD_LOGIC;
    signal out_buf_0_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_6_V_ce0 : STD_LOGIC;
    signal out_buf_0_6_V_we0 : STD_LOGIC;
    signal out_buf_0_6_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_6_V_ce1 : STD_LOGIC;
    signal out_buf_0_6_V_we1 : STD_LOGIC;
    signal out_buf_0_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_buf_0_7_V_ce0 : STD_LOGIC;
    signal out_buf_0_7_V_we0 : STD_LOGIC;
    signal out_buf_0_7_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal out_buf_0_7_V_ce1 : STD_LOGIC;
    signal out_buf_0_7_V_we1 : STD_LOGIC;
    signal out_buf_t0_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_0_V_ce0 : STD_LOGIC;
    signal out_buf_t0_0_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_0_V_ce1 : STD_LOGIC;
    signal out_buf_t0_0_V_we1 : STD_LOGIC;
    signal out_buf_t0_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_1_V_ce0 : STD_LOGIC;
    signal out_buf_t0_1_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_1_V_ce1 : STD_LOGIC;
    signal out_buf_t0_1_V_we1 : STD_LOGIC;
    signal out_buf_t0_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_2_V_ce0 : STD_LOGIC;
    signal out_buf_t0_2_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_2_V_ce1 : STD_LOGIC;
    signal out_buf_t0_2_V_we1 : STD_LOGIC;
    signal out_buf_t0_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_3_V_ce0 : STD_LOGIC;
    signal out_buf_t0_3_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_3_V_ce1 : STD_LOGIC;
    signal out_buf_t0_3_V_we1 : STD_LOGIC;
    signal out_buf_t0_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_4_V_ce0 : STD_LOGIC;
    signal out_buf_t0_4_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_4_V_ce1 : STD_LOGIC;
    signal out_buf_t0_4_V_we1 : STD_LOGIC;
    signal out_buf_t0_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_5_V_ce0 : STD_LOGIC;
    signal out_buf_t0_5_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_5_V_ce1 : STD_LOGIC;
    signal out_buf_t0_5_V_we1 : STD_LOGIC;
    signal out_buf_t0_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_6_V_ce0 : STD_LOGIC;
    signal out_buf_t0_6_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_6_V_ce1 : STD_LOGIC;
    signal out_buf_t0_6_V_we1 : STD_LOGIC;
    signal out_buf_t0_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t0_7_V_ce0 : STD_LOGIC;
    signal out_buf_t0_7_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t0_7_V_ce1 : STD_LOGIC;
    signal out_buf_t0_7_V_we1 : STD_LOGIC;
    signal out_buf_t1_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_0_V_ce0 : STD_LOGIC;
    signal out_buf_t1_0_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_0_V_ce1 : STD_LOGIC;
    signal out_buf_t1_0_V_we1 : STD_LOGIC;
    signal out_buf_t1_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_1_V_ce0 : STD_LOGIC;
    signal out_buf_t1_1_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_1_V_ce1 : STD_LOGIC;
    signal out_buf_t1_1_V_we1 : STD_LOGIC;
    signal out_buf_t1_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_2_V_ce0 : STD_LOGIC;
    signal out_buf_t1_2_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_2_V_ce1 : STD_LOGIC;
    signal out_buf_t1_2_V_we1 : STD_LOGIC;
    signal out_buf_t1_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_3_V_ce0 : STD_LOGIC;
    signal out_buf_t1_3_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_3_V_ce1 : STD_LOGIC;
    signal out_buf_t1_3_V_we1 : STD_LOGIC;
    signal out_buf_t1_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_4_V_ce0 : STD_LOGIC;
    signal out_buf_t1_4_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_4_V_ce1 : STD_LOGIC;
    signal out_buf_t1_4_V_we1 : STD_LOGIC;
    signal out_buf_t1_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_5_V_ce0 : STD_LOGIC;
    signal out_buf_t1_5_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_5_V_ce1 : STD_LOGIC;
    signal out_buf_t1_5_V_we1 : STD_LOGIC;
    signal out_buf_t1_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_6_V_ce0 : STD_LOGIC;
    signal out_buf_t1_6_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_6_V_ce1 : STD_LOGIC;
    signal out_buf_t1_6_V_we1 : STD_LOGIC;
    signal out_buf_t1_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_buf_t1_7_V_ce0 : STD_LOGIC;
    signal out_buf_t1_7_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_buf_t1_7_V_ce1 : STD_LOGIC;
    signal out_buf_t1_7_V_we1 : STD_LOGIC;
    signal pool_out_buf_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pool_out_buf_V_ce0 : STD_LOGIC;
    signal pool_out_buf_V_we0 : STD_LOGIC;
    signal pool_out_buf_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal linear_out_buf_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal linear_out_buf_ce0 : STD_LOGIC;
    signal linear_out_buf_we0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_ap_start : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_ap_done : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_ap_idle : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_ap_ready : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_weights_V_offset : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce0 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_we1 : STD_LOGIC;
    signal grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_c_in : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_in_channels : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_H_fmap_out : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_quant_and_pack_fu_3972_ap_start : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_ap_done : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_ap_idle : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_ap_ready : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_0_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_1_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_2_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_3_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_4_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_5_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_6_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_prior_outputs_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_quant_and_pack_fu_3972_prior_outputs_7_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce1 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_we1 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_msb_buffer_0_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_ce0 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_ce1 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_we1 : STD_LOGIC;
    signal grp_quant_and_pack_fu_3972_lsb_buffer_V_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_quant_and_pack_fu_3972_H_fmap : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_quant_and_pack_fu_3972_in_channels : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_ap_start : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_ap_done : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_ap_idle : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_ap_ready : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_0_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_1_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_2_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_3_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_4_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_5_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_6_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_ce1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_we1 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_residual_7_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t0_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t0_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_block_t1_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_block_t1_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_threshold_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0 : STD_LOGIC;
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_stride : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_channel_tile : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bn_relu_shortcut_fu_4069_H_fmap : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_avgpool_concat_fu_6751_ap_start : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_ap_done : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_ap_idle : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_ap_ready : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_0_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_0_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_0_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_1_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_1_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_1_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_2_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_2_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_2_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_3_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_3_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_3_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_4_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_4_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_4_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_5_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_5_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_5_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_6_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_6_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_6_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_concat_fu_6751_outputs_7_V_ce0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_7_V_we0 : STD_LOGIC;
    signal grp_avgpool_concat_fu_6751_outputs_7_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_avgpool_concat_fu_6751_H_fmap : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_avgpool_concat_fu_6751_in_channels : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_matmul_fu_6769_ap_start : STD_LOGIC;
    signal grp_matmul_fu_6769_ap_done : STD_LOGIC;
    signal grp_matmul_fu_6769_ap_idle : STD_LOGIC;
    signal grp_matmul_fu_6769_ap_ready : STD_LOGIC;
    signal grp_matmul_fu_6769_inputs_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matmul_fu_6769_inputs_V_ce0 : STD_LOGIC;
    signal grp_matmul_fu_6769_outputs_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_6769_outputs_V_ce0 : STD_LOGIC;
    signal grp_matmul_fu_6769_outputs_V_we0 : STD_LOGIC;
    signal grp_matmul_fu_6769_outputs_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_ap_start : STD_LOGIC;
    signal grp_bn1_fu_6795_ap_done : STD_LOGIC;
    signal grp_bn1_fu_6795_ap_idle : STD_LOGIC;
    signal grp_bn1_fu_6795_ap_ready : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_0_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_0_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_0_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_1_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_1_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_1_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_2_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_2_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_2_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_3_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_3_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_3_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_4_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_4_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_4_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_5_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_5_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_5_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_6_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_6_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_6_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_out_buf_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_bn1_fu_6795_out_buf_7_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_7_V_we0 : STD_LOGIC;
    signal grp_bn1_fu_6795_out_buf_7_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_bn1_fu_6795_block_t0_0_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_0_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_1_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_1_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_2_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_2_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_3_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_3_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_4_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_4_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_5_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_5_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_6_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_6_V_ce0 : STD_LOGIC;
    signal grp_bn1_fu_6795_block_t0_7_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_bn1_fu_6795_block_t0_7_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_ap_start : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_ap_done : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_ap_idle : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_ap_ready : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_0_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_0_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_1_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_2_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_3_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_4_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_5_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_6_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_inputs_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_avgpool_8x8_fu_6851_inputs_7_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_outputs_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_avgpool_8x8_fu_6851_outputs_V_ce0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_outputs_V_we0 : STD_LOGIC;
    signal grp_avgpool_8x8_fu_6851_outputs_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_mux_c_0_phi_fu_3033_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_row_0_phi_fu_3055_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weight_ptr_0_reg_3073 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal c_out_0_reg_3085 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_1_reg_3097 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal c_in_0_reg_3107 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_2_reg_3119 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal c_out40_0_reg_3130 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_3_reg_3142 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal c_out42_0_reg_3153 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_4_reg_3165 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal c_out44_0_reg_3176 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_5_reg_3188 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal c_out46_0_reg_3199 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_6_reg_3211 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal c_out48_0_reg_3222 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_7_reg_3234 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal c_out50_0_reg_3245 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_weight_ptr_8_reg_3257 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal c_out52_0_reg_3268 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_weight_ptr_9_reg_3280 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal c_out54_0_reg_3291 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_out56_0_reg_3303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal conv_weight_ptr_10_reg_3315 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_out58_0_reg_3326 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal conv_weight_ptr_11_reg_3338 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_out60_0_reg_3349 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal conv_weight_ptr_12_reg_3361 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_out62_0_reg_3372 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal conv_weight_ptr_13_reg_3384 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_out64_0_reg_3395 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal conv_weight_ptr_14_reg_3407 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_out66_0_reg_3418 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal conv_weight_ptr_15_reg_3430 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_out68_0_reg_3441 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal conv_weight_ptr_16_reg_3453 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_out70_0_reg_3465 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal conv_weight_ptr_17_reg_3477 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_out72_0_reg_3489 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal conv_weight_ptr_18_reg_3501 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_out74_0_reg_3513 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal conv_weight_ptr_19_reg_3525 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_3537 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pg_conv3x3_tile_fu_3548_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal grp_quant_and_pack_fu_3972_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_bn_relu_shortcut_fu_4069_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal grp_avgpool_concat_fu_6751_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal grp_matmul_fu_6769_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal grp_bn1_fu_6795_ap_start_reg : STD_LOGIC := '0';
    signal grp_avgpool_8x8_fu_6851_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal zext_ln321_9_fu_7085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1086_fu_7707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_6874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output3_fu_6864_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal image_V1_fu_6884_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln70_fu_6916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_6910_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln71_fu_6944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln73_fu_6938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_6922_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln73_fu_6950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_6962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_6956_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_1_fu_6990_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_7004_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln73_fu_7011_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_3_fu_7015_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln321_2_fu_7018_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_783_fu_7024_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln321_fu_7032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_2_fu_7036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln321_4_fu_7039_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_784_fu_7059_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln73_1_fu_7056_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln321_7_fu_7066_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_3_fu_7070_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln321_8_fu_7076_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_6_fu_7079_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln292_fu_7253_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln563_fu_7437_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln833_fu_7608_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_fu_7736_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_9_fu_7746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_7754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_7780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_786_fu_7785_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_7801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_7806_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln947_fu_7810_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_5_fu_7816_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln947_fu_7795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_7821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_787_fu_7833_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_7847_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_6_fu_7852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_7841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_7859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_7827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_7865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_7885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_7888_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_7899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_7893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_7904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_1_fu_7910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_2_fu_7917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln964_fu_7943_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_7950_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_7955_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_7940_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_7961_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_fu_7968_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_7980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component pg_conv3x3_tile IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        msb_inputs_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_inputs_0_V_ce0 : OUT STD_LOGIC;
        msb_inputs_0_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        msb_inputs_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_inputs_1_V_ce0 : OUT STD_LOGIC;
        msb_inputs_1_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        msb_inputs_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_inputs_2_V_ce0 : OUT STD_LOGIC;
        msb_inputs_2_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lsb_inputs_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_inputs_V_ce0 : OUT STD_LOGIC;
        lsb_inputs_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        weights_V_offset : IN STD_LOGIC_VECTOR (6 downto 0);
        msb_outputs_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_0_V_ce0 : OUT STD_LOGIC;
        msb_outputs_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_0_V_ce1 : OUT STD_LOGIC;
        msb_outputs_0_V_we1 : OUT STD_LOGIC;
        msb_outputs_0_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_1_V_ce0 : OUT STD_LOGIC;
        msb_outputs_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_1_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_1_V_ce1 : OUT STD_LOGIC;
        msb_outputs_1_V_we1 : OUT STD_LOGIC;
        msb_outputs_1_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_2_V_ce0 : OUT STD_LOGIC;
        msb_outputs_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_2_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_2_V_ce1 : OUT STD_LOGIC;
        msb_outputs_2_V_we1 : OUT STD_LOGIC;
        msb_outputs_2_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_3_V_ce0 : OUT STD_LOGIC;
        msb_outputs_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_3_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_3_V_ce1 : OUT STD_LOGIC;
        msb_outputs_3_V_we1 : OUT STD_LOGIC;
        msb_outputs_3_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_4_V_ce0 : OUT STD_LOGIC;
        msb_outputs_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_4_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_4_V_ce1 : OUT STD_LOGIC;
        msb_outputs_4_V_we1 : OUT STD_LOGIC;
        msb_outputs_4_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_5_V_ce0 : OUT STD_LOGIC;
        msb_outputs_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_5_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_5_V_ce1 : OUT STD_LOGIC;
        msb_outputs_5_V_we1 : OUT STD_LOGIC;
        msb_outputs_5_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_6_V_ce0 : OUT STD_LOGIC;
        msb_outputs_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_6_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_6_V_ce1 : OUT STD_LOGIC;
        msb_outputs_6_V_we1 : OUT STD_LOGIC;
        msb_outputs_6_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_7_V_ce0 : OUT STD_LOGIC;
        msb_outputs_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        msb_outputs_7_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_outputs_7_V_ce1 : OUT STD_LOGIC;
        msb_outputs_7_V_we1 : OUT STD_LOGIC;
        msb_outputs_7_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_0_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_0_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_0_V_we1 : OUT STD_LOGIC;
        lsb_outputs_0_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_1_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_1_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_1_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_1_V_we1 : OUT STD_LOGIC;
        lsb_outputs_1_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_2_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_2_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_2_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_2_V_we1 : OUT STD_LOGIC;
        lsb_outputs_2_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_3_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_3_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_3_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_3_V_we1 : OUT STD_LOGIC;
        lsb_outputs_3_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_4_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_4_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_4_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_4_V_we1 : OUT STD_LOGIC;
        lsb_outputs_4_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_5_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_5_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_5_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_5_V_we1 : OUT STD_LOGIC;
        lsb_outputs_5_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_6_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_6_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_6_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_6_V_we1 : OUT STD_LOGIC;
        lsb_outputs_6_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_7_V_ce0 : OUT STD_LOGIC;
        lsb_outputs_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        lsb_outputs_7_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_outputs_7_V_ce1 : OUT STD_LOGIC;
        lsb_outputs_7_V_we1 : OUT STD_LOGIC;
        lsb_outputs_7_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        c_in : IN STD_LOGIC_VECTOR (1 downto 0);
        in_channels : IN STD_LOGIC_VECTOR (7 downto 0);
        H_fmap_out : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component quant_and_pack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        prior_outputs_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_0_V_ce0 : OUT STD_LOGIC;
        prior_outputs_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_1_V_ce0 : OUT STD_LOGIC;
        prior_outputs_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_2_V_ce0 : OUT STD_LOGIC;
        prior_outputs_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_3_V_ce0 : OUT STD_LOGIC;
        prior_outputs_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_4_V_ce0 : OUT STD_LOGIC;
        prior_outputs_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_5_V_ce0 : OUT STD_LOGIC;
        prior_outputs_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_6_V_ce0 : OUT STD_LOGIC;
        prior_outputs_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        prior_outputs_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        prior_outputs_7_V_ce0 : OUT STD_LOGIC;
        prior_outputs_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        msb_buffer_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_buffer_0_V_ce0 : OUT STD_LOGIC;
        msb_buffer_0_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        msb_buffer_0_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        msb_buffer_0_V_ce1 : OUT STD_LOGIC;
        msb_buffer_0_V_we1 : OUT STD_LOGIC;
        msb_buffer_0_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        lsb_buffer_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_buffer_V_ce0 : OUT STD_LOGIC;
        lsb_buffer_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        lsb_buffer_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        lsb_buffer_V_ce1 : OUT STD_LOGIC;
        lsb_buffer_V_we1 : OUT STD_LOGIC;
        lsb_buffer_V_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        H_fmap : IN STD_LOGIC_VECTOR (6 downto 0);
        in_channels : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component bn_relu_shortcut IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        residual_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_0_V_ce0 : OUT STD_LOGIC;
        residual_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_0_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_0_V_ce1 : OUT STD_LOGIC;
        residual_0_V_we1 : OUT STD_LOGIC;
        residual_0_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_1_V_ce0 : OUT STD_LOGIC;
        residual_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_1_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_1_V_ce1 : OUT STD_LOGIC;
        residual_1_V_we1 : OUT STD_LOGIC;
        residual_1_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_2_V_ce0 : OUT STD_LOGIC;
        residual_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_2_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_2_V_ce1 : OUT STD_LOGIC;
        residual_2_V_we1 : OUT STD_LOGIC;
        residual_2_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_3_V_ce0 : OUT STD_LOGIC;
        residual_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_3_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_3_V_ce1 : OUT STD_LOGIC;
        residual_3_V_we1 : OUT STD_LOGIC;
        residual_3_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_4_V_ce0 : OUT STD_LOGIC;
        residual_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_4_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_4_V_ce1 : OUT STD_LOGIC;
        residual_4_V_we1 : OUT STD_LOGIC;
        residual_4_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_5_V_ce0 : OUT STD_LOGIC;
        residual_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_5_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_5_V_ce1 : OUT STD_LOGIC;
        residual_5_V_we1 : OUT STD_LOGIC;
        residual_5_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_6_V_ce0 : OUT STD_LOGIC;
        residual_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_6_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_6_V_ce1 : OUT STD_LOGIC;
        residual_6_V_we1 : OUT STD_LOGIC;
        residual_6_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        residual_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_7_V_ce0 : OUT STD_LOGIC;
        residual_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        residual_7_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        residual_7_V_ce1 : OUT STD_LOGIC;
        residual_7_V_we1 : OUT STD_LOGIC;
        residual_7_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        block_t0_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_0_V_ce0 : OUT STD_LOGIC;
        block_t0_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_1_V_ce0 : OUT STD_LOGIC;
        block_t0_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_2_V_ce0 : OUT STD_LOGIC;
        block_t0_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_3_V_ce0 : OUT STD_LOGIC;
        block_t0_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_4_V_ce0 : OUT STD_LOGIC;
        block_t0_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_5_V_ce0 : OUT STD_LOGIC;
        block_t0_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_6_V_ce0 : OUT STD_LOGIC;
        block_t0_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_7_V_ce0 : OUT STD_LOGIC;
        block_t0_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_0_V_ce0 : OUT STD_LOGIC;
        block_t1_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_1_V_ce0 : OUT STD_LOGIC;
        block_t1_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_2_V_ce0 : OUT STD_LOGIC;
        block_t1_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_3_V_ce0 : OUT STD_LOGIC;
        block_t1_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_4_V_ce0 : OUT STD_LOGIC;
        block_t1_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_5_V_ce0 : OUT STD_LOGIC;
        block_t1_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_6_V_ce0 : OUT STD_LOGIC;
        block_t1_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t1_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t1_7_V_ce0 : OUT STD_LOGIC;
        block_t1_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        threshold_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_0_V_ce0 : OUT STD_LOGIC;
        threshold_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_1_V_ce0 : OUT STD_LOGIC;
        threshold_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_2_V_ce0 : OUT STD_LOGIC;
        threshold_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_3_V_ce0 : OUT STD_LOGIC;
        threshold_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_4_V_ce0 : OUT STD_LOGIC;
        threshold_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_5_V_ce0 : OUT STD_LOGIC;
        threshold_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_6_V_ce0 : OUT STD_LOGIC;
        threshold_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        threshold_7_V_ce0 : OUT STD_LOGIC;
        threshold_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        threshold_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        bn_weight_0_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_0_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_1_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_2_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_3_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_4_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_5_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_6_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_0_7_V_ce0 : OUT STD_LOGIC;
        bn_weight_0_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_0_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        bn_weight_1_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_0_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_1_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_2_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_3_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_4_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_5_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_6_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_weight_1_7_V_ce0 : OUT STD_LOGIC;
        bn_weight_1_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_weight_1_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        bn_bias_0_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_0_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_1_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_2_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_3_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_4_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_5_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_6_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_0_7_V_ce0 : OUT STD_LOGIC;
        bn_bias_0_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_0_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        bn_bias_1_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_0_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_1_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_2_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_3_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_4_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_5_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_6_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bn_bias_1_7_V_ce0 : OUT STD_LOGIC;
        bn_bias_1_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        bn_bias_1_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        relu_x_bias_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_0_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_1_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_2_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_3_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_4_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_5_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_6_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_x_bias_7_V_ce0 : OUT STD_LOGIC;
        relu_x_bias_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_x_bias_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        relu_y_bias_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_0_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_1_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_2_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_3_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_4_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_5_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_6_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_y_bias_7_V_ce0 : OUT STD_LOGIC;
        relu_y_bias_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_y_bias_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        relu_weight_0_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_0_V_ce0 : OUT STD_LOGIC;
        relu_weight_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_1_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_1_V_ce0 : OUT STD_LOGIC;
        relu_weight_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_2_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_2_V_ce0 : OUT STD_LOGIC;
        relu_weight_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_3_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_3_V_ce0 : OUT STD_LOGIC;
        relu_weight_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_4_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_4_V_ce0 : OUT STD_LOGIC;
        relu_weight_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_5_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_5_V_ce0 : OUT STD_LOGIC;
        relu_weight_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_6_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_6_V_ce0 : OUT STD_LOGIC;
        relu_weight_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_7_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        relu_weight_7_V_ce0 : OUT STD_LOGIC;
        relu_weight_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        relu_weight_V_offset : IN STD_LOGIC_VECTOR (3 downto 0);
        stride : IN STD_LOGIC_VECTOR (3 downto 0);
        channel_tile : IN STD_LOGIC_VECTOR (3 downto 0);
        H_fmap : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component avgpool_concat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_0_V_ce0 : OUT STD_LOGIC;
        outputs_0_V_we0 : OUT STD_LOGIC;
        outputs_0_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_1_V_ce0 : OUT STD_LOGIC;
        outputs_1_V_we0 : OUT STD_LOGIC;
        outputs_1_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_2_V_ce0 : OUT STD_LOGIC;
        outputs_2_V_we0 : OUT STD_LOGIC;
        outputs_2_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_3_V_ce0 : OUT STD_LOGIC;
        outputs_3_V_we0 : OUT STD_LOGIC;
        outputs_3_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_4_V_ce0 : OUT STD_LOGIC;
        outputs_4_V_we0 : OUT STD_LOGIC;
        outputs_4_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_5_V_ce0 : OUT STD_LOGIC;
        outputs_5_V_we0 : OUT STD_LOGIC;
        outputs_5_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_6_V_ce0 : OUT STD_LOGIC;
        outputs_6_V_we0 : OUT STD_LOGIC;
        outputs_6_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        outputs_7_V_ce0 : OUT STD_LOGIC;
        outputs_7_V_we0 : OUT STD_LOGIC;
        outputs_7_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        outputs_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        H_fmap : IN STD_LOGIC_VECTOR (5 downto 0);
        in_channels : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component matmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputs_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        inputs_V_ce0 : OUT STD_LOGIC;
        inputs_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        outputs_V_ce0 : OUT STD_LOGIC;
        outputs_V_we0 : OUT STD_LOGIC;
        outputs_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component bn1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_buf_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_0_V_ce0 : OUT STD_LOGIC;
        out_buf_0_V_we0 : OUT STD_LOGIC;
        out_buf_0_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_1_V_ce0 : OUT STD_LOGIC;
        out_buf_1_V_we0 : OUT STD_LOGIC;
        out_buf_1_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_2_V_ce0 : OUT STD_LOGIC;
        out_buf_2_V_we0 : OUT STD_LOGIC;
        out_buf_2_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_3_V_ce0 : OUT STD_LOGIC;
        out_buf_3_V_we0 : OUT STD_LOGIC;
        out_buf_3_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_4_V_ce0 : OUT STD_LOGIC;
        out_buf_4_V_we0 : OUT STD_LOGIC;
        out_buf_4_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_5_V_ce0 : OUT STD_LOGIC;
        out_buf_5_V_we0 : OUT STD_LOGIC;
        out_buf_5_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_6_V_ce0 : OUT STD_LOGIC;
        out_buf_6_V_we0 : OUT STD_LOGIC;
        out_buf_6_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_buf_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_buf_7_V_ce0 : OUT STD_LOGIC;
        out_buf_7_V_we0 : OUT STD_LOGIC;
        out_buf_7_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        block_t0_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_0_V_ce0 : OUT STD_LOGIC;
        block_t0_0_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_1_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_1_V_ce0 : OUT STD_LOGIC;
        block_t0_1_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_2_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_2_V_ce0 : OUT STD_LOGIC;
        block_t0_2_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_3_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_3_V_ce0 : OUT STD_LOGIC;
        block_t0_3_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_4_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_4_V_ce0 : OUT STD_LOGIC;
        block_t0_4_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_5_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_5_V_ce0 : OUT STD_LOGIC;
        block_t0_5_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_6_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_6_V_ce0 : OUT STD_LOGIC;
        block_t0_6_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        block_t0_7_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        block_t0_7_V_ce0 : OUT STD_LOGIC;
        block_t0_7_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        bn_weight_V_offset : IN STD_LOGIC_VECTOR (1 downto 0);
        channel_tile : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component avgpool_8x8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inputs_0_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_0_V_ce0 : OUT STD_LOGIC;
        inputs_0_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_1_V_ce0 : OUT STD_LOGIC;
        inputs_1_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_2_V_ce0 : OUT STD_LOGIC;
        inputs_2_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_3_V_ce0 : OUT STD_LOGIC;
        inputs_3_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_4_V_ce0 : OUT STD_LOGIC;
        inputs_4_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_5_V_ce0 : OUT STD_LOGIC;
        inputs_5_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_6_V_ce0 : OUT STD_LOGIC;
        inputs_6_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        inputs_7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        inputs_7_V_ce0 : OUT STD_LOGIC;
        inputs_7_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        outputs_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        outputs_V_ce0 : OUT STD_LOGIC;
        outputs_V_we0 : OUT STD_LOGIC;
        outputs_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_bXr IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_bYs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_bZs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b0s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b1s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b2s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b3s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b4t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b5t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b6t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b7t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b8t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_b9t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cau IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cbu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ccu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cdu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ceu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cgu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_chv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_civ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cjv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ckv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_clv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cmv IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cnw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cow IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cpw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cqw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_crw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_csw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ctx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cux IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cvx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cwx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cyx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_czy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cAy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cBy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cCy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cDy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cEy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cFz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cGz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cHz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cIz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cJz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cKz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cLz IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cMA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cNA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cOA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cPA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cQA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cRA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cSB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cTB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cUB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cVB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cWB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cXB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cYC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_cZC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c0C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c1C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c2C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c3C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c4D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c5D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c6D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c7D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c8D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_c9D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_daE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dbE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dcE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ddE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_deE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dgE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dhF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_diF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_djF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dkF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dlF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dmF IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dnG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_doG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dpG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dqG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_drG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dsG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dtH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_duH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dvH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dwH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dxH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dyH IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dzI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dAI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dBI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dCI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dDI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dEI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dFJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dGJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dHJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dIJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dJJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dKJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dLJ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dMK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dNK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dOK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dPK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dQK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dRK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dSL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dTL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dUL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dVL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dWL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dXL IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dYM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_dZM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d0M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d1M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d2M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d3M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d4N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d5N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d6N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d7N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d8N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_d9N IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eaO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ebO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ecO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_edO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eeO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_efO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_egO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ehP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eiP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ejP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ekP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_elP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_emP IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_enQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eoQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_epQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eqQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_erQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_esQ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_etR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_euR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_evR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ewR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_exR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eyR IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ezS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eAS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eBS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eCS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eDS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eES IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eFT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eGT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eHT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eIT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eJT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eKT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eLT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eMU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eNU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eOU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ePU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eQU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eRU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eSV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eTV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eUV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eVV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eWV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eXV IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eYW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_eZW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e0W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e2W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e3W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e4X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e5X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e6X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e7X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e8X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_e9X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_faY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fbY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fcY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fdY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_feY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ffY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fgY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fhZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fiZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fjZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fkZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_flZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fmZ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fn0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fo0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fp0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fq0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fr0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fs0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ft1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fu1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fw1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fx1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fy1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fz2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fA2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fB2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fC2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fD2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fE2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fF3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fG3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fH3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fI3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fJ3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fK3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fL3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fM4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fN4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fO4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fP4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fQ4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fR4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fS5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fT5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fU5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fV5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fW5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fX5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fY6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_fZ6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f06 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f26 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f36 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f47 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f57 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f67 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f77 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f87 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_f97 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ga8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gb8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gc8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gd8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_ge8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gg8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gh9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gi9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gj9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gk9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gl9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gm9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gnb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_grb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gsb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gtb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gzb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gAb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gBb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gCb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gDb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gEb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gFb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gGb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gHb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gIb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gJb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gKb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gLb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gMb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_gZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_g9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hbb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hcb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hdb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_heb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hgb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hhb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hjb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hlb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hmb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hnb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hrb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hsb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_htb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hzb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hAb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hBb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hCb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hDb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hEb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hFb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hGb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hHb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hIb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hJb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hKb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hLb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hMb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_hZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer1_h8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_h9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ibb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_icb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_idb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ieb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ifb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_igb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ihb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ijb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ikb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ilb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_imb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_inb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ipb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_irb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_isb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_itb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ivb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ixb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_izb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iAb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iBb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iCb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iDb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iEb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iFb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iGb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iHb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iIb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iJb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iKb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iLb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iMb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_iZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_i9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jbb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jcb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jdb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jeb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jgb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jhb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jjb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jlb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jmb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jnb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_job IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jrb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jsb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jtb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jzb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jAb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jBb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jCb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jDb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jEb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jFb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jGb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jHb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jIb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jJb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jKb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jLb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jMb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_jZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_j9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kbb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kcb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kdb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_keb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kgb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_khb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kjb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_klb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kmb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_knb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_krb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ksb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ktb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kzb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kAb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kBb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kCb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kDb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kEb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kFb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kGb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kHb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kIb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kJb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kKb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kLb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kMb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_kZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_k9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lbb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lcb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ldb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_leb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lgb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lhb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ljb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_llb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lmb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lnb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lrb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lsb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ltb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lyb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lzb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lAb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lBb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lCb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lDb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lEb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lFb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lGb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lHb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lIb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lJb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lKb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lLb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lMb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lNb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lOb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lPb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lQb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lRb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lSb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lTb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lUb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lVb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lWb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lXb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lYb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_lZb_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l0b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l1b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l2b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l3b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l4b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l5b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l6b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l7b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l8b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_l9b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mab IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mbb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mcb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mdb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_meb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mgb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mhb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mib IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mjb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mlb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mmb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mnb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mob IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mpb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mqb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mrb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_msb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mtb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mub IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mvb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mwb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mxb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_myb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mzc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mAc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mBc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mCc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mDc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mEc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mFc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mGc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mHc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mIc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mJc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mKc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mLc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mMc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mNc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mOc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mPc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mQc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mRc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mSc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mTc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mUc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mVc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mWc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mXc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mYc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_mZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_m9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nbc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ncc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ndc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nfc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ngc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nhc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_njc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nkc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nlc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nmc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nnc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_noc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_npc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nrc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nsc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ntc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nuc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nvc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nwc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nyc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nzc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nAc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nBc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nCc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nDc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nEc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nFc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nGc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nHc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nIc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nJc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nKc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nMc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nNc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nOc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nPc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nQc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nRc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nSc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nTc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nUc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nVc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nWc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nXc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nYc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_nZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_n9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_oac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_obc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_occ IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_odc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_oec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ofc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ogc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ohc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_oic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_ojc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer2_okc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_olc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_omc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_onc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ooc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_opc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_orc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_osc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_otc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ouc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ovc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_owc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oyc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ozc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oAc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oBc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oCc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oDc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oEc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oFc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oGc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oHc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oIc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oJc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oKc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oMc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oNc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oOc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oPc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oQc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oRc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oSc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oTc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oUc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oVc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oWc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oXc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oYc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_oZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_o9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pbc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pcc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pdc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pfc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pgc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_phc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pjc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pkc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_plc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pmc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pnc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_poc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ppc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_prc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_psc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ptc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_puc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pvc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pwc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pyc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pzc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pAc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pBc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pCc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pDc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pEc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pFc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pGc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pHc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pIc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pJc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pKc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pMc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pNc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pOc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pPc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pQc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pRc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pSc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pTc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pUc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pVc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pWc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pXc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pYc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_pZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_p9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qbc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qcc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qdc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qfc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qgc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qhc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qjc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qkc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qlc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qmc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qnc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qoc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qpc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qrc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qsc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qtc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_quc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qvc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qwc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qyc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qzc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qAc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qBc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qCc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qDc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qEc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qFc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qGc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qHc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qIc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qJc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qKc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qMc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qNc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qOc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qPc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qQc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qRc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qSc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qTc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qUc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qVc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qWc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qXc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qYc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_qZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_q9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rbc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rcc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rdc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rfc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rgc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rhc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ric IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rjc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rkc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rlc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rmc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rnc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_roc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rpc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rrc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rsc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rtc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ruc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rvc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rwc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ryc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rzc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rAc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rBc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rCc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rDc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rEc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rFc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rGc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rHc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rIc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rJc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rKc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rMc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rNc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rOc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rPc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rQc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rRc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rSc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rTc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rUc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rVc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rWc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rXc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rYc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_rZc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r0c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r1c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r2c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r3c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r4c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r5c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r6c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r7c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r8c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_r9c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sac IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sbc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_scc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sdc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sec IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sfc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sgc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_shc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sic IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sjc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_skc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_slc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_smc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_snc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_soc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_spc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sqc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_src IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ssc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_stc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_suc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_svc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_swc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sxc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_syc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_szc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sAc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sBc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sCc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sDc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sEc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sFc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sGc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sHc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sIc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sJc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sKc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sLc_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sMd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sNd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sOd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sPd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sQd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sRd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sSd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sTd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sUd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sVd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sWd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sXd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sYd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_sZd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s0d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s1d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s2d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s3d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s4d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s5d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s6d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s7d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s8d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_s9d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tad IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tbd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tcd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tdd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ted IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tfd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tgd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_thd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tid IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tjd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tkd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tld IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tmd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tnd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tpd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tqd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_trd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tsd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ttd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tvd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_twd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_txd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tyd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tzd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tAd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tBd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tCd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tDd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tEd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tFd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tGd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tHd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tId_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tJd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tKd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tLd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tMd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tNd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tOd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tPd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tQd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tRd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tSd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tTd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tUd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tVd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tWd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tXd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tYd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_tZd_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t0d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t1d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t2d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t3d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t4d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t5d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t6d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t7d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t8d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_t9d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uad IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ubd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ucd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_udd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ued IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ufd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ugd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uhd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uid IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ujd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_ukd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uld IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_umd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_und IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uod IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_upd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uqd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_urd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_usd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_utd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uvd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_layer3_uwd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_msb_fmauxd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FracNet_T_msb_fmauyd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FracNet_T_lsb_fmauAd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FracNet_T_out_bufuBd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_out_bufuJd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component FracNet_T_pool_ouuZd IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_linear_u0d IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FracNet_T_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_T_IMG_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FracNet_T_RESULT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    layer1_0_conv1_thres_7_U : component FracNet_T_layer1_bXr
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_0_conv1_thres_7_ce0,
        q0 => layer1_0_conv1_thres_7_q0);

    layer1_0_conv1_thres_6_U : component FracNet_T_layer1_bYs
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_0_conv1_thres_6_ce0,
        q0 => layer1_0_conv1_thres_6_q0);

    layer1_0_conv1_thres_5_U : component FracNet_T_layer1_bZs
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_0_conv1_thres_5_ce0,
        q0 => layer1_0_conv1_thres_5_q0);

    layer1_0_conv1_thres_4_U : component FracNet_T_layer1_b0s
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_0_conv1_thres_4_ce0,
        q0 => layer1_0_conv1_thres_4_q0);

    layer1_0_conv1_thres_3_U : component FracNet_T_layer1_b1s
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_0_conv1_thres_3_ce0,
        q0 => layer1_0_conv1_thres_3_q0);

    layer1_0_conv1_thres_2_U : component FracNet_T_layer1_b2s
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_0_conv1_thres_2_ce0,
        q0 => layer1_0_conv1_thres_2_q0);

    layer1_0_conv1_thres_1_U : component FracNet_T_layer1_b3s
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_0_conv1_thres_1_ce0,
        q0 => layer1_0_conv1_thres_1_q0);

    layer1_0_conv1_thres_U : component FracNet_T_layer1_b4t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_0_conv1_thres_ce0,
        q0 => layer1_0_conv1_thres_q0);

    layer1_0_bn1_weight_7_U : component FracNet_T_layer1_b5t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_0_bn1_weight_7_ce0,
        q0 => layer1_0_bn1_weight_7_q0);

    layer1_0_bn1_weight_6_U : component FracNet_T_layer1_b6t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_0_bn1_weight_6_ce0,
        q0 => layer1_0_bn1_weight_6_q0);

    layer1_0_bn1_weight_5_U : component FracNet_T_layer1_b7t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_0_bn1_weight_5_ce0,
        q0 => layer1_0_bn1_weight_5_q0);

    layer1_0_bn1_weight_4_U : component FracNet_T_layer1_b8t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_0_bn1_weight_4_ce0,
        q0 => layer1_0_bn1_weight_4_q0);

    layer1_0_bn1_weight_3_U : component FracNet_T_layer1_b9t
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_0_bn1_weight_3_ce0,
        q0 => layer1_0_bn1_weight_3_q0);

    layer1_0_bn1_weight_2_U : component FracNet_T_layer1_cau
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_0_bn1_weight_2_ce0,
        q0 => layer1_0_bn1_weight_2_q0);

    layer1_0_bn1_weight_1_U : component FracNet_T_layer1_cbu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_0_bn1_weight_1_ce0,
        q0 => layer1_0_bn1_weight_1_q0);

    layer1_0_bn1_weight_s_U : component FracNet_T_layer1_ccu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_0_bn1_weight_s_ce0,
        q0 => layer1_0_bn1_weight_s_q0);

    layer1_0_bn3_weight_7_U : component FracNet_T_layer1_cdu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_0_bn3_weight_7_ce0,
        q0 => layer1_0_bn3_weight_7_q0);

    layer1_0_bn3_weight_6_U : component FracNet_T_layer1_ceu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_0_bn3_weight_6_ce0,
        q0 => layer1_0_bn3_weight_6_q0);

    layer1_0_bn3_weight_5_U : component FracNet_T_layer1_cfu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_0_bn3_weight_5_ce0,
        q0 => layer1_0_bn3_weight_5_q0);

    layer1_0_bn3_weight_4_U : component FracNet_T_layer1_cgu
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_0_bn3_weight_4_ce0,
        q0 => layer1_0_bn3_weight_4_q0);

    layer1_0_bn3_weight_3_U : component FracNet_T_layer1_chv
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_0_bn3_weight_3_ce0,
        q0 => layer1_0_bn3_weight_3_q0);

    layer1_0_bn3_weight_2_U : component FracNet_T_layer1_civ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_0_bn3_weight_2_ce0,
        q0 => layer1_0_bn3_weight_2_q0);

    layer1_0_bn3_weight_1_U : component FracNet_T_layer1_cjv
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_0_bn3_weight_1_ce0,
        q0 => layer1_0_bn3_weight_1_q0);

    layer1_0_bn3_weight_s_U : component FracNet_T_layer1_ckv
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_0_bn3_weight_s_ce0,
        q0 => layer1_0_bn3_weight_s_q0);

    layer1_0_bn1_bias_fi_7_U : component FracNet_T_layer1_clv
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_0_bn1_bias_fi_7_ce0,
        q0 => layer1_0_bn1_bias_fi_7_q0);

    layer1_0_bn1_bias_fi_6_U : component FracNet_T_layer1_cmv
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_0_bn1_bias_fi_6_ce0,
        q0 => layer1_0_bn1_bias_fi_6_q0);

    layer1_0_bn1_bias_fi_5_U : component FracNet_T_layer1_cnw
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_0_bn1_bias_fi_5_ce0,
        q0 => layer1_0_bn1_bias_fi_5_q0);

    layer1_0_bn1_bias_fi_4_U : component FracNet_T_layer1_cow
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_0_bn1_bias_fi_4_ce0,
        q0 => layer1_0_bn1_bias_fi_4_q0);

    layer1_0_bn1_bias_fi_3_U : component FracNet_T_layer1_cpw
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_0_bn1_bias_fi_3_ce0,
        q0 => layer1_0_bn1_bias_fi_3_q0);

    layer1_0_bn1_bias_fi_2_U : component FracNet_T_layer1_cqw
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_0_bn1_bias_fi_2_ce0,
        q0 => layer1_0_bn1_bias_fi_2_q0);

    layer1_0_bn1_bias_fi_1_U : component FracNet_T_layer1_crw
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_0_bn1_bias_fi_1_ce0,
        q0 => layer1_0_bn1_bias_fi_1_q0);

    layer1_0_bn1_bias_fi_U : component FracNet_T_layer1_csw
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_0_bn1_bias_fi_ce0,
        q0 => layer1_0_bn1_bias_fi_q0);

    layer1_0_bn3_bias_fi_7_U : component FracNet_T_layer1_ctx
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_0_bn3_bias_fi_7_ce0,
        q0 => layer1_0_bn3_bias_fi_7_q0);

    layer1_0_bn3_bias_fi_6_U : component FracNet_T_layer1_cux
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_0_bn3_bias_fi_6_ce0,
        q0 => layer1_0_bn3_bias_fi_6_q0);

    layer1_0_bn3_bias_fi_5_U : component FracNet_T_layer1_cvx
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_0_bn3_bias_fi_5_ce0,
        q0 => layer1_0_bn3_bias_fi_5_q0);

    layer1_0_bn3_bias_fi_4_U : component FracNet_T_layer1_cwx
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_0_bn3_bias_fi_4_ce0,
        q0 => layer1_0_bn3_bias_fi_4_q0);

    layer1_0_bn3_bias_fi_3_U : component FracNet_T_layer1_cxx
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_0_bn3_bias_fi_3_ce0,
        q0 => layer1_0_bn3_bias_fi_3_q0);

    layer1_0_bn3_bias_fi_2_U : component FracNet_T_layer1_cyx
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_0_bn3_bias_fi_2_ce0,
        q0 => layer1_0_bn3_bias_fi_2_q0);

    layer1_0_bn3_bias_fi_1_U : component FracNet_T_layer1_czy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_0_bn3_bias_fi_1_ce0,
        q0 => layer1_0_bn3_bias_fi_1_q0);

    layer1_0_bn3_bias_fi_U : component FracNet_T_layer1_cAy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_0_bn3_bias_fi_ce0,
        q0 => layer1_0_bn3_bias_fi_q0);

    layer1_0_rprelu1_shi_15_U : component FracNet_T_layer1_cBy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_0_rprelu1_shi_15_ce0,
        q0 => layer1_0_rprelu1_shi_15_q0);

    layer1_0_rprelu1_shi_14_U : component FracNet_T_layer1_cCy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_0_rprelu1_shi_14_ce0,
        q0 => layer1_0_rprelu1_shi_14_q0);

    layer1_0_rprelu1_shi_13_U : component FracNet_T_layer1_cDy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_0_rprelu1_shi_13_ce0,
        q0 => layer1_0_rprelu1_shi_13_q0);

    layer1_0_rprelu1_shi_12_U : component FracNet_T_layer1_cEy
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_0_rprelu1_shi_12_ce0,
        q0 => layer1_0_rprelu1_shi_12_q0);

    layer1_0_rprelu1_shi_11_U : component FracNet_T_layer1_cFz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_0_rprelu1_shi_11_ce0,
        q0 => layer1_0_rprelu1_shi_11_q0);

    layer1_0_rprelu1_shi_10_U : component FracNet_T_layer1_cGz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_0_rprelu1_shi_10_ce0,
        q0 => layer1_0_rprelu1_shi_10_q0);

    layer1_0_rprelu1_shi_9_U : component FracNet_T_layer1_cHz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_0_rprelu1_shi_9_ce0,
        q0 => layer1_0_rprelu1_shi_9_q0);

    layer1_0_rprelu1_shi_8_U : component FracNet_T_layer1_cIz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_0_rprelu1_shi_8_ce0,
        q0 => layer1_0_rprelu1_shi_8_q0);

    layer1_0_rprelu1_shi_7_U : component FracNet_T_layer1_cJz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_0_rprelu1_shi_7_ce0,
        q0 => layer1_0_rprelu1_shi_7_q0);

    layer1_0_rprelu1_shi_6_U : component FracNet_T_layer1_cKz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_0_rprelu1_shi_6_ce0,
        q0 => layer1_0_rprelu1_shi_6_q0);

    layer1_0_rprelu1_shi_5_U : component FracNet_T_layer1_cLz
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_0_rprelu1_shi_5_ce0,
        q0 => layer1_0_rprelu1_shi_5_q0);

    layer1_0_rprelu1_shi_4_U : component FracNet_T_layer1_cMA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_0_rprelu1_shi_4_ce0,
        q0 => layer1_0_rprelu1_shi_4_q0);

    layer1_0_rprelu1_shi_3_U : component FracNet_T_layer1_cNA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_0_rprelu1_shi_3_ce0,
        q0 => layer1_0_rprelu1_shi_3_q0);

    layer1_0_rprelu1_shi_2_U : component FracNet_T_layer1_cOA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_0_rprelu1_shi_2_ce0,
        q0 => layer1_0_rprelu1_shi_2_q0);

    layer1_0_rprelu1_shi_1_U : component FracNet_T_layer1_cPA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_0_rprelu1_shi_1_ce0,
        q0 => layer1_0_rprelu1_shi_1_q0);

    layer1_0_rprelu1_shi_U : component FracNet_T_layer1_cQA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_0_rprelu1_shi_ce0,
        q0 => layer1_0_rprelu1_shi_q0);

    layer1_0_rprelu1_pre_7_U : component FracNet_T_layer1_cRA
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_0_rprelu1_pre_7_ce0,
        q0 => layer1_0_rprelu1_pre_7_q0);

    layer1_0_rprelu1_pre_6_U : component FracNet_T_layer1_cSB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_0_rprelu1_pre_6_ce0,
        q0 => layer1_0_rprelu1_pre_6_q0);

    layer1_0_rprelu1_pre_5_U : component FracNet_T_layer1_cTB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_0_rprelu1_pre_5_ce0,
        q0 => layer1_0_rprelu1_pre_5_q0);

    layer1_0_rprelu1_pre_4_U : component FracNet_T_layer1_cUB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_0_rprelu1_pre_4_ce0,
        q0 => layer1_0_rprelu1_pre_4_q0);

    layer1_0_rprelu1_pre_3_U : component FracNet_T_layer1_cVB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_0_rprelu1_pre_3_ce0,
        q0 => layer1_0_rprelu1_pre_3_q0);

    layer1_0_rprelu1_pre_2_U : component FracNet_T_layer1_cWB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_0_rprelu1_pre_2_ce0,
        q0 => layer1_0_rprelu1_pre_2_q0);

    layer1_0_rprelu1_pre_1_U : component FracNet_T_layer1_cXB
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_0_rprelu1_pre_1_ce0,
        q0 => layer1_0_rprelu1_pre_1_q0);

    layer1_0_rprelu1_pre_U : component FracNet_T_layer1_cYC
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_0_rprelu1_pre_ce0,
        q0 => layer1_0_rprelu1_pre_q0);

    layer1_0_conv2_thres_7_U : component FracNet_T_layer1_cZC
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_0_conv2_thres_7_ce0,
        q0 => layer1_0_conv2_thres_7_q0);

    layer1_0_conv2_thres_6_U : component FracNet_T_layer1_c0C
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_0_conv2_thres_6_ce0,
        q0 => layer1_0_conv2_thres_6_q0);

    layer1_0_conv2_thres_5_U : component FracNet_T_layer1_c1C
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_0_conv2_thres_5_ce0,
        q0 => layer1_0_conv2_thres_5_q0);

    layer1_0_conv2_thres_4_U : component FracNet_T_layer1_c2C
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_0_conv2_thres_4_ce0,
        q0 => layer1_0_conv2_thres_4_q0);

    layer1_0_conv2_thres_3_U : component FracNet_T_layer1_c3C
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_0_conv2_thres_3_ce0,
        q0 => layer1_0_conv2_thres_3_q0);

    layer1_0_conv2_thres_2_U : component FracNet_T_layer1_c4D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_0_conv2_thres_2_ce0,
        q0 => layer1_0_conv2_thres_2_q0);

    layer1_0_conv2_thres_1_U : component FracNet_T_layer1_c5D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_0_conv2_thres_1_ce0,
        q0 => layer1_0_conv2_thres_1_q0);

    layer1_0_conv2_thres_U : component FracNet_T_layer1_c6D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_0_conv2_thres_ce0,
        q0 => layer1_0_conv2_thres_q0);

    layer1_0_bn2_weight_7_U : component FracNet_T_layer1_c7D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_0_bn2_weight_7_ce0,
        q0 => layer1_0_bn2_weight_7_q0);

    layer1_0_bn2_weight_6_U : component FracNet_T_layer1_c8D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_0_bn2_weight_6_ce0,
        q0 => layer1_0_bn2_weight_6_q0);

    layer1_0_bn2_weight_5_U : component FracNet_T_layer1_c9D
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_0_bn2_weight_5_ce0,
        q0 => layer1_0_bn2_weight_5_q0);

    layer1_0_bn2_weight_4_U : component FracNet_T_layer1_daE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_0_bn2_weight_4_ce0,
        q0 => layer1_0_bn2_weight_4_q0);

    layer1_0_bn2_weight_3_U : component FracNet_T_layer1_dbE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_0_bn2_weight_3_ce0,
        q0 => layer1_0_bn2_weight_3_q0);

    layer1_0_bn2_weight_2_U : component FracNet_T_layer1_dcE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_0_bn2_weight_2_ce0,
        q0 => layer1_0_bn2_weight_2_q0);

    layer1_0_bn2_weight_1_U : component FracNet_T_layer1_ddE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_0_bn2_weight_1_ce0,
        q0 => layer1_0_bn2_weight_1_q0);

    layer1_0_bn2_weight_s_U : component FracNet_T_layer1_deE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_0_bn2_weight_s_ce0,
        q0 => layer1_0_bn2_weight_s_q0);

    layer1_0_bn4_weight_7_U : component FracNet_T_layer1_dfE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_0_bn4_weight_7_ce0,
        q0 => layer1_0_bn4_weight_7_q0);

    layer1_0_bn4_weight_6_U : component FracNet_T_layer1_dgE
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_0_bn4_weight_6_ce0,
        q0 => layer1_0_bn4_weight_6_q0);

    layer1_0_bn4_weight_5_U : component FracNet_T_layer1_dhF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_0_bn4_weight_5_ce0,
        q0 => layer1_0_bn4_weight_5_q0);

    layer1_0_bn4_weight_4_U : component FracNet_T_layer1_diF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_0_bn4_weight_4_ce0,
        q0 => layer1_0_bn4_weight_4_q0);

    layer1_0_bn4_weight_3_U : component FracNet_T_layer1_djF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_0_bn4_weight_3_ce0,
        q0 => layer1_0_bn4_weight_3_q0);

    layer1_0_bn4_weight_2_U : component FracNet_T_layer1_dkF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_0_bn4_weight_2_ce0,
        q0 => layer1_0_bn4_weight_2_q0);

    layer1_0_bn4_weight_1_U : component FracNet_T_layer1_dlF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_0_bn4_weight_1_ce0,
        q0 => layer1_0_bn4_weight_1_q0);

    layer1_0_bn4_weight_s_U : component FracNet_T_layer1_dmF
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_0_bn4_weight_s_ce0,
        q0 => layer1_0_bn4_weight_s_q0);

    layer1_0_bn2_bias_fi_7_U : component FracNet_T_layer1_dnG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_0_bn2_bias_fi_7_ce0,
        q0 => layer1_0_bn2_bias_fi_7_q0);

    layer1_0_bn2_bias_fi_6_U : component FracNet_T_layer1_doG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_0_bn2_bias_fi_6_ce0,
        q0 => layer1_0_bn2_bias_fi_6_q0);

    layer1_0_bn2_bias_fi_5_U : component FracNet_T_layer1_dpG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_0_bn2_bias_fi_5_ce0,
        q0 => layer1_0_bn2_bias_fi_5_q0);

    layer1_0_bn2_bias_fi_4_U : component FracNet_T_layer1_dqG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_0_bn2_bias_fi_4_ce0,
        q0 => layer1_0_bn2_bias_fi_4_q0);

    layer1_0_bn2_bias_fi_3_U : component FracNet_T_layer1_drG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_0_bn2_bias_fi_3_ce0,
        q0 => layer1_0_bn2_bias_fi_3_q0);

    layer1_0_bn2_bias_fi_2_U : component FracNet_T_layer1_dsG
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_0_bn2_bias_fi_2_ce0,
        q0 => layer1_0_bn2_bias_fi_2_q0);

    layer1_0_bn2_bias_fi_1_U : component FracNet_T_layer1_dtH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_0_bn2_bias_fi_1_ce0,
        q0 => layer1_0_bn2_bias_fi_1_q0);

    layer1_0_bn2_bias_fi_U : component FracNet_T_layer1_duH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_0_bn2_bias_fi_ce0,
        q0 => layer1_0_bn2_bias_fi_q0);

    layer1_0_bn4_bias_fi_7_U : component FracNet_T_layer1_dvH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_0_bn4_bias_fi_7_ce0,
        q0 => layer1_0_bn4_bias_fi_7_q0);

    layer1_0_bn4_bias_fi_6_U : component FracNet_T_layer1_dwH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_0_bn4_bias_fi_6_ce0,
        q0 => layer1_0_bn4_bias_fi_6_q0);

    layer1_0_bn4_bias_fi_5_U : component FracNet_T_layer1_dxH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_0_bn4_bias_fi_5_ce0,
        q0 => layer1_0_bn4_bias_fi_5_q0);

    layer1_0_bn4_bias_fi_4_U : component FracNet_T_layer1_dyH
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_0_bn4_bias_fi_4_ce0,
        q0 => layer1_0_bn4_bias_fi_4_q0);

    layer1_0_bn4_bias_fi_3_U : component FracNet_T_layer1_dzI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_0_bn4_bias_fi_3_ce0,
        q0 => layer1_0_bn4_bias_fi_3_q0);

    layer1_0_bn4_bias_fi_2_U : component FracNet_T_layer1_dAI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_0_bn4_bias_fi_2_ce0,
        q0 => layer1_0_bn4_bias_fi_2_q0);

    layer1_0_bn4_bias_fi_1_U : component FracNet_T_layer1_dBI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_0_bn4_bias_fi_1_ce0,
        q0 => layer1_0_bn4_bias_fi_1_q0);

    layer1_0_bn4_bias_fi_U : component FracNet_T_layer1_dCI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_0_bn4_bias_fi_ce0,
        q0 => layer1_0_bn4_bias_fi_q0);

    layer1_0_rprelu2_shi_15_U : component FracNet_T_layer1_dDI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_0_rprelu2_shi_15_ce0,
        q0 => layer1_0_rprelu2_shi_15_q0);

    layer1_0_rprelu2_shi_14_U : component FracNet_T_layer1_dEI
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_0_rprelu2_shi_14_ce0,
        q0 => layer1_0_rprelu2_shi_14_q0);

    layer1_0_rprelu2_shi_13_U : component FracNet_T_layer1_dFJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_0_rprelu2_shi_13_ce0,
        q0 => layer1_0_rprelu2_shi_13_q0);

    layer1_0_rprelu2_shi_12_U : component FracNet_T_layer1_dGJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_0_rprelu2_shi_12_ce0,
        q0 => layer1_0_rprelu2_shi_12_q0);

    layer1_0_rprelu2_shi_11_U : component FracNet_T_layer1_dHJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_0_rprelu2_shi_11_ce0,
        q0 => layer1_0_rprelu2_shi_11_q0);

    layer1_0_rprelu2_shi_10_U : component FracNet_T_layer1_dIJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_0_rprelu2_shi_10_ce0,
        q0 => layer1_0_rprelu2_shi_10_q0);

    layer1_0_rprelu2_shi_9_U : component FracNet_T_layer1_dJJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_0_rprelu2_shi_9_ce0,
        q0 => layer1_0_rprelu2_shi_9_q0);

    layer1_0_rprelu2_shi_8_U : component FracNet_T_layer1_dKJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_0_rprelu2_shi_8_ce0,
        q0 => layer1_0_rprelu2_shi_8_q0);

    layer1_0_rprelu2_shi_7_U : component FracNet_T_layer1_dLJ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_0_rprelu2_shi_7_ce0,
        q0 => layer1_0_rprelu2_shi_7_q0);

    layer1_0_rprelu2_shi_6_U : component FracNet_T_layer1_dMK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_0_rprelu2_shi_6_ce0,
        q0 => layer1_0_rprelu2_shi_6_q0);

    layer1_0_rprelu2_shi_5_U : component FracNet_T_layer1_dNK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_0_rprelu2_shi_5_ce0,
        q0 => layer1_0_rprelu2_shi_5_q0);

    layer1_0_rprelu2_shi_4_U : component FracNet_T_layer1_dOK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_0_rprelu2_shi_4_ce0,
        q0 => layer1_0_rprelu2_shi_4_q0);

    layer1_0_rprelu2_shi_3_U : component FracNet_T_layer1_dPK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_0_rprelu2_shi_3_ce0,
        q0 => layer1_0_rprelu2_shi_3_q0);

    layer1_0_rprelu2_shi_2_U : component FracNet_T_layer1_dQK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_0_rprelu2_shi_2_ce0,
        q0 => layer1_0_rprelu2_shi_2_q0);

    layer1_0_rprelu2_shi_1_U : component FracNet_T_layer1_dRK
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_0_rprelu2_shi_1_ce0,
        q0 => layer1_0_rprelu2_shi_1_q0);

    layer1_0_rprelu2_shi_U : component FracNet_T_layer1_dSL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_0_rprelu2_shi_ce0,
        q0 => layer1_0_rprelu2_shi_q0);

    layer1_0_rprelu2_pre_7_U : component FracNet_T_layer1_dTL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_0_rprelu2_pre_7_ce0,
        q0 => layer1_0_rprelu2_pre_7_q0);

    layer1_0_rprelu2_pre_6_U : component FracNet_T_layer1_dUL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_0_rprelu2_pre_6_ce0,
        q0 => layer1_0_rprelu2_pre_6_q0);

    layer1_0_rprelu2_pre_5_U : component FracNet_T_layer1_dVL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_0_rprelu2_pre_5_ce0,
        q0 => layer1_0_rprelu2_pre_5_q0);

    layer1_0_rprelu2_pre_4_U : component FracNet_T_layer1_dWL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_0_rprelu2_pre_4_ce0,
        q0 => layer1_0_rprelu2_pre_4_q0);

    layer1_0_rprelu2_pre_3_U : component FracNet_T_layer1_dXL
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_0_rprelu2_pre_3_ce0,
        q0 => layer1_0_rprelu2_pre_3_q0);

    layer1_0_rprelu2_pre_2_U : component FracNet_T_layer1_dYM
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_0_rprelu2_pre_2_ce0,
        q0 => layer1_0_rprelu2_pre_2_q0);

    layer1_0_rprelu2_pre_1_U : component FracNet_T_layer1_dZM
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_0_rprelu2_pre_1_ce0,
        q0 => layer1_0_rprelu2_pre_1_q0);

    layer1_0_rprelu2_pre_U : component FracNet_T_layer1_d0M
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_0_rprelu2_pre_ce0,
        q0 => layer1_0_rprelu2_pre_q0);

    layer1_1_conv1_thres_7_U : component FracNet_T_layer1_d1M
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_1_conv1_thres_7_ce0,
        q0 => layer1_1_conv1_thres_7_q0);

    layer1_1_conv1_thres_6_U : component FracNet_T_layer1_d2M
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_1_conv1_thres_6_ce0,
        q0 => layer1_1_conv1_thres_6_q0);

    layer1_1_conv1_thres_5_U : component FracNet_T_layer1_d3M
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_1_conv1_thres_5_ce0,
        q0 => layer1_1_conv1_thres_5_q0);

    layer1_1_conv1_thres_4_U : component FracNet_T_layer1_d4N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_1_conv1_thres_4_ce0,
        q0 => layer1_1_conv1_thres_4_q0);

    layer1_1_conv1_thres_3_U : component FracNet_T_layer1_d5N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_1_conv1_thres_3_ce0,
        q0 => layer1_1_conv1_thres_3_q0);

    layer1_1_conv1_thres_2_U : component FracNet_T_layer1_d6N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_1_conv1_thres_2_ce0,
        q0 => layer1_1_conv1_thres_2_q0);

    layer1_1_conv1_thres_1_U : component FracNet_T_layer1_d7N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_1_conv1_thres_1_ce0,
        q0 => layer1_1_conv1_thres_1_q0);

    layer1_1_conv1_thres_U : component FracNet_T_layer1_d8N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_1_conv1_thres_ce0,
        q0 => layer1_1_conv1_thres_q0);

    layer1_1_bn1_weight_7_U : component FracNet_T_layer1_d9N
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_1_bn1_weight_7_ce0,
        q0 => layer1_1_bn1_weight_7_q0);

    layer1_1_bn1_weight_6_U : component FracNet_T_layer1_eaO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_1_bn1_weight_6_ce0,
        q0 => layer1_1_bn1_weight_6_q0);

    layer1_1_bn1_weight_5_U : component FracNet_T_layer1_ebO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_1_bn1_weight_5_ce0,
        q0 => layer1_1_bn1_weight_5_q0);

    layer1_1_bn1_weight_4_U : component FracNet_T_layer1_ecO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_1_bn1_weight_4_ce0,
        q0 => layer1_1_bn1_weight_4_q0);

    layer1_1_bn1_weight_3_U : component FracNet_T_layer1_edO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_1_bn1_weight_3_ce0,
        q0 => layer1_1_bn1_weight_3_q0);

    layer1_1_bn1_weight_2_U : component FracNet_T_layer1_eeO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_1_bn1_weight_2_ce0,
        q0 => layer1_1_bn1_weight_2_q0);

    layer1_1_bn1_weight_1_U : component FracNet_T_layer1_efO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_1_bn1_weight_1_ce0,
        q0 => layer1_1_bn1_weight_1_q0);

    layer1_1_bn1_weight_s_U : component FracNet_T_layer1_egO
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_1_bn1_weight_s_ce0,
        q0 => layer1_1_bn1_weight_s_q0);

    layer1_1_bn3_weight_7_U : component FracNet_T_layer1_ehP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_1_bn3_weight_7_ce0,
        q0 => layer1_1_bn3_weight_7_q0);

    layer1_1_bn3_weight_6_U : component FracNet_T_layer1_eiP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_1_bn3_weight_6_ce0,
        q0 => layer1_1_bn3_weight_6_q0);

    layer1_1_bn3_weight_5_U : component FracNet_T_layer1_ejP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_1_bn3_weight_5_ce0,
        q0 => layer1_1_bn3_weight_5_q0);

    layer1_1_bn3_weight_4_U : component FracNet_T_layer1_ekP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_1_bn3_weight_4_ce0,
        q0 => layer1_1_bn3_weight_4_q0);

    layer1_1_bn3_weight_3_U : component FracNet_T_layer1_elP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_1_bn3_weight_3_ce0,
        q0 => layer1_1_bn3_weight_3_q0);

    layer1_1_bn3_weight_2_U : component FracNet_T_layer1_emP
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_1_bn3_weight_2_ce0,
        q0 => layer1_1_bn3_weight_2_q0);

    layer1_1_bn3_weight_1_U : component FracNet_T_layer1_enQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_1_bn3_weight_1_ce0,
        q0 => layer1_1_bn3_weight_1_q0);

    layer1_1_bn3_weight_s_U : component FracNet_T_layer1_eoQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_1_bn3_weight_s_ce0,
        q0 => layer1_1_bn3_weight_s_q0);

    layer1_1_bn1_bias_fi_7_U : component FracNet_T_layer1_epQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_1_bn1_bias_fi_7_ce0,
        q0 => layer1_1_bn1_bias_fi_7_q0);

    layer1_1_bn1_bias_fi_6_U : component FracNet_T_layer1_eqQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_1_bn1_bias_fi_6_ce0,
        q0 => layer1_1_bn1_bias_fi_6_q0);

    layer1_1_bn1_bias_fi_5_U : component FracNet_T_layer1_erQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_1_bn1_bias_fi_5_ce0,
        q0 => layer1_1_bn1_bias_fi_5_q0);

    layer1_1_bn1_bias_fi_4_U : component FracNet_T_layer1_esQ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_1_bn1_bias_fi_4_ce0,
        q0 => layer1_1_bn1_bias_fi_4_q0);

    layer1_1_bn1_bias_fi_3_U : component FracNet_T_layer1_etR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_1_bn1_bias_fi_3_ce0,
        q0 => layer1_1_bn1_bias_fi_3_q0);

    layer1_1_bn1_bias_fi_2_U : component FracNet_T_layer1_euR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_1_bn1_bias_fi_2_ce0,
        q0 => layer1_1_bn1_bias_fi_2_q0);

    layer1_1_bn1_bias_fi_1_U : component FracNet_T_layer1_evR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_1_bn1_bias_fi_1_ce0,
        q0 => layer1_1_bn1_bias_fi_1_q0);

    layer1_1_bn1_bias_fi_U : component FracNet_T_layer1_ewR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_1_bn1_bias_fi_ce0,
        q0 => layer1_1_bn1_bias_fi_q0);

    layer1_1_bn3_bias_fi_7_U : component FracNet_T_layer1_exR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_1_bn3_bias_fi_7_ce0,
        q0 => layer1_1_bn3_bias_fi_7_q0);

    layer1_1_bn3_bias_fi_6_U : component FracNet_T_layer1_eyR
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_1_bn3_bias_fi_6_ce0,
        q0 => layer1_1_bn3_bias_fi_6_q0);

    layer1_1_bn3_bias_fi_5_U : component FracNet_T_layer1_ezS
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_1_bn3_bias_fi_5_ce0,
        q0 => layer1_1_bn3_bias_fi_5_q0);

    layer1_1_bn3_bias_fi_4_U : component FracNet_T_layer1_eAS
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_1_bn3_bias_fi_4_ce0,
        q0 => layer1_1_bn3_bias_fi_4_q0);

    layer1_1_bn3_bias_fi_3_U : component FracNet_T_layer1_eBS
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_1_bn3_bias_fi_3_ce0,
        q0 => layer1_1_bn3_bias_fi_3_q0);

    layer1_1_bn3_bias_fi_2_U : component FracNet_T_layer1_eCS
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_1_bn3_bias_fi_2_ce0,
        q0 => layer1_1_bn3_bias_fi_2_q0);

    layer1_1_bn3_bias_fi_1_U : component FracNet_T_layer1_eDS
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_1_bn3_bias_fi_1_ce0,
        q0 => layer1_1_bn3_bias_fi_1_q0);

    layer1_1_bn3_bias_fi_U : component FracNet_T_layer1_eES
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_1_bn3_bias_fi_ce0,
        q0 => layer1_1_bn3_bias_fi_q0);

    layer1_1_rprelu1_shi_15_U : component FracNet_T_layer1_eFT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_1_rprelu1_shi_15_ce0,
        q0 => layer1_1_rprelu1_shi_15_q0);

    layer1_1_rprelu1_shi_14_U : component FracNet_T_layer1_eGT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_1_rprelu1_shi_14_ce0,
        q0 => layer1_1_rprelu1_shi_14_q0);

    layer1_1_rprelu1_shi_13_U : component FracNet_T_layer1_eHT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_1_rprelu1_shi_13_ce0,
        q0 => layer1_1_rprelu1_shi_13_q0);

    layer1_1_rprelu1_shi_12_U : component FracNet_T_layer1_eIT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_1_rprelu1_shi_12_ce0,
        q0 => layer1_1_rprelu1_shi_12_q0);

    layer1_1_rprelu1_shi_11_U : component FracNet_T_layer1_eJT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_1_rprelu1_shi_11_ce0,
        q0 => layer1_1_rprelu1_shi_11_q0);

    layer1_1_rprelu1_shi_10_U : component FracNet_T_layer1_eKT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_1_rprelu1_shi_10_ce0,
        q0 => layer1_1_rprelu1_shi_10_q0);

    layer1_1_rprelu1_shi_9_U : component FracNet_T_layer1_eLT
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_1_rprelu1_shi_9_ce0,
        q0 => layer1_1_rprelu1_shi_9_q0);

    layer1_1_rprelu1_shi_8_U : component FracNet_T_layer1_eMU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_1_rprelu1_shi_8_ce0,
        q0 => layer1_1_rprelu1_shi_8_q0);

    layer1_1_rprelu1_shi_7_U : component FracNet_T_layer1_eNU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_1_rprelu1_shi_7_ce0,
        q0 => layer1_1_rprelu1_shi_7_q0);

    layer1_1_rprelu1_shi_6_U : component FracNet_T_layer1_eOU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_1_rprelu1_shi_6_ce0,
        q0 => layer1_1_rprelu1_shi_6_q0);

    layer1_1_rprelu1_shi_5_U : component FracNet_T_layer1_ePU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_1_rprelu1_shi_5_ce0,
        q0 => layer1_1_rprelu1_shi_5_q0);

    layer1_1_rprelu1_shi_4_U : component FracNet_T_layer1_eQU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_1_rprelu1_shi_4_ce0,
        q0 => layer1_1_rprelu1_shi_4_q0);

    layer1_1_rprelu1_shi_3_U : component FracNet_T_layer1_eRU
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_1_rprelu1_shi_3_ce0,
        q0 => layer1_1_rprelu1_shi_3_q0);

    layer1_1_rprelu1_shi_2_U : component FracNet_T_layer1_eSV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_1_rprelu1_shi_2_ce0,
        q0 => layer1_1_rprelu1_shi_2_q0);

    layer1_1_rprelu1_shi_1_U : component FracNet_T_layer1_eTV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_1_rprelu1_shi_1_ce0,
        q0 => layer1_1_rprelu1_shi_1_q0);

    layer1_1_rprelu1_shi_U : component FracNet_T_layer1_eUV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_1_rprelu1_shi_ce0,
        q0 => layer1_1_rprelu1_shi_q0);

    layer1_1_rprelu1_pre_7_U : component FracNet_T_layer1_eVV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_1_rprelu1_pre_7_ce0,
        q0 => layer1_1_rprelu1_pre_7_q0);

    layer1_1_rprelu1_pre_6_U : component FracNet_T_layer1_eWV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_1_rprelu1_pre_6_ce0,
        q0 => layer1_1_rprelu1_pre_6_q0);

    layer1_1_rprelu1_pre_5_U : component FracNet_T_layer1_eXV
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_1_rprelu1_pre_5_ce0,
        q0 => layer1_1_rprelu1_pre_5_q0);

    layer1_1_rprelu1_pre_4_U : component FracNet_T_layer1_eYW
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_1_rprelu1_pre_4_ce0,
        q0 => layer1_1_rprelu1_pre_4_q0);

    layer1_1_rprelu1_pre_3_U : component FracNet_T_layer1_eZW
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_1_rprelu1_pre_3_ce0,
        q0 => layer1_1_rprelu1_pre_3_q0);

    layer1_1_rprelu1_pre_2_U : component FracNet_T_layer1_e0W
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_1_rprelu1_pre_2_ce0,
        q0 => layer1_1_rprelu1_pre_2_q0);

    layer1_1_rprelu1_pre_1_U : component FracNet_T_layer1_e1W
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_1_rprelu1_pre_1_ce0,
        q0 => layer1_1_rprelu1_pre_1_q0);

    layer1_1_rprelu1_pre_U : component FracNet_T_layer1_e2W
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_1_rprelu1_pre_ce0,
        q0 => layer1_1_rprelu1_pre_q0);

    layer1_1_conv2_thres_7_U : component FracNet_T_layer1_e3W
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_1_conv2_thres_7_ce0,
        q0 => layer1_1_conv2_thres_7_q0);

    layer1_1_conv2_thres_6_U : component FracNet_T_layer1_e4X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_1_conv2_thres_6_ce0,
        q0 => layer1_1_conv2_thres_6_q0);

    layer1_1_conv2_thres_5_U : component FracNet_T_layer1_e5X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_1_conv2_thres_5_ce0,
        q0 => layer1_1_conv2_thres_5_q0);

    layer1_1_conv2_thres_4_U : component FracNet_T_layer1_e6X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_1_conv2_thres_4_ce0,
        q0 => layer1_1_conv2_thres_4_q0);

    layer1_1_conv2_thres_3_U : component FracNet_T_layer1_e7X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_1_conv2_thres_3_ce0,
        q0 => layer1_1_conv2_thres_3_q0);

    layer1_1_conv2_thres_2_U : component FracNet_T_layer1_e8X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_1_conv2_thres_2_ce0,
        q0 => layer1_1_conv2_thres_2_q0);

    layer1_1_conv2_thres_1_U : component FracNet_T_layer1_e9X
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_1_conv2_thres_1_ce0,
        q0 => layer1_1_conv2_thres_1_q0);

    layer1_1_conv2_thres_U : component FracNet_T_layer1_faY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_1_conv2_thres_ce0,
        q0 => layer1_1_conv2_thres_q0);

    layer1_1_bn2_weight_7_U : component FracNet_T_layer1_fbY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_1_bn2_weight_7_ce0,
        q0 => layer1_1_bn2_weight_7_q0);

    layer1_1_bn2_weight_6_U : component FracNet_T_layer1_fcY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_1_bn2_weight_6_ce0,
        q0 => layer1_1_bn2_weight_6_q0);

    layer1_1_bn2_weight_5_U : component FracNet_T_layer1_fdY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_1_bn2_weight_5_ce0,
        q0 => layer1_1_bn2_weight_5_q0);

    layer1_1_bn2_weight_4_U : component FracNet_T_layer1_feY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_1_bn2_weight_4_ce0,
        q0 => layer1_1_bn2_weight_4_q0);

    layer1_1_bn2_weight_3_U : component FracNet_T_layer1_ffY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_1_bn2_weight_3_ce0,
        q0 => layer1_1_bn2_weight_3_q0);

    layer1_1_bn2_weight_2_U : component FracNet_T_layer1_fgY
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_1_bn2_weight_2_ce0,
        q0 => layer1_1_bn2_weight_2_q0);

    layer1_1_bn2_weight_1_U : component FracNet_T_layer1_fhZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_1_bn2_weight_1_ce0,
        q0 => layer1_1_bn2_weight_1_q0);

    layer1_1_bn2_weight_s_U : component FracNet_T_layer1_fiZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_1_bn2_weight_s_ce0,
        q0 => layer1_1_bn2_weight_s_q0);

    layer1_1_bn4_weight_7_U : component FracNet_T_layer1_fjZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_1_bn4_weight_7_ce0,
        q0 => layer1_1_bn4_weight_7_q0);

    layer1_1_bn4_weight_6_U : component FracNet_T_layer1_fkZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_1_bn4_weight_6_ce0,
        q0 => layer1_1_bn4_weight_6_q0);

    layer1_1_bn4_weight_5_U : component FracNet_T_layer1_flZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_1_bn4_weight_5_ce0,
        q0 => layer1_1_bn4_weight_5_q0);

    layer1_1_bn4_weight_4_U : component FracNet_T_layer1_fmZ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_1_bn4_weight_4_ce0,
        q0 => layer1_1_bn4_weight_4_q0);

    layer1_1_bn4_weight_3_U : component FracNet_T_layer1_fn0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_1_bn4_weight_3_ce0,
        q0 => layer1_1_bn4_weight_3_q0);

    layer1_1_bn4_weight_2_U : component FracNet_T_layer1_fo0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_1_bn4_weight_2_ce0,
        q0 => layer1_1_bn4_weight_2_q0);

    layer1_1_bn4_weight_1_U : component FracNet_T_layer1_fp0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_1_bn4_weight_1_ce0,
        q0 => layer1_1_bn4_weight_1_q0);

    layer1_1_bn4_weight_s_U : component FracNet_T_layer1_fq0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_1_bn4_weight_s_ce0,
        q0 => layer1_1_bn4_weight_s_q0);

    layer1_1_bn2_bias_fi_7_U : component FracNet_T_layer1_fr0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_1_bn2_bias_fi_7_ce0,
        q0 => layer1_1_bn2_bias_fi_7_q0);

    layer1_1_bn2_bias_fi_6_U : component FracNet_T_layer1_fs0
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_1_bn2_bias_fi_6_ce0,
        q0 => layer1_1_bn2_bias_fi_6_q0);

    layer1_1_bn2_bias_fi_5_U : component FracNet_T_layer1_ft1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_1_bn2_bias_fi_5_ce0,
        q0 => layer1_1_bn2_bias_fi_5_q0);

    layer1_1_bn2_bias_fi_4_U : component FracNet_T_layer1_fu1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_1_bn2_bias_fi_4_ce0,
        q0 => layer1_1_bn2_bias_fi_4_q0);

    layer1_1_bn2_bias_fi_3_U : component FracNet_T_layer1_fv1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_1_bn2_bias_fi_3_ce0,
        q0 => layer1_1_bn2_bias_fi_3_q0);

    layer1_1_bn2_bias_fi_2_U : component FracNet_T_layer1_fw1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_1_bn2_bias_fi_2_ce0,
        q0 => layer1_1_bn2_bias_fi_2_q0);

    layer1_1_bn2_bias_fi_1_U : component FracNet_T_layer1_fx1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_1_bn2_bias_fi_1_ce0,
        q0 => layer1_1_bn2_bias_fi_1_q0);

    layer1_1_bn2_bias_fi_U : component FracNet_T_layer1_fy1
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_1_bn2_bias_fi_ce0,
        q0 => layer1_1_bn2_bias_fi_q0);

    layer1_1_bn4_bias_fi_7_U : component FracNet_T_layer1_fz2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_1_bn4_bias_fi_7_ce0,
        q0 => layer1_1_bn4_bias_fi_7_q0);

    layer1_1_bn4_bias_fi_6_U : component FracNet_T_layer1_fA2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_1_bn4_bias_fi_6_ce0,
        q0 => layer1_1_bn4_bias_fi_6_q0);

    layer1_1_bn4_bias_fi_5_U : component FracNet_T_layer1_fB2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_1_bn4_bias_fi_5_ce0,
        q0 => layer1_1_bn4_bias_fi_5_q0);

    layer1_1_bn4_bias_fi_4_U : component FracNet_T_layer1_fC2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_1_bn4_bias_fi_4_ce0,
        q0 => layer1_1_bn4_bias_fi_4_q0);

    layer1_1_bn4_bias_fi_3_U : component FracNet_T_layer1_fD2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_1_bn4_bias_fi_3_ce0,
        q0 => layer1_1_bn4_bias_fi_3_q0);

    layer1_1_bn4_bias_fi_2_U : component FracNet_T_layer1_fE2
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_1_bn4_bias_fi_2_ce0,
        q0 => layer1_1_bn4_bias_fi_2_q0);

    layer1_1_bn4_bias_fi_1_U : component FracNet_T_layer1_fF3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_1_bn4_bias_fi_1_ce0,
        q0 => layer1_1_bn4_bias_fi_1_q0);

    layer1_1_bn4_bias_fi_U : component FracNet_T_layer1_fG3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_1_bn4_bias_fi_ce0,
        q0 => layer1_1_bn4_bias_fi_q0);

    layer1_1_rprelu2_shi_15_U : component FracNet_T_layer1_fH3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_1_rprelu2_shi_15_ce0,
        q0 => layer1_1_rprelu2_shi_15_q0);

    layer1_1_rprelu2_shi_14_U : component FracNet_T_layer1_fI3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_1_rprelu2_shi_14_ce0,
        q0 => layer1_1_rprelu2_shi_14_q0);

    layer1_1_rprelu2_shi_13_U : component FracNet_T_layer1_fJ3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_1_rprelu2_shi_13_ce0,
        q0 => layer1_1_rprelu2_shi_13_q0);

    layer1_1_rprelu2_shi_12_U : component FracNet_T_layer1_fK3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_1_rprelu2_shi_12_ce0,
        q0 => layer1_1_rprelu2_shi_12_q0);

    layer1_1_rprelu2_shi_11_U : component FracNet_T_layer1_fL3
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_1_rprelu2_shi_11_ce0,
        q0 => layer1_1_rprelu2_shi_11_q0);

    layer1_1_rprelu2_shi_10_U : component FracNet_T_layer1_fM4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_1_rprelu2_shi_10_ce0,
        q0 => layer1_1_rprelu2_shi_10_q0);

    layer1_1_rprelu2_shi_9_U : component FracNet_T_layer1_fN4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_1_rprelu2_shi_9_ce0,
        q0 => layer1_1_rprelu2_shi_9_q0);

    layer1_1_rprelu2_shi_8_U : component FracNet_T_layer1_fO4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_1_rprelu2_shi_8_ce0,
        q0 => layer1_1_rprelu2_shi_8_q0);

    layer1_1_rprelu2_shi_7_U : component FracNet_T_layer1_fP4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_1_rprelu2_shi_7_ce0,
        q0 => layer1_1_rprelu2_shi_7_q0);

    layer1_1_rprelu2_shi_6_U : component FracNet_T_layer1_fQ4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_1_rprelu2_shi_6_ce0,
        q0 => layer1_1_rprelu2_shi_6_q0);

    layer1_1_rprelu2_shi_5_U : component FracNet_T_layer1_fR4
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_1_rprelu2_shi_5_ce0,
        q0 => layer1_1_rprelu2_shi_5_q0);

    layer1_1_rprelu2_shi_4_U : component FracNet_T_layer1_fS5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_1_rprelu2_shi_4_ce0,
        q0 => layer1_1_rprelu2_shi_4_q0);

    layer1_1_rprelu2_shi_3_U : component FracNet_T_layer1_fT5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_1_rprelu2_shi_3_ce0,
        q0 => layer1_1_rprelu2_shi_3_q0);

    layer1_1_rprelu2_shi_2_U : component FracNet_T_layer1_fU5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_1_rprelu2_shi_2_ce0,
        q0 => layer1_1_rprelu2_shi_2_q0);

    layer1_1_rprelu2_shi_1_U : component FracNet_T_layer1_fV5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_1_rprelu2_shi_1_ce0,
        q0 => layer1_1_rprelu2_shi_1_q0);

    layer1_1_rprelu2_shi_U : component FracNet_T_layer1_fW5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_1_rprelu2_shi_ce0,
        q0 => layer1_1_rprelu2_shi_q0);

    layer1_1_rprelu2_pre_7_U : component FracNet_T_layer1_fX5
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_1_rprelu2_pre_7_ce0,
        q0 => layer1_1_rprelu2_pre_7_q0);

    layer1_1_rprelu2_pre_6_U : component FracNet_T_layer1_fY6
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_1_rprelu2_pre_6_ce0,
        q0 => layer1_1_rprelu2_pre_6_q0);

    layer1_1_rprelu2_pre_5_U : component FracNet_T_layer1_fZ6
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_1_rprelu2_pre_5_ce0,
        q0 => layer1_1_rprelu2_pre_5_q0);

    layer1_1_rprelu2_pre_4_U : component FracNet_T_layer1_f06
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_1_rprelu2_pre_4_ce0,
        q0 => layer1_1_rprelu2_pre_4_q0);

    layer1_1_rprelu2_pre_3_U : component FracNet_T_layer1_f16
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_1_rprelu2_pre_3_ce0,
        q0 => layer1_1_rprelu2_pre_3_q0);

    layer1_1_rprelu2_pre_2_U : component FracNet_T_layer1_f26
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_1_rprelu2_pre_2_ce0,
        q0 => layer1_1_rprelu2_pre_2_q0);

    layer1_1_rprelu2_pre_1_U : component FracNet_T_layer1_f36
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_1_rprelu2_pre_1_ce0,
        q0 => layer1_1_rprelu2_pre_1_q0);

    layer1_1_rprelu2_pre_U : component FracNet_T_layer1_f47
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_1_rprelu2_pre_ce0,
        q0 => layer1_1_rprelu2_pre_q0);

    layer1_2_conv1_thres_7_U : component FracNet_T_layer1_f57
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_2_conv1_thres_7_ce0,
        q0 => layer1_2_conv1_thres_7_q0);

    layer1_2_conv1_thres_6_U : component FracNet_T_layer1_f67
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_2_conv1_thres_6_ce0,
        q0 => layer1_2_conv1_thres_6_q0);

    layer1_2_conv1_thres_5_U : component FracNet_T_layer1_f77
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_2_conv1_thres_5_ce0,
        q0 => layer1_2_conv1_thres_5_q0);

    layer1_2_conv1_thres_4_U : component FracNet_T_layer1_f87
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_2_conv1_thres_4_ce0,
        q0 => layer1_2_conv1_thres_4_q0);

    layer1_2_conv1_thres_3_U : component FracNet_T_layer1_f97
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_2_conv1_thres_3_ce0,
        q0 => layer1_2_conv1_thres_3_q0);

    layer1_2_conv1_thres_2_U : component FracNet_T_layer1_ga8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_2_conv1_thres_2_ce0,
        q0 => layer1_2_conv1_thres_2_q0);

    layer1_2_conv1_thres_1_U : component FracNet_T_layer1_gb8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_2_conv1_thres_1_ce0,
        q0 => layer1_2_conv1_thres_1_q0);

    layer1_2_conv1_thres_U : component FracNet_T_layer1_gc8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_2_conv1_thres_ce0,
        q0 => layer1_2_conv1_thres_q0);

    layer1_2_bn1_weight_7_U : component FracNet_T_layer1_gd8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_2_bn1_weight_7_ce0,
        q0 => layer1_2_bn1_weight_7_q0);

    layer1_2_bn1_weight_6_U : component FracNet_T_layer1_ge8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_2_bn1_weight_6_ce0,
        q0 => layer1_2_bn1_weight_6_q0);

    layer1_2_bn1_weight_5_U : component FracNet_T_layer1_gf8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_2_bn1_weight_5_ce0,
        q0 => layer1_2_bn1_weight_5_q0);

    layer1_2_bn1_weight_4_U : component FracNet_T_layer1_gg8
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_2_bn1_weight_4_ce0,
        q0 => layer1_2_bn1_weight_4_q0);

    layer1_2_bn1_weight_3_U : component FracNet_T_layer1_gh9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_2_bn1_weight_3_ce0,
        q0 => layer1_2_bn1_weight_3_q0);

    layer1_2_bn1_weight_2_U : component FracNet_T_layer1_gi9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_2_bn1_weight_2_ce0,
        q0 => layer1_2_bn1_weight_2_q0);

    layer1_2_bn1_weight_1_U : component FracNet_T_layer1_gj9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_2_bn1_weight_1_ce0,
        q0 => layer1_2_bn1_weight_1_q0);

    layer1_2_bn1_weight_s_U : component FracNet_T_layer1_gk9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_2_bn1_weight_s_ce0,
        q0 => layer1_2_bn1_weight_s_q0);

    layer1_2_bn3_weight_7_U : component FracNet_T_layer1_gl9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_2_bn3_weight_7_ce0,
        q0 => layer1_2_bn3_weight_7_q0);

    layer1_2_bn3_weight_6_U : component FracNet_T_layer1_gm9
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_2_bn3_weight_6_ce0,
        q0 => layer1_2_bn3_weight_6_q0);

    layer1_2_bn3_weight_5_U : component FracNet_T_layer1_gnb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_2_bn3_weight_5_ce0,
        q0 => layer1_2_bn3_weight_5_q0);

    layer1_2_bn3_weight_4_U : component FracNet_T_layer1_gob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_2_bn3_weight_4_ce0,
        q0 => layer1_2_bn3_weight_4_q0);

    layer1_2_bn3_weight_3_U : component FracNet_T_layer1_gpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_2_bn3_weight_3_ce0,
        q0 => layer1_2_bn3_weight_3_q0);

    layer1_2_bn3_weight_2_U : component FracNet_T_layer1_gqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_2_bn3_weight_2_ce0,
        q0 => layer1_2_bn3_weight_2_q0);

    layer1_2_bn3_weight_1_U : component FracNet_T_layer1_grb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_2_bn3_weight_1_ce0,
        q0 => layer1_2_bn3_weight_1_q0);

    layer1_2_bn3_weight_s_U : component FracNet_T_layer1_gsb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_2_bn3_weight_s_ce0,
        q0 => layer1_2_bn3_weight_s_q0);

    layer1_2_bn1_bias_fi_7_U : component FracNet_T_layer1_gtb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_2_bn1_bias_fi_7_ce0,
        q0 => layer1_2_bn1_bias_fi_7_q0);

    layer1_2_bn1_bias_fi_6_U : component FracNet_T_layer1_gub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_2_bn1_bias_fi_6_ce0,
        q0 => layer1_2_bn1_bias_fi_6_q0);

    layer1_2_bn1_bias_fi_5_U : component FracNet_T_layer1_gvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_2_bn1_bias_fi_5_ce0,
        q0 => layer1_2_bn1_bias_fi_5_q0);

    layer1_2_bn1_bias_fi_4_U : component FracNet_T_layer1_gwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_2_bn1_bias_fi_4_ce0,
        q0 => layer1_2_bn1_bias_fi_4_q0);

    layer1_2_bn1_bias_fi_3_U : component FracNet_T_layer1_gxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_2_bn1_bias_fi_3_ce0,
        q0 => layer1_2_bn1_bias_fi_3_q0);

    layer1_2_bn1_bias_fi_2_U : component FracNet_T_layer1_gyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_2_bn1_bias_fi_2_ce0,
        q0 => layer1_2_bn1_bias_fi_2_q0);

    layer1_2_bn1_bias_fi_1_U : component FracNet_T_layer1_gzb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_2_bn1_bias_fi_1_ce0,
        q0 => layer1_2_bn1_bias_fi_1_q0);

    layer1_2_bn1_bias_fi_U : component FracNet_T_layer1_gAb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_2_bn1_bias_fi_ce0,
        q0 => layer1_2_bn1_bias_fi_q0);

    layer1_2_bn3_bias_fi_7_U : component FracNet_T_layer1_gBb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_2_bn3_bias_fi_7_ce0,
        q0 => layer1_2_bn3_bias_fi_7_q0);

    layer1_2_bn3_bias_fi_6_U : component FracNet_T_layer1_gCb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_2_bn3_bias_fi_6_ce0,
        q0 => layer1_2_bn3_bias_fi_6_q0);

    layer1_2_bn3_bias_fi_5_U : component FracNet_T_layer1_gDb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_2_bn3_bias_fi_5_ce0,
        q0 => layer1_2_bn3_bias_fi_5_q0);

    layer1_2_bn3_bias_fi_4_U : component FracNet_T_layer1_gEb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_2_bn3_bias_fi_4_ce0,
        q0 => layer1_2_bn3_bias_fi_4_q0);

    layer1_2_bn3_bias_fi_3_U : component FracNet_T_layer1_gFb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_2_bn3_bias_fi_3_ce0,
        q0 => layer1_2_bn3_bias_fi_3_q0);

    layer1_2_bn3_bias_fi_2_U : component FracNet_T_layer1_gGb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_2_bn3_bias_fi_2_ce0,
        q0 => layer1_2_bn3_bias_fi_2_q0);

    layer1_2_bn3_bias_fi_1_U : component FracNet_T_layer1_gHb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_2_bn3_bias_fi_1_ce0,
        q0 => layer1_2_bn3_bias_fi_1_q0);

    layer1_2_bn3_bias_fi_U : component FracNet_T_layer1_gIb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_2_bn3_bias_fi_ce0,
        q0 => layer1_2_bn3_bias_fi_q0);

    layer1_2_rprelu1_shi_15_U : component FracNet_T_layer1_gJb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_2_rprelu1_shi_15_ce0,
        q0 => layer1_2_rprelu1_shi_15_q0);

    layer1_2_rprelu1_shi_14_U : component FracNet_T_layer1_gKb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_2_rprelu1_shi_14_ce0,
        q0 => layer1_2_rprelu1_shi_14_q0);

    layer1_2_rprelu1_shi_13_U : component FracNet_T_layer1_gLb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_2_rprelu1_shi_13_ce0,
        q0 => layer1_2_rprelu1_shi_13_q0);

    layer1_2_rprelu1_shi_12_U : component FracNet_T_layer1_gMb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_2_rprelu1_shi_12_ce0,
        q0 => layer1_2_rprelu1_shi_12_q0);

    layer1_2_rprelu1_shi_11_U : component FracNet_T_layer1_gNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_2_rprelu1_shi_11_ce0,
        q0 => layer1_2_rprelu1_shi_11_q0);

    layer1_2_rprelu1_shi_10_U : component FracNet_T_layer1_gOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_2_rprelu1_shi_10_ce0,
        q0 => layer1_2_rprelu1_shi_10_q0);

    layer1_2_rprelu1_shi_9_U : component FracNet_T_layer1_gPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_2_rprelu1_shi_9_ce0,
        q0 => layer1_2_rprelu1_shi_9_q0);

    layer1_2_rprelu1_shi_8_U : component FracNet_T_layer1_gQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_2_rprelu1_shi_8_ce0,
        q0 => layer1_2_rprelu1_shi_8_q0);

    layer1_2_rprelu1_shi_7_U : component FracNet_T_layer1_gRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_2_rprelu1_shi_7_ce0,
        q0 => layer1_2_rprelu1_shi_7_q0);

    layer1_2_rprelu1_shi_6_U : component FracNet_T_layer1_gSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_2_rprelu1_shi_6_ce0,
        q0 => layer1_2_rprelu1_shi_6_q0);

    layer1_2_rprelu1_shi_5_U : component FracNet_T_layer1_gTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_2_rprelu1_shi_5_ce0,
        q0 => layer1_2_rprelu1_shi_5_q0);

    layer1_2_rprelu1_shi_4_U : component FracNet_T_layer1_gUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_2_rprelu1_shi_4_ce0,
        q0 => layer1_2_rprelu1_shi_4_q0);

    layer1_2_rprelu1_shi_3_U : component FracNet_T_layer1_gVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_2_rprelu1_shi_3_ce0,
        q0 => layer1_2_rprelu1_shi_3_q0);

    layer1_2_rprelu1_shi_2_U : component FracNet_T_layer1_gWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_2_rprelu1_shi_2_ce0,
        q0 => layer1_2_rprelu1_shi_2_q0);

    layer1_2_rprelu1_shi_1_U : component FracNet_T_layer1_gXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_2_rprelu1_shi_1_ce0,
        q0 => layer1_2_rprelu1_shi_1_q0);

    layer1_2_rprelu1_shi_U : component FracNet_T_layer1_gYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_2_rprelu1_shi_ce0,
        q0 => layer1_2_rprelu1_shi_q0);

    layer1_2_rprelu1_pre_7_U : component FracNet_T_layer1_gZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_2_rprelu1_pre_7_ce0,
        q0 => layer1_2_rprelu1_pre_7_q0);

    layer1_2_rprelu1_pre_6_U : component FracNet_T_layer1_g0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_2_rprelu1_pre_6_ce0,
        q0 => layer1_2_rprelu1_pre_6_q0);

    layer1_2_rprelu1_pre_5_U : component FracNet_T_layer1_g1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_2_rprelu1_pre_5_ce0,
        q0 => layer1_2_rprelu1_pre_5_q0);

    layer1_2_rprelu1_pre_4_U : component FracNet_T_layer1_g2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_2_rprelu1_pre_4_ce0,
        q0 => layer1_2_rprelu1_pre_4_q0);

    layer1_2_rprelu1_pre_3_U : component FracNet_T_layer1_g3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_2_rprelu1_pre_3_ce0,
        q0 => layer1_2_rprelu1_pre_3_q0);

    layer1_2_rprelu1_pre_2_U : component FracNet_T_layer1_g4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_2_rprelu1_pre_2_ce0,
        q0 => layer1_2_rprelu1_pre_2_q0);

    layer1_2_rprelu1_pre_1_U : component FracNet_T_layer1_g5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_2_rprelu1_pre_1_ce0,
        q0 => layer1_2_rprelu1_pre_1_q0);

    layer1_2_rprelu1_pre_U : component FracNet_T_layer1_g6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_2_rprelu1_pre_ce0,
        q0 => layer1_2_rprelu1_pre_q0);

    layer1_2_conv2_thres_7_U : component FracNet_T_layer1_g7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer1_2_conv2_thres_7_ce0,
        q0 => layer1_2_conv2_thres_7_q0);

    layer1_2_conv2_thres_6_U : component FracNet_T_layer1_g8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer1_2_conv2_thres_6_ce0,
        q0 => layer1_2_conv2_thres_6_q0);

    layer1_2_conv2_thres_5_U : component FracNet_T_layer1_g9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer1_2_conv2_thres_5_ce0,
        q0 => layer1_2_conv2_thres_5_q0);

    layer1_2_conv2_thres_4_U : component FracNet_T_layer1_hab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer1_2_conv2_thres_4_ce0,
        q0 => layer1_2_conv2_thres_4_q0);

    layer1_2_conv2_thres_3_U : component FracNet_T_layer1_hbb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer1_2_conv2_thres_3_ce0,
        q0 => layer1_2_conv2_thres_3_q0);

    layer1_2_conv2_thres_2_U : component FracNet_T_layer1_hcb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer1_2_conv2_thres_2_ce0,
        q0 => layer1_2_conv2_thres_2_q0);

    layer1_2_conv2_thres_1_U : component FracNet_T_layer1_hdb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer1_2_conv2_thres_1_ce0,
        q0 => layer1_2_conv2_thres_1_q0);

    layer1_2_conv2_thres_U : component FracNet_T_layer1_heb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer1_2_conv2_thres_ce0,
        q0 => layer1_2_conv2_thres_q0);

    layer1_2_bn2_weight_7_U : component FracNet_T_layer1_hfb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer1_2_bn2_weight_7_ce0,
        q0 => layer1_2_bn2_weight_7_q0);

    layer1_2_bn2_weight_6_U : component FracNet_T_layer1_hgb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer1_2_bn2_weight_6_ce0,
        q0 => layer1_2_bn2_weight_6_q0);

    layer1_2_bn2_weight_5_U : component FracNet_T_layer1_hhb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer1_2_bn2_weight_5_ce0,
        q0 => layer1_2_bn2_weight_5_q0);

    layer1_2_bn2_weight_4_U : component FracNet_T_layer1_hib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer1_2_bn2_weight_4_ce0,
        q0 => layer1_2_bn2_weight_4_q0);

    layer1_2_bn2_weight_3_U : component FracNet_T_layer1_hjb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer1_2_bn2_weight_3_ce0,
        q0 => layer1_2_bn2_weight_3_q0);

    layer1_2_bn2_weight_2_U : component FracNet_T_layer1_hkb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer1_2_bn2_weight_2_ce0,
        q0 => layer1_2_bn2_weight_2_q0);

    layer1_2_bn2_weight_1_U : component FracNet_T_layer1_hlb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer1_2_bn2_weight_1_ce0,
        q0 => layer1_2_bn2_weight_1_q0);

    layer1_2_bn2_weight_s_U : component FracNet_T_layer1_hmb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer1_2_bn2_weight_s_ce0,
        q0 => layer1_2_bn2_weight_s_q0);

    layer1_2_bn4_weight_7_U : component FracNet_T_layer1_hnb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer1_2_bn4_weight_7_ce0,
        q0 => layer1_2_bn4_weight_7_q0);

    layer1_2_bn4_weight_6_U : component FracNet_T_layer1_hob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer1_2_bn4_weight_6_ce0,
        q0 => layer1_2_bn4_weight_6_q0);

    layer1_2_bn4_weight_5_U : component FracNet_T_layer1_hpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer1_2_bn4_weight_5_ce0,
        q0 => layer1_2_bn4_weight_5_q0);

    layer1_2_bn4_weight_4_U : component FracNet_T_layer1_hqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer1_2_bn4_weight_4_ce0,
        q0 => layer1_2_bn4_weight_4_q0);

    layer1_2_bn4_weight_3_U : component FracNet_T_layer1_hrb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer1_2_bn4_weight_3_ce0,
        q0 => layer1_2_bn4_weight_3_q0);

    layer1_2_bn4_weight_2_U : component FracNet_T_layer1_hsb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer1_2_bn4_weight_2_ce0,
        q0 => layer1_2_bn4_weight_2_q0);

    layer1_2_bn4_weight_1_U : component FracNet_T_layer1_htb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer1_2_bn4_weight_1_ce0,
        q0 => layer1_2_bn4_weight_1_q0);

    layer1_2_bn4_weight_s_U : component FracNet_T_layer1_hub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer1_2_bn4_weight_s_ce0,
        q0 => layer1_2_bn4_weight_s_q0);

    layer1_2_bn2_bias_fi_7_U : component FracNet_T_layer1_hvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer1_2_bn2_bias_fi_7_ce0,
        q0 => layer1_2_bn2_bias_fi_7_q0);

    layer1_2_bn2_bias_fi_6_U : component FracNet_T_layer1_hwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer1_2_bn2_bias_fi_6_ce0,
        q0 => layer1_2_bn2_bias_fi_6_q0);

    layer1_2_bn2_bias_fi_5_U : component FracNet_T_layer1_hxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer1_2_bn2_bias_fi_5_ce0,
        q0 => layer1_2_bn2_bias_fi_5_q0);

    layer1_2_bn2_bias_fi_4_U : component FracNet_T_layer1_hyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer1_2_bn2_bias_fi_4_ce0,
        q0 => layer1_2_bn2_bias_fi_4_q0);

    layer1_2_bn2_bias_fi_3_U : component FracNet_T_layer1_hzb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer1_2_bn2_bias_fi_3_ce0,
        q0 => layer1_2_bn2_bias_fi_3_q0);

    layer1_2_bn2_bias_fi_2_U : component FracNet_T_layer1_hAb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer1_2_bn2_bias_fi_2_ce0,
        q0 => layer1_2_bn2_bias_fi_2_q0);

    layer1_2_bn2_bias_fi_1_U : component FracNet_T_layer1_hBb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer1_2_bn2_bias_fi_1_ce0,
        q0 => layer1_2_bn2_bias_fi_1_q0);

    layer1_2_bn2_bias_fi_U : component FracNet_T_layer1_hCb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer1_2_bn2_bias_fi_ce0,
        q0 => layer1_2_bn2_bias_fi_q0);

    layer1_2_bn4_bias_fi_7_U : component FracNet_T_layer1_hDb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer1_2_bn4_bias_fi_7_ce0,
        q0 => layer1_2_bn4_bias_fi_7_q0);

    layer1_2_bn4_bias_fi_6_U : component FracNet_T_layer1_hEb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer1_2_bn4_bias_fi_6_ce0,
        q0 => layer1_2_bn4_bias_fi_6_q0);

    layer1_2_bn4_bias_fi_5_U : component FracNet_T_layer1_hFb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer1_2_bn4_bias_fi_5_ce0,
        q0 => layer1_2_bn4_bias_fi_5_q0);

    layer1_2_bn4_bias_fi_4_U : component FracNet_T_layer1_hGb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer1_2_bn4_bias_fi_4_ce0,
        q0 => layer1_2_bn4_bias_fi_4_q0);

    layer1_2_bn4_bias_fi_3_U : component FracNet_T_layer1_hHb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer1_2_bn4_bias_fi_3_ce0,
        q0 => layer1_2_bn4_bias_fi_3_q0);

    layer1_2_bn4_bias_fi_2_U : component FracNet_T_layer1_hIb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer1_2_bn4_bias_fi_2_ce0,
        q0 => layer1_2_bn4_bias_fi_2_q0);

    layer1_2_bn4_bias_fi_1_U : component FracNet_T_layer1_hJb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer1_2_bn4_bias_fi_1_ce0,
        q0 => layer1_2_bn4_bias_fi_1_q0);

    layer1_2_bn4_bias_fi_U : component FracNet_T_layer1_hKb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer1_2_bn4_bias_fi_ce0,
        q0 => layer1_2_bn4_bias_fi_q0);

    layer1_2_rprelu2_shi_15_U : component FracNet_T_layer1_hLb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer1_2_rprelu2_shi_15_ce0,
        q0 => layer1_2_rprelu2_shi_15_q0);

    layer1_2_rprelu2_shi_14_U : component FracNet_T_layer1_hMb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer1_2_rprelu2_shi_14_ce0,
        q0 => layer1_2_rprelu2_shi_14_q0);

    layer1_2_rprelu2_shi_13_U : component FracNet_T_layer1_hNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer1_2_rprelu2_shi_13_ce0,
        q0 => layer1_2_rprelu2_shi_13_q0);

    layer1_2_rprelu2_shi_12_U : component FracNet_T_layer1_hOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer1_2_rprelu2_shi_12_ce0,
        q0 => layer1_2_rprelu2_shi_12_q0);

    layer1_2_rprelu2_shi_11_U : component FracNet_T_layer1_hPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer1_2_rprelu2_shi_11_ce0,
        q0 => layer1_2_rprelu2_shi_11_q0);

    layer1_2_rprelu2_shi_10_U : component FracNet_T_layer1_hQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer1_2_rprelu2_shi_10_ce0,
        q0 => layer1_2_rprelu2_shi_10_q0);

    layer1_2_rprelu2_shi_9_U : component FracNet_T_layer1_hRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer1_2_rprelu2_shi_9_ce0,
        q0 => layer1_2_rprelu2_shi_9_q0);

    layer1_2_rprelu2_shi_8_U : component FracNet_T_layer1_hSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer1_2_rprelu2_shi_8_ce0,
        q0 => layer1_2_rprelu2_shi_8_q0);

    layer1_2_rprelu2_shi_7_U : component FracNet_T_layer1_hTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer1_2_rprelu2_shi_7_ce0,
        q0 => layer1_2_rprelu2_shi_7_q0);

    layer1_2_rprelu2_shi_6_U : component FracNet_T_layer1_hUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer1_2_rprelu2_shi_6_ce0,
        q0 => layer1_2_rprelu2_shi_6_q0);

    layer1_2_rprelu2_shi_5_U : component FracNet_T_layer1_hVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer1_2_rprelu2_shi_5_ce0,
        q0 => layer1_2_rprelu2_shi_5_q0);

    layer1_2_rprelu2_shi_4_U : component FracNet_T_layer1_hWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer1_2_rprelu2_shi_4_ce0,
        q0 => layer1_2_rprelu2_shi_4_q0);

    layer1_2_rprelu2_shi_3_U : component FracNet_T_layer1_hXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer1_2_rprelu2_shi_3_ce0,
        q0 => layer1_2_rprelu2_shi_3_q0);

    layer1_2_rprelu2_shi_2_U : component FracNet_T_layer1_hYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer1_2_rprelu2_shi_2_ce0,
        q0 => layer1_2_rprelu2_shi_2_q0);

    layer1_2_rprelu2_shi_1_U : component FracNet_T_layer1_hZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer1_2_rprelu2_shi_1_ce0,
        q0 => layer1_2_rprelu2_shi_1_q0);

    layer1_2_rprelu2_shi_U : component FracNet_T_layer1_h0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer1_2_rprelu2_shi_ce0,
        q0 => layer1_2_rprelu2_shi_q0);

    layer1_2_rprelu2_pre_7_U : component FracNet_T_layer1_h1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer1_2_rprelu2_pre_7_ce0,
        q0 => layer1_2_rprelu2_pre_7_q0);

    layer1_2_rprelu2_pre_6_U : component FracNet_T_layer1_h2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer1_2_rprelu2_pre_6_ce0,
        q0 => layer1_2_rprelu2_pre_6_q0);

    layer1_2_rprelu2_pre_5_U : component FracNet_T_layer1_h3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer1_2_rprelu2_pre_5_ce0,
        q0 => layer1_2_rprelu2_pre_5_q0);

    layer1_2_rprelu2_pre_4_U : component FracNet_T_layer1_h4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer1_2_rprelu2_pre_4_ce0,
        q0 => layer1_2_rprelu2_pre_4_q0);

    layer1_2_rprelu2_pre_3_U : component FracNet_T_layer1_h5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer1_2_rprelu2_pre_3_ce0,
        q0 => layer1_2_rprelu2_pre_3_q0);

    layer1_2_rprelu2_pre_2_U : component FracNet_T_layer1_h6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer1_2_rprelu2_pre_2_ce0,
        q0 => layer1_2_rprelu2_pre_2_q0);

    layer1_2_rprelu2_pre_1_U : component FracNet_T_layer1_h7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer1_2_rprelu2_pre_1_ce0,
        q0 => layer1_2_rprelu2_pre_1_q0);

    layer1_2_rprelu2_pre_U : component FracNet_T_layer1_h8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer1_2_rprelu2_pre_ce0,
        q0 => layer1_2_rprelu2_pre_q0);

    layer2_0_conv1_thres_7_U : component FracNet_T_layer2_h9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_0_conv1_thres_7_ce0,
        q0 => layer2_0_conv1_thres_7_q0);

    layer2_0_conv1_thres_6_U : component FracNet_T_layer2_iab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_0_conv1_thres_6_ce0,
        q0 => layer2_0_conv1_thres_6_q0);

    layer2_0_conv1_thres_5_U : component FracNet_T_layer2_ibb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_0_conv1_thres_5_ce0,
        q0 => layer2_0_conv1_thres_5_q0);

    layer2_0_conv1_thres_4_U : component FracNet_T_layer2_icb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_0_conv1_thres_4_ce0,
        q0 => layer2_0_conv1_thres_4_q0);

    layer2_0_conv1_thres_3_U : component FracNet_T_layer2_idb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_0_conv1_thres_3_ce0,
        q0 => layer2_0_conv1_thres_3_q0);

    layer2_0_conv1_thres_2_U : component FracNet_T_layer2_ieb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_0_conv1_thres_2_ce0,
        q0 => layer2_0_conv1_thres_2_q0);

    layer2_0_conv1_thres_1_U : component FracNet_T_layer2_ifb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_0_conv1_thres_1_ce0,
        q0 => layer2_0_conv1_thres_1_q0);

    layer2_0_conv1_thres_U : component FracNet_T_layer2_igb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_0_conv1_thres_ce0,
        q0 => layer2_0_conv1_thres_q0);

    layer2_0_bn1_weight_7_U : component FracNet_T_layer2_ihb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_0_bn1_weight_7_ce0,
        q0 => layer2_0_bn1_weight_7_q0);

    layer2_0_bn1_weight_6_U : component FracNet_T_layer2_iib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_0_bn1_weight_6_ce0,
        q0 => layer2_0_bn1_weight_6_q0);

    layer2_0_bn1_weight_5_U : component FracNet_T_layer2_ijb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_0_bn1_weight_5_ce0,
        q0 => layer2_0_bn1_weight_5_q0);

    layer2_0_bn1_weight_4_U : component FracNet_T_layer2_ikb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_0_bn1_weight_4_ce0,
        q0 => layer2_0_bn1_weight_4_q0);

    layer2_0_bn1_weight_3_U : component FracNet_T_layer2_ilb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_0_bn1_weight_3_ce0,
        q0 => layer2_0_bn1_weight_3_q0);

    layer2_0_bn1_weight_2_U : component FracNet_T_layer2_imb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_0_bn1_weight_2_ce0,
        q0 => layer2_0_bn1_weight_2_q0);

    layer2_0_bn1_weight_1_U : component FracNet_T_layer2_inb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_0_bn1_weight_1_ce0,
        q0 => layer2_0_bn1_weight_1_q0);

    layer2_0_bn1_weight_s_U : component FracNet_T_layer2_iob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_0_bn1_weight_s_ce0,
        q0 => layer2_0_bn1_weight_s_q0);

    layer2_0_bn3_weight_7_U : component FracNet_T_layer2_ipb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_0_bn3_weight_7_ce0,
        q0 => layer2_0_bn3_weight_7_q0);

    layer2_0_bn3_weight_6_U : component FracNet_T_layer2_iqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_0_bn3_weight_6_ce0,
        q0 => layer2_0_bn3_weight_6_q0);

    layer2_0_bn3_weight_5_U : component FracNet_T_layer2_irb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_0_bn3_weight_5_ce0,
        q0 => layer2_0_bn3_weight_5_q0);

    layer2_0_bn3_weight_4_U : component FracNet_T_layer2_isb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_0_bn3_weight_4_ce0,
        q0 => layer2_0_bn3_weight_4_q0);

    layer2_0_bn3_weight_3_U : component FracNet_T_layer2_itb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_0_bn3_weight_3_ce0,
        q0 => layer2_0_bn3_weight_3_q0);

    layer2_0_bn3_weight_2_U : component FracNet_T_layer2_iub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_0_bn3_weight_2_ce0,
        q0 => layer2_0_bn3_weight_2_q0);

    layer2_0_bn3_weight_1_U : component FracNet_T_layer2_ivb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_0_bn3_weight_1_ce0,
        q0 => layer2_0_bn3_weight_1_q0);

    layer2_0_bn3_weight_s_U : component FracNet_T_layer2_iwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_0_bn3_weight_s_ce0,
        q0 => layer2_0_bn3_weight_s_q0);

    layer2_0_bn1_bias_fi_7_U : component FracNet_T_layer2_ixb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_0_bn1_bias_fi_7_ce0,
        q0 => layer2_0_bn1_bias_fi_7_q0);

    layer2_0_bn1_bias_fi_6_U : component FracNet_T_layer2_iyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_0_bn1_bias_fi_6_ce0,
        q0 => layer2_0_bn1_bias_fi_6_q0);

    layer2_0_bn1_bias_fi_5_U : component FracNet_T_layer2_izb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_0_bn1_bias_fi_5_ce0,
        q0 => layer2_0_bn1_bias_fi_5_q0);

    layer2_0_bn1_bias_fi_4_U : component FracNet_T_layer2_iAb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_0_bn1_bias_fi_4_ce0,
        q0 => layer2_0_bn1_bias_fi_4_q0);

    layer2_0_bn1_bias_fi_3_U : component FracNet_T_layer2_iBb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_0_bn1_bias_fi_3_ce0,
        q0 => layer2_0_bn1_bias_fi_3_q0);

    layer2_0_bn1_bias_fi_2_U : component FracNet_T_layer2_iCb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_0_bn1_bias_fi_2_ce0,
        q0 => layer2_0_bn1_bias_fi_2_q0);

    layer2_0_bn1_bias_fi_1_U : component FracNet_T_layer2_iDb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_0_bn1_bias_fi_1_ce0,
        q0 => layer2_0_bn1_bias_fi_1_q0);

    layer2_0_bn1_bias_fi_U : component FracNet_T_layer2_iEb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_0_bn1_bias_fi_ce0,
        q0 => layer2_0_bn1_bias_fi_q0);

    layer2_0_bn3_bias_fi_7_U : component FracNet_T_layer2_iFb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_0_bn3_bias_fi_7_ce0,
        q0 => layer2_0_bn3_bias_fi_7_q0);

    layer2_0_bn3_bias_fi_6_U : component FracNet_T_layer2_iGb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_0_bn3_bias_fi_6_ce0,
        q0 => layer2_0_bn3_bias_fi_6_q0);

    layer2_0_bn3_bias_fi_5_U : component FracNet_T_layer2_iHb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_0_bn3_bias_fi_5_ce0,
        q0 => layer2_0_bn3_bias_fi_5_q0);

    layer2_0_bn3_bias_fi_4_U : component FracNet_T_layer2_iIb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_0_bn3_bias_fi_4_ce0,
        q0 => layer2_0_bn3_bias_fi_4_q0);

    layer2_0_bn3_bias_fi_3_U : component FracNet_T_layer2_iJb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_0_bn3_bias_fi_3_ce0,
        q0 => layer2_0_bn3_bias_fi_3_q0);

    layer2_0_bn3_bias_fi_2_U : component FracNet_T_layer2_iKb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_0_bn3_bias_fi_2_ce0,
        q0 => layer2_0_bn3_bias_fi_2_q0);

    layer2_0_bn3_bias_fi_1_U : component FracNet_T_layer2_iLb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_0_bn3_bias_fi_1_ce0,
        q0 => layer2_0_bn3_bias_fi_1_q0);

    layer2_0_bn3_bias_fi_U : component FracNet_T_layer2_iMb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_0_bn3_bias_fi_ce0,
        q0 => layer2_0_bn3_bias_fi_q0);

    layer2_0_rprelu1_shi_15_U : component FracNet_T_layer2_iNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_0_rprelu1_shi_15_ce0,
        q0 => layer2_0_rprelu1_shi_15_q0);

    layer2_0_rprelu1_shi_14_U : component FracNet_T_layer2_iOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_0_rprelu1_shi_14_ce0,
        q0 => layer2_0_rprelu1_shi_14_q0);

    layer2_0_rprelu1_shi_13_U : component FracNet_T_layer2_iPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_0_rprelu1_shi_13_ce0,
        q0 => layer2_0_rprelu1_shi_13_q0);

    layer2_0_rprelu1_shi_12_U : component FracNet_T_layer2_iQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_0_rprelu1_shi_12_ce0,
        q0 => layer2_0_rprelu1_shi_12_q0);

    layer2_0_rprelu1_shi_11_U : component FracNet_T_layer2_iRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_0_rprelu1_shi_11_ce0,
        q0 => layer2_0_rprelu1_shi_11_q0);

    layer2_0_rprelu1_shi_10_U : component FracNet_T_layer2_iSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_0_rprelu1_shi_10_ce0,
        q0 => layer2_0_rprelu1_shi_10_q0);

    layer2_0_rprelu1_shi_9_U : component FracNet_T_layer2_iTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_0_rprelu1_shi_9_ce0,
        q0 => layer2_0_rprelu1_shi_9_q0);

    layer2_0_rprelu1_shi_8_U : component FracNet_T_layer2_iUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_0_rprelu1_shi_8_ce0,
        q0 => layer2_0_rprelu1_shi_8_q0);

    layer2_0_rprelu1_shi_7_U : component FracNet_T_layer2_iVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_0_rprelu1_shi_7_ce0,
        q0 => layer2_0_rprelu1_shi_7_q0);

    layer2_0_rprelu1_shi_6_U : component FracNet_T_layer2_iWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_0_rprelu1_shi_6_ce0,
        q0 => layer2_0_rprelu1_shi_6_q0);

    layer2_0_rprelu1_shi_5_U : component FracNet_T_layer2_iXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_0_rprelu1_shi_5_ce0,
        q0 => layer2_0_rprelu1_shi_5_q0);

    layer2_0_rprelu1_shi_4_U : component FracNet_T_layer2_iYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_0_rprelu1_shi_4_ce0,
        q0 => layer2_0_rprelu1_shi_4_q0);

    layer2_0_rprelu1_shi_3_U : component FracNet_T_layer2_iZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_0_rprelu1_shi_3_ce0,
        q0 => layer2_0_rprelu1_shi_3_q0);

    layer2_0_rprelu1_shi_2_U : component FracNet_T_layer2_i0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_0_rprelu1_shi_2_ce0,
        q0 => layer2_0_rprelu1_shi_2_q0);

    layer2_0_rprelu1_shi_1_U : component FracNet_T_layer2_i1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_0_rprelu1_shi_1_ce0,
        q0 => layer2_0_rprelu1_shi_1_q0);

    layer2_0_rprelu1_shi_U : component FracNet_T_layer2_i2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_0_rprelu1_shi_ce0,
        q0 => layer2_0_rprelu1_shi_q0);

    layer2_0_rprelu1_pre_7_U : component FracNet_T_layer2_i3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_0_rprelu1_pre_7_ce0,
        q0 => layer2_0_rprelu1_pre_7_q0);

    layer2_0_rprelu1_pre_6_U : component FracNet_T_layer2_i4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_0_rprelu1_pre_6_ce0,
        q0 => layer2_0_rprelu1_pre_6_q0);

    layer2_0_rprelu1_pre_5_U : component FracNet_T_layer2_i5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_0_rprelu1_pre_5_ce0,
        q0 => layer2_0_rprelu1_pre_5_q0);

    layer2_0_rprelu1_pre_4_U : component FracNet_T_layer2_i6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_0_rprelu1_pre_4_ce0,
        q0 => layer2_0_rprelu1_pre_4_q0);

    layer2_0_rprelu1_pre_3_U : component FracNet_T_layer2_i7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_0_rprelu1_pre_3_ce0,
        q0 => layer2_0_rprelu1_pre_3_q0);

    layer2_0_rprelu1_pre_2_U : component FracNet_T_layer2_i8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_0_rprelu1_pre_2_ce0,
        q0 => layer2_0_rprelu1_pre_2_q0);

    layer2_0_rprelu1_pre_1_U : component FracNet_T_layer2_i9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_0_rprelu1_pre_1_ce0,
        q0 => layer2_0_rprelu1_pre_1_q0);

    layer2_0_rprelu1_pre_U : component FracNet_T_layer2_jab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_0_rprelu1_pre_ce0,
        q0 => layer2_0_rprelu1_pre_q0);

    layer2_0_conv2_thres_7_U : component FracNet_T_layer2_jbb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_0_conv2_thres_7_ce0,
        q0 => layer2_0_conv2_thres_7_q0);

    layer2_0_conv2_thres_6_U : component FracNet_T_layer2_jcb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_0_conv2_thres_6_ce0,
        q0 => layer2_0_conv2_thres_6_q0);

    layer2_0_conv2_thres_5_U : component FracNet_T_layer2_jdb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_0_conv2_thres_5_ce0,
        q0 => layer2_0_conv2_thres_5_q0);

    layer2_0_conv2_thres_4_U : component FracNet_T_layer2_jeb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_0_conv2_thres_4_ce0,
        q0 => layer2_0_conv2_thres_4_q0);

    layer2_0_conv2_thres_3_U : component FracNet_T_layer2_jfb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_0_conv2_thres_3_ce0,
        q0 => layer2_0_conv2_thres_3_q0);

    layer2_0_conv2_thres_2_U : component FracNet_T_layer2_jgb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_0_conv2_thres_2_ce0,
        q0 => layer2_0_conv2_thres_2_q0);

    layer2_0_conv2_thres_1_U : component FracNet_T_layer2_jhb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_0_conv2_thres_1_ce0,
        q0 => layer2_0_conv2_thres_1_q0);

    layer2_0_conv2_thres_U : component FracNet_T_layer2_jib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_0_conv2_thres_ce0,
        q0 => layer2_0_conv2_thres_q0);

    layer2_0_bn2_weight_7_U : component FracNet_T_layer2_jjb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_0_bn2_weight_7_ce0,
        q0 => layer2_0_bn2_weight_7_q0);

    layer2_0_bn2_weight_6_U : component FracNet_T_layer2_jkb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_0_bn2_weight_6_ce0,
        q0 => layer2_0_bn2_weight_6_q0);

    layer2_0_bn2_weight_5_U : component FracNet_T_layer2_jlb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_0_bn2_weight_5_ce0,
        q0 => layer2_0_bn2_weight_5_q0);

    layer2_0_bn2_weight_4_U : component FracNet_T_layer2_jmb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_0_bn2_weight_4_ce0,
        q0 => layer2_0_bn2_weight_4_q0);

    layer2_0_bn2_weight_3_U : component FracNet_T_layer2_jnb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_0_bn2_weight_3_ce0,
        q0 => layer2_0_bn2_weight_3_q0);

    layer2_0_bn2_weight_2_U : component FracNet_T_layer2_job
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_0_bn2_weight_2_ce0,
        q0 => layer2_0_bn2_weight_2_q0);

    layer2_0_bn2_weight_1_U : component FracNet_T_layer2_jpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_0_bn2_weight_1_ce0,
        q0 => layer2_0_bn2_weight_1_q0);

    layer2_0_bn2_weight_s_U : component FracNet_T_layer2_jqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_0_bn2_weight_s_ce0,
        q0 => layer2_0_bn2_weight_s_q0);

    layer2_0_bn4_weight_7_U : component FracNet_T_layer2_jrb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_0_bn4_weight_7_ce0,
        q0 => layer2_0_bn4_weight_7_q0);

    layer2_0_bn4_weight_6_U : component FracNet_T_layer2_jsb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_0_bn4_weight_6_ce0,
        q0 => layer2_0_bn4_weight_6_q0);

    layer2_0_bn4_weight_5_U : component FracNet_T_layer2_jtb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_0_bn4_weight_5_ce0,
        q0 => layer2_0_bn4_weight_5_q0);

    layer2_0_bn4_weight_4_U : component FracNet_T_layer2_jub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_0_bn4_weight_4_ce0,
        q0 => layer2_0_bn4_weight_4_q0);

    layer2_0_bn4_weight_3_U : component FracNet_T_layer2_jvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_0_bn4_weight_3_ce0,
        q0 => layer2_0_bn4_weight_3_q0);

    layer2_0_bn4_weight_2_U : component FracNet_T_layer2_jwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_0_bn4_weight_2_ce0,
        q0 => layer2_0_bn4_weight_2_q0);

    layer2_0_bn4_weight_1_U : component FracNet_T_layer2_jxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_0_bn4_weight_1_ce0,
        q0 => layer2_0_bn4_weight_1_q0);

    layer2_0_bn4_weight_s_U : component FracNet_T_layer2_jyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_0_bn4_weight_s_ce0,
        q0 => layer2_0_bn4_weight_s_q0);

    layer2_0_bn2_bias_fi_7_U : component FracNet_T_layer2_jzb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_0_bn2_bias_fi_7_ce0,
        q0 => layer2_0_bn2_bias_fi_7_q0);

    layer2_0_bn2_bias_fi_6_U : component FracNet_T_layer2_jAb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_0_bn2_bias_fi_6_ce0,
        q0 => layer2_0_bn2_bias_fi_6_q0);

    layer2_0_bn2_bias_fi_5_U : component FracNet_T_layer2_jBb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_0_bn2_bias_fi_5_ce0,
        q0 => layer2_0_bn2_bias_fi_5_q0);

    layer2_0_bn2_bias_fi_4_U : component FracNet_T_layer2_jCb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_0_bn2_bias_fi_4_ce0,
        q0 => layer2_0_bn2_bias_fi_4_q0);

    layer2_0_bn2_bias_fi_3_U : component FracNet_T_layer2_jDb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_0_bn2_bias_fi_3_ce0,
        q0 => layer2_0_bn2_bias_fi_3_q0);

    layer2_0_bn2_bias_fi_2_U : component FracNet_T_layer2_jEb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_0_bn2_bias_fi_2_ce0,
        q0 => layer2_0_bn2_bias_fi_2_q0);

    layer2_0_bn2_bias_fi_1_U : component FracNet_T_layer2_jFb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_0_bn2_bias_fi_1_ce0,
        q0 => layer2_0_bn2_bias_fi_1_q0);

    layer2_0_bn2_bias_fi_U : component FracNet_T_layer2_jGb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_0_bn2_bias_fi_ce0,
        q0 => layer2_0_bn2_bias_fi_q0);

    layer2_0_bn4_bias_fi_7_U : component FracNet_T_layer2_jHb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_0_bn4_bias_fi_7_ce0,
        q0 => layer2_0_bn4_bias_fi_7_q0);

    layer2_0_bn4_bias_fi_6_U : component FracNet_T_layer2_jIb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_0_bn4_bias_fi_6_ce0,
        q0 => layer2_0_bn4_bias_fi_6_q0);

    layer2_0_bn4_bias_fi_5_U : component FracNet_T_layer2_jJb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_0_bn4_bias_fi_5_ce0,
        q0 => layer2_0_bn4_bias_fi_5_q0);

    layer2_0_bn4_bias_fi_4_U : component FracNet_T_layer2_jKb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_0_bn4_bias_fi_4_ce0,
        q0 => layer2_0_bn4_bias_fi_4_q0);

    layer2_0_bn4_bias_fi_3_U : component FracNet_T_layer2_jLb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_0_bn4_bias_fi_3_ce0,
        q0 => layer2_0_bn4_bias_fi_3_q0);

    layer2_0_bn4_bias_fi_2_U : component FracNet_T_layer2_jMb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_0_bn4_bias_fi_2_ce0,
        q0 => layer2_0_bn4_bias_fi_2_q0);

    layer2_0_bn4_bias_fi_1_U : component FracNet_T_layer2_jNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_0_bn4_bias_fi_1_ce0,
        q0 => layer2_0_bn4_bias_fi_1_q0);

    layer2_0_bn4_bias_fi_U : component FracNet_T_layer2_jOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_0_bn4_bias_fi_ce0,
        q0 => layer2_0_bn4_bias_fi_q0);

    layer2_0_rprelu2_shi_15_U : component FracNet_T_layer2_jPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_0_rprelu2_shi_15_ce0,
        q0 => layer2_0_rprelu2_shi_15_q0);

    layer2_0_rprelu2_shi_14_U : component FracNet_T_layer2_jQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_0_rprelu2_shi_14_ce0,
        q0 => layer2_0_rprelu2_shi_14_q0);

    layer2_0_rprelu2_shi_13_U : component FracNet_T_layer2_jRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_0_rprelu2_shi_13_ce0,
        q0 => layer2_0_rprelu2_shi_13_q0);

    layer2_0_rprelu2_shi_12_U : component FracNet_T_layer2_jSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_0_rprelu2_shi_12_ce0,
        q0 => layer2_0_rprelu2_shi_12_q0);

    layer2_0_rprelu2_shi_11_U : component FracNet_T_layer2_jTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_0_rprelu2_shi_11_ce0,
        q0 => layer2_0_rprelu2_shi_11_q0);

    layer2_0_rprelu2_shi_10_U : component FracNet_T_layer2_jUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_0_rprelu2_shi_10_ce0,
        q0 => layer2_0_rprelu2_shi_10_q0);

    layer2_0_rprelu2_shi_9_U : component FracNet_T_layer2_jVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_0_rprelu2_shi_9_ce0,
        q0 => layer2_0_rprelu2_shi_9_q0);

    layer2_0_rprelu2_shi_8_U : component FracNet_T_layer2_jWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_0_rprelu2_shi_8_ce0,
        q0 => layer2_0_rprelu2_shi_8_q0);

    layer2_0_rprelu2_shi_7_U : component FracNet_T_layer2_jXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_0_rprelu2_shi_7_ce0,
        q0 => layer2_0_rprelu2_shi_7_q0);

    layer2_0_rprelu2_shi_6_U : component FracNet_T_layer2_jYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_0_rprelu2_shi_6_ce0,
        q0 => layer2_0_rprelu2_shi_6_q0);

    layer2_0_rprelu2_shi_5_U : component FracNet_T_layer2_jZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_0_rprelu2_shi_5_ce0,
        q0 => layer2_0_rprelu2_shi_5_q0);

    layer2_0_rprelu2_shi_4_U : component FracNet_T_layer2_j0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_0_rprelu2_shi_4_ce0,
        q0 => layer2_0_rprelu2_shi_4_q0);

    layer2_0_rprelu2_shi_3_U : component FracNet_T_layer2_j1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_0_rprelu2_shi_3_ce0,
        q0 => layer2_0_rprelu2_shi_3_q0);

    layer2_0_rprelu2_shi_2_U : component FracNet_T_layer2_j2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_0_rprelu2_shi_2_ce0,
        q0 => layer2_0_rprelu2_shi_2_q0);

    layer2_0_rprelu2_shi_1_U : component FracNet_T_layer2_j3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_0_rprelu2_shi_1_ce0,
        q0 => layer2_0_rprelu2_shi_1_q0);

    layer2_0_rprelu2_shi_U : component FracNet_T_layer2_j4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_0_rprelu2_shi_ce0,
        q0 => layer2_0_rprelu2_shi_q0);

    layer2_0_rprelu2_pre_7_U : component FracNet_T_layer2_j5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_0_rprelu2_pre_7_ce0,
        q0 => layer2_0_rprelu2_pre_7_q0);

    layer2_0_rprelu2_pre_6_U : component FracNet_T_layer2_j6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_0_rprelu2_pre_6_ce0,
        q0 => layer2_0_rprelu2_pre_6_q0);

    layer2_0_rprelu2_pre_5_U : component FracNet_T_layer2_j7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_0_rprelu2_pre_5_ce0,
        q0 => layer2_0_rprelu2_pre_5_q0);

    layer2_0_rprelu2_pre_4_U : component FracNet_T_layer2_j8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_0_rprelu2_pre_4_ce0,
        q0 => layer2_0_rprelu2_pre_4_q0);

    layer2_0_rprelu2_pre_3_U : component FracNet_T_layer2_j9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_0_rprelu2_pre_3_ce0,
        q0 => layer2_0_rprelu2_pre_3_q0);

    layer2_0_rprelu2_pre_2_U : component FracNet_T_layer2_kab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_0_rprelu2_pre_2_ce0,
        q0 => layer2_0_rprelu2_pre_2_q0);

    layer2_0_rprelu2_pre_1_U : component FracNet_T_layer2_kbb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_0_rprelu2_pre_1_ce0,
        q0 => layer2_0_rprelu2_pre_1_q0);

    layer2_0_rprelu2_pre_U : component FracNet_T_layer2_kcb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_0_rprelu2_pre_ce0,
        q0 => layer2_0_rprelu2_pre_q0);

    layer2_1_conv1_thres_7_U : component FracNet_T_layer2_kdb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_1_conv1_thres_7_ce0,
        q0 => layer2_1_conv1_thres_7_q0);

    layer2_1_conv1_thres_6_U : component FracNet_T_layer2_keb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_1_conv1_thres_6_ce0,
        q0 => layer2_1_conv1_thres_6_q0);

    layer2_1_conv1_thres_5_U : component FracNet_T_layer2_kfb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_1_conv1_thres_5_ce0,
        q0 => layer2_1_conv1_thres_5_q0);

    layer2_1_conv1_thres_4_U : component FracNet_T_layer2_kgb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_1_conv1_thres_4_ce0,
        q0 => layer2_1_conv1_thres_4_q0);

    layer2_1_conv1_thres_3_U : component FracNet_T_layer2_khb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_1_conv1_thres_3_ce0,
        q0 => layer2_1_conv1_thres_3_q0);

    layer2_1_conv1_thres_2_U : component FracNet_T_layer2_kib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_1_conv1_thres_2_ce0,
        q0 => layer2_1_conv1_thres_2_q0);

    layer2_1_conv1_thres_1_U : component FracNet_T_layer2_kjb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_1_conv1_thres_1_ce0,
        q0 => layer2_1_conv1_thres_1_q0);

    layer2_1_conv1_thres_U : component FracNet_T_layer2_kkb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_1_conv1_thres_ce0,
        q0 => layer2_1_conv1_thres_q0);

    layer2_1_bn1_weight_7_U : component FracNet_T_layer2_klb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_1_bn1_weight_7_ce0,
        q0 => layer2_1_bn1_weight_7_q0);

    layer2_1_bn1_weight_6_U : component FracNet_T_layer2_kmb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_1_bn1_weight_6_ce0,
        q0 => layer2_1_bn1_weight_6_q0);

    layer2_1_bn1_weight_5_U : component FracNet_T_layer2_knb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_1_bn1_weight_5_ce0,
        q0 => layer2_1_bn1_weight_5_q0);

    layer2_1_bn1_weight_4_U : component FracNet_T_layer2_kob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_1_bn1_weight_4_ce0,
        q0 => layer2_1_bn1_weight_4_q0);

    layer2_1_bn1_weight_3_U : component FracNet_T_layer2_kpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_1_bn1_weight_3_ce0,
        q0 => layer2_1_bn1_weight_3_q0);

    layer2_1_bn1_weight_2_U : component FracNet_T_layer2_kqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_1_bn1_weight_2_ce0,
        q0 => layer2_1_bn1_weight_2_q0);

    layer2_1_bn1_weight_1_U : component FracNet_T_layer2_krb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_1_bn1_weight_1_ce0,
        q0 => layer2_1_bn1_weight_1_q0);

    layer2_1_bn1_weight_s_U : component FracNet_T_layer2_ksb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_1_bn1_weight_s_ce0,
        q0 => layer2_1_bn1_weight_s_q0);

    layer2_1_bn3_weight_7_U : component FracNet_T_layer2_ktb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_1_bn3_weight_7_ce0,
        q0 => layer2_1_bn3_weight_7_q0);

    layer2_1_bn3_weight_6_U : component FracNet_T_layer2_kub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_1_bn3_weight_6_ce0,
        q0 => layer2_1_bn3_weight_6_q0);

    layer2_1_bn3_weight_5_U : component FracNet_T_layer2_kvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_1_bn3_weight_5_ce0,
        q0 => layer2_1_bn3_weight_5_q0);

    layer2_1_bn3_weight_4_U : component FracNet_T_layer2_kwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_1_bn3_weight_4_ce0,
        q0 => layer2_1_bn3_weight_4_q0);

    layer2_1_bn3_weight_3_U : component FracNet_T_layer2_kxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_1_bn3_weight_3_ce0,
        q0 => layer2_1_bn3_weight_3_q0);

    layer2_1_bn3_weight_2_U : component FracNet_T_layer2_kyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_1_bn3_weight_2_ce0,
        q0 => layer2_1_bn3_weight_2_q0);

    layer2_1_bn3_weight_1_U : component FracNet_T_layer2_kzb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_1_bn3_weight_1_ce0,
        q0 => layer2_1_bn3_weight_1_q0);

    layer2_1_bn3_weight_s_U : component FracNet_T_layer2_kAb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_1_bn3_weight_s_ce0,
        q0 => layer2_1_bn3_weight_s_q0);

    layer2_1_bn1_bias_fi_7_U : component FracNet_T_layer2_kBb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_1_bn1_bias_fi_7_ce0,
        q0 => layer2_1_bn1_bias_fi_7_q0);

    layer2_1_bn1_bias_fi_6_U : component FracNet_T_layer2_kCb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_1_bn1_bias_fi_6_ce0,
        q0 => layer2_1_bn1_bias_fi_6_q0);

    layer2_1_bn1_bias_fi_5_U : component FracNet_T_layer2_kDb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_1_bn1_bias_fi_5_ce0,
        q0 => layer2_1_bn1_bias_fi_5_q0);

    layer2_1_bn1_bias_fi_4_U : component FracNet_T_layer2_kEb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_1_bn1_bias_fi_4_ce0,
        q0 => layer2_1_bn1_bias_fi_4_q0);

    layer2_1_bn1_bias_fi_3_U : component FracNet_T_layer2_kFb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_1_bn1_bias_fi_3_ce0,
        q0 => layer2_1_bn1_bias_fi_3_q0);

    layer2_1_bn1_bias_fi_2_U : component FracNet_T_layer2_kGb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_1_bn1_bias_fi_2_ce0,
        q0 => layer2_1_bn1_bias_fi_2_q0);

    layer2_1_bn1_bias_fi_1_U : component FracNet_T_layer2_kHb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_1_bn1_bias_fi_1_ce0,
        q0 => layer2_1_bn1_bias_fi_1_q0);

    layer2_1_bn1_bias_fi_U : component FracNet_T_layer2_kIb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_1_bn1_bias_fi_ce0,
        q0 => layer2_1_bn1_bias_fi_q0);

    layer2_1_bn3_bias_fi_7_U : component FracNet_T_layer2_kJb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_1_bn3_bias_fi_7_ce0,
        q0 => layer2_1_bn3_bias_fi_7_q0);

    layer2_1_bn3_bias_fi_6_U : component FracNet_T_layer2_kKb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_1_bn3_bias_fi_6_ce0,
        q0 => layer2_1_bn3_bias_fi_6_q0);

    layer2_1_bn3_bias_fi_5_U : component FracNet_T_layer2_kLb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_1_bn3_bias_fi_5_ce0,
        q0 => layer2_1_bn3_bias_fi_5_q0);

    layer2_1_bn3_bias_fi_4_U : component FracNet_T_layer2_kMb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_1_bn3_bias_fi_4_ce0,
        q0 => layer2_1_bn3_bias_fi_4_q0);

    layer2_1_bn3_bias_fi_3_U : component FracNet_T_layer2_kNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_1_bn3_bias_fi_3_ce0,
        q0 => layer2_1_bn3_bias_fi_3_q0);

    layer2_1_bn3_bias_fi_2_U : component FracNet_T_layer2_kOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_1_bn3_bias_fi_2_ce0,
        q0 => layer2_1_bn3_bias_fi_2_q0);

    layer2_1_bn3_bias_fi_1_U : component FracNet_T_layer2_kPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_1_bn3_bias_fi_1_ce0,
        q0 => layer2_1_bn3_bias_fi_1_q0);

    layer2_1_bn3_bias_fi_U : component FracNet_T_layer2_kQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_1_bn3_bias_fi_ce0,
        q0 => layer2_1_bn3_bias_fi_q0);

    layer2_1_rprelu1_shi_15_U : component FracNet_T_layer2_kRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_1_rprelu1_shi_15_ce0,
        q0 => layer2_1_rprelu1_shi_15_q0);

    layer2_1_rprelu1_shi_14_U : component FracNet_T_layer2_kSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_1_rprelu1_shi_14_ce0,
        q0 => layer2_1_rprelu1_shi_14_q0);

    layer2_1_rprelu1_shi_13_U : component FracNet_T_layer2_kTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_1_rprelu1_shi_13_ce0,
        q0 => layer2_1_rprelu1_shi_13_q0);

    layer2_1_rprelu1_shi_12_U : component FracNet_T_layer2_kUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_1_rprelu1_shi_12_ce0,
        q0 => layer2_1_rprelu1_shi_12_q0);

    layer2_1_rprelu1_shi_11_U : component FracNet_T_layer2_kVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_1_rprelu1_shi_11_ce0,
        q0 => layer2_1_rprelu1_shi_11_q0);

    layer2_1_rprelu1_shi_10_U : component FracNet_T_layer2_kWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_1_rprelu1_shi_10_ce0,
        q0 => layer2_1_rprelu1_shi_10_q0);

    layer2_1_rprelu1_shi_9_U : component FracNet_T_layer2_kXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_1_rprelu1_shi_9_ce0,
        q0 => layer2_1_rprelu1_shi_9_q0);

    layer2_1_rprelu1_shi_8_U : component FracNet_T_layer2_kYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_1_rprelu1_shi_8_ce0,
        q0 => layer2_1_rprelu1_shi_8_q0);

    layer2_1_rprelu1_shi_7_U : component FracNet_T_layer2_kZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_1_rprelu1_shi_7_ce0,
        q0 => layer2_1_rprelu1_shi_7_q0);

    layer2_1_rprelu1_shi_6_U : component FracNet_T_layer2_k0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_1_rprelu1_shi_6_ce0,
        q0 => layer2_1_rprelu1_shi_6_q0);

    layer2_1_rprelu1_shi_5_U : component FracNet_T_layer2_k1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_1_rprelu1_shi_5_ce0,
        q0 => layer2_1_rprelu1_shi_5_q0);

    layer2_1_rprelu1_shi_4_U : component FracNet_T_layer2_k2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_1_rprelu1_shi_4_ce0,
        q0 => layer2_1_rprelu1_shi_4_q0);

    layer2_1_rprelu1_shi_3_U : component FracNet_T_layer2_k3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_1_rprelu1_shi_3_ce0,
        q0 => layer2_1_rprelu1_shi_3_q0);

    layer2_1_rprelu1_shi_2_U : component FracNet_T_layer2_k4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_1_rprelu1_shi_2_ce0,
        q0 => layer2_1_rprelu1_shi_2_q0);

    layer2_1_rprelu1_shi_1_U : component FracNet_T_layer2_k5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_1_rprelu1_shi_1_ce0,
        q0 => layer2_1_rprelu1_shi_1_q0);

    layer2_1_rprelu1_shi_U : component FracNet_T_layer2_k6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_1_rprelu1_shi_ce0,
        q0 => layer2_1_rprelu1_shi_q0);

    layer2_1_rprelu1_pre_7_U : component FracNet_T_layer2_k7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_1_rprelu1_pre_7_ce0,
        q0 => layer2_1_rprelu1_pre_7_q0);

    layer2_1_rprelu1_pre_6_U : component FracNet_T_layer2_k8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_1_rprelu1_pre_6_ce0,
        q0 => layer2_1_rprelu1_pre_6_q0);

    layer2_1_rprelu1_pre_5_U : component FracNet_T_layer2_k9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_1_rprelu1_pre_5_ce0,
        q0 => layer2_1_rprelu1_pre_5_q0);

    layer2_1_rprelu1_pre_4_U : component FracNet_T_layer2_lab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_1_rprelu1_pre_4_ce0,
        q0 => layer2_1_rprelu1_pre_4_q0);

    layer2_1_rprelu1_pre_3_U : component FracNet_T_layer2_lbb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_1_rprelu1_pre_3_ce0,
        q0 => layer2_1_rprelu1_pre_3_q0);

    layer2_1_rprelu1_pre_2_U : component FracNet_T_layer2_lcb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_1_rprelu1_pre_2_ce0,
        q0 => layer2_1_rprelu1_pre_2_q0);

    layer2_1_rprelu1_pre_1_U : component FracNet_T_layer2_ldb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_1_rprelu1_pre_1_ce0,
        q0 => layer2_1_rprelu1_pre_1_q0);

    layer2_1_rprelu1_pre_U : component FracNet_T_layer2_leb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_1_rprelu1_pre_ce0,
        q0 => layer2_1_rprelu1_pre_q0);

    layer2_1_conv2_thres_7_U : component FracNet_T_layer2_lfb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_1_conv2_thres_7_ce0,
        q0 => layer2_1_conv2_thres_7_q0);

    layer2_1_conv2_thres_6_U : component FracNet_T_layer2_lgb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_1_conv2_thres_6_ce0,
        q0 => layer2_1_conv2_thres_6_q0);

    layer2_1_conv2_thres_5_U : component FracNet_T_layer2_lhb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_1_conv2_thres_5_ce0,
        q0 => layer2_1_conv2_thres_5_q0);

    layer2_1_conv2_thres_4_U : component FracNet_T_layer2_lib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_1_conv2_thres_4_ce0,
        q0 => layer2_1_conv2_thres_4_q0);

    layer2_1_conv2_thres_3_U : component FracNet_T_layer2_ljb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_1_conv2_thres_3_ce0,
        q0 => layer2_1_conv2_thres_3_q0);

    layer2_1_conv2_thres_2_U : component FracNet_T_layer2_lkb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_1_conv2_thres_2_ce0,
        q0 => layer2_1_conv2_thres_2_q0);

    layer2_1_conv2_thres_1_U : component FracNet_T_layer2_llb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_1_conv2_thres_1_ce0,
        q0 => layer2_1_conv2_thres_1_q0);

    layer2_1_conv2_thres_U : component FracNet_T_layer2_lmb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_1_conv2_thres_ce0,
        q0 => layer2_1_conv2_thres_q0);

    layer2_1_bn2_weight_7_U : component FracNet_T_layer2_lnb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_1_bn2_weight_7_ce0,
        q0 => layer2_1_bn2_weight_7_q0);

    layer2_1_bn2_weight_6_U : component FracNet_T_layer2_lob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_1_bn2_weight_6_ce0,
        q0 => layer2_1_bn2_weight_6_q0);

    layer2_1_bn2_weight_5_U : component FracNet_T_layer2_lpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_1_bn2_weight_5_ce0,
        q0 => layer2_1_bn2_weight_5_q0);

    layer2_1_bn2_weight_4_U : component FracNet_T_layer2_lqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_1_bn2_weight_4_ce0,
        q0 => layer2_1_bn2_weight_4_q0);

    layer2_1_bn2_weight_3_U : component FracNet_T_layer2_lrb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_1_bn2_weight_3_ce0,
        q0 => layer2_1_bn2_weight_3_q0);

    layer2_1_bn2_weight_2_U : component FracNet_T_layer2_lsb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_1_bn2_weight_2_ce0,
        q0 => layer2_1_bn2_weight_2_q0);

    layer2_1_bn2_weight_1_U : component FracNet_T_layer2_ltb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_1_bn2_weight_1_ce0,
        q0 => layer2_1_bn2_weight_1_q0);

    layer2_1_bn2_weight_s_U : component FracNet_T_layer2_lub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_1_bn2_weight_s_ce0,
        q0 => layer2_1_bn2_weight_s_q0);

    layer2_1_bn4_weight_7_U : component FracNet_T_layer2_lvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_1_bn4_weight_7_ce0,
        q0 => layer2_1_bn4_weight_7_q0);

    layer2_1_bn4_weight_6_U : component FracNet_T_layer2_lwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_1_bn4_weight_6_ce0,
        q0 => layer2_1_bn4_weight_6_q0);

    layer2_1_bn4_weight_5_U : component FracNet_T_layer2_lxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_1_bn4_weight_5_ce0,
        q0 => layer2_1_bn4_weight_5_q0);

    layer2_1_bn4_weight_4_U : component FracNet_T_layer2_lyb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_1_bn4_weight_4_ce0,
        q0 => layer2_1_bn4_weight_4_q0);

    layer2_1_bn4_weight_3_U : component FracNet_T_layer2_lzb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_1_bn4_weight_3_ce0,
        q0 => layer2_1_bn4_weight_3_q0);

    layer2_1_bn4_weight_2_U : component FracNet_T_layer2_lAb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_1_bn4_weight_2_ce0,
        q0 => layer2_1_bn4_weight_2_q0);

    layer2_1_bn4_weight_1_U : component FracNet_T_layer2_lBb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_1_bn4_weight_1_ce0,
        q0 => layer2_1_bn4_weight_1_q0);

    layer2_1_bn4_weight_s_U : component FracNet_T_layer2_lCb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_1_bn4_weight_s_ce0,
        q0 => layer2_1_bn4_weight_s_q0);

    layer2_1_bn2_bias_fi_7_U : component FracNet_T_layer2_lDb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_1_bn2_bias_fi_7_ce0,
        q0 => layer2_1_bn2_bias_fi_7_q0);

    layer2_1_bn2_bias_fi_6_U : component FracNet_T_layer2_lEb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_1_bn2_bias_fi_6_ce0,
        q0 => layer2_1_bn2_bias_fi_6_q0);

    layer2_1_bn2_bias_fi_5_U : component FracNet_T_layer2_lFb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_1_bn2_bias_fi_5_ce0,
        q0 => layer2_1_bn2_bias_fi_5_q0);

    layer2_1_bn2_bias_fi_4_U : component FracNet_T_layer2_lGb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_1_bn2_bias_fi_4_ce0,
        q0 => layer2_1_bn2_bias_fi_4_q0);

    layer2_1_bn2_bias_fi_3_U : component FracNet_T_layer2_lHb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_1_bn2_bias_fi_3_ce0,
        q0 => layer2_1_bn2_bias_fi_3_q0);

    layer2_1_bn2_bias_fi_2_U : component FracNet_T_layer2_lIb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_1_bn2_bias_fi_2_ce0,
        q0 => layer2_1_bn2_bias_fi_2_q0);

    layer2_1_bn2_bias_fi_1_U : component FracNet_T_layer2_lJb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_1_bn2_bias_fi_1_ce0,
        q0 => layer2_1_bn2_bias_fi_1_q0);

    layer2_1_bn2_bias_fi_U : component FracNet_T_layer2_lKb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_1_bn2_bias_fi_ce0,
        q0 => layer2_1_bn2_bias_fi_q0);

    layer2_1_bn4_bias_fi_7_U : component FracNet_T_layer2_lLb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_1_bn4_bias_fi_7_ce0,
        q0 => layer2_1_bn4_bias_fi_7_q0);

    layer2_1_bn4_bias_fi_6_U : component FracNet_T_layer2_lMb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_1_bn4_bias_fi_6_ce0,
        q0 => layer2_1_bn4_bias_fi_6_q0);

    layer2_1_bn4_bias_fi_5_U : component FracNet_T_layer2_lNb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_1_bn4_bias_fi_5_ce0,
        q0 => layer2_1_bn4_bias_fi_5_q0);

    layer2_1_bn4_bias_fi_4_U : component FracNet_T_layer2_lOb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_1_bn4_bias_fi_4_ce0,
        q0 => layer2_1_bn4_bias_fi_4_q0);

    layer2_1_bn4_bias_fi_3_U : component FracNet_T_layer2_lPb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_1_bn4_bias_fi_3_ce0,
        q0 => layer2_1_bn4_bias_fi_3_q0);

    layer2_1_bn4_bias_fi_2_U : component FracNet_T_layer2_lQb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_1_bn4_bias_fi_2_ce0,
        q0 => layer2_1_bn4_bias_fi_2_q0);

    layer2_1_bn4_bias_fi_1_U : component FracNet_T_layer2_lRb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_1_bn4_bias_fi_1_ce0,
        q0 => layer2_1_bn4_bias_fi_1_q0);

    layer2_1_bn4_bias_fi_U : component FracNet_T_layer2_lSb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_1_bn4_bias_fi_ce0,
        q0 => layer2_1_bn4_bias_fi_q0);

    layer2_1_rprelu2_shi_15_U : component FracNet_T_layer2_lTb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_1_rprelu2_shi_15_ce0,
        q0 => layer2_1_rprelu2_shi_15_q0);

    layer2_1_rprelu2_shi_14_U : component FracNet_T_layer2_lUb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_1_rprelu2_shi_14_ce0,
        q0 => layer2_1_rprelu2_shi_14_q0);

    layer2_1_rprelu2_shi_13_U : component FracNet_T_layer2_lVb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_1_rprelu2_shi_13_ce0,
        q0 => layer2_1_rprelu2_shi_13_q0);

    layer2_1_rprelu2_shi_12_U : component FracNet_T_layer2_lWb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_1_rprelu2_shi_12_ce0,
        q0 => layer2_1_rprelu2_shi_12_q0);

    layer2_1_rprelu2_shi_11_U : component FracNet_T_layer2_lXb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_1_rprelu2_shi_11_ce0,
        q0 => layer2_1_rprelu2_shi_11_q0);

    layer2_1_rprelu2_shi_10_U : component FracNet_T_layer2_lYb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_1_rprelu2_shi_10_ce0,
        q0 => layer2_1_rprelu2_shi_10_q0);

    layer2_1_rprelu2_shi_9_U : component FracNet_T_layer2_lZb_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_1_rprelu2_shi_9_ce0,
        q0 => layer2_1_rprelu2_shi_9_q0);

    layer2_1_rprelu2_shi_8_U : component FracNet_T_layer2_l0b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_1_rprelu2_shi_8_ce0,
        q0 => layer2_1_rprelu2_shi_8_q0);

    layer2_1_rprelu2_shi_7_U : component FracNet_T_layer2_l1b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_1_rprelu2_shi_7_ce0,
        q0 => layer2_1_rprelu2_shi_7_q0);

    layer2_1_rprelu2_shi_6_U : component FracNet_T_layer2_l2b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_1_rprelu2_shi_6_ce0,
        q0 => layer2_1_rprelu2_shi_6_q0);

    layer2_1_rprelu2_shi_5_U : component FracNet_T_layer2_l3b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_1_rprelu2_shi_5_ce0,
        q0 => layer2_1_rprelu2_shi_5_q0);

    layer2_1_rprelu2_shi_4_U : component FracNet_T_layer2_l4b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_1_rprelu2_shi_4_ce0,
        q0 => layer2_1_rprelu2_shi_4_q0);

    layer2_1_rprelu2_shi_3_U : component FracNet_T_layer2_l5b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_1_rprelu2_shi_3_ce0,
        q0 => layer2_1_rprelu2_shi_3_q0);

    layer2_1_rprelu2_shi_2_U : component FracNet_T_layer2_l6b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_1_rprelu2_shi_2_ce0,
        q0 => layer2_1_rprelu2_shi_2_q0);

    layer2_1_rprelu2_shi_1_U : component FracNet_T_layer2_l7b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_1_rprelu2_shi_1_ce0,
        q0 => layer2_1_rprelu2_shi_1_q0);

    layer2_1_rprelu2_shi_U : component FracNet_T_layer2_l8b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_1_rprelu2_shi_ce0,
        q0 => layer2_1_rprelu2_shi_q0);

    layer2_1_rprelu2_pre_7_U : component FracNet_T_layer2_l9b
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_1_rprelu2_pre_7_ce0,
        q0 => layer2_1_rprelu2_pre_7_q0);

    layer2_1_rprelu2_pre_6_U : component FracNet_T_layer2_mab
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_1_rprelu2_pre_6_ce0,
        q0 => layer2_1_rprelu2_pre_6_q0);

    layer2_1_rprelu2_pre_5_U : component FracNet_T_layer2_mbb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_1_rprelu2_pre_5_ce0,
        q0 => layer2_1_rprelu2_pre_5_q0);

    layer2_1_rprelu2_pre_4_U : component FracNet_T_layer2_mcb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_1_rprelu2_pre_4_ce0,
        q0 => layer2_1_rprelu2_pre_4_q0);

    layer2_1_rprelu2_pre_3_U : component FracNet_T_layer2_mdb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_1_rprelu2_pre_3_ce0,
        q0 => layer2_1_rprelu2_pre_3_q0);

    layer2_1_rprelu2_pre_2_U : component FracNet_T_layer2_meb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_1_rprelu2_pre_2_ce0,
        q0 => layer2_1_rprelu2_pre_2_q0);

    layer2_1_rprelu2_pre_1_U : component FracNet_T_layer2_mfb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_1_rprelu2_pre_1_ce0,
        q0 => layer2_1_rprelu2_pre_1_q0);

    layer2_1_rprelu2_pre_U : component FracNet_T_layer2_mgb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_1_rprelu2_pre_ce0,
        q0 => layer2_1_rprelu2_pre_q0);

    layer2_2_conv1_thres_7_U : component FracNet_T_layer2_mhb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_2_conv1_thres_7_ce0,
        q0 => layer2_2_conv1_thres_7_q0);

    layer2_2_conv1_thres_6_U : component FracNet_T_layer2_mib
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_2_conv1_thres_6_ce0,
        q0 => layer2_2_conv1_thres_6_q0);

    layer2_2_conv1_thres_5_U : component FracNet_T_layer2_mjb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_2_conv1_thres_5_ce0,
        q0 => layer2_2_conv1_thres_5_q0);

    layer2_2_conv1_thres_4_U : component FracNet_T_layer2_mkb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_2_conv1_thres_4_ce0,
        q0 => layer2_2_conv1_thres_4_q0);

    layer2_2_conv1_thres_3_U : component FracNet_T_layer2_mlb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_2_conv1_thres_3_ce0,
        q0 => layer2_2_conv1_thres_3_q0);

    layer2_2_conv1_thres_2_U : component FracNet_T_layer2_mmb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_2_conv1_thres_2_ce0,
        q0 => layer2_2_conv1_thres_2_q0);

    layer2_2_conv1_thres_1_U : component FracNet_T_layer2_mnb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_2_conv1_thres_1_ce0,
        q0 => layer2_2_conv1_thres_1_q0);

    layer2_2_conv1_thres_U : component FracNet_T_layer2_mob
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_2_conv1_thres_ce0,
        q0 => layer2_2_conv1_thres_q0);

    layer2_2_bn1_weight_7_U : component FracNet_T_layer2_mpb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_2_bn1_weight_7_ce0,
        q0 => layer2_2_bn1_weight_7_q0);

    layer2_2_bn1_weight_6_U : component FracNet_T_layer2_mqb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_2_bn1_weight_6_ce0,
        q0 => layer2_2_bn1_weight_6_q0);

    layer2_2_bn1_weight_5_U : component FracNet_T_layer2_mrb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_2_bn1_weight_5_ce0,
        q0 => layer2_2_bn1_weight_5_q0);

    layer2_2_bn1_weight_4_U : component FracNet_T_layer2_msb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_2_bn1_weight_4_ce0,
        q0 => layer2_2_bn1_weight_4_q0);

    layer2_2_bn1_weight_3_U : component FracNet_T_layer2_mtb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_2_bn1_weight_3_ce0,
        q0 => layer2_2_bn1_weight_3_q0);

    layer2_2_bn1_weight_2_U : component FracNet_T_layer2_mub
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_2_bn1_weight_2_ce0,
        q0 => layer2_2_bn1_weight_2_q0);

    layer2_2_bn1_weight_1_U : component FracNet_T_layer2_mvb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_2_bn1_weight_1_ce0,
        q0 => layer2_2_bn1_weight_1_q0);

    layer2_2_bn1_weight_s_U : component FracNet_T_layer2_mwb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_2_bn1_weight_s_ce0,
        q0 => layer2_2_bn1_weight_s_q0);

    layer2_2_bn3_weight_7_U : component FracNet_T_layer2_mxb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_2_bn3_weight_7_ce0,
        q0 => layer2_2_bn3_weight_7_q0);

    layer2_2_bn3_weight_6_U : component FracNet_T_layer2_myb
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_2_bn3_weight_6_ce0,
        q0 => layer2_2_bn3_weight_6_q0);

    layer2_2_bn3_weight_5_U : component FracNet_T_layer2_mzc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_2_bn3_weight_5_ce0,
        q0 => layer2_2_bn3_weight_5_q0);

    layer2_2_bn3_weight_4_U : component FracNet_T_layer2_mAc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_2_bn3_weight_4_ce0,
        q0 => layer2_2_bn3_weight_4_q0);

    layer2_2_bn3_weight_3_U : component FracNet_T_layer2_mBc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_2_bn3_weight_3_ce0,
        q0 => layer2_2_bn3_weight_3_q0);

    layer2_2_bn3_weight_2_U : component FracNet_T_layer2_mCc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_2_bn3_weight_2_ce0,
        q0 => layer2_2_bn3_weight_2_q0);

    layer2_2_bn3_weight_1_U : component FracNet_T_layer2_mDc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_2_bn3_weight_1_ce0,
        q0 => layer2_2_bn3_weight_1_q0);

    layer2_2_bn3_weight_s_U : component FracNet_T_layer2_mEc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_2_bn3_weight_s_ce0,
        q0 => layer2_2_bn3_weight_s_q0);

    layer2_2_bn1_bias_fi_7_U : component FracNet_T_layer2_mFc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_2_bn1_bias_fi_7_ce0,
        q0 => layer2_2_bn1_bias_fi_7_q0);

    layer2_2_bn1_bias_fi_6_U : component FracNet_T_layer2_mGc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_2_bn1_bias_fi_6_ce0,
        q0 => layer2_2_bn1_bias_fi_6_q0);

    layer2_2_bn1_bias_fi_5_U : component FracNet_T_layer2_mHc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_2_bn1_bias_fi_5_ce0,
        q0 => layer2_2_bn1_bias_fi_5_q0);

    layer2_2_bn1_bias_fi_4_U : component FracNet_T_layer2_mIc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_2_bn1_bias_fi_4_ce0,
        q0 => layer2_2_bn1_bias_fi_4_q0);

    layer2_2_bn1_bias_fi_3_U : component FracNet_T_layer2_mJc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_2_bn1_bias_fi_3_ce0,
        q0 => layer2_2_bn1_bias_fi_3_q0);

    layer2_2_bn1_bias_fi_2_U : component FracNet_T_layer2_mKc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_2_bn1_bias_fi_2_ce0,
        q0 => layer2_2_bn1_bias_fi_2_q0);

    layer2_2_bn1_bias_fi_1_U : component FracNet_T_layer2_mLc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_2_bn1_bias_fi_1_ce0,
        q0 => layer2_2_bn1_bias_fi_1_q0);

    layer2_2_bn1_bias_fi_U : component FracNet_T_layer2_mMc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_2_bn1_bias_fi_ce0,
        q0 => layer2_2_bn1_bias_fi_q0);

    layer2_2_bn3_bias_fi_7_U : component FracNet_T_layer2_mNc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_2_bn3_bias_fi_7_ce0,
        q0 => layer2_2_bn3_bias_fi_7_q0);

    layer2_2_bn3_bias_fi_6_U : component FracNet_T_layer2_mOc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_2_bn3_bias_fi_6_ce0,
        q0 => layer2_2_bn3_bias_fi_6_q0);

    layer2_2_bn3_bias_fi_5_U : component FracNet_T_layer2_mPc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_2_bn3_bias_fi_5_ce0,
        q0 => layer2_2_bn3_bias_fi_5_q0);

    layer2_2_bn3_bias_fi_4_U : component FracNet_T_layer2_mQc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_2_bn3_bias_fi_4_ce0,
        q0 => layer2_2_bn3_bias_fi_4_q0);

    layer2_2_bn3_bias_fi_3_U : component FracNet_T_layer2_mRc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_2_bn3_bias_fi_3_ce0,
        q0 => layer2_2_bn3_bias_fi_3_q0);

    layer2_2_bn3_bias_fi_2_U : component FracNet_T_layer2_mSc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_2_bn3_bias_fi_2_ce0,
        q0 => layer2_2_bn3_bias_fi_2_q0);

    layer2_2_bn3_bias_fi_1_U : component FracNet_T_layer2_mTc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_2_bn3_bias_fi_1_ce0,
        q0 => layer2_2_bn3_bias_fi_1_q0);

    layer2_2_bn3_bias_fi_U : component FracNet_T_layer2_mUc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_2_bn3_bias_fi_ce0,
        q0 => layer2_2_bn3_bias_fi_q0);

    layer2_2_rprelu1_shi_15_U : component FracNet_T_layer2_mVc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_2_rprelu1_shi_15_ce0,
        q0 => layer2_2_rprelu1_shi_15_q0);

    layer2_2_rprelu1_shi_14_U : component FracNet_T_layer2_mWc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_2_rprelu1_shi_14_ce0,
        q0 => layer2_2_rprelu1_shi_14_q0);

    layer2_2_rprelu1_shi_13_U : component FracNet_T_layer2_mXc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_2_rprelu1_shi_13_ce0,
        q0 => layer2_2_rprelu1_shi_13_q0);

    layer2_2_rprelu1_shi_12_U : component FracNet_T_layer2_mYc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_2_rprelu1_shi_12_ce0,
        q0 => layer2_2_rprelu1_shi_12_q0);

    layer2_2_rprelu1_shi_11_U : component FracNet_T_layer2_mZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_2_rprelu1_shi_11_ce0,
        q0 => layer2_2_rprelu1_shi_11_q0);

    layer2_2_rprelu1_shi_10_U : component FracNet_T_layer2_m0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_2_rprelu1_shi_10_ce0,
        q0 => layer2_2_rprelu1_shi_10_q0);

    layer2_2_rprelu1_shi_9_U : component FracNet_T_layer2_m1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_2_rprelu1_shi_9_ce0,
        q0 => layer2_2_rprelu1_shi_9_q0);

    layer2_2_rprelu1_shi_8_U : component FracNet_T_layer2_m2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_2_rprelu1_shi_8_ce0,
        q0 => layer2_2_rprelu1_shi_8_q0);

    layer2_2_rprelu1_shi_7_U : component FracNet_T_layer2_m3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_2_rprelu1_shi_7_ce0,
        q0 => layer2_2_rprelu1_shi_7_q0);

    layer2_2_rprelu1_shi_6_U : component FracNet_T_layer2_m4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_2_rprelu1_shi_6_ce0,
        q0 => layer2_2_rprelu1_shi_6_q0);

    layer2_2_rprelu1_shi_5_U : component FracNet_T_layer2_m5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_2_rprelu1_shi_5_ce0,
        q0 => layer2_2_rprelu1_shi_5_q0);

    layer2_2_rprelu1_shi_4_U : component FracNet_T_layer2_m6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_2_rprelu1_shi_4_ce0,
        q0 => layer2_2_rprelu1_shi_4_q0);

    layer2_2_rprelu1_shi_3_U : component FracNet_T_layer2_m7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_2_rprelu1_shi_3_ce0,
        q0 => layer2_2_rprelu1_shi_3_q0);

    layer2_2_rprelu1_shi_2_U : component FracNet_T_layer2_m8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_2_rprelu1_shi_2_ce0,
        q0 => layer2_2_rprelu1_shi_2_q0);

    layer2_2_rprelu1_shi_1_U : component FracNet_T_layer2_m9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_2_rprelu1_shi_1_ce0,
        q0 => layer2_2_rprelu1_shi_1_q0);

    layer2_2_rprelu1_shi_U : component FracNet_T_layer2_nac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_2_rprelu1_shi_ce0,
        q0 => layer2_2_rprelu1_shi_q0);

    layer2_2_rprelu1_pre_7_U : component FracNet_T_layer2_nbc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_2_rprelu1_pre_7_ce0,
        q0 => layer2_2_rprelu1_pre_7_q0);

    layer2_2_rprelu1_pre_6_U : component FracNet_T_layer2_ncc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_2_rprelu1_pre_6_ce0,
        q0 => layer2_2_rprelu1_pre_6_q0);

    layer2_2_rprelu1_pre_5_U : component FracNet_T_layer2_ndc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_2_rprelu1_pre_5_ce0,
        q0 => layer2_2_rprelu1_pre_5_q0);

    layer2_2_rprelu1_pre_4_U : component FracNet_T_layer2_nec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_2_rprelu1_pre_4_ce0,
        q0 => layer2_2_rprelu1_pre_4_q0);

    layer2_2_rprelu1_pre_3_U : component FracNet_T_layer2_nfc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_2_rprelu1_pre_3_ce0,
        q0 => layer2_2_rprelu1_pre_3_q0);

    layer2_2_rprelu1_pre_2_U : component FracNet_T_layer2_ngc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_2_rprelu1_pre_2_ce0,
        q0 => layer2_2_rprelu1_pre_2_q0);

    layer2_2_rprelu1_pre_1_U : component FracNet_T_layer2_nhc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_2_rprelu1_pre_1_ce0,
        q0 => layer2_2_rprelu1_pre_1_q0);

    layer2_2_rprelu1_pre_U : component FracNet_T_layer2_nic
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_2_rprelu1_pre_ce0,
        q0 => layer2_2_rprelu1_pre_q0);

    layer2_2_conv2_thres_7_U : component FracNet_T_layer2_njc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer2_2_conv2_thres_7_ce0,
        q0 => layer2_2_conv2_thres_7_q0);

    layer2_2_conv2_thres_6_U : component FracNet_T_layer2_nkc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer2_2_conv2_thres_6_ce0,
        q0 => layer2_2_conv2_thres_6_q0);

    layer2_2_conv2_thres_5_U : component FracNet_T_layer2_nlc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer2_2_conv2_thres_5_ce0,
        q0 => layer2_2_conv2_thres_5_q0);

    layer2_2_conv2_thres_4_U : component FracNet_T_layer2_nmc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer2_2_conv2_thres_4_ce0,
        q0 => layer2_2_conv2_thres_4_q0);

    layer2_2_conv2_thres_3_U : component FracNet_T_layer2_nnc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer2_2_conv2_thres_3_ce0,
        q0 => layer2_2_conv2_thres_3_q0);

    layer2_2_conv2_thres_2_U : component FracNet_T_layer2_noc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer2_2_conv2_thres_2_ce0,
        q0 => layer2_2_conv2_thres_2_q0);

    layer2_2_conv2_thres_1_U : component FracNet_T_layer2_npc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer2_2_conv2_thres_1_ce0,
        q0 => layer2_2_conv2_thres_1_q0);

    layer2_2_conv2_thres_U : component FracNet_T_layer2_nqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer2_2_conv2_thres_ce0,
        q0 => layer2_2_conv2_thres_q0);

    layer2_2_bn2_weight_7_U : component FracNet_T_layer2_nrc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer2_2_bn2_weight_7_ce0,
        q0 => layer2_2_bn2_weight_7_q0);

    layer2_2_bn2_weight_6_U : component FracNet_T_layer2_nsc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer2_2_bn2_weight_6_ce0,
        q0 => layer2_2_bn2_weight_6_q0);

    layer2_2_bn2_weight_5_U : component FracNet_T_layer2_ntc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer2_2_bn2_weight_5_ce0,
        q0 => layer2_2_bn2_weight_5_q0);

    layer2_2_bn2_weight_4_U : component FracNet_T_layer2_nuc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer2_2_bn2_weight_4_ce0,
        q0 => layer2_2_bn2_weight_4_q0);

    layer2_2_bn2_weight_3_U : component FracNet_T_layer2_nvc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer2_2_bn2_weight_3_ce0,
        q0 => layer2_2_bn2_weight_3_q0);

    layer2_2_bn2_weight_2_U : component FracNet_T_layer2_nwc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer2_2_bn2_weight_2_ce0,
        q0 => layer2_2_bn2_weight_2_q0);

    layer2_2_bn2_weight_1_U : component FracNet_T_layer2_nxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer2_2_bn2_weight_1_ce0,
        q0 => layer2_2_bn2_weight_1_q0);

    layer2_2_bn2_weight_s_U : component FracNet_T_layer2_nyc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer2_2_bn2_weight_s_ce0,
        q0 => layer2_2_bn2_weight_s_q0);

    layer2_2_bn4_weight_7_U : component FracNet_T_layer2_nzc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer2_2_bn4_weight_7_ce0,
        q0 => layer2_2_bn4_weight_7_q0);

    layer2_2_bn4_weight_6_U : component FracNet_T_layer2_nAc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer2_2_bn4_weight_6_ce0,
        q0 => layer2_2_bn4_weight_6_q0);

    layer2_2_bn4_weight_5_U : component FracNet_T_layer2_nBc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer2_2_bn4_weight_5_ce0,
        q0 => layer2_2_bn4_weight_5_q0);

    layer2_2_bn4_weight_4_U : component FracNet_T_layer2_nCc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer2_2_bn4_weight_4_ce0,
        q0 => layer2_2_bn4_weight_4_q0);

    layer2_2_bn4_weight_3_U : component FracNet_T_layer2_nDc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer2_2_bn4_weight_3_ce0,
        q0 => layer2_2_bn4_weight_3_q0);

    layer2_2_bn4_weight_2_U : component FracNet_T_layer2_nEc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer2_2_bn4_weight_2_ce0,
        q0 => layer2_2_bn4_weight_2_q0);

    layer2_2_bn4_weight_1_U : component FracNet_T_layer2_nFc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer2_2_bn4_weight_1_ce0,
        q0 => layer2_2_bn4_weight_1_q0);

    layer2_2_bn4_weight_s_U : component FracNet_T_layer2_nGc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer2_2_bn4_weight_s_ce0,
        q0 => layer2_2_bn4_weight_s_q0);

    layer2_2_bn2_bias_fi_7_U : component FracNet_T_layer2_nHc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer2_2_bn2_bias_fi_7_ce0,
        q0 => layer2_2_bn2_bias_fi_7_q0);

    layer2_2_bn2_bias_fi_6_U : component FracNet_T_layer2_nIc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer2_2_bn2_bias_fi_6_ce0,
        q0 => layer2_2_bn2_bias_fi_6_q0);

    layer2_2_bn2_bias_fi_5_U : component FracNet_T_layer2_nJc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer2_2_bn2_bias_fi_5_ce0,
        q0 => layer2_2_bn2_bias_fi_5_q0);

    layer2_2_bn2_bias_fi_4_U : component FracNet_T_layer2_nKc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer2_2_bn2_bias_fi_4_ce0,
        q0 => layer2_2_bn2_bias_fi_4_q0);

    layer2_2_bn2_bias_fi_3_U : component FracNet_T_layer2_nLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer2_2_bn2_bias_fi_3_ce0,
        q0 => layer2_2_bn2_bias_fi_3_q0);

    layer2_2_bn2_bias_fi_2_U : component FracNet_T_layer2_nMc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer2_2_bn2_bias_fi_2_ce0,
        q0 => layer2_2_bn2_bias_fi_2_q0);

    layer2_2_bn2_bias_fi_1_U : component FracNet_T_layer2_nNc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer2_2_bn2_bias_fi_1_ce0,
        q0 => layer2_2_bn2_bias_fi_1_q0);

    layer2_2_bn2_bias_fi_U : component FracNet_T_layer2_nOc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer2_2_bn2_bias_fi_ce0,
        q0 => layer2_2_bn2_bias_fi_q0);

    layer2_2_bn4_bias_fi_7_U : component FracNet_T_layer2_nPc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer2_2_bn4_bias_fi_7_ce0,
        q0 => layer2_2_bn4_bias_fi_7_q0);

    layer2_2_bn4_bias_fi_6_U : component FracNet_T_layer2_nQc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer2_2_bn4_bias_fi_6_ce0,
        q0 => layer2_2_bn4_bias_fi_6_q0);

    layer2_2_bn4_bias_fi_5_U : component FracNet_T_layer2_nRc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer2_2_bn4_bias_fi_5_ce0,
        q0 => layer2_2_bn4_bias_fi_5_q0);

    layer2_2_bn4_bias_fi_4_U : component FracNet_T_layer2_nSc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer2_2_bn4_bias_fi_4_ce0,
        q0 => layer2_2_bn4_bias_fi_4_q0);

    layer2_2_bn4_bias_fi_3_U : component FracNet_T_layer2_nTc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer2_2_bn4_bias_fi_3_ce0,
        q0 => layer2_2_bn4_bias_fi_3_q0);

    layer2_2_bn4_bias_fi_2_U : component FracNet_T_layer2_nUc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer2_2_bn4_bias_fi_2_ce0,
        q0 => layer2_2_bn4_bias_fi_2_q0);

    layer2_2_bn4_bias_fi_1_U : component FracNet_T_layer2_nVc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer2_2_bn4_bias_fi_1_ce0,
        q0 => layer2_2_bn4_bias_fi_1_q0);

    layer2_2_bn4_bias_fi_U : component FracNet_T_layer2_nWc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer2_2_bn4_bias_fi_ce0,
        q0 => layer2_2_bn4_bias_fi_q0);

    layer2_2_rprelu2_shi_15_U : component FracNet_T_layer2_nXc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer2_2_rprelu2_shi_15_ce0,
        q0 => layer2_2_rprelu2_shi_15_q0);

    layer2_2_rprelu2_shi_14_U : component FracNet_T_layer2_nYc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer2_2_rprelu2_shi_14_ce0,
        q0 => layer2_2_rprelu2_shi_14_q0);

    layer2_2_rprelu2_shi_13_U : component FracNet_T_layer2_nZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer2_2_rprelu2_shi_13_ce0,
        q0 => layer2_2_rprelu2_shi_13_q0);

    layer2_2_rprelu2_shi_12_U : component FracNet_T_layer2_n0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer2_2_rprelu2_shi_12_ce0,
        q0 => layer2_2_rprelu2_shi_12_q0);

    layer2_2_rprelu2_shi_11_U : component FracNet_T_layer2_n1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer2_2_rprelu2_shi_11_ce0,
        q0 => layer2_2_rprelu2_shi_11_q0);

    layer2_2_rprelu2_shi_10_U : component FracNet_T_layer2_n2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer2_2_rprelu2_shi_10_ce0,
        q0 => layer2_2_rprelu2_shi_10_q0);

    layer2_2_rprelu2_shi_9_U : component FracNet_T_layer2_n3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer2_2_rprelu2_shi_9_ce0,
        q0 => layer2_2_rprelu2_shi_9_q0);

    layer2_2_rprelu2_shi_8_U : component FracNet_T_layer2_n4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer2_2_rprelu2_shi_8_ce0,
        q0 => layer2_2_rprelu2_shi_8_q0);

    layer2_2_rprelu2_shi_7_U : component FracNet_T_layer2_n5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer2_2_rprelu2_shi_7_ce0,
        q0 => layer2_2_rprelu2_shi_7_q0);

    layer2_2_rprelu2_shi_6_U : component FracNet_T_layer2_n6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer2_2_rprelu2_shi_6_ce0,
        q0 => layer2_2_rprelu2_shi_6_q0);

    layer2_2_rprelu2_shi_5_U : component FracNet_T_layer2_n7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer2_2_rprelu2_shi_5_ce0,
        q0 => layer2_2_rprelu2_shi_5_q0);

    layer2_2_rprelu2_shi_4_U : component FracNet_T_layer2_n8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer2_2_rprelu2_shi_4_ce0,
        q0 => layer2_2_rprelu2_shi_4_q0);

    layer2_2_rprelu2_shi_3_U : component FracNet_T_layer2_n9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer2_2_rprelu2_shi_3_ce0,
        q0 => layer2_2_rprelu2_shi_3_q0);

    layer2_2_rprelu2_shi_2_U : component FracNet_T_layer2_oac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer2_2_rprelu2_shi_2_ce0,
        q0 => layer2_2_rprelu2_shi_2_q0);

    layer2_2_rprelu2_shi_1_U : component FracNet_T_layer2_obc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer2_2_rprelu2_shi_1_ce0,
        q0 => layer2_2_rprelu2_shi_1_q0);

    layer2_2_rprelu2_shi_U : component FracNet_T_layer2_occ
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer2_2_rprelu2_shi_ce0,
        q0 => layer2_2_rprelu2_shi_q0);

    layer2_2_rprelu2_pre_7_U : component FracNet_T_layer2_odc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer2_2_rprelu2_pre_7_ce0,
        q0 => layer2_2_rprelu2_pre_7_q0);

    layer2_2_rprelu2_pre_6_U : component FracNet_T_layer2_oec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer2_2_rprelu2_pre_6_ce0,
        q0 => layer2_2_rprelu2_pre_6_q0);

    layer2_2_rprelu2_pre_5_U : component FracNet_T_layer2_ofc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer2_2_rprelu2_pre_5_ce0,
        q0 => layer2_2_rprelu2_pre_5_q0);

    layer2_2_rprelu2_pre_4_U : component FracNet_T_layer2_ogc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer2_2_rprelu2_pre_4_ce0,
        q0 => layer2_2_rprelu2_pre_4_q0);

    layer2_2_rprelu2_pre_3_U : component FracNet_T_layer2_ohc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer2_2_rprelu2_pre_3_ce0,
        q0 => layer2_2_rprelu2_pre_3_q0);

    layer2_2_rprelu2_pre_2_U : component FracNet_T_layer2_oic
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer2_2_rprelu2_pre_2_ce0,
        q0 => layer2_2_rprelu2_pre_2_q0);

    layer2_2_rprelu2_pre_1_U : component FracNet_T_layer2_ojc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer2_2_rprelu2_pre_1_ce0,
        q0 => layer2_2_rprelu2_pre_1_q0);

    layer2_2_rprelu2_pre_U : component FracNet_T_layer2_okc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer2_2_rprelu2_pre_ce0,
        q0 => layer2_2_rprelu2_pre_q0);

    layer3_0_conv1_thres_7_U : component FracNet_T_layer3_olc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_0_conv1_thres_7_ce0,
        q0 => layer3_0_conv1_thres_7_q0);

    layer3_0_conv1_thres_6_U : component FracNet_T_layer3_omc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_0_conv1_thres_6_ce0,
        q0 => layer3_0_conv1_thres_6_q0);

    layer3_0_conv1_thres_5_U : component FracNet_T_layer3_onc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_0_conv1_thres_5_ce0,
        q0 => layer3_0_conv1_thres_5_q0);

    layer3_0_conv1_thres_4_U : component FracNet_T_layer3_ooc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_0_conv1_thres_4_ce0,
        q0 => layer3_0_conv1_thres_4_q0);

    layer3_0_conv1_thres_3_U : component FracNet_T_layer3_opc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_0_conv1_thres_3_ce0,
        q0 => layer3_0_conv1_thres_3_q0);

    layer3_0_conv1_thres_2_U : component FracNet_T_layer3_oqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_0_conv1_thres_2_ce0,
        q0 => layer3_0_conv1_thres_2_q0);

    layer3_0_conv1_thres_1_U : component FracNet_T_layer3_orc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_0_conv1_thres_1_ce0,
        q0 => layer3_0_conv1_thres_1_q0);

    layer3_0_conv1_thres_U : component FracNet_T_layer3_osc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_0_conv1_thres_ce0,
        q0 => layer3_0_conv1_thres_q0);

    layer3_0_bn1_weight_7_U : component FracNet_T_layer3_otc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_0_bn1_weight_7_ce0,
        q0 => layer3_0_bn1_weight_7_q0);

    layer3_0_bn1_weight_6_U : component FracNet_T_layer3_ouc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_0_bn1_weight_6_ce0,
        q0 => layer3_0_bn1_weight_6_q0);

    layer3_0_bn1_weight_5_U : component FracNet_T_layer3_ovc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_0_bn1_weight_5_ce0,
        q0 => layer3_0_bn1_weight_5_q0);

    layer3_0_bn1_weight_4_U : component FracNet_T_layer3_owc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_0_bn1_weight_4_ce0,
        q0 => layer3_0_bn1_weight_4_q0);

    layer3_0_bn1_weight_3_U : component FracNet_T_layer3_oxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_0_bn1_weight_3_ce0,
        q0 => layer3_0_bn1_weight_3_q0);

    layer3_0_bn1_weight_2_U : component FracNet_T_layer3_oyc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_0_bn1_weight_2_ce0,
        q0 => layer3_0_bn1_weight_2_q0);

    layer3_0_bn1_weight_1_U : component FracNet_T_layer3_ozc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_0_bn1_weight_1_ce0,
        q0 => layer3_0_bn1_weight_1_q0);

    layer3_0_bn1_weight_s_U : component FracNet_T_layer3_oAc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_0_bn1_weight_s_ce0,
        q0 => layer3_0_bn1_weight_s_q0);

    layer3_0_bn3_weight_7_U : component FracNet_T_layer3_oBc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_0_bn3_weight_7_ce0,
        q0 => layer3_0_bn3_weight_7_q0);

    layer3_0_bn3_weight_6_U : component FracNet_T_layer3_oCc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_0_bn3_weight_6_ce0,
        q0 => layer3_0_bn3_weight_6_q0);

    layer3_0_bn3_weight_5_U : component FracNet_T_layer3_oDc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_0_bn3_weight_5_ce0,
        q0 => layer3_0_bn3_weight_5_q0);

    layer3_0_bn3_weight_4_U : component FracNet_T_layer3_oEc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_0_bn3_weight_4_ce0,
        q0 => layer3_0_bn3_weight_4_q0);

    layer3_0_bn3_weight_3_U : component FracNet_T_layer3_oFc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_0_bn3_weight_3_ce0,
        q0 => layer3_0_bn3_weight_3_q0);

    layer3_0_bn3_weight_2_U : component FracNet_T_layer3_oGc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_0_bn3_weight_2_ce0,
        q0 => layer3_0_bn3_weight_2_q0);

    layer3_0_bn3_weight_1_U : component FracNet_T_layer3_oHc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_0_bn3_weight_1_ce0,
        q0 => layer3_0_bn3_weight_1_q0);

    layer3_0_bn3_weight_s_U : component FracNet_T_layer3_oIc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_0_bn3_weight_s_ce0,
        q0 => layer3_0_bn3_weight_s_q0);

    layer3_0_bn1_bias_fi_7_U : component FracNet_T_layer3_oJc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_0_bn1_bias_fi_7_ce0,
        q0 => layer3_0_bn1_bias_fi_7_q0);

    layer3_0_bn1_bias_fi_6_U : component FracNet_T_layer3_oKc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_0_bn1_bias_fi_6_ce0,
        q0 => layer3_0_bn1_bias_fi_6_q0);

    layer3_0_bn1_bias_fi_5_U : component FracNet_T_layer3_oLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_0_bn1_bias_fi_5_ce0,
        q0 => layer3_0_bn1_bias_fi_5_q0);

    layer3_0_bn1_bias_fi_4_U : component FracNet_T_layer3_oMc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_0_bn1_bias_fi_4_ce0,
        q0 => layer3_0_bn1_bias_fi_4_q0);

    layer3_0_bn1_bias_fi_3_U : component FracNet_T_layer3_oNc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_0_bn1_bias_fi_3_ce0,
        q0 => layer3_0_bn1_bias_fi_3_q0);

    layer3_0_bn1_bias_fi_2_U : component FracNet_T_layer3_oOc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_0_bn1_bias_fi_2_ce0,
        q0 => layer3_0_bn1_bias_fi_2_q0);

    layer3_0_bn1_bias_fi_1_U : component FracNet_T_layer3_oPc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_0_bn1_bias_fi_1_ce0,
        q0 => layer3_0_bn1_bias_fi_1_q0);

    layer3_0_bn1_bias_fi_U : component FracNet_T_layer3_oQc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_0_bn1_bias_fi_ce0,
        q0 => layer3_0_bn1_bias_fi_q0);

    layer3_0_bn3_bias_fi_7_U : component FracNet_T_layer3_oRc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_0_bn3_bias_fi_7_ce0,
        q0 => layer3_0_bn3_bias_fi_7_q0);

    layer3_0_bn3_bias_fi_6_U : component FracNet_T_layer3_oSc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_0_bn3_bias_fi_6_ce0,
        q0 => layer3_0_bn3_bias_fi_6_q0);

    layer3_0_bn3_bias_fi_5_U : component FracNet_T_layer3_oTc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_0_bn3_bias_fi_5_ce0,
        q0 => layer3_0_bn3_bias_fi_5_q0);

    layer3_0_bn3_bias_fi_4_U : component FracNet_T_layer3_oUc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_0_bn3_bias_fi_4_ce0,
        q0 => layer3_0_bn3_bias_fi_4_q0);

    layer3_0_bn3_bias_fi_3_U : component FracNet_T_layer3_oVc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_0_bn3_bias_fi_3_ce0,
        q0 => layer3_0_bn3_bias_fi_3_q0);

    layer3_0_bn3_bias_fi_2_U : component FracNet_T_layer3_oWc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_0_bn3_bias_fi_2_ce0,
        q0 => layer3_0_bn3_bias_fi_2_q0);

    layer3_0_bn3_bias_fi_1_U : component FracNet_T_layer3_oXc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_0_bn3_bias_fi_1_ce0,
        q0 => layer3_0_bn3_bias_fi_1_q0);

    layer3_0_bn3_bias_fi_U : component FracNet_T_layer3_oYc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_0_bn3_bias_fi_ce0,
        q0 => layer3_0_bn3_bias_fi_q0);

    layer3_0_rprelu1_shi_15_U : component FracNet_T_layer3_oZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_0_rprelu1_shi_15_ce0,
        q0 => layer3_0_rprelu1_shi_15_q0);

    layer3_0_rprelu1_shi_14_U : component FracNet_T_layer3_o0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_0_rprelu1_shi_14_ce0,
        q0 => layer3_0_rprelu1_shi_14_q0);

    layer3_0_rprelu1_shi_13_U : component FracNet_T_layer3_o1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_0_rprelu1_shi_13_ce0,
        q0 => layer3_0_rprelu1_shi_13_q0);

    layer3_0_rprelu1_shi_12_U : component FracNet_T_layer3_o2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_0_rprelu1_shi_12_ce0,
        q0 => layer3_0_rprelu1_shi_12_q0);

    layer3_0_rprelu1_shi_11_U : component FracNet_T_layer3_o3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_0_rprelu1_shi_11_ce0,
        q0 => layer3_0_rprelu1_shi_11_q0);

    layer3_0_rprelu1_shi_10_U : component FracNet_T_layer3_o4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_0_rprelu1_shi_10_ce0,
        q0 => layer3_0_rprelu1_shi_10_q0);

    layer3_0_rprelu1_shi_9_U : component FracNet_T_layer3_o5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_0_rprelu1_shi_9_ce0,
        q0 => layer3_0_rprelu1_shi_9_q0);

    layer3_0_rprelu1_shi_8_U : component FracNet_T_layer3_o6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_0_rprelu1_shi_8_ce0,
        q0 => layer3_0_rprelu1_shi_8_q0);

    layer3_0_rprelu1_shi_7_U : component FracNet_T_layer3_o7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_0_rprelu1_shi_7_ce0,
        q0 => layer3_0_rprelu1_shi_7_q0);

    layer3_0_rprelu1_shi_6_U : component FracNet_T_layer3_o8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_0_rprelu1_shi_6_ce0,
        q0 => layer3_0_rprelu1_shi_6_q0);

    layer3_0_rprelu1_shi_5_U : component FracNet_T_layer3_o9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_0_rprelu1_shi_5_ce0,
        q0 => layer3_0_rprelu1_shi_5_q0);

    layer3_0_rprelu1_shi_4_U : component FracNet_T_layer3_pac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_0_rprelu1_shi_4_ce0,
        q0 => layer3_0_rprelu1_shi_4_q0);

    layer3_0_rprelu1_shi_3_U : component FracNet_T_layer3_pbc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_0_rprelu1_shi_3_ce0,
        q0 => layer3_0_rprelu1_shi_3_q0);

    layer3_0_rprelu1_shi_2_U : component FracNet_T_layer3_pcc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_0_rprelu1_shi_2_ce0,
        q0 => layer3_0_rprelu1_shi_2_q0);

    layer3_0_rprelu1_shi_1_U : component FracNet_T_layer3_pdc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_0_rprelu1_shi_1_ce0,
        q0 => layer3_0_rprelu1_shi_1_q0);

    layer3_0_rprelu1_shi_U : component FracNet_T_layer3_pec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_0_rprelu1_shi_ce0,
        q0 => layer3_0_rprelu1_shi_q0);

    layer3_0_rprelu1_pre_7_U : component FracNet_T_layer3_pfc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_0_rprelu1_pre_7_ce0,
        q0 => layer3_0_rprelu1_pre_7_q0);

    layer3_0_rprelu1_pre_6_U : component FracNet_T_layer3_pgc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_0_rprelu1_pre_6_ce0,
        q0 => layer3_0_rprelu1_pre_6_q0);

    layer3_0_rprelu1_pre_5_U : component FracNet_T_layer3_phc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_0_rprelu1_pre_5_ce0,
        q0 => layer3_0_rprelu1_pre_5_q0);

    layer3_0_rprelu1_pre_4_U : component FracNet_T_layer3_pic
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_0_rprelu1_pre_4_ce0,
        q0 => layer3_0_rprelu1_pre_4_q0);

    layer3_0_rprelu1_pre_3_U : component FracNet_T_layer3_pjc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_0_rprelu1_pre_3_ce0,
        q0 => layer3_0_rprelu1_pre_3_q0);

    layer3_0_rprelu1_pre_2_U : component FracNet_T_layer3_pkc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_0_rprelu1_pre_2_ce0,
        q0 => layer3_0_rprelu1_pre_2_q0);

    layer3_0_rprelu1_pre_1_U : component FracNet_T_layer3_plc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_0_rprelu1_pre_1_ce0,
        q0 => layer3_0_rprelu1_pre_1_q0);

    layer3_0_rprelu1_pre_U : component FracNet_T_layer3_pmc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_0_rprelu1_pre_ce0,
        q0 => layer3_0_rprelu1_pre_q0);

    layer3_0_conv2_thres_7_U : component FracNet_T_layer3_pnc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_0_conv2_thres_7_ce0,
        q0 => layer3_0_conv2_thres_7_q0);

    layer3_0_conv2_thres_6_U : component FracNet_T_layer3_poc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_0_conv2_thres_6_ce0,
        q0 => layer3_0_conv2_thres_6_q0);

    layer3_0_conv2_thres_5_U : component FracNet_T_layer3_ppc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_0_conv2_thres_5_ce0,
        q0 => layer3_0_conv2_thres_5_q0);

    layer3_0_conv2_thres_4_U : component FracNet_T_layer3_pqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_0_conv2_thres_4_ce0,
        q0 => layer3_0_conv2_thres_4_q0);

    layer3_0_conv2_thres_3_U : component FracNet_T_layer3_prc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_0_conv2_thres_3_ce0,
        q0 => layer3_0_conv2_thres_3_q0);

    layer3_0_conv2_thres_2_U : component FracNet_T_layer3_psc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_0_conv2_thres_2_ce0,
        q0 => layer3_0_conv2_thres_2_q0);

    layer3_0_conv2_thres_1_U : component FracNet_T_layer3_ptc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_0_conv2_thres_1_ce0,
        q0 => layer3_0_conv2_thres_1_q0);

    layer3_0_conv2_thres_U : component FracNet_T_layer3_puc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_0_conv2_thres_ce0,
        q0 => layer3_0_conv2_thres_q0);

    layer3_0_bn2_weight_7_U : component FracNet_T_layer3_pvc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_0_bn2_weight_7_ce0,
        q0 => layer3_0_bn2_weight_7_q0);

    layer3_0_bn2_weight_6_U : component FracNet_T_layer3_pwc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_0_bn2_weight_6_ce0,
        q0 => layer3_0_bn2_weight_6_q0);

    layer3_0_bn2_weight_5_U : component FracNet_T_layer3_pxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_0_bn2_weight_5_ce0,
        q0 => layer3_0_bn2_weight_5_q0);

    layer3_0_bn2_weight_4_U : component FracNet_T_layer3_pyc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_0_bn2_weight_4_ce0,
        q0 => layer3_0_bn2_weight_4_q0);

    layer3_0_bn2_weight_3_U : component FracNet_T_layer3_pzc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_0_bn2_weight_3_ce0,
        q0 => layer3_0_bn2_weight_3_q0);

    layer3_0_bn2_weight_2_U : component FracNet_T_layer3_pAc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_0_bn2_weight_2_ce0,
        q0 => layer3_0_bn2_weight_2_q0);

    layer3_0_bn2_weight_1_U : component FracNet_T_layer3_pBc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_0_bn2_weight_1_ce0,
        q0 => layer3_0_bn2_weight_1_q0);

    layer3_0_bn2_weight_s_U : component FracNet_T_layer3_pCc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_0_bn2_weight_s_ce0,
        q0 => layer3_0_bn2_weight_s_q0);

    layer3_0_bn4_weight_7_U : component FracNet_T_layer3_pDc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_0_bn4_weight_7_ce0,
        q0 => layer3_0_bn4_weight_7_q0);

    layer3_0_bn4_weight_6_U : component FracNet_T_layer3_pEc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_0_bn4_weight_6_ce0,
        q0 => layer3_0_bn4_weight_6_q0);

    layer3_0_bn4_weight_5_U : component FracNet_T_layer3_pFc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_0_bn4_weight_5_ce0,
        q0 => layer3_0_bn4_weight_5_q0);

    layer3_0_bn4_weight_4_U : component FracNet_T_layer3_pGc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_0_bn4_weight_4_ce0,
        q0 => layer3_0_bn4_weight_4_q0);

    layer3_0_bn4_weight_3_U : component FracNet_T_layer3_pHc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_0_bn4_weight_3_ce0,
        q0 => layer3_0_bn4_weight_3_q0);

    layer3_0_bn4_weight_2_U : component FracNet_T_layer3_pIc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_0_bn4_weight_2_ce0,
        q0 => layer3_0_bn4_weight_2_q0);

    layer3_0_bn4_weight_1_U : component FracNet_T_layer3_pJc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_0_bn4_weight_1_ce0,
        q0 => layer3_0_bn4_weight_1_q0);

    layer3_0_bn4_weight_s_U : component FracNet_T_layer3_pKc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_0_bn4_weight_s_ce0,
        q0 => layer3_0_bn4_weight_s_q0);

    layer3_0_bn2_bias_fi_7_U : component FracNet_T_layer3_pLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_0_bn2_bias_fi_7_ce0,
        q0 => layer3_0_bn2_bias_fi_7_q0);

    layer3_0_bn2_bias_fi_6_U : component FracNet_T_layer3_pMc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_0_bn2_bias_fi_6_ce0,
        q0 => layer3_0_bn2_bias_fi_6_q0);

    layer3_0_bn2_bias_fi_5_U : component FracNet_T_layer3_pNc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_0_bn2_bias_fi_5_ce0,
        q0 => layer3_0_bn2_bias_fi_5_q0);

    layer3_0_bn2_bias_fi_4_U : component FracNet_T_layer3_pOc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_0_bn2_bias_fi_4_ce0,
        q0 => layer3_0_bn2_bias_fi_4_q0);

    layer3_0_bn2_bias_fi_3_U : component FracNet_T_layer3_pPc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_0_bn2_bias_fi_3_ce0,
        q0 => layer3_0_bn2_bias_fi_3_q0);

    layer3_0_bn2_bias_fi_2_U : component FracNet_T_layer3_pQc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_0_bn2_bias_fi_2_ce0,
        q0 => layer3_0_bn2_bias_fi_2_q0);

    layer3_0_bn2_bias_fi_1_U : component FracNet_T_layer3_pRc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_0_bn2_bias_fi_1_ce0,
        q0 => layer3_0_bn2_bias_fi_1_q0);

    layer3_0_bn2_bias_fi_U : component FracNet_T_layer3_pSc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_0_bn2_bias_fi_ce0,
        q0 => layer3_0_bn2_bias_fi_q0);

    layer3_0_bn4_bias_fi_7_U : component FracNet_T_layer3_pTc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_0_bn4_bias_fi_7_ce0,
        q0 => layer3_0_bn4_bias_fi_7_q0);

    layer3_0_bn4_bias_fi_6_U : component FracNet_T_layer3_pUc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_0_bn4_bias_fi_6_ce0,
        q0 => layer3_0_bn4_bias_fi_6_q0);

    layer3_0_bn4_bias_fi_5_U : component FracNet_T_layer3_pVc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_0_bn4_bias_fi_5_ce0,
        q0 => layer3_0_bn4_bias_fi_5_q0);

    layer3_0_bn4_bias_fi_4_U : component FracNet_T_layer3_pWc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_0_bn4_bias_fi_4_ce0,
        q0 => layer3_0_bn4_bias_fi_4_q0);

    layer3_0_bn4_bias_fi_3_U : component FracNet_T_layer3_pXc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_0_bn4_bias_fi_3_ce0,
        q0 => layer3_0_bn4_bias_fi_3_q0);

    layer3_0_bn4_bias_fi_2_U : component FracNet_T_layer3_pYc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_0_bn4_bias_fi_2_ce0,
        q0 => layer3_0_bn4_bias_fi_2_q0);

    layer3_0_bn4_bias_fi_1_U : component FracNet_T_layer3_pZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_0_bn4_bias_fi_1_ce0,
        q0 => layer3_0_bn4_bias_fi_1_q0);

    layer3_0_bn4_bias_fi_U : component FracNet_T_layer3_p0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_0_bn4_bias_fi_ce0,
        q0 => layer3_0_bn4_bias_fi_q0);

    layer3_0_rprelu2_shi_15_U : component FracNet_T_layer3_p1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_0_rprelu2_shi_15_ce0,
        q0 => layer3_0_rprelu2_shi_15_q0);

    layer3_0_rprelu2_shi_14_U : component FracNet_T_layer3_p2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_0_rprelu2_shi_14_ce0,
        q0 => layer3_0_rprelu2_shi_14_q0);

    layer3_0_rprelu2_shi_13_U : component FracNet_T_layer3_p3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_0_rprelu2_shi_13_ce0,
        q0 => layer3_0_rprelu2_shi_13_q0);

    layer3_0_rprelu2_shi_12_U : component FracNet_T_layer3_p4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_0_rprelu2_shi_12_ce0,
        q0 => layer3_0_rprelu2_shi_12_q0);

    layer3_0_rprelu2_shi_11_U : component FracNet_T_layer3_p5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_0_rprelu2_shi_11_ce0,
        q0 => layer3_0_rprelu2_shi_11_q0);

    layer3_0_rprelu2_shi_10_U : component FracNet_T_layer3_p6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_0_rprelu2_shi_10_ce0,
        q0 => layer3_0_rprelu2_shi_10_q0);

    layer3_0_rprelu2_shi_9_U : component FracNet_T_layer3_p7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_0_rprelu2_shi_9_ce0,
        q0 => layer3_0_rprelu2_shi_9_q0);

    layer3_0_rprelu2_shi_8_U : component FracNet_T_layer3_p8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_0_rprelu2_shi_8_ce0,
        q0 => layer3_0_rprelu2_shi_8_q0);

    layer3_0_rprelu2_shi_7_U : component FracNet_T_layer3_p9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_0_rprelu2_shi_7_ce0,
        q0 => layer3_0_rprelu2_shi_7_q0);

    layer3_0_rprelu2_shi_6_U : component FracNet_T_layer3_qac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_0_rprelu2_shi_6_ce0,
        q0 => layer3_0_rprelu2_shi_6_q0);

    layer3_0_rprelu2_shi_5_U : component FracNet_T_layer3_qbc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_0_rprelu2_shi_5_ce0,
        q0 => layer3_0_rprelu2_shi_5_q0);

    layer3_0_rprelu2_shi_4_U : component FracNet_T_layer3_qcc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_0_rprelu2_shi_4_ce0,
        q0 => layer3_0_rprelu2_shi_4_q0);

    layer3_0_rprelu2_shi_3_U : component FracNet_T_layer3_qdc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_0_rprelu2_shi_3_ce0,
        q0 => layer3_0_rprelu2_shi_3_q0);

    layer3_0_rprelu2_shi_2_U : component FracNet_T_layer3_qec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_0_rprelu2_shi_2_ce0,
        q0 => layer3_0_rprelu2_shi_2_q0);

    layer3_0_rprelu2_shi_1_U : component FracNet_T_layer3_qfc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_0_rprelu2_shi_1_ce0,
        q0 => layer3_0_rprelu2_shi_1_q0);

    layer3_0_rprelu2_shi_U : component FracNet_T_layer3_qgc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_0_rprelu2_shi_ce0,
        q0 => layer3_0_rprelu2_shi_q0);

    layer3_0_rprelu2_pre_7_U : component FracNet_T_layer3_qhc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_0_rprelu2_pre_7_ce0,
        q0 => layer3_0_rprelu2_pre_7_q0);

    layer3_0_rprelu2_pre_6_U : component FracNet_T_layer3_qic
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_0_rprelu2_pre_6_ce0,
        q0 => layer3_0_rprelu2_pre_6_q0);

    layer3_0_rprelu2_pre_5_U : component FracNet_T_layer3_qjc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_0_rprelu2_pre_5_ce0,
        q0 => layer3_0_rprelu2_pre_5_q0);

    layer3_0_rprelu2_pre_4_U : component FracNet_T_layer3_qkc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_0_rprelu2_pre_4_ce0,
        q0 => layer3_0_rprelu2_pre_4_q0);

    layer3_0_rprelu2_pre_3_U : component FracNet_T_layer3_qlc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_0_rprelu2_pre_3_ce0,
        q0 => layer3_0_rprelu2_pre_3_q0);

    layer3_0_rprelu2_pre_2_U : component FracNet_T_layer3_qmc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_0_rprelu2_pre_2_ce0,
        q0 => layer3_0_rprelu2_pre_2_q0);

    layer3_0_rprelu2_pre_1_U : component FracNet_T_layer3_qnc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_0_rprelu2_pre_1_ce0,
        q0 => layer3_0_rprelu2_pre_1_q0);

    layer3_0_rprelu2_pre_U : component FracNet_T_layer3_qoc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_0_rprelu2_pre_ce0,
        q0 => layer3_0_rprelu2_pre_q0);

    layer3_1_conv1_thres_7_U : component FracNet_T_layer3_qpc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_1_conv1_thres_7_ce0,
        q0 => layer3_1_conv1_thres_7_q0);

    layer3_1_conv1_thres_6_U : component FracNet_T_layer3_qqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_1_conv1_thres_6_ce0,
        q0 => layer3_1_conv1_thres_6_q0);

    layer3_1_conv1_thres_5_U : component FracNet_T_layer3_qrc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_1_conv1_thres_5_ce0,
        q0 => layer3_1_conv1_thres_5_q0);

    layer3_1_conv1_thres_4_U : component FracNet_T_layer3_qsc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_1_conv1_thres_4_ce0,
        q0 => layer3_1_conv1_thres_4_q0);

    layer3_1_conv1_thres_3_U : component FracNet_T_layer3_qtc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_1_conv1_thres_3_ce0,
        q0 => layer3_1_conv1_thres_3_q0);

    layer3_1_conv1_thres_2_U : component FracNet_T_layer3_quc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_1_conv1_thres_2_ce0,
        q0 => layer3_1_conv1_thres_2_q0);

    layer3_1_conv1_thres_1_U : component FracNet_T_layer3_qvc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_1_conv1_thres_1_ce0,
        q0 => layer3_1_conv1_thres_1_q0);

    layer3_1_conv1_thres_U : component FracNet_T_layer3_qwc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_1_conv1_thres_ce0,
        q0 => layer3_1_conv1_thres_q0);

    layer3_1_bn1_weight_7_U : component FracNet_T_layer3_qxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_1_bn1_weight_7_ce0,
        q0 => layer3_1_bn1_weight_7_q0);

    layer3_1_bn1_weight_6_U : component FracNet_T_layer3_qyc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_1_bn1_weight_6_ce0,
        q0 => layer3_1_bn1_weight_6_q0);

    layer3_1_bn1_weight_5_U : component FracNet_T_layer3_qzc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_1_bn1_weight_5_ce0,
        q0 => layer3_1_bn1_weight_5_q0);

    layer3_1_bn1_weight_4_U : component FracNet_T_layer3_qAc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_1_bn1_weight_4_ce0,
        q0 => layer3_1_bn1_weight_4_q0);

    layer3_1_bn1_weight_3_U : component FracNet_T_layer3_qBc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_1_bn1_weight_3_ce0,
        q0 => layer3_1_bn1_weight_3_q0);

    layer3_1_bn1_weight_2_U : component FracNet_T_layer3_qCc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_1_bn1_weight_2_ce0,
        q0 => layer3_1_bn1_weight_2_q0);

    layer3_1_bn1_weight_1_U : component FracNet_T_layer3_qDc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_1_bn1_weight_1_ce0,
        q0 => layer3_1_bn1_weight_1_q0);

    layer3_1_bn1_weight_s_U : component FracNet_T_layer3_qEc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_1_bn1_weight_s_ce0,
        q0 => layer3_1_bn1_weight_s_q0);

    layer3_1_bn3_weight_7_U : component FracNet_T_layer3_qFc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_1_bn3_weight_7_ce0,
        q0 => layer3_1_bn3_weight_7_q0);

    layer3_1_bn3_weight_6_U : component FracNet_T_layer3_qGc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_1_bn3_weight_6_ce0,
        q0 => layer3_1_bn3_weight_6_q0);

    layer3_1_bn3_weight_5_U : component FracNet_T_layer3_qHc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_1_bn3_weight_5_ce0,
        q0 => layer3_1_bn3_weight_5_q0);

    layer3_1_bn3_weight_4_U : component FracNet_T_layer3_qIc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_1_bn3_weight_4_ce0,
        q0 => layer3_1_bn3_weight_4_q0);

    layer3_1_bn3_weight_3_U : component FracNet_T_layer3_qJc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_1_bn3_weight_3_ce0,
        q0 => layer3_1_bn3_weight_3_q0);

    layer3_1_bn3_weight_2_U : component FracNet_T_layer3_qKc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_1_bn3_weight_2_ce0,
        q0 => layer3_1_bn3_weight_2_q0);

    layer3_1_bn3_weight_1_U : component FracNet_T_layer3_qLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_1_bn3_weight_1_ce0,
        q0 => layer3_1_bn3_weight_1_q0);

    layer3_1_bn3_weight_s_U : component FracNet_T_layer3_qMc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_1_bn3_weight_s_ce0,
        q0 => layer3_1_bn3_weight_s_q0);

    layer3_1_bn1_bias_fi_7_U : component FracNet_T_layer3_qNc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_1_bn1_bias_fi_7_ce0,
        q0 => layer3_1_bn1_bias_fi_7_q0);

    layer3_1_bn1_bias_fi_6_U : component FracNet_T_layer3_qOc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_1_bn1_bias_fi_6_ce0,
        q0 => layer3_1_bn1_bias_fi_6_q0);

    layer3_1_bn1_bias_fi_5_U : component FracNet_T_layer3_qPc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_1_bn1_bias_fi_5_ce0,
        q0 => layer3_1_bn1_bias_fi_5_q0);

    layer3_1_bn1_bias_fi_4_U : component FracNet_T_layer3_qQc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_1_bn1_bias_fi_4_ce0,
        q0 => layer3_1_bn1_bias_fi_4_q0);

    layer3_1_bn1_bias_fi_3_U : component FracNet_T_layer3_qRc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_1_bn1_bias_fi_3_ce0,
        q0 => layer3_1_bn1_bias_fi_3_q0);

    layer3_1_bn1_bias_fi_2_U : component FracNet_T_layer3_qSc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_1_bn1_bias_fi_2_ce0,
        q0 => layer3_1_bn1_bias_fi_2_q0);

    layer3_1_bn1_bias_fi_1_U : component FracNet_T_layer3_qTc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_1_bn1_bias_fi_1_ce0,
        q0 => layer3_1_bn1_bias_fi_1_q0);

    layer3_1_bn1_bias_fi_U : component FracNet_T_layer3_qUc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_1_bn1_bias_fi_ce0,
        q0 => layer3_1_bn1_bias_fi_q0);

    layer3_1_bn3_bias_fi_7_U : component FracNet_T_layer3_qVc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_1_bn3_bias_fi_7_ce0,
        q0 => layer3_1_bn3_bias_fi_7_q0);

    layer3_1_bn3_bias_fi_6_U : component FracNet_T_layer3_qWc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_1_bn3_bias_fi_6_ce0,
        q0 => layer3_1_bn3_bias_fi_6_q0);

    layer3_1_bn3_bias_fi_5_U : component FracNet_T_layer3_qXc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_1_bn3_bias_fi_5_ce0,
        q0 => layer3_1_bn3_bias_fi_5_q0);

    layer3_1_bn3_bias_fi_4_U : component FracNet_T_layer3_qYc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_1_bn3_bias_fi_4_ce0,
        q0 => layer3_1_bn3_bias_fi_4_q0);

    layer3_1_bn3_bias_fi_3_U : component FracNet_T_layer3_qZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_1_bn3_bias_fi_3_ce0,
        q0 => layer3_1_bn3_bias_fi_3_q0);

    layer3_1_bn3_bias_fi_2_U : component FracNet_T_layer3_q0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_1_bn3_bias_fi_2_ce0,
        q0 => layer3_1_bn3_bias_fi_2_q0);

    layer3_1_bn3_bias_fi_1_U : component FracNet_T_layer3_q1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_1_bn3_bias_fi_1_ce0,
        q0 => layer3_1_bn3_bias_fi_1_q0);

    layer3_1_bn3_bias_fi_U : component FracNet_T_layer3_q2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_1_bn3_bias_fi_ce0,
        q0 => layer3_1_bn3_bias_fi_q0);

    layer3_1_rprelu1_shi_15_U : component FracNet_T_layer3_q3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_1_rprelu1_shi_15_ce0,
        q0 => layer3_1_rprelu1_shi_15_q0);

    layer3_1_rprelu1_shi_14_U : component FracNet_T_layer3_q4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_1_rprelu1_shi_14_ce0,
        q0 => layer3_1_rprelu1_shi_14_q0);

    layer3_1_rprelu1_shi_13_U : component FracNet_T_layer3_q5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_1_rprelu1_shi_13_ce0,
        q0 => layer3_1_rprelu1_shi_13_q0);

    layer3_1_rprelu1_shi_12_U : component FracNet_T_layer3_q6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_1_rprelu1_shi_12_ce0,
        q0 => layer3_1_rprelu1_shi_12_q0);

    layer3_1_rprelu1_shi_11_U : component FracNet_T_layer3_q7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_1_rprelu1_shi_11_ce0,
        q0 => layer3_1_rprelu1_shi_11_q0);

    layer3_1_rprelu1_shi_10_U : component FracNet_T_layer3_q8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_1_rprelu1_shi_10_ce0,
        q0 => layer3_1_rprelu1_shi_10_q0);

    layer3_1_rprelu1_shi_9_U : component FracNet_T_layer3_q9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_1_rprelu1_shi_9_ce0,
        q0 => layer3_1_rprelu1_shi_9_q0);

    layer3_1_rprelu1_shi_8_U : component FracNet_T_layer3_rac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_1_rprelu1_shi_8_ce0,
        q0 => layer3_1_rprelu1_shi_8_q0);

    layer3_1_rprelu1_shi_7_U : component FracNet_T_layer3_rbc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_1_rprelu1_shi_7_ce0,
        q0 => layer3_1_rprelu1_shi_7_q0);

    layer3_1_rprelu1_shi_6_U : component FracNet_T_layer3_rcc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_1_rprelu1_shi_6_ce0,
        q0 => layer3_1_rprelu1_shi_6_q0);

    layer3_1_rprelu1_shi_5_U : component FracNet_T_layer3_rdc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_1_rprelu1_shi_5_ce0,
        q0 => layer3_1_rprelu1_shi_5_q0);

    layer3_1_rprelu1_shi_4_U : component FracNet_T_layer3_rec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_1_rprelu1_shi_4_ce0,
        q0 => layer3_1_rprelu1_shi_4_q0);

    layer3_1_rprelu1_shi_3_U : component FracNet_T_layer3_rfc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_1_rprelu1_shi_3_ce0,
        q0 => layer3_1_rprelu1_shi_3_q0);

    layer3_1_rprelu1_shi_2_U : component FracNet_T_layer3_rgc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_1_rprelu1_shi_2_ce0,
        q0 => layer3_1_rprelu1_shi_2_q0);

    layer3_1_rprelu1_shi_1_U : component FracNet_T_layer3_rhc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_1_rprelu1_shi_1_ce0,
        q0 => layer3_1_rprelu1_shi_1_q0);

    layer3_1_rprelu1_shi_U : component FracNet_T_layer3_ric
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_1_rprelu1_shi_ce0,
        q0 => layer3_1_rprelu1_shi_q0);

    layer3_1_rprelu1_pre_7_U : component FracNet_T_layer3_rjc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_1_rprelu1_pre_7_ce0,
        q0 => layer3_1_rprelu1_pre_7_q0);

    layer3_1_rprelu1_pre_6_U : component FracNet_T_layer3_rkc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_1_rprelu1_pre_6_ce0,
        q0 => layer3_1_rprelu1_pre_6_q0);

    layer3_1_rprelu1_pre_5_U : component FracNet_T_layer3_rlc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_1_rprelu1_pre_5_ce0,
        q0 => layer3_1_rprelu1_pre_5_q0);

    layer3_1_rprelu1_pre_4_U : component FracNet_T_layer3_rmc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_1_rprelu1_pre_4_ce0,
        q0 => layer3_1_rprelu1_pre_4_q0);

    layer3_1_rprelu1_pre_3_U : component FracNet_T_layer3_rnc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_1_rprelu1_pre_3_ce0,
        q0 => layer3_1_rprelu1_pre_3_q0);

    layer3_1_rprelu1_pre_2_U : component FracNet_T_layer3_roc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_1_rprelu1_pre_2_ce0,
        q0 => layer3_1_rprelu1_pre_2_q0);

    layer3_1_rprelu1_pre_1_U : component FracNet_T_layer3_rpc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_1_rprelu1_pre_1_ce0,
        q0 => layer3_1_rprelu1_pre_1_q0);

    layer3_1_rprelu1_pre_U : component FracNet_T_layer3_rqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_1_rprelu1_pre_ce0,
        q0 => layer3_1_rprelu1_pre_q0);

    layer3_1_conv2_thres_7_U : component FracNet_T_layer3_rrc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_1_conv2_thres_7_ce0,
        q0 => layer3_1_conv2_thres_7_q0);

    layer3_1_conv2_thres_6_U : component FracNet_T_layer3_rsc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_1_conv2_thres_6_ce0,
        q0 => layer3_1_conv2_thres_6_q0);

    layer3_1_conv2_thres_5_U : component FracNet_T_layer3_rtc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_1_conv2_thres_5_ce0,
        q0 => layer3_1_conv2_thres_5_q0);

    layer3_1_conv2_thres_4_U : component FracNet_T_layer3_ruc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_1_conv2_thres_4_ce0,
        q0 => layer3_1_conv2_thres_4_q0);

    layer3_1_conv2_thres_3_U : component FracNet_T_layer3_rvc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_1_conv2_thres_3_ce0,
        q0 => layer3_1_conv2_thres_3_q0);

    layer3_1_conv2_thres_2_U : component FracNet_T_layer3_rwc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_1_conv2_thres_2_ce0,
        q0 => layer3_1_conv2_thres_2_q0);

    layer3_1_conv2_thres_1_U : component FracNet_T_layer3_rxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_1_conv2_thres_1_ce0,
        q0 => layer3_1_conv2_thres_1_q0);

    layer3_1_conv2_thres_U : component FracNet_T_layer3_ryc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_1_conv2_thres_ce0,
        q0 => layer3_1_conv2_thres_q0);

    layer3_1_bn2_weight_7_U : component FracNet_T_layer3_rzc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_1_bn2_weight_7_ce0,
        q0 => layer3_1_bn2_weight_7_q0);

    layer3_1_bn2_weight_6_U : component FracNet_T_layer3_rAc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_1_bn2_weight_6_ce0,
        q0 => layer3_1_bn2_weight_6_q0);

    layer3_1_bn2_weight_5_U : component FracNet_T_layer3_rBc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_1_bn2_weight_5_ce0,
        q0 => layer3_1_bn2_weight_5_q0);

    layer3_1_bn2_weight_4_U : component FracNet_T_layer3_rCc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_1_bn2_weight_4_ce0,
        q0 => layer3_1_bn2_weight_4_q0);

    layer3_1_bn2_weight_3_U : component FracNet_T_layer3_rDc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_1_bn2_weight_3_ce0,
        q0 => layer3_1_bn2_weight_3_q0);

    layer3_1_bn2_weight_2_U : component FracNet_T_layer3_rEc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_1_bn2_weight_2_ce0,
        q0 => layer3_1_bn2_weight_2_q0);

    layer3_1_bn2_weight_1_U : component FracNet_T_layer3_rFc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_1_bn2_weight_1_ce0,
        q0 => layer3_1_bn2_weight_1_q0);

    layer3_1_bn2_weight_s_U : component FracNet_T_layer3_rGc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_1_bn2_weight_s_ce0,
        q0 => layer3_1_bn2_weight_s_q0);

    layer3_1_bn4_weight_7_U : component FracNet_T_layer3_rHc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_1_bn4_weight_7_ce0,
        q0 => layer3_1_bn4_weight_7_q0);

    layer3_1_bn4_weight_6_U : component FracNet_T_layer3_rIc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_1_bn4_weight_6_ce0,
        q0 => layer3_1_bn4_weight_6_q0);

    layer3_1_bn4_weight_5_U : component FracNet_T_layer3_rJc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_1_bn4_weight_5_ce0,
        q0 => layer3_1_bn4_weight_5_q0);

    layer3_1_bn4_weight_4_U : component FracNet_T_layer3_rKc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_1_bn4_weight_4_ce0,
        q0 => layer3_1_bn4_weight_4_q0);

    layer3_1_bn4_weight_3_U : component FracNet_T_layer3_rLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_1_bn4_weight_3_ce0,
        q0 => layer3_1_bn4_weight_3_q0);

    layer3_1_bn4_weight_2_U : component FracNet_T_layer3_rMc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_1_bn4_weight_2_ce0,
        q0 => layer3_1_bn4_weight_2_q0);

    layer3_1_bn4_weight_1_U : component FracNet_T_layer3_rNc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_1_bn4_weight_1_ce0,
        q0 => layer3_1_bn4_weight_1_q0);

    layer3_1_bn4_weight_s_U : component FracNet_T_layer3_rOc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_1_bn4_weight_s_ce0,
        q0 => layer3_1_bn4_weight_s_q0);

    layer3_1_bn2_bias_fi_7_U : component FracNet_T_layer3_rPc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_1_bn2_bias_fi_7_ce0,
        q0 => layer3_1_bn2_bias_fi_7_q0);

    layer3_1_bn2_bias_fi_6_U : component FracNet_T_layer3_rQc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_1_bn2_bias_fi_6_ce0,
        q0 => layer3_1_bn2_bias_fi_6_q0);

    layer3_1_bn2_bias_fi_5_U : component FracNet_T_layer3_rRc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_1_bn2_bias_fi_5_ce0,
        q0 => layer3_1_bn2_bias_fi_5_q0);

    layer3_1_bn2_bias_fi_4_U : component FracNet_T_layer3_rSc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_1_bn2_bias_fi_4_ce0,
        q0 => layer3_1_bn2_bias_fi_4_q0);

    layer3_1_bn2_bias_fi_3_U : component FracNet_T_layer3_rTc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_1_bn2_bias_fi_3_ce0,
        q0 => layer3_1_bn2_bias_fi_3_q0);

    layer3_1_bn2_bias_fi_2_U : component FracNet_T_layer3_rUc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_1_bn2_bias_fi_2_ce0,
        q0 => layer3_1_bn2_bias_fi_2_q0);

    layer3_1_bn2_bias_fi_1_U : component FracNet_T_layer3_rVc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_1_bn2_bias_fi_1_ce0,
        q0 => layer3_1_bn2_bias_fi_1_q0);

    layer3_1_bn2_bias_fi_U : component FracNet_T_layer3_rWc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_1_bn2_bias_fi_ce0,
        q0 => layer3_1_bn2_bias_fi_q0);

    layer3_1_bn4_bias_fi_7_U : component FracNet_T_layer3_rXc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_1_bn4_bias_fi_7_ce0,
        q0 => layer3_1_bn4_bias_fi_7_q0);

    layer3_1_bn4_bias_fi_6_U : component FracNet_T_layer3_rYc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_1_bn4_bias_fi_6_ce0,
        q0 => layer3_1_bn4_bias_fi_6_q0);

    layer3_1_bn4_bias_fi_5_U : component FracNet_T_layer3_rZc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_1_bn4_bias_fi_5_ce0,
        q0 => layer3_1_bn4_bias_fi_5_q0);

    layer3_1_bn4_bias_fi_4_U : component FracNet_T_layer3_r0c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_1_bn4_bias_fi_4_ce0,
        q0 => layer3_1_bn4_bias_fi_4_q0);

    layer3_1_bn4_bias_fi_3_U : component FracNet_T_layer3_r1c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_1_bn4_bias_fi_3_ce0,
        q0 => layer3_1_bn4_bias_fi_3_q0);

    layer3_1_bn4_bias_fi_2_U : component FracNet_T_layer3_r2c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_1_bn4_bias_fi_2_ce0,
        q0 => layer3_1_bn4_bias_fi_2_q0);

    layer3_1_bn4_bias_fi_1_U : component FracNet_T_layer3_r3c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_1_bn4_bias_fi_1_ce0,
        q0 => layer3_1_bn4_bias_fi_1_q0);

    layer3_1_bn4_bias_fi_U : component FracNet_T_layer3_r4c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_1_bn4_bias_fi_ce0,
        q0 => layer3_1_bn4_bias_fi_q0);

    layer3_1_rprelu2_shi_15_U : component FracNet_T_layer3_r5c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_1_rprelu2_shi_15_ce0,
        q0 => layer3_1_rprelu2_shi_15_q0);

    layer3_1_rprelu2_shi_14_U : component FracNet_T_layer3_r6c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_1_rprelu2_shi_14_ce0,
        q0 => layer3_1_rprelu2_shi_14_q0);

    layer3_1_rprelu2_shi_13_U : component FracNet_T_layer3_r7c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_1_rprelu2_shi_13_ce0,
        q0 => layer3_1_rprelu2_shi_13_q0);

    layer3_1_rprelu2_shi_12_U : component FracNet_T_layer3_r8c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_1_rprelu2_shi_12_ce0,
        q0 => layer3_1_rprelu2_shi_12_q0);

    layer3_1_rprelu2_shi_11_U : component FracNet_T_layer3_r9c
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_1_rprelu2_shi_11_ce0,
        q0 => layer3_1_rprelu2_shi_11_q0);

    layer3_1_rprelu2_shi_10_U : component FracNet_T_layer3_sac
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_1_rprelu2_shi_10_ce0,
        q0 => layer3_1_rprelu2_shi_10_q0);

    layer3_1_rprelu2_shi_9_U : component FracNet_T_layer3_sbc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_1_rprelu2_shi_9_ce0,
        q0 => layer3_1_rprelu2_shi_9_q0);

    layer3_1_rprelu2_shi_8_U : component FracNet_T_layer3_scc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_1_rprelu2_shi_8_ce0,
        q0 => layer3_1_rprelu2_shi_8_q0);

    layer3_1_rprelu2_shi_7_U : component FracNet_T_layer3_sdc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_1_rprelu2_shi_7_ce0,
        q0 => layer3_1_rprelu2_shi_7_q0);

    layer3_1_rprelu2_shi_6_U : component FracNet_T_layer3_sec
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_1_rprelu2_shi_6_ce0,
        q0 => layer3_1_rprelu2_shi_6_q0);

    layer3_1_rprelu2_shi_5_U : component FracNet_T_layer3_sfc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_1_rprelu2_shi_5_ce0,
        q0 => layer3_1_rprelu2_shi_5_q0);

    layer3_1_rprelu2_shi_4_U : component FracNet_T_layer3_sgc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_1_rprelu2_shi_4_ce0,
        q0 => layer3_1_rprelu2_shi_4_q0);

    layer3_1_rprelu2_shi_3_U : component FracNet_T_layer3_shc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_1_rprelu2_shi_3_ce0,
        q0 => layer3_1_rprelu2_shi_3_q0);

    layer3_1_rprelu2_shi_2_U : component FracNet_T_layer3_sic
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_1_rprelu2_shi_2_ce0,
        q0 => layer3_1_rprelu2_shi_2_q0);

    layer3_1_rprelu2_shi_1_U : component FracNet_T_layer3_sjc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_1_rprelu2_shi_1_ce0,
        q0 => layer3_1_rprelu2_shi_1_q0);

    layer3_1_rprelu2_shi_U : component FracNet_T_layer3_skc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_1_rprelu2_shi_ce0,
        q0 => layer3_1_rprelu2_shi_q0);

    layer3_1_rprelu2_pre_7_U : component FracNet_T_layer3_slc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_1_rprelu2_pre_7_ce0,
        q0 => layer3_1_rprelu2_pre_7_q0);

    layer3_1_rprelu2_pre_6_U : component FracNet_T_layer3_smc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_1_rprelu2_pre_6_ce0,
        q0 => layer3_1_rprelu2_pre_6_q0);

    layer3_1_rprelu2_pre_5_U : component FracNet_T_layer3_snc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_1_rprelu2_pre_5_ce0,
        q0 => layer3_1_rprelu2_pre_5_q0);

    layer3_1_rprelu2_pre_4_U : component FracNet_T_layer3_soc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_1_rprelu2_pre_4_ce0,
        q0 => layer3_1_rprelu2_pre_4_q0);

    layer3_1_rprelu2_pre_3_U : component FracNet_T_layer3_spc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_1_rprelu2_pre_3_ce0,
        q0 => layer3_1_rprelu2_pre_3_q0);

    layer3_1_rprelu2_pre_2_U : component FracNet_T_layer3_sqc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_1_rprelu2_pre_2_ce0,
        q0 => layer3_1_rprelu2_pre_2_q0);

    layer3_1_rprelu2_pre_1_U : component FracNet_T_layer3_src
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_1_rprelu2_pre_1_ce0,
        q0 => layer3_1_rprelu2_pre_1_q0);

    layer3_1_rprelu2_pre_U : component FracNet_T_layer3_ssc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_1_rprelu2_pre_ce0,
        q0 => layer3_1_rprelu2_pre_q0);

    layer3_2_conv1_thres_7_U : component FracNet_T_layer3_stc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_2_conv1_thres_7_ce0,
        q0 => layer3_2_conv1_thres_7_q0);

    layer3_2_conv1_thres_6_U : component FracNet_T_layer3_suc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_2_conv1_thres_6_ce0,
        q0 => layer3_2_conv1_thres_6_q0);

    layer3_2_conv1_thres_5_U : component FracNet_T_layer3_svc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_2_conv1_thres_5_ce0,
        q0 => layer3_2_conv1_thres_5_q0);

    layer3_2_conv1_thres_4_U : component FracNet_T_layer3_swc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_2_conv1_thres_4_ce0,
        q0 => layer3_2_conv1_thres_4_q0);

    layer3_2_conv1_thres_3_U : component FracNet_T_layer3_sxc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_2_conv1_thres_3_ce0,
        q0 => layer3_2_conv1_thres_3_q0);

    layer3_2_conv1_thres_2_U : component FracNet_T_layer3_syc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_2_conv1_thres_2_ce0,
        q0 => layer3_2_conv1_thres_2_q0);

    layer3_2_conv1_thres_1_U : component FracNet_T_layer3_szc
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_2_conv1_thres_1_ce0,
        q0 => layer3_2_conv1_thres_1_q0);

    layer3_2_conv1_thres_U : component FracNet_T_layer3_sAc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_2_conv1_thres_ce0,
        q0 => layer3_2_conv1_thres_q0);

    layer3_2_bn1_weight_7_U : component FracNet_T_layer3_sBc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_2_bn1_weight_7_ce0,
        q0 => layer3_2_bn1_weight_7_q0);

    layer3_2_bn1_weight_6_U : component FracNet_T_layer3_sCc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_2_bn1_weight_6_ce0,
        q0 => layer3_2_bn1_weight_6_q0);

    layer3_2_bn1_weight_5_U : component FracNet_T_layer3_sDc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_2_bn1_weight_5_ce0,
        q0 => layer3_2_bn1_weight_5_q0);

    layer3_2_bn1_weight_4_U : component FracNet_T_layer3_sEc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_2_bn1_weight_4_ce0,
        q0 => layer3_2_bn1_weight_4_q0);

    layer3_2_bn1_weight_3_U : component FracNet_T_layer3_sFc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_2_bn1_weight_3_ce0,
        q0 => layer3_2_bn1_weight_3_q0);

    layer3_2_bn1_weight_2_U : component FracNet_T_layer3_sGc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_2_bn1_weight_2_ce0,
        q0 => layer3_2_bn1_weight_2_q0);

    layer3_2_bn1_weight_1_U : component FracNet_T_layer3_sHc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_2_bn1_weight_1_ce0,
        q0 => layer3_2_bn1_weight_1_q0);

    layer3_2_bn1_weight_s_U : component FracNet_T_layer3_sIc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_2_bn1_weight_s_ce0,
        q0 => layer3_2_bn1_weight_s_q0);

    layer3_2_bn3_weight_7_U : component FracNet_T_layer3_sJc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_2_bn3_weight_7_ce0,
        q0 => layer3_2_bn3_weight_7_q0);

    layer3_2_bn3_weight_6_U : component FracNet_T_layer3_sKc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_2_bn3_weight_6_ce0,
        q0 => layer3_2_bn3_weight_6_q0);

    layer3_2_bn3_weight_5_U : component FracNet_T_layer3_sLc_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_2_bn3_weight_5_ce0,
        q0 => layer3_2_bn3_weight_5_q0);

    layer3_2_bn3_weight_4_U : component FracNet_T_layer3_sMd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_2_bn3_weight_4_ce0,
        q0 => layer3_2_bn3_weight_4_q0);

    layer3_2_bn3_weight_3_U : component FracNet_T_layer3_sNd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_2_bn3_weight_3_ce0,
        q0 => layer3_2_bn3_weight_3_q0);

    layer3_2_bn3_weight_2_U : component FracNet_T_layer3_sOd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_2_bn3_weight_2_ce0,
        q0 => layer3_2_bn3_weight_2_q0);

    layer3_2_bn3_weight_1_U : component FracNet_T_layer3_sPd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_2_bn3_weight_1_ce0,
        q0 => layer3_2_bn3_weight_1_q0);

    layer3_2_bn3_weight_s_U : component FracNet_T_layer3_sQd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_2_bn3_weight_s_ce0,
        q0 => layer3_2_bn3_weight_s_q0);

    layer3_2_bn1_bias_fi_7_U : component FracNet_T_layer3_sRd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_2_bn1_bias_fi_7_ce0,
        q0 => layer3_2_bn1_bias_fi_7_q0);

    layer3_2_bn1_bias_fi_6_U : component FracNet_T_layer3_sSd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_2_bn1_bias_fi_6_ce0,
        q0 => layer3_2_bn1_bias_fi_6_q0);

    layer3_2_bn1_bias_fi_5_U : component FracNet_T_layer3_sTd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_2_bn1_bias_fi_5_ce0,
        q0 => layer3_2_bn1_bias_fi_5_q0);

    layer3_2_bn1_bias_fi_4_U : component FracNet_T_layer3_sUd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_2_bn1_bias_fi_4_ce0,
        q0 => layer3_2_bn1_bias_fi_4_q0);

    layer3_2_bn1_bias_fi_3_U : component FracNet_T_layer3_sVd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_2_bn1_bias_fi_3_ce0,
        q0 => layer3_2_bn1_bias_fi_3_q0);

    layer3_2_bn1_bias_fi_2_U : component FracNet_T_layer3_sWd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_2_bn1_bias_fi_2_ce0,
        q0 => layer3_2_bn1_bias_fi_2_q0);

    layer3_2_bn1_bias_fi_1_U : component FracNet_T_layer3_sXd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_2_bn1_bias_fi_1_ce0,
        q0 => layer3_2_bn1_bias_fi_1_q0);

    layer3_2_bn1_bias_fi_U : component FracNet_T_layer3_sYd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_2_bn1_bias_fi_ce0,
        q0 => layer3_2_bn1_bias_fi_q0);

    layer3_2_bn3_bias_fi_7_U : component FracNet_T_layer3_sZd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_2_bn3_bias_fi_7_ce0,
        q0 => layer3_2_bn3_bias_fi_7_q0);

    layer3_2_bn3_bias_fi_6_U : component FracNet_T_layer3_s0d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_2_bn3_bias_fi_6_ce0,
        q0 => layer3_2_bn3_bias_fi_6_q0);

    layer3_2_bn3_bias_fi_5_U : component FracNet_T_layer3_s1d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_2_bn3_bias_fi_5_ce0,
        q0 => layer3_2_bn3_bias_fi_5_q0);

    layer3_2_bn3_bias_fi_4_U : component FracNet_T_layer3_s2d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_2_bn3_bias_fi_4_ce0,
        q0 => layer3_2_bn3_bias_fi_4_q0);

    layer3_2_bn3_bias_fi_3_U : component FracNet_T_layer3_s3d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_2_bn3_bias_fi_3_ce0,
        q0 => layer3_2_bn3_bias_fi_3_q0);

    layer3_2_bn3_bias_fi_2_U : component FracNet_T_layer3_s4d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_2_bn3_bias_fi_2_ce0,
        q0 => layer3_2_bn3_bias_fi_2_q0);

    layer3_2_bn3_bias_fi_1_U : component FracNet_T_layer3_s5d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_2_bn3_bias_fi_1_ce0,
        q0 => layer3_2_bn3_bias_fi_1_q0);

    layer3_2_bn3_bias_fi_U : component FracNet_T_layer3_s6d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_2_bn3_bias_fi_ce0,
        q0 => layer3_2_bn3_bias_fi_q0);

    layer3_2_rprelu1_shi_15_U : component FracNet_T_layer3_s7d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_2_rprelu1_shi_15_ce0,
        q0 => layer3_2_rprelu1_shi_15_q0);

    layer3_2_rprelu1_shi_14_U : component FracNet_T_layer3_s8d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_2_rprelu1_shi_14_ce0,
        q0 => layer3_2_rprelu1_shi_14_q0);

    layer3_2_rprelu1_shi_13_U : component FracNet_T_layer3_s9d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_2_rprelu1_shi_13_ce0,
        q0 => layer3_2_rprelu1_shi_13_q0);

    layer3_2_rprelu1_shi_12_U : component FracNet_T_layer3_tad
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_2_rprelu1_shi_12_ce0,
        q0 => layer3_2_rprelu1_shi_12_q0);

    layer3_2_rprelu1_shi_11_U : component FracNet_T_layer3_tbd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_2_rprelu1_shi_11_ce0,
        q0 => layer3_2_rprelu1_shi_11_q0);

    layer3_2_rprelu1_shi_10_U : component FracNet_T_layer3_tcd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_2_rprelu1_shi_10_ce0,
        q0 => layer3_2_rprelu1_shi_10_q0);

    layer3_2_rprelu1_shi_9_U : component FracNet_T_layer3_tdd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_2_rprelu1_shi_9_ce0,
        q0 => layer3_2_rprelu1_shi_9_q0);

    layer3_2_rprelu1_shi_8_U : component FracNet_T_layer3_ted
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_2_rprelu1_shi_8_ce0,
        q0 => layer3_2_rprelu1_shi_8_q0);

    layer3_2_rprelu1_shi_7_U : component FracNet_T_layer3_tfd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_2_rprelu1_shi_7_ce0,
        q0 => layer3_2_rprelu1_shi_7_q0);

    layer3_2_rprelu1_shi_6_U : component FracNet_T_layer3_tgd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_2_rprelu1_shi_6_ce0,
        q0 => layer3_2_rprelu1_shi_6_q0);

    layer3_2_rprelu1_shi_5_U : component FracNet_T_layer3_thd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_2_rprelu1_shi_5_ce0,
        q0 => layer3_2_rprelu1_shi_5_q0);

    layer3_2_rprelu1_shi_4_U : component FracNet_T_layer3_tid
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_2_rprelu1_shi_4_ce0,
        q0 => layer3_2_rprelu1_shi_4_q0);

    layer3_2_rprelu1_shi_3_U : component FracNet_T_layer3_tjd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_2_rprelu1_shi_3_ce0,
        q0 => layer3_2_rprelu1_shi_3_q0);

    layer3_2_rprelu1_shi_2_U : component FracNet_T_layer3_tkd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_2_rprelu1_shi_2_ce0,
        q0 => layer3_2_rprelu1_shi_2_q0);

    layer3_2_rprelu1_shi_1_U : component FracNet_T_layer3_tld
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_2_rprelu1_shi_1_ce0,
        q0 => layer3_2_rprelu1_shi_1_q0);

    layer3_2_rprelu1_shi_U : component FracNet_T_layer3_tmd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_2_rprelu1_shi_ce0,
        q0 => layer3_2_rprelu1_shi_q0);

    layer3_2_rprelu1_pre_7_U : component FracNet_T_layer3_tnd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_2_rprelu1_pre_7_ce0,
        q0 => layer3_2_rprelu1_pre_7_q0);

    layer3_2_rprelu1_pre_6_U : component FracNet_T_layer3_tod
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_2_rprelu1_pre_6_ce0,
        q0 => layer3_2_rprelu1_pre_6_q0);

    layer3_2_rprelu1_pre_5_U : component FracNet_T_layer3_tpd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_2_rprelu1_pre_5_ce0,
        q0 => layer3_2_rprelu1_pre_5_q0);

    layer3_2_rprelu1_pre_4_U : component FracNet_T_layer3_tqd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_2_rprelu1_pre_4_ce0,
        q0 => layer3_2_rprelu1_pre_4_q0);

    layer3_2_rprelu1_pre_3_U : component FracNet_T_layer3_trd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_2_rprelu1_pre_3_ce0,
        q0 => layer3_2_rprelu1_pre_3_q0);

    layer3_2_rprelu1_pre_2_U : component FracNet_T_layer3_tsd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_2_rprelu1_pre_2_ce0,
        q0 => layer3_2_rprelu1_pre_2_q0);

    layer3_2_rprelu1_pre_1_U : component FracNet_T_layer3_ttd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_2_rprelu1_pre_1_ce0,
        q0 => layer3_2_rprelu1_pre_1_q0);

    layer3_2_rprelu1_pre_U : component FracNet_T_layer3_tud
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_2_rprelu1_pre_ce0,
        q0 => layer3_2_rprelu1_pre_q0);

    layer3_2_conv2_thres_7_U : component FracNet_T_layer3_tvd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        ce0 => layer3_2_conv2_thres_7_ce0,
        q0 => layer3_2_conv2_thres_7_q0);

    layer3_2_conv2_thres_6_U : component FracNet_T_layer3_twd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        ce0 => layer3_2_conv2_thres_6_ce0,
        q0 => layer3_2_conv2_thres_6_q0);

    layer3_2_conv2_thres_5_U : component FracNet_T_layer3_txd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        ce0 => layer3_2_conv2_thres_5_ce0,
        q0 => layer3_2_conv2_thres_5_q0);

    layer3_2_conv2_thres_4_U : component FracNet_T_layer3_tyd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        ce0 => layer3_2_conv2_thres_4_ce0,
        q0 => layer3_2_conv2_thres_4_q0);

    layer3_2_conv2_thres_3_U : component FracNet_T_layer3_tzd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        ce0 => layer3_2_conv2_thres_3_ce0,
        q0 => layer3_2_conv2_thres_3_q0);

    layer3_2_conv2_thres_2_U : component FracNet_T_layer3_tAd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        ce0 => layer3_2_conv2_thres_2_ce0,
        q0 => layer3_2_conv2_thres_2_q0);

    layer3_2_conv2_thres_1_U : component FracNet_T_layer3_tBd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        ce0 => layer3_2_conv2_thres_1_ce0,
        q0 => layer3_2_conv2_thres_1_q0);

    layer3_2_conv2_thres_U : component FracNet_T_layer3_tCd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        ce0 => layer3_2_conv2_thres_ce0,
        q0 => layer3_2_conv2_thres_q0);

    layer3_2_bn2_weight_7_U : component FracNet_T_layer3_tDd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        ce0 => layer3_2_bn2_weight_7_ce0,
        q0 => layer3_2_bn2_weight_7_q0);

    layer3_2_bn2_weight_6_U : component FracNet_T_layer3_tEd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        ce0 => layer3_2_bn2_weight_6_ce0,
        q0 => layer3_2_bn2_weight_6_q0);

    layer3_2_bn2_weight_5_U : component FracNet_T_layer3_tFd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        ce0 => layer3_2_bn2_weight_5_ce0,
        q0 => layer3_2_bn2_weight_5_q0);

    layer3_2_bn2_weight_4_U : component FracNet_T_layer3_tGd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        ce0 => layer3_2_bn2_weight_4_ce0,
        q0 => layer3_2_bn2_weight_4_q0);

    layer3_2_bn2_weight_3_U : component FracNet_T_layer3_tHd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        ce0 => layer3_2_bn2_weight_3_ce0,
        q0 => layer3_2_bn2_weight_3_q0);

    layer3_2_bn2_weight_2_U : component FracNet_T_layer3_tId_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        ce0 => layer3_2_bn2_weight_2_ce0,
        q0 => layer3_2_bn2_weight_2_q0);

    layer3_2_bn2_weight_1_U : component FracNet_T_layer3_tJd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        ce0 => layer3_2_bn2_weight_1_ce0,
        q0 => layer3_2_bn2_weight_1_q0);

    layer3_2_bn2_weight_s_U : component FracNet_T_layer3_tKd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        ce0 => layer3_2_bn2_weight_s_ce0,
        q0 => layer3_2_bn2_weight_s_q0);

    layer3_2_bn4_weight_7_U : component FracNet_T_layer3_tLd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        ce0 => layer3_2_bn4_weight_7_ce0,
        q0 => layer3_2_bn4_weight_7_q0);

    layer3_2_bn4_weight_6_U : component FracNet_T_layer3_tMd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        ce0 => layer3_2_bn4_weight_6_ce0,
        q0 => layer3_2_bn4_weight_6_q0);

    layer3_2_bn4_weight_5_U : component FracNet_T_layer3_tNd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        ce0 => layer3_2_bn4_weight_5_ce0,
        q0 => layer3_2_bn4_weight_5_q0);

    layer3_2_bn4_weight_4_U : component FracNet_T_layer3_tOd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        ce0 => layer3_2_bn4_weight_4_ce0,
        q0 => layer3_2_bn4_weight_4_q0);

    layer3_2_bn4_weight_3_U : component FracNet_T_layer3_tPd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        ce0 => layer3_2_bn4_weight_3_ce0,
        q0 => layer3_2_bn4_weight_3_q0);

    layer3_2_bn4_weight_2_U : component FracNet_T_layer3_tQd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        ce0 => layer3_2_bn4_weight_2_ce0,
        q0 => layer3_2_bn4_weight_2_q0);

    layer3_2_bn4_weight_1_U : component FracNet_T_layer3_tRd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        ce0 => layer3_2_bn4_weight_1_ce0,
        q0 => layer3_2_bn4_weight_1_q0);

    layer3_2_bn4_weight_s_U : component FracNet_T_layer3_tSd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        ce0 => layer3_2_bn4_weight_s_ce0,
        q0 => layer3_2_bn4_weight_s_q0);

    layer3_2_bn2_bias_fi_7_U : component FracNet_T_layer3_tTd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        ce0 => layer3_2_bn2_bias_fi_7_ce0,
        q0 => layer3_2_bn2_bias_fi_7_q0);

    layer3_2_bn2_bias_fi_6_U : component FracNet_T_layer3_tUd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        ce0 => layer3_2_bn2_bias_fi_6_ce0,
        q0 => layer3_2_bn2_bias_fi_6_q0);

    layer3_2_bn2_bias_fi_5_U : component FracNet_T_layer3_tVd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        ce0 => layer3_2_bn2_bias_fi_5_ce0,
        q0 => layer3_2_bn2_bias_fi_5_q0);

    layer3_2_bn2_bias_fi_4_U : component FracNet_T_layer3_tWd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        ce0 => layer3_2_bn2_bias_fi_4_ce0,
        q0 => layer3_2_bn2_bias_fi_4_q0);

    layer3_2_bn2_bias_fi_3_U : component FracNet_T_layer3_tXd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        ce0 => layer3_2_bn2_bias_fi_3_ce0,
        q0 => layer3_2_bn2_bias_fi_3_q0);

    layer3_2_bn2_bias_fi_2_U : component FracNet_T_layer3_tYd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        ce0 => layer3_2_bn2_bias_fi_2_ce0,
        q0 => layer3_2_bn2_bias_fi_2_q0);

    layer3_2_bn2_bias_fi_1_U : component FracNet_T_layer3_tZd_x
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        ce0 => layer3_2_bn2_bias_fi_1_ce0,
        q0 => layer3_2_bn2_bias_fi_1_q0);

    layer3_2_bn2_bias_fi_U : component FracNet_T_layer3_t0d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        ce0 => layer3_2_bn2_bias_fi_ce0,
        q0 => layer3_2_bn2_bias_fi_q0);

    layer3_2_bn4_bias_fi_7_U : component FracNet_T_layer3_t1d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        ce0 => layer3_2_bn4_bias_fi_7_ce0,
        q0 => layer3_2_bn4_bias_fi_7_q0);

    layer3_2_bn4_bias_fi_6_U : component FracNet_T_layer3_t2d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        ce0 => layer3_2_bn4_bias_fi_6_ce0,
        q0 => layer3_2_bn4_bias_fi_6_q0);

    layer3_2_bn4_bias_fi_5_U : component FracNet_T_layer3_t3d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        ce0 => layer3_2_bn4_bias_fi_5_ce0,
        q0 => layer3_2_bn4_bias_fi_5_q0);

    layer3_2_bn4_bias_fi_4_U : component FracNet_T_layer3_t4d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        ce0 => layer3_2_bn4_bias_fi_4_ce0,
        q0 => layer3_2_bn4_bias_fi_4_q0);

    layer3_2_bn4_bias_fi_3_U : component FracNet_T_layer3_t5d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        ce0 => layer3_2_bn4_bias_fi_3_ce0,
        q0 => layer3_2_bn4_bias_fi_3_q0);

    layer3_2_bn4_bias_fi_2_U : component FracNet_T_layer3_t6d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        ce0 => layer3_2_bn4_bias_fi_2_ce0,
        q0 => layer3_2_bn4_bias_fi_2_q0);

    layer3_2_bn4_bias_fi_1_U : component FracNet_T_layer3_t7d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        ce0 => layer3_2_bn4_bias_fi_1_ce0,
        q0 => layer3_2_bn4_bias_fi_1_q0);

    layer3_2_bn4_bias_fi_U : component FracNet_T_layer3_t8d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        ce0 => layer3_2_bn4_bias_fi_ce0,
        q0 => layer3_2_bn4_bias_fi_q0);

    layer3_2_rprelu2_shi_15_U : component FracNet_T_layer3_t9d
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        ce0 => layer3_2_rprelu2_shi_15_ce0,
        q0 => layer3_2_rprelu2_shi_15_q0);

    layer3_2_rprelu2_shi_14_U : component FracNet_T_layer3_uad
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        ce0 => layer3_2_rprelu2_shi_14_ce0,
        q0 => layer3_2_rprelu2_shi_14_q0);

    layer3_2_rprelu2_shi_13_U : component FracNet_T_layer3_ubd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        ce0 => layer3_2_rprelu2_shi_13_ce0,
        q0 => layer3_2_rprelu2_shi_13_q0);

    layer3_2_rprelu2_shi_12_U : component FracNet_T_layer3_ucd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        ce0 => layer3_2_rprelu2_shi_12_ce0,
        q0 => layer3_2_rprelu2_shi_12_q0);

    layer3_2_rprelu2_shi_11_U : component FracNet_T_layer3_udd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        ce0 => layer3_2_rprelu2_shi_11_ce0,
        q0 => layer3_2_rprelu2_shi_11_q0);

    layer3_2_rprelu2_shi_10_U : component FracNet_T_layer3_ued
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        ce0 => layer3_2_rprelu2_shi_10_ce0,
        q0 => layer3_2_rprelu2_shi_10_q0);

    layer3_2_rprelu2_shi_9_U : component FracNet_T_layer3_ufd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        ce0 => layer3_2_rprelu2_shi_9_ce0,
        q0 => layer3_2_rprelu2_shi_9_q0);

    layer3_2_rprelu2_shi_8_U : component FracNet_T_layer3_ugd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        ce0 => layer3_2_rprelu2_shi_8_ce0,
        q0 => layer3_2_rprelu2_shi_8_q0);

    layer3_2_rprelu2_shi_7_U : component FracNet_T_layer3_uhd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        ce0 => layer3_2_rprelu2_shi_7_ce0,
        q0 => layer3_2_rprelu2_shi_7_q0);

    layer3_2_rprelu2_shi_6_U : component FracNet_T_layer3_uid
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        ce0 => layer3_2_rprelu2_shi_6_ce0,
        q0 => layer3_2_rprelu2_shi_6_q0);

    layer3_2_rprelu2_shi_5_U : component FracNet_T_layer3_ujd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        ce0 => layer3_2_rprelu2_shi_5_ce0,
        q0 => layer3_2_rprelu2_shi_5_q0);

    layer3_2_rprelu2_shi_4_U : component FracNet_T_layer3_ukd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        ce0 => layer3_2_rprelu2_shi_4_ce0,
        q0 => layer3_2_rprelu2_shi_4_q0);

    layer3_2_rprelu2_shi_3_U : component FracNet_T_layer3_uld
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        ce0 => layer3_2_rprelu2_shi_3_ce0,
        q0 => layer3_2_rprelu2_shi_3_q0);

    layer3_2_rprelu2_shi_2_U : component FracNet_T_layer3_umd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        ce0 => layer3_2_rprelu2_shi_2_ce0,
        q0 => layer3_2_rprelu2_shi_2_q0);

    layer3_2_rprelu2_shi_1_U : component FracNet_T_layer3_und
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        ce0 => layer3_2_rprelu2_shi_1_ce0,
        q0 => layer3_2_rprelu2_shi_1_q0);

    layer3_2_rprelu2_shi_U : component FracNet_T_layer3_uod
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        ce0 => layer3_2_rprelu2_shi_ce0,
        q0 => layer3_2_rprelu2_shi_q0);

    layer3_2_rprelu2_pre_7_U : component FracNet_T_layer3_upd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        ce0 => layer3_2_rprelu2_pre_7_ce0,
        q0 => layer3_2_rprelu2_pre_7_q0);

    layer3_2_rprelu2_pre_6_U : component FracNet_T_layer3_uqd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        ce0 => layer3_2_rprelu2_pre_6_ce0,
        q0 => layer3_2_rprelu2_pre_6_q0);

    layer3_2_rprelu2_pre_5_U : component FracNet_T_layer3_urd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        ce0 => layer3_2_rprelu2_pre_5_ce0,
        q0 => layer3_2_rprelu2_pre_5_q0);

    layer3_2_rprelu2_pre_4_U : component FracNet_T_layer3_usd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        ce0 => layer3_2_rprelu2_pre_4_ce0,
        q0 => layer3_2_rprelu2_pre_4_q0);

    layer3_2_rprelu2_pre_3_U : component FracNet_T_layer3_utd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        ce0 => layer3_2_rprelu2_pre_3_ce0,
        q0 => layer3_2_rprelu2_pre_3_q0);

    layer3_2_rprelu2_pre_2_U : component FracNet_T_layer3_uud
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        ce0 => layer3_2_rprelu2_pre_2_ce0,
        q0 => layer3_2_rprelu2_pre_2_q0);

    layer3_2_rprelu2_pre_1_U : component FracNet_T_layer3_uvd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        ce0 => layer3_2_rprelu2_pre_1_ce0,
        q0 => layer3_2_rprelu2_pre_1_q0);

    layer3_2_rprelu2_pre_U : component FracNet_T_layer3_uwd
    generic map (
        DataWidth => 24,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        ce0 => layer3_2_rprelu2_pre_ce0,
        q0 => layer3_2_rprelu2_pre_q0);

    FracNet_T_CTRL_s_axi_U : component FracNet_T_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_V => image_V,
        output_r => output_r);

    FracNet_T_IMG_m_axi_U : component FracNet_T_IMG_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMG_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMG_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMG_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMG_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMG_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMG_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMG_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMG_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMG_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMG_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMG_CACHE_VALUE)
    port map (
        AWVALID => m_axi_IMG_AWVALID,
        AWREADY => m_axi_IMG_AWREADY,
        AWADDR => m_axi_IMG_AWADDR,
        AWID => m_axi_IMG_AWID,
        AWLEN => m_axi_IMG_AWLEN,
        AWSIZE => m_axi_IMG_AWSIZE,
        AWBURST => m_axi_IMG_AWBURST,
        AWLOCK => m_axi_IMG_AWLOCK,
        AWCACHE => m_axi_IMG_AWCACHE,
        AWPROT => m_axi_IMG_AWPROT,
        AWQOS => m_axi_IMG_AWQOS,
        AWREGION => m_axi_IMG_AWREGION,
        AWUSER => m_axi_IMG_AWUSER,
        WVALID => m_axi_IMG_WVALID,
        WREADY => m_axi_IMG_WREADY,
        WDATA => m_axi_IMG_WDATA,
        WSTRB => m_axi_IMG_WSTRB,
        WLAST => m_axi_IMG_WLAST,
        WID => m_axi_IMG_WID,
        WUSER => m_axi_IMG_WUSER,
        ARVALID => m_axi_IMG_ARVALID,
        ARREADY => m_axi_IMG_ARREADY,
        ARADDR => m_axi_IMG_ARADDR,
        ARID => m_axi_IMG_ARID,
        ARLEN => m_axi_IMG_ARLEN,
        ARSIZE => m_axi_IMG_ARSIZE,
        ARBURST => m_axi_IMG_ARBURST,
        ARLOCK => m_axi_IMG_ARLOCK,
        ARCACHE => m_axi_IMG_ARCACHE,
        ARPROT => m_axi_IMG_ARPROT,
        ARQOS => m_axi_IMG_ARQOS,
        ARREGION => m_axi_IMG_ARREGION,
        ARUSER => m_axi_IMG_ARUSER,
        RVALID => m_axi_IMG_RVALID,
        RREADY => m_axi_IMG_RREADY,
        RDATA => m_axi_IMG_RDATA,
        RLAST => m_axi_IMG_RLAST,
        RID => m_axi_IMG_RID,
        RUSER => m_axi_IMG_RUSER,
        RRESP => m_axi_IMG_RRESP,
        BVALID => m_axi_IMG_BVALID,
        BREADY => m_axi_IMG_BREADY,
        BRESP => m_axi_IMG_BRESP,
        BID => m_axi_IMG_BID,
        BUSER => m_axi_IMG_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => IMG_ARVALID,
        I_ARREADY => IMG_ARREADY,
        I_ARADDR => IMG_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => IMG_RVALID,
        I_RREADY => IMG_RREADY,
        I_RDATA => IMG_RDATA,
        I_RID => IMG_RID,
        I_RUSER => IMG_RUSER,
        I_RRESP => IMG_RRESP,
        I_RLAST => IMG_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => IMG_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => IMG_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => IMG_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => IMG_BRESP,
        I_BID => IMG_BID,
        I_BUSER => IMG_BUSER);

    FracNet_T_RESULT_m_axi_U : component FracNet_T_RESULT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_RESULT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RESULT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RESULT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RESULT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RESULT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RESULT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RESULT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RESULT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RESULT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RESULT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RESULT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_RESULT_AWVALID,
        AWREADY => m_axi_RESULT_AWREADY,
        AWADDR => m_axi_RESULT_AWADDR,
        AWID => m_axi_RESULT_AWID,
        AWLEN => m_axi_RESULT_AWLEN,
        AWSIZE => m_axi_RESULT_AWSIZE,
        AWBURST => m_axi_RESULT_AWBURST,
        AWLOCK => m_axi_RESULT_AWLOCK,
        AWCACHE => m_axi_RESULT_AWCACHE,
        AWPROT => m_axi_RESULT_AWPROT,
        AWQOS => m_axi_RESULT_AWQOS,
        AWREGION => m_axi_RESULT_AWREGION,
        AWUSER => m_axi_RESULT_AWUSER,
        WVALID => m_axi_RESULT_WVALID,
        WREADY => m_axi_RESULT_WREADY,
        WDATA => m_axi_RESULT_WDATA,
        WSTRB => m_axi_RESULT_WSTRB,
        WLAST => m_axi_RESULT_WLAST,
        WID => m_axi_RESULT_WID,
        WUSER => m_axi_RESULT_WUSER,
        ARVALID => m_axi_RESULT_ARVALID,
        ARREADY => m_axi_RESULT_ARREADY,
        ARADDR => m_axi_RESULT_ARADDR,
        ARID => m_axi_RESULT_ARID,
        ARLEN => m_axi_RESULT_ARLEN,
        ARSIZE => m_axi_RESULT_ARSIZE,
        ARBURST => m_axi_RESULT_ARBURST,
        ARLOCK => m_axi_RESULT_ARLOCK,
        ARCACHE => m_axi_RESULT_ARCACHE,
        ARPROT => m_axi_RESULT_ARPROT,
        ARQOS => m_axi_RESULT_ARQOS,
        ARREGION => m_axi_RESULT_ARREGION,
        ARUSER => m_axi_RESULT_ARUSER,
        RVALID => m_axi_RESULT_RVALID,
        RREADY => m_axi_RESULT_RREADY,
        RDATA => m_axi_RESULT_RDATA,
        RLAST => m_axi_RESULT_RLAST,
        RID => m_axi_RESULT_RID,
        RUSER => m_axi_RESULT_RUSER,
        RRESP => m_axi_RESULT_RRESP,
        BVALID => m_axi_RESULT_BVALID,
        BREADY => m_axi_RESULT_BREADY,
        BRESP => m_axi_RESULT_BRESP,
        BID => m_axi_RESULT_BID,
        BUSER => m_axi_RESULT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => RESULT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => RESULT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => RESULT_RDATA,
        I_RID => RESULT_RID,
        I_RUSER => RESULT_RUSER,
        I_RRESP => RESULT_RRESP,
        I_RLAST => RESULT_RLAST,
        I_AWVALID => RESULT_AWVALID,
        I_AWREADY => RESULT_AWREADY,
        I_AWADDR => RESULT_addr_reg_7991,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_A,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => RESULT_WVALID,
        I_WREADY => RESULT_WREADY,
        I_WDATA => select_ln935_reg_8634,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => RESULT_BVALID,
        I_BREADY => RESULT_BREADY,
        I_BRESP => RESULT_BRESP,
        I_BID => RESULT_BID,
        I_BUSER => RESULT_BUSER);

    msb_fmap_0_V_U : component FracNet_T_msb_fmauxd
    generic map (
        DataWidth => 64,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => msb_fmap_0_V_address0,
        ce0 => msb_fmap_0_V_ce0,
        we0 => msb_fmap_0_V_we0,
        d0 => IMG_addr_read_reg_8052,
        q0 => msb_fmap_0_V_q0,
        address1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_address1,
        ce1 => msb_fmap_0_V_ce1,
        we1 => msb_fmap_0_V_we1,
        d1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_d1);

    msb_fmap_1_V_U : component FracNet_T_msb_fmauyd
    generic map (
        DataWidth => 64,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => msb_fmap_1_V_address0,
        ce0 => msb_fmap_1_V_ce0,
        we0 => msb_fmap_1_V_we0,
        d0 => IMG_addr_read_reg_8052,
        q0 => msb_fmap_1_V_q0);

    msb_fmap_2_V_U : component FracNet_T_msb_fmauyd
    generic map (
        DataWidth => 64,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => msb_fmap_2_V_address0,
        ce0 => msb_fmap_2_V_ce0,
        we0 => msb_fmap_2_V_we0,
        d0 => IMG_addr_read_reg_8052,
        q0 => msb_fmap_2_V_q0);

    lsb_fmap_0_V_U : component FracNet_T_lsb_fmauAd
    generic map (
        DataWidth => 64,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lsb_fmap_0_V_address0,
        ce0 => lsb_fmap_0_V_ce0,
        q0 => lsb_fmap_0_V_q0,
        address1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_address1,
        ce1 => lsb_fmap_0_V_ce1,
        we1 => lsb_fmap_0_V_we1,
        d1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_d1);

    out_buf_0_0_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_0_V_address0,
        ce0 => out_buf_0_0_V_ce0,
        we0 => out_buf_0_0_V_we0,
        d0 => out_buf_0_0_V_d0,
        q0 => out_buf_0_0_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_address1,
        ce1 => out_buf_0_0_V_ce1,
        we1 => out_buf_0_0_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_d1);

    out_buf_0_1_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_1_V_address0,
        ce0 => out_buf_0_1_V_ce0,
        we0 => out_buf_0_1_V_we0,
        d0 => out_buf_0_1_V_d0,
        q0 => out_buf_0_1_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_address1,
        ce1 => out_buf_0_1_V_ce1,
        we1 => out_buf_0_1_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_d1);

    out_buf_0_2_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_2_V_address0,
        ce0 => out_buf_0_2_V_ce0,
        we0 => out_buf_0_2_V_we0,
        d0 => out_buf_0_2_V_d0,
        q0 => out_buf_0_2_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_address1,
        ce1 => out_buf_0_2_V_ce1,
        we1 => out_buf_0_2_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_d1);

    out_buf_0_3_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_3_V_address0,
        ce0 => out_buf_0_3_V_ce0,
        we0 => out_buf_0_3_V_we0,
        d0 => out_buf_0_3_V_d0,
        q0 => out_buf_0_3_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_address1,
        ce1 => out_buf_0_3_V_ce1,
        we1 => out_buf_0_3_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_d1);

    out_buf_0_4_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_4_V_address0,
        ce0 => out_buf_0_4_V_ce0,
        we0 => out_buf_0_4_V_we0,
        d0 => out_buf_0_4_V_d0,
        q0 => out_buf_0_4_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_address1,
        ce1 => out_buf_0_4_V_ce1,
        we1 => out_buf_0_4_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_d1);

    out_buf_0_5_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_5_V_address0,
        ce0 => out_buf_0_5_V_ce0,
        we0 => out_buf_0_5_V_we0,
        d0 => out_buf_0_5_V_d0,
        q0 => out_buf_0_5_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_address1,
        ce1 => out_buf_0_5_V_ce1,
        we1 => out_buf_0_5_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_d1);

    out_buf_0_6_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_6_V_address0,
        ce0 => out_buf_0_6_V_ce0,
        we0 => out_buf_0_6_V_we0,
        d0 => out_buf_0_6_V_d0,
        q0 => out_buf_0_6_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_address1,
        ce1 => out_buf_0_6_V_ce1,
        we1 => out_buf_0_6_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_d1);

    out_buf_0_7_V_U : component FracNet_T_out_bufuBd
    generic map (
        DataWidth => 24,
        AddressRange => 8712,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_0_7_V_address0,
        ce0 => out_buf_0_7_V_ce0,
        we0 => out_buf_0_7_V_we0,
        d0 => out_buf_0_7_V_d0,
        q0 => out_buf_0_7_V_q0,
        address1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_address1,
        ce1 => out_buf_0_7_V_ce1,
        we1 => out_buf_0_7_V_we1,
        d1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_d1);

    out_buf_t0_0_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_0_V_address0,
        ce0 => out_buf_t0_0_V_ce0,
        q0 => out_buf_t0_0_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address1,
        ce1 => out_buf_t0_0_V_ce1,
        we1 => out_buf_t0_0_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_d1);

    out_buf_t0_1_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_1_V_address0,
        ce0 => out_buf_t0_1_V_ce0,
        q0 => out_buf_t0_1_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address1,
        ce1 => out_buf_t0_1_V_ce1,
        we1 => out_buf_t0_1_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_d1);

    out_buf_t0_2_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_2_V_address0,
        ce0 => out_buf_t0_2_V_ce0,
        q0 => out_buf_t0_2_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address1,
        ce1 => out_buf_t0_2_V_ce1,
        we1 => out_buf_t0_2_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_d1);

    out_buf_t0_3_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_3_V_address0,
        ce0 => out_buf_t0_3_V_ce0,
        q0 => out_buf_t0_3_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address1,
        ce1 => out_buf_t0_3_V_ce1,
        we1 => out_buf_t0_3_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_d1);

    out_buf_t0_4_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_4_V_address0,
        ce0 => out_buf_t0_4_V_ce0,
        q0 => out_buf_t0_4_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address1,
        ce1 => out_buf_t0_4_V_ce1,
        we1 => out_buf_t0_4_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_d1);

    out_buf_t0_5_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_5_V_address0,
        ce0 => out_buf_t0_5_V_ce0,
        q0 => out_buf_t0_5_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address1,
        ce1 => out_buf_t0_5_V_ce1,
        we1 => out_buf_t0_5_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_d1);

    out_buf_t0_6_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_6_V_address0,
        ce0 => out_buf_t0_6_V_ce0,
        q0 => out_buf_t0_6_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address1,
        ce1 => out_buf_t0_6_V_ce1,
        we1 => out_buf_t0_6_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_d1);

    out_buf_t0_7_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t0_7_V_address0,
        ce0 => out_buf_t0_7_V_ce0,
        q0 => out_buf_t0_7_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address1,
        ce1 => out_buf_t0_7_V_ce1,
        we1 => out_buf_t0_7_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_d1);

    out_buf_t1_0_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_0_V_address0,
        ce0 => out_buf_t1_0_V_ce0,
        q0 => out_buf_t1_0_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address1,
        ce1 => out_buf_t1_0_V_ce1,
        we1 => out_buf_t1_0_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_d1);

    out_buf_t1_1_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_1_V_address0,
        ce0 => out_buf_t1_1_V_ce0,
        q0 => out_buf_t1_1_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address1,
        ce1 => out_buf_t1_1_V_ce1,
        we1 => out_buf_t1_1_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_d1);

    out_buf_t1_2_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_2_V_address0,
        ce0 => out_buf_t1_2_V_ce0,
        q0 => out_buf_t1_2_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address1,
        ce1 => out_buf_t1_2_V_ce1,
        we1 => out_buf_t1_2_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_d1);

    out_buf_t1_3_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_3_V_address0,
        ce0 => out_buf_t1_3_V_ce0,
        q0 => out_buf_t1_3_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address1,
        ce1 => out_buf_t1_3_V_ce1,
        we1 => out_buf_t1_3_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_d1);

    out_buf_t1_4_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_4_V_address0,
        ce0 => out_buf_t1_4_V_ce0,
        q0 => out_buf_t1_4_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address1,
        ce1 => out_buf_t1_4_V_ce1,
        we1 => out_buf_t1_4_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_d1);

    out_buf_t1_5_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_5_V_address0,
        ce0 => out_buf_t1_5_V_ce0,
        q0 => out_buf_t1_5_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address1,
        ce1 => out_buf_t1_5_V_ce1,
        we1 => out_buf_t1_5_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_d1);

    out_buf_t1_6_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_6_V_address0,
        ce0 => out_buf_t1_6_V_ce0,
        q0 => out_buf_t1_6_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address1,
        ce1 => out_buf_t1_6_V_ce1,
        we1 => out_buf_t1_6_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_d1);

    out_buf_t1_7_V_U : component FracNet_T_out_bufuJd
    generic map (
        DataWidth => 16,
        AddressRange => 1089,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_buf_t1_7_V_address0,
        ce0 => out_buf_t1_7_V_ce0,
        q0 => out_buf_t1_7_V_q0,
        address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address1,
        ce1 => out_buf_t1_7_V_ce1,
        we1 => out_buf_t1_7_V_we1,
        d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_d1);

    pool_out_buf_V_U : component FracNet_T_pool_ouuZd
    generic map (
        DataWidth => 24,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pool_out_buf_V_address0,
        ce0 => pool_out_buf_V_ce0,
        we0 => pool_out_buf_V_we0,
        d0 => grp_avgpool_8x8_fu_6851_outputs_V_d0,
        q0 => pool_out_buf_V_q0);

    linear_out_buf_U : component FracNet_T_linear_u0d
    generic map (
        DataWidth => 24,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => linear_out_buf_address0,
        ce0 => linear_out_buf_ce0,
        we0 => linear_out_buf_we0,
        d0 => grp_matmul_fu_6769_outputs_V_d0,
        q0 => linear_out_buf_q0);

    grp_pg_conv3x3_tile_fu_3548 : component pg_conv3x3_tile
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pg_conv3x3_tile_fu_3548_ap_start,
        ap_done => grp_pg_conv3x3_tile_fu_3548_ap_done,
        ap_idle => grp_pg_conv3x3_tile_fu_3548_ap_idle,
        ap_ready => grp_pg_conv3x3_tile_fu_3548_ap_ready,
        msb_inputs_0_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_address0,
        msb_inputs_0_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_ce0,
        msb_inputs_0_V_q0 => msb_fmap_0_V_q0,
        msb_inputs_1_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_address0,
        msb_inputs_1_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_ce0,
        msb_inputs_1_V_q0 => msb_fmap_1_V_q0,
        msb_inputs_2_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_address0,
        msb_inputs_2_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_ce0,
        msb_inputs_2_V_q0 => msb_fmap_2_V_q0,
        lsb_inputs_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_address0,
        lsb_inputs_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_ce0,
        lsb_inputs_V_q0 => lsb_fmap_0_V_q0,
        weights_V_offset => grp_pg_conv3x3_tile_fu_3548_weights_V_offset,
        msb_outputs_0_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address0,
        msb_outputs_0_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce0,
        msb_outputs_0_V_q0 => out_buf_t0_0_V_q0,
        msb_outputs_0_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address1,
        msb_outputs_0_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce1,
        msb_outputs_0_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_we1,
        msb_outputs_0_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_d1,
        msb_outputs_1_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address0,
        msb_outputs_1_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce0,
        msb_outputs_1_V_q0 => out_buf_t0_1_V_q0,
        msb_outputs_1_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address1,
        msb_outputs_1_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce1,
        msb_outputs_1_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_we1,
        msb_outputs_1_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_d1,
        msb_outputs_2_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address0,
        msb_outputs_2_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce0,
        msb_outputs_2_V_q0 => out_buf_t0_2_V_q0,
        msb_outputs_2_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address1,
        msb_outputs_2_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce1,
        msb_outputs_2_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_we1,
        msb_outputs_2_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_d1,
        msb_outputs_3_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address0,
        msb_outputs_3_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce0,
        msb_outputs_3_V_q0 => out_buf_t0_3_V_q0,
        msb_outputs_3_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address1,
        msb_outputs_3_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce1,
        msb_outputs_3_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_we1,
        msb_outputs_3_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_d1,
        msb_outputs_4_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address0,
        msb_outputs_4_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce0,
        msb_outputs_4_V_q0 => out_buf_t0_4_V_q0,
        msb_outputs_4_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address1,
        msb_outputs_4_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce1,
        msb_outputs_4_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_we1,
        msb_outputs_4_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_d1,
        msb_outputs_5_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address0,
        msb_outputs_5_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce0,
        msb_outputs_5_V_q0 => out_buf_t0_5_V_q0,
        msb_outputs_5_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address1,
        msb_outputs_5_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce1,
        msb_outputs_5_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_we1,
        msb_outputs_5_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_d1,
        msb_outputs_6_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address0,
        msb_outputs_6_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce0,
        msb_outputs_6_V_q0 => out_buf_t0_6_V_q0,
        msb_outputs_6_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address1,
        msb_outputs_6_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce1,
        msb_outputs_6_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_we1,
        msb_outputs_6_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_d1,
        msb_outputs_7_V_address0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address0,
        msb_outputs_7_V_ce0 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce0,
        msb_outputs_7_V_q0 => out_buf_t0_7_V_q0,
        msb_outputs_7_V_address1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address1,
        msb_outputs_7_V_ce1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce1,
        msb_outputs_7_V_we1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_we1,
        msb_outputs_7_V_d1 => grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_d1,
        lsb_outputs_0_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address0,
        lsb_outputs_0_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce0,
        lsb_outputs_0_V_q0 => out_buf_t1_0_V_q0,
        lsb_outputs_0_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address1,
        lsb_outputs_0_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce1,
        lsb_outputs_0_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_we1,
        lsb_outputs_0_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_d1,
        lsb_outputs_1_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address0,
        lsb_outputs_1_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce0,
        lsb_outputs_1_V_q0 => out_buf_t1_1_V_q0,
        lsb_outputs_1_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address1,
        lsb_outputs_1_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce1,
        lsb_outputs_1_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_we1,
        lsb_outputs_1_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_d1,
        lsb_outputs_2_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address0,
        lsb_outputs_2_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce0,
        lsb_outputs_2_V_q0 => out_buf_t1_2_V_q0,
        lsb_outputs_2_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address1,
        lsb_outputs_2_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce1,
        lsb_outputs_2_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_we1,
        lsb_outputs_2_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_d1,
        lsb_outputs_3_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address0,
        lsb_outputs_3_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce0,
        lsb_outputs_3_V_q0 => out_buf_t1_3_V_q0,
        lsb_outputs_3_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address1,
        lsb_outputs_3_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce1,
        lsb_outputs_3_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_we1,
        lsb_outputs_3_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_d1,
        lsb_outputs_4_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address0,
        lsb_outputs_4_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce0,
        lsb_outputs_4_V_q0 => out_buf_t1_4_V_q0,
        lsb_outputs_4_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address1,
        lsb_outputs_4_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce1,
        lsb_outputs_4_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_we1,
        lsb_outputs_4_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_d1,
        lsb_outputs_5_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address0,
        lsb_outputs_5_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce0,
        lsb_outputs_5_V_q0 => out_buf_t1_5_V_q0,
        lsb_outputs_5_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address1,
        lsb_outputs_5_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce1,
        lsb_outputs_5_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_we1,
        lsb_outputs_5_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_d1,
        lsb_outputs_6_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address0,
        lsb_outputs_6_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce0,
        lsb_outputs_6_V_q0 => out_buf_t1_6_V_q0,
        lsb_outputs_6_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address1,
        lsb_outputs_6_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce1,
        lsb_outputs_6_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_we1,
        lsb_outputs_6_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_d1,
        lsb_outputs_7_V_address0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address0,
        lsb_outputs_7_V_ce0 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce0,
        lsb_outputs_7_V_q0 => out_buf_t1_7_V_q0,
        lsb_outputs_7_V_address1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address1,
        lsb_outputs_7_V_ce1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce1,
        lsb_outputs_7_V_we1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_we1,
        lsb_outputs_7_V_d1 => grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_d1,
        c_in => grp_pg_conv3x3_tile_fu_3548_c_in,
        in_channels => grp_pg_conv3x3_tile_fu_3548_in_channels,
        H_fmap_out => grp_pg_conv3x3_tile_fu_3548_H_fmap_out);

    grp_quant_and_pack_fu_3972 : component quant_and_pack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_quant_and_pack_fu_3972_ap_start,
        ap_done => grp_quant_and_pack_fu_3972_ap_done,
        ap_idle => grp_quant_and_pack_fu_3972_ap_idle,
        ap_ready => grp_quant_and_pack_fu_3972_ap_ready,
        prior_outputs_0_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_0_V_address0,
        prior_outputs_0_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_0_V_ce0,
        prior_outputs_0_V_q0 => out_buf_0_0_V_q0,
        prior_outputs_1_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_1_V_address0,
        prior_outputs_1_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_1_V_ce0,
        prior_outputs_1_V_q0 => out_buf_0_1_V_q0,
        prior_outputs_2_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_2_V_address0,
        prior_outputs_2_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_2_V_ce0,
        prior_outputs_2_V_q0 => out_buf_0_2_V_q0,
        prior_outputs_3_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_3_V_address0,
        prior_outputs_3_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_3_V_ce0,
        prior_outputs_3_V_q0 => out_buf_0_3_V_q0,
        prior_outputs_4_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_4_V_address0,
        prior_outputs_4_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_4_V_ce0,
        prior_outputs_4_V_q0 => out_buf_0_4_V_q0,
        prior_outputs_5_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_5_V_address0,
        prior_outputs_5_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_5_V_ce0,
        prior_outputs_5_V_q0 => out_buf_0_5_V_q0,
        prior_outputs_6_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_6_V_address0,
        prior_outputs_6_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_6_V_ce0,
        prior_outputs_6_V_q0 => out_buf_0_6_V_q0,
        prior_outputs_7_V_address0 => grp_quant_and_pack_fu_3972_prior_outputs_7_V_address0,
        prior_outputs_7_V_ce0 => grp_quant_and_pack_fu_3972_prior_outputs_7_V_ce0,
        prior_outputs_7_V_q0 => out_buf_0_7_V_q0,
        msb_buffer_0_V_address0 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_address0,
        msb_buffer_0_V_ce0 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce0,
        msb_buffer_0_V_q0 => msb_fmap_0_V_q0,
        msb_buffer_0_V_address1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_address1,
        msb_buffer_0_V_ce1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce1,
        msb_buffer_0_V_we1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_we1,
        msb_buffer_0_V_d1 => grp_quant_and_pack_fu_3972_msb_buffer_0_V_d1,
        lsb_buffer_V_address0 => grp_quant_and_pack_fu_3972_lsb_buffer_V_address0,
        lsb_buffer_V_ce0 => grp_quant_and_pack_fu_3972_lsb_buffer_V_ce0,
        lsb_buffer_V_q0 => lsb_fmap_0_V_q0,
        lsb_buffer_V_address1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_address1,
        lsb_buffer_V_ce1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_ce1,
        lsb_buffer_V_we1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_we1,
        lsb_buffer_V_d1 => grp_quant_and_pack_fu_3972_lsb_buffer_V_d1,
        H_fmap => grp_quant_and_pack_fu_3972_H_fmap,
        in_channels => grp_quant_and_pack_fu_3972_in_channels);

    grp_bn_relu_shortcut_fu_4069 : component bn_relu_shortcut
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bn_relu_shortcut_fu_4069_ap_start,
        ap_done => grp_bn_relu_shortcut_fu_4069_ap_done,
        ap_idle => grp_bn_relu_shortcut_fu_4069_ap_idle,
        ap_ready => grp_bn_relu_shortcut_fu_4069_ap_ready,
        residual_0_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_0_V_address0,
        residual_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_0_V_ce0,
        residual_0_V_q0 => out_buf_0_0_V_q0,
        residual_0_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_address1,
        residual_0_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_ce1,
        residual_0_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_we1,
        residual_0_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_0_V_d1,
        residual_1_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_1_V_address0,
        residual_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_1_V_ce0,
        residual_1_V_q0 => out_buf_0_1_V_q0,
        residual_1_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_address1,
        residual_1_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_ce1,
        residual_1_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_we1,
        residual_1_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_1_V_d1,
        residual_2_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_2_V_address0,
        residual_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_2_V_ce0,
        residual_2_V_q0 => out_buf_0_2_V_q0,
        residual_2_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_address1,
        residual_2_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_ce1,
        residual_2_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_we1,
        residual_2_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_2_V_d1,
        residual_3_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_3_V_address0,
        residual_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_3_V_ce0,
        residual_3_V_q0 => out_buf_0_3_V_q0,
        residual_3_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_address1,
        residual_3_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_ce1,
        residual_3_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_we1,
        residual_3_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_3_V_d1,
        residual_4_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_4_V_address0,
        residual_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_4_V_ce0,
        residual_4_V_q0 => out_buf_0_4_V_q0,
        residual_4_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_address1,
        residual_4_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_ce1,
        residual_4_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_we1,
        residual_4_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_4_V_d1,
        residual_5_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_5_V_address0,
        residual_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_5_V_ce0,
        residual_5_V_q0 => out_buf_0_5_V_q0,
        residual_5_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_address1,
        residual_5_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_ce1,
        residual_5_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_we1,
        residual_5_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_5_V_d1,
        residual_6_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_6_V_address0,
        residual_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_6_V_ce0,
        residual_6_V_q0 => out_buf_0_6_V_q0,
        residual_6_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_address1,
        residual_6_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_ce1,
        residual_6_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_we1,
        residual_6_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_6_V_d1,
        residual_7_V_address0 => grp_bn_relu_shortcut_fu_4069_residual_7_V_address0,
        residual_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_residual_7_V_ce0,
        residual_7_V_q0 => out_buf_0_7_V_q0,
        residual_7_V_address1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_address1,
        residual_7_V_ce1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_ce1,
        residual_7_V_we1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_we1,
        residual_7_V_d1 => grp_bn_relu_shortcut_fu_4069_residual_7_V_d1,
        block_t0_0_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_0_V_address0,
        block_t0_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_0_V_ce0,
        block_t0_0_V_q0 => out_buf_t0_0_V_q0,
        block_t0_1_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_1_V_address0,
        block_t0_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_1_V_ce0,
        block_t0_1_V_q0 => out_buf_t0_1_V_q0,
        block_t0_2_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_2_V_address0,
        block_t0_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_2_V_ce0,
        block_t0_2_V_q0 => out_buf_t0_2_V_q0,
        block_t0_3_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_3_V_address0,
        block_t0_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_3_V_ce0,
        block_t0_3_V_q0 => out_buf_t0_3_V_q0,
        block_t0_4_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_4_V_address0,
        block_t0_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_4_V_ce0,
        block_t0_4_V_q0 => out_buf_t0_4_V_q0,
        block_t0_5_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_5_V_address0,
        block_t0_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_5_V_ce0,
        block_t0_5_V_q0 => out_buf_t0_5_V_q0,
        block_t0_6_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_6_V_address0,
        block_t0_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_6_V_ce0,
        block_t0_6_V_q0 => out_buf_t0_6_V_q0,
        block_t0_7_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t0_7_V_address0,
        block_t0_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t0_7_V_ce0,
        block_t0_7_V_q0 => out_buf_t0_7_V_q0,
        block_t1_0_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_0_V_address0,
        block_t1_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_0_V_ce0,
        block_t1_0_V_q0 => out_buf_t1_0_V_q0,
        block_t1_1_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_1_V_address0,
        block_t1_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_1_V_ce0,
        block_t1_1_V_q0 => out_buf_t1_1_V_q0,
        block_t1_2_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_2_V_address0,
        block_t1_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_2_V_ce0,
        block_t1_2_V_q0 => out_buf_t1_2_V_q0,
        block_t1_3_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_3_V_address0,
        block_t1_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_3_V_ce0,
        block_t1_3_V_q0 => out_buf_t1_3_V_q0,
        block_t1_4_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_4_V_address0,
        block_t1_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_4_V_ce0,
        block_t1_4_V_q0 => out_buf_t1_4_V_q0,
        block_t1_5_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_5_V_address0,
        block_t1_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_5_V_ce0,
        block_t1_5_V_q0 => out_buf_t1_5_V_q0,
        block_t1_6_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_6_V_address0,
        block_t1_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_6_V_ce0,
        block_t1_6_V_q0 => out_buf_t1_6_V_q0,
        block_t1_7_V_address0 => grp_bn_relu_shortcut_fu_4069_block_t1_7_V_address0,
        block_t1_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_block_t1_7_V_ce0,
        block_t1_7_V_q0 => out_buf_t1_7_V_q0,
        threshold_0_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_address0,
        threshold_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0,
        threshold_0_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0,
        threshold_1_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_address0,
        threshold_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0,
        threshold_1_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0,
        threshold_2_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_address0,
        threshold_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0,
        threshold_2_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0,
        threshold_3_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_address0,
        threshold_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0,
        threshold_3_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0,
        threshold_4_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_address0,
        threshold_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0,
        threshold_4_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0,
        threshold_5_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_address0,
        threshold_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0,
        threshold_5_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0,
        threshold_6_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_address0,
        threshold_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0,
        threshold_6_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0,
        threshold_7_V_address0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_address0,
        threshold_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0,
        threshold_7_V_q0 => grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0,
        threshold_V_offset => grp_bn_relu_shortcut_fu_4069_threshold_V_offset,
        bn_weight_0_0_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_address0,
        bn_weight_0_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0,
        bn_weight_0_0_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0,
        bn_weight_0_1_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_address0,
        bn_weight_0_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0,
        bn_weight_0_1_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0,
        bn_weight_0_2_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_address0,
        bn_weight_0_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0,
        bn_weight_0_2_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0,
        bn_weight_0_3_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_address0,
        bn_weight_0_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0,
        bn_weight_0_3_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0,
        bn_weight_0_4_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_address0,
        bn_weight_0_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0,
        bn_weight_0_4_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0,
        bn_weight_0_5_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_address0,
        bn_weight_0_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0,
        bn_weight_0_5_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0,
        bn_weight_0_6_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_address0,
        bn_weight_0_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0,
        bn_weight_0_6_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0,
        bn_weight_0_7_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_address0,
        bn_weight_0_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0,
        bn_weight_0_7_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0,
        bn_weight_0_V_offset => grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset,
        bn_weight_1_0_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_address0,
        bn_weight_1_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0,
        bn_weight_1_0_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0,
        bn_weight_1_1_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_address0,
        bn_weight_1_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0,
        bn_weight_1_1_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0,
        bn_weight_1_2_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_address0,
        bn_weight_1_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0,
        bn_weight_1_2_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0,
        bn_weight_1_3_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_address0,
        bn_weight_1_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0,
        bn_weight_1_3_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0,
        bn_weight_1_4_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_address0,
        bn_weight_1_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0,
        bn_weight_1_4_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0,
        bn_weight_1_5_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_address0,
        bn_weight_1_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0,
        bn_weight_1_5_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0,
        bn_weight_1_6_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_address0,
        bn_weight_1_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0,
        bn_weight_1_6_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0,
        bn_weight_1_7_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_address0,
        bn_weight_1_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0,
        bn_weight_1_7_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0,
        bn_weight_1_V_offset => grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset,
        bn_bias_0_0_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_address0,
        bn_bias_0_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0,
        bn_bias_0_0_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0,
        bn_bias_0_1_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_address0,
        bn_bias_0_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0,
        bn_bias_0_1_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0,
        bn_bias_0_2_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_address0,
        bn_bias_0_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0,
        bn_bias_0_2_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0,
        bn_bias_0_3_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_address0,
        bn_bias_0_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0,
        bn_bias_0_3_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0,
        bn_bias_0_4_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_address0,
        bn_bias_0_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0,
        bn_bias_0_4_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0,
        bn_bias_0_5_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_address0,
        bn_bias_0_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0,
        bn_bias_0_5_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0,
        bn_bias_0_6_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_address0,
        bn_bias_0_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0,
        bn_bias_0_6_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0,
        bn_bias_0_7_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_address0,
        bn_bias_0_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0,
        bn_bias_0_7_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0,
        bn_bias_0_V_offset => grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset,
        bn_bias_1_0_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_address0,
        bn_bias_1_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0,
        bn_bias_1_0_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0,
        bn_bias_1_1_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_address0,
        bn_bias_1_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0,
        bn_bias_1_1_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0,
        bn_bias_1_2_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_address0,
        bn_bias_1_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0,
        bn_bias_1_2_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0,
        bn_bias_1_3_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_address0,
        bn_bias_1_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0,
        bn_bias_1_3_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0,
        bn_bias_1_4_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_address0,
        bn_bias_1_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0,
        bn_bias_1_4_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0,
        bn_bias_1_5_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_address0,
        bn_bias_1_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0,
        bn_bias_1_5_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0,
        bn_bias_1_6_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_address0,
        bn_bias_1_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0,
        bn_bias_1_6_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0,
        bn_bias_1_7_V_address0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_address0,
        bn_bias_1_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0,
        bn_bias_1_7_V_q0 => grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0,
        bn_bias_1_V_offset => grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset,
        relu_x_bias_0_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_address0,
        relu_x_bias_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0,
        relu_x_bias_0_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0,
        relu_x_bias_1_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_address0,
        relu_x_bias_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0,
        relu_x_bias_1_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0,
        relu_x_bias_2_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_address0,
        relu_x_bias_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0,
        relu_x_bias_2_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0,
        relu_x_bias_3_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_address0,
        relu_x_bias_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0,
        relu_x_bias_3_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0,
        relu_x_bias_4_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_address0,
        relu_x_bias_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0,
        relu_x_bias_4_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0,
        relu_x_bias_5_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_address0,
        relu_x_bias_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0,
        relu_x_bias_5_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0,
        relu_x_bias_6_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_address0,
        relu_x_bias_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0,
        relu_x_bias_6_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0,
        relu_x_bias_7_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_address0,
        relu_x_bias_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0,
        relu_x_bias_7_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0,
        relu_x_bias_V_offset => grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset,
        relu_y_bias_0_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_address0,
        relu_y_bias_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0,
        relu_y_bias_0_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0,
        relu_y_bias_1_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_address0,
        relu_y_bias_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0,
        relu_y_bias_1_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0,
        relu_y_bias_2_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_address0,
        relu_y_bias_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0,
        relu_y_bias_2_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0,
        relu_y_bias_3_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_address0,
        relu_y_bias_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0,
        relu_y_bias_3_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0,
        relu_y_bias_4_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_address0,
        relu_y_bias_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0,
        relu_y_bias_4_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0,
        relu_y_bias_5_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_address0,
        relu_y_bias_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0,
        relu_y_bias_5_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0,
        relu_y_bias_6_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_address0,
        relu_y_bias_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0,
        relu_y_bias_6_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0,
        relu_y_bias_7_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_address0,
        relu_y_bias_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0,
        relu_y_bias_7_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0,
        relu_y_bias_V_offset => grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset,
        relu_weight_0_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_address0,
        relu_weight_0_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0,
        relu_weight_0_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0,
        relu_weight_1_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_address0,
        relu_weight_1_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0,
        relu_weight_1_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0,
        relu_weight_2_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_address0,
        relu_weight_2_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0,
        relu_weight_2_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0,
        relu_weight_3_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_address0,
        relu_weight_3_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0,
        relu_weight_3_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0,
        relu_weight_4_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_address0,
        relu_weight_4_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0,
        relu_weight_4_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0,
        relu_weight_5_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_address0,
        relu_weight_5_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0,
        relu_weight_5_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0,
        relu_weight_6_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_address0,
        relu_weight_6_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0,
        relu_weight_6_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0,
        relu_weight_7_V_address0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_address0,
        relu_weight_7_V_ce0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0,
        relu_weight_7_V_q0 => grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0,
        relu_weight_V_offset => grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset,
        stride => grp_bn_relu_shortcut_fu_4069_stride,
        channel_tile => grp_bn_relu_shortcut_fu_4069_channel_tile,
        H_fmap => grp_bn_relu_shortcut_fu_4069_H_fmap);

    grp_avgpool_concat_fu_6751 : component avgpool_concat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_avgpool_concat_fu_6751_ap_start,
        ap_done => grp_avgpool_concat_fu_6751_ap_done,
        ap_idle => grp_avgpool_concat_fu_6751_ap_idle,
        ap_ready => grp_avgpool_concat_fu_6751_ap_ready,
        outputs_0_V_address0 => grp_avgpool_concat_fu_6751_outputs_0_V_address0,
        outputs_0_V_ce0 => grp_avgpool_concat_fu_6751_outputs_0_V_ce0,
        outputs_0_V_we0 => grp_avgpool_concat_fu_6751_outputs_0_V_we0,
        outputs_0_V_d0 => grp_avgpool_concat_fu_6751_outputs_0_V_d0,
        outputs_0_V_q0 => out_buf_0_0_V_q0,
        outputs_1_V_address0 => grp_avgpool_concat_fu_6751_outputs_1_V_address0,
        outputs_1_V_ce0 => grp_avgpool_concat_fu_6751_outputs_1_V_ce0,
        outputs_1_V_we0 => grp_avgpool_concat_fu_6751_outputs_1_V_we0,
        outputs_1_V_d0 => grp_avgpool_concat_fu_6751_outputs_1_V_d0,
        outputs_1_V_q0 => out_buf_0_1_V_q0,
        outputs_2_V_address0 => grp_avgpool_concat_fu_6751_outputs_2_V_address0,
        outputs_2_V_ce0 => grp_avgpool_concat_fu_6751_outputs_2_V_ce0,
        outputs_2_V_we0 => grp_avgpool_concat_fu_6751_outputs_2_V_we0,
        outputs_2_V_d0 => grp_avgpool_concat_fu_6751_outputs_2_V_d0,
        outputs_2_V_q0 => out_buf_0_2_V_q0,
        outputs_3_V_address0 => grp_avgpool_concat_fu_6751_outputs_3_V_address0,
        outputs_3_V_ce0 => grp_avgpool_concat_fu_6751_outputs_3_V_ce0,
        outputs_3_V_we0 => grp_avgpool_concat_fu_6751_outputs_3_V_we0,
        outputs_3_V_d0 => grp_avgpool_concat_fu_6751_outputs_3_V_d0,
        outputs_3_V_q0 => out_buf_0_3_V_q0,
        outputs_4_V_address0 => grp_avgpool_concat_fu_6751_outputs_4_V_address0,
        outputs_4_V_ce0 => grp_avgpool_concat_fu_6751_outputs_4_V_ce0,
        outputs_4_V_we0 => grp_avgpool_concat_fu_6751_outputs_4_V_we0,
        outputs_4_V_d0 => grp_avgpool_concat_fu_6751_outputs_4_V_d0,
        outputs_4_V_q0 => out_buf_0_4_V_q0,
        outputs_5_V_address0 => grp_avgpool_concat_fu_6751_outputs_5_V_address0,
        outputs_5_V_ce0 => grp_avgpool_concat_fu_6751_outputs_5_V_ce0,
        outputs_5_V_we0 => grp_avgpool_concat_fu_6751_outputs_5_V_we0,
        outputs_5_V_d0 => grp_avgpool_concat_fu_6751_outputs_5_V_d0,
        outputs_5_V_q0 => out_buf_0_5_V_q0,
        outputs_6_V_address0 => grp_avgpool_concat_fu_6751_outputs_6_V_address0,
        outputs_6_V_ce0 => grp_avgpool_concat_fu_6751_outputs_6_V_ce0,
        outputs_6_V_we0 => grp_avgpool_concat_fu_6751_outputs_6_V_we0,
        outputs_6_V_d0 => grp_avgpool_concat_fu_6751_outputs_6_V_d0,
        outputs_6_V_q0 => out_buf_0_6_V_q0,
        outputs_7_V_address0 => grp_avgpool_concat_fu_6751_outputs_7_V_address0,
        outputs_7_V_ce0 => grp_avgpool_concat_fu_6751_outputs_7_V_ce0,
        outputs_7_V_we0 => grp_avgpool_concat_fu_6751_outputs_7_V_we0,
        outputs_7_V_d0 => grp_avgpool_concat_fu_6751_outputs_7_V_d0,
        outputs_7_V_q0 => out_buf_0_7_V_q0,
        H_fmap => grp_avgpool_concat_fu_6751_H_fmap,
        in_channels => grp_avgpool_concat_fu_6751_in_channels);

    grp_matmul_fu_6769 : component matmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matmul_fu_6769_ap_start,
        ap_done => grp_matmul_fu_6769_ap_done,
        ap_idle => grp_matmul_fu_6769_ap_idle,
        ap_ready => grp_matmul_fu_6769_ap_ready,
        inputs_V_address0 => grp_matmul_fu_6769_inputs_V_address0,
        inputs_V_ce0 => grp_matmul_fu_6769_inputs_V_ce0,
        inputs_V_q0 => pool_out_buf_V_q0,
        outputs_V_address0 => grp_matmul_fu_6769_outputs_V_address0,
        outputs_V_ce0 => grp_matmul_fu_6769_outputs_V_ce0,
        outputs_V_we0 => grp_matmul_fu_6769_outputs_V_we0,
        outputs_V_d0 => grp_matmul_fu_6769_outputs_V_d0);

    grp_bn1_fu_6795 : component bn1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_bn1_fu_6795_ap_start,
        ap_done => grp_bn1_fu_6795_ap_done,
        ap_idle => grp_bn1_fu_6795_ap_idle,
        ap_ready => grp_bn1_fu_6795_ap_ready,
        out_buf_0_V_address0 => grp_bn1_fu_6795_out_buf_0_V_address0,
        out_buf_0_V_ce0 => grp_bn1_fu_6795_out_buf_0_V_ce0,
        out_buf_0_V_we0 => grp_bn1_fu_6795_out_buf_0_V_we0,
        out_buf_0_V_d0 => grp_bn1_fu_6795_out_buf_0_V_d0,
        out_buf_1_V_address0 => grp_bn1_fu_6795_out_buf_1_V_address0,
        out_buf_1_V_ce0 => grp_bn1_fu_6795_out_buf_1_V_ce0,
        out_buf_1_V_we0 => grp_bn1_fu_6795_out_buf_1_V_we0,
        out_buf_1_V_d0 => grp_bn1_fu_6795_out_buf_1_V_d0,
        out_buf_2_V_address0 => grp_bn1_fu_6795_out_buf_2_V_address0,
        out_buf_2_V_ce0 => grp_bn1_fu_6795_out_buf_2_V_ce0,
        out_buf_2_V_we0 => grp_bn1_fu_6795_out_buf_2_V_we0,
        out_buf_2_V_d0 => grp_bn1_fu_6795_out_buf_2_V_d0,
        out_buf_3_V_address0 => grp_bn1_fu_6795_out_buf_3_V_address0,
        out_buf_3_V_ce0 => grp_bn1_fu_6795_out_buf_3_V_ce0,
        out_buf_3_V_we0 => grp_bn1_fu_6795_out_buf_3_V_we0,
        out_buf_3_V_d0 => grp_bn1_fu_6795_out_buf_3_V_d0,
        out_buf_4_V_address0 => grp_bn1_fu_6795_out_buf_4_V_address0,
        out_buf_4_V_ce0 => grp_bn1_fu_6795_out_buf_4_V_ce0,
        out_buf_4_V_we0 => grp_bn1_fu_6795_out_buf_4_V_we0,
        out_buf_4_V_d0 => grp_bn1_fu_6795_out_buf_4_V_d0,
        out_buf_5_V_address0 => grp_bn1_fu_6795_out_buf_5_V_address0,
        out_buf_5_V_ce0 => grp_bn1_fu_6795_out_buf_5_V_ce0,
        out_buf_5_V_we0 => grp_bn1_fu_6795_out_buf_5_V_we0,
        out_buf_5_V_d0 => grp_bn1_fu_6795_out_buf_5_V_d0,
        out_buf_6_V_address0 => grp_bn1_fu_6795_out_buf_6_V_address0,
        out_buf_6_V_ce0 => grp_bn1_fu_6795_out_buf_6_V_ce0,
        out_buf_6_V_we0 => grp_bn1_fu_6795_out_buf_6_V_we0,
        out_buf_6_V_d0 => grp_bn1_fu_6795_out_buf_6_V_d0,
        out_buf_7_V_address0 => grp_bn1_fu_6795_out_buf_7_V_address0,
        out_buf_7_V_ce0 => grp_bn1_fu_6795_out_buf_7_V_ce0,
        out_buf_7_V_we0 => grp_bn1_fu_6795_out_buf_7_V_we0,
        out_buf_7_V_d0 => grp_bn1_fu_6795_out_buf_7_V_d0,
        block_t0_0_V_address0 => grp_bn1_fu_6795_block_t0_0_V_address0,
        block_t0_0_V_ce0 => grp_bn1_fu_6795_block_t0_0_V_ce0,
        block_t0_0_V_q0 => out_buf_t0_0_V_q0,
        block_t0_1_V_address0 => grp_bn1_fu_6795_block_t0_1_V_address0,
        block_t0_1_V_ce0 => grp_bn1_fu_6795_block_t0_1_V_ce0,
        block_t0_1_V_q0 => out_buf_t0_1_V_q0,
        block_t0_2_V_address0 => grp_bn1_fu_6795_block_t0_2_V_address0,
        block_t0_2_V_ce0 => grp_bn1_fu_6795_block_t0_2_V_ce0,
        block_t0_2_V_q0 => out_buf_t0_2_V_q0,
        block_t0_3_V_address0 => grp_bn1_fu_6795_block_t0_3_V_address0,
        block_t0_3_V_ce0 => grp_bn1_fu_6795_block_t0_3_V_ce0,
        block_t0_3_V_q0 => out_buf_t0_3_V_q0,
        block_t0_4_V_address0 => grp_bn1_fu_6795_block_t0_4_V_address0,
        block_t0_4_V_ce0 => grp_bn1_fu_6795_block_t0_4_V_ce0,
        block_t0_4_V_q0 => out_buf_t0_4_V_q0,
        block_t0_5_V_address0 => grp_bn1_fu_6795_block_t0_5_V_address0,
        block_t0_5_V_ce0 => grp_bn1_fu_6795_block_t0_5_V_ce0,
        block_t0_5_V_q0 => out_buf_t0_5_V_q0,
        block_t0_6_V_address0 => grp_bn1_fu_6795_block_t0_6_V_address0,
        block_t0_6_V_ce0 => grp_bn1_fu_6795_block_t0_6_V_ce0,
        block_t0_6_V_q0 => out_buf_t0_6_V_q0,
        block_t0_7_V_address0 => grp_bn1_fu_6795_block_t0_7_V_address0,
        block_t0_7_V_ce0 => grp_bn1_fu_6795_block_t0_7_V_ce0,
        block_t0_7_V_q0 => out_buf_t0_7_V_q0,
        bn_weight_V_offset => c_out_0_reg_3085,
        channel_tile => c_out_0_reg_3085);

    grp_avgpool_8x8_fu_6851 : component avgpool_8x8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_avgpool_8x8_fu_6851_ap_start,
        ap_done => grp_avgpool_8x8_fu_6851_ap_done,
        ap_idle => grp_avgpool_8x8_fu_6851_ap_idle,
        ap_ready => grp_avgpool_8x8_fu_6851_ap_ready,
        inputs_0_V_address0 => grp_avgpool_8x8_fu_6851_inputs_0_V_address0,
        inputs_0_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_0_V_ce0,
        inputs_0_V_q0 => out_buf_0_0_V_q0,
        inputs_1_V_address0 => grp_avgpool_8x8_fu_6851_inputs_1_V_address0,
        inputs_1_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_1_V_ce0,
        inputs_1_V_q0 => out_buf_0_1_V_q0,
        inputs_2_V_address0 => grp_avgpool_8x8_fu_6851_inputs_2_V_address0,
        inputs_2_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_2_V_ce0,
        inputs_2_V_q0 => out_buf_0_2_V_q0,
        inputs_3_V_address0 => grp_avgpool_8x8_fu_6851_inputs_3_V_address0,
        inputs_3_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_3_V_ce0,
        inputs_3_V_q0 => out_buf_0_3_V_q0,
        inputs_4_V_address0 => grp_avgpool_8x8_fu_6851_inputs_4_V_address0,
        inputs_4_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_4_V_ce0,
        inputs_4_V_q0 => out_buf_0_4_V_q0,
        inputs_5_V_address0 => grp_avgpool_8x8_fu_6851_inputs_5_V_address0,
        inputs_5_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_5_V_ce0,
        inputs_5_V_q0 => out_buf_0_5_V_q0,
        inputs_6_V_address0 => grp_avgpool_8x8_fu_6851_inputs_6_V_address0,
        inputs_6_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_6_V_ce0,
        inputs_6_V_q0 => out_buf_0_6_V_q0,
        inputs_7_V_address0 => grp_avgpool_8x8_fu_6851_inputs_7_V_address0,
        inputs_7_V_ce0 => grp_avgpool_8x8_fu_6851_inputs_7_V_ce0,
        inputs_7_V_q0 => out_buf_0_7_V_q0,
        outputs_V_address0 => grp_avgpool_8x8_fu_6851_outputs_V_address0,
        outputs_V_ce0 => grp_avgpool_8x8_fu_6851_outputs_V_ce0,
        outputs_V_we0 => grp_avgpool_8x8_fu_6851_outputs_V_we0,
        outputs_V_d0 => grp_avgpool_8x8_fu_6851_outputs_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_avgpool_8x8_fu_6851_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_avgpool_8x8_fu_6851_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln1031_fu_7677_p2 = ap_const_lv1_1))) then 
                    grp_avgpool_8x8_fu_6851_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_avgpool_8x8_fu_6851_ap_ready = ap_const_logic_1)) then 
                    grp_avgpool_8x8_fu_6851_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_avgpool_concat_fu_6751_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_avgpool_concat_fu_6751_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    grp_avgpool_concat_fu_6751_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_avgpool_concat_fu_6751_ap_ready = ap_const_logic_1)) then 
                    grp_avgpool_concat_fu_6751_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bn1_fu_6795_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bn1_fu_6795_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln104_fu_7110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_bn1_fu_6795_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bn1_fu_6795_ap_ready = ap_const_logic_1)) then 
                    grp_bn1_fu_6795_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bn_relu_shortcut_fu_4069_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_bn_relu_shortcut_fu_4069_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
                    grp_bn_relu_shortcut_fu_4069_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bn_relu_shortcut_fu_4069_ap_ready = ap_const_logic_1)) then 
                    grp_bn_relu_shortcut_fu_4069_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matmul_fu_6769_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matmul_fu_6769_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                    grp_matmul_fu_6769_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matmul_fu_6769_ap_ready = ap_const_logic_1)) then 
                    grp_matmul_fu_6769_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pg_conv3x3_tile_fu_3548_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pg_conv3x3_tile_fu_3548_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln563_fu_7425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((icmp_ln514_fu_7389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((icmp_ln454_fu_7353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((icmp_ln392_fu_7317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((icmp_ln342_fu_7281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((icmp_ln292_fu_7241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((icmp_ln242_fu_7205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln192_fu_7169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((icmp_ln142_fu_7133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln104_fu_7110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln1031_fu_7677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108)) or ((icmp_ln981_fu_7659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((icmp_ln932_fu_7641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98)) or ((icmp_ln882_fu_7623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93)) or ((icmp_ln833_fu_7596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88)) or ((icmp_ln773_fu_7573_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((icmp_ln712_fu_7537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((icmp_ln662_fu_7501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71)) or ((icmp_ln613_fu_7465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66)))) then 
                    grp_pg_conv3x3_tile_fu_3548_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pg_conv3x3_tile_fu_3548_ap_ready = ap_const_logic_1)) then 
                    grp_pg_conv3x3_tile_fu_3548_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_quant_and_pack_fu_3972_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_quant_and_pack_fu_3972_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln563_fu_7425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((icmp_ln514_fu_7389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56)) or ((icmp_ln454_fu_7353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((icmp_ln392_fu_7317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)) or ((icmp_ln342_fu_7281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((icmp_ln292_fu_7241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((icmp_ln242_fu_7205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln192_fu_7169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((icmp_ln142_fu_7133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((icmp_ln89_fu_7092_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state103) and (icmp_ln981_fu_7659_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln932_fu_7641_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state93) and (icmp_ln882_fu_7623_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state88) and (icmp_ln833_fu_7596_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state83) and (icmp_ln773_fu_7573_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln712_fu_7537_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state71) and (icmp_ln662_fu_7501_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (icmp_ln613_fu_7465_p2 = ap_const_lv1_1)))) then 
                    grp_quant_and_pack_fu_3972_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_quant_and_pack_fu_3972_ap_ready = ap_const_logic_1)) then 
                    grp_quant_and_pack_fu_3972_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_3029_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_3029 <= select_ln73_1_reg_8011;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_3029 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_in_0_reg_3107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then 
                c_in_0_reg_3107 <= c_in_reg_8075;
            elsif (((icmp_ln89_fu_7092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                c_in_0_reg_3107 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out40_0_reg_3130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out40_0_reg_3130 <= c_out_reg_8093;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out40_0_reg_3130 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out42_0_reg_3153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out42_0_reg_3153 <= c_out_2_reg_8124;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out42_0_reg_3153 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out44_0_reg_3176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out44_0_reg_3176 <= c_out_3_reg_8155;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out44_0_reg_3176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out46_0_reg_3199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out46_0_reg_3199 <= c_out_4_reg_8186;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out46_0_reg_3199 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out48_0_reg_3222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out48_0_reg_3222 <= c_out_5_reg_8217;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out48_0_reg_3222 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out50_0_reg_3245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out50_0_reg_3245 <= c_out_6_reg_8248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out50_0_reg_3245 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_out52_0_reg_3268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out52_0_reg_3268 <= c_out_7_reg_8279;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then 
                c_out52_0_reg_3268 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out54_0_reg_3291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out54_0_reg_3291 <= c_out_8_reg_8310;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out54_0_reg_3291 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out56_0_reg_3303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out56_0_reg_3303 <= c_out_9_reg_8341;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out56_0_reg_3303 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out58_0_reg_3326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out58_0_reg_3326 <= c_out_10_reg_8372;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out58_0_reg_3326 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out60_0_reg_3349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out60_0_reg_3349 <= c_out_11_reg_8403;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out60_0_reg_3349 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out62_0_reg_3372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out62_0_reg_3372 <= c_out_12_reg_8434;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out62_0_reg_3372 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_out64_0_reg_3395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out64_0_reg_3395 <= c_out_13_reg_8465;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then 
                c_out64_0_reg_3395 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out66_0_reg_3418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out66_0_reg_3418 <= c_out_14_reg_8483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out66_0_reg_3418 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out68_0_reg_3441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out68_0_reg_3441 <= c_out_15_reg_8501;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state92) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out68_0_reg_3441 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out70_0_reg_3465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out70_0_reg_3465 <= c_out_16_reg_8514;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out70_0_reg_3465 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out72_0_reg_3489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state106) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out72_0_reg_3489 <= c_out_17_reg_8527;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state102) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out72_0_reg_3489 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out74_0_reg_3513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state111) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                c_out74_0_reg_3513 <= c_out_18_reg_8540;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state107) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                c_out74_0_reg_3513 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    c_out_0_reg_3085_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                c_out_0_reg_3085 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_bn1_fu_6795_ap_done = ap_const_logic_1))) then 
                c_out_0_reg_3085 <= c_out_1_reg_8062;
            end if; 
        end if;
    end process;

    col_0_reg_3062_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_6898_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_0_reg_3062 <= col_fu_6984_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_0_reg_3062 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    conv_weight_ptr_0_reg_3073_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                conv_weight_ptr_0_reg_3073 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_bn1_fu_6795_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_0_reg_3073 <= add_ln104_reg_8067;
            end if; 
        end if;
    end process;

    conv_weight_ptr_10_reg_3315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_10_reg_3315 <= conv_weight_ptr_reg_8351;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_10_reg_3315 <= ap_const_lv4_A;
            end if; 
        end if;
    end process;

    conv_weight_ptr_11_reg_3338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_11_reg_3338 <= conv_weight_ptr_20_reg_8382;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_11_reg_3338 <= ap_const_lv6_1E;
            end if; 
        end if;
    end process;

    conv_weight_ptr_12_reg_3361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_12_reg_3361 <= conv_weight_ptr_21_reg_8413;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_12_reg_3361 <= ap_const_lv6_22;
            end if; 
        end if;
    end process;

    conv_weight_ptr_13_reg_3384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state79) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_13_reg_3384 <= conv_weight_ptr_22_reg_8444;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state75) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_13_reg_3384 <= ap_const_lv6_26;
            end if; 
        end if;
    end process;

    conv_weight_ptr_14_reg_3407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_14_reg_3407 <= conv_weight_ptr_23_reg_8475;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_14_reg_3407 <= ap_const_lv6_2A;
            end if; 
        end if;
    end process;

    conv_weight_ptr_15_reg_3430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_15_reg_3430 <= conv_weight_ptr_24_reg_8493;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_15_reg_3430 <= ap_const_lv5_12;
            end if; 
        end if;
    end process;

    conv_weight_ptr_16_reg_3453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_16_reg_3453 <= conv_weight_ptr_25_reg_8506;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state92) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_16_reg_3453 <= ap_const_lv7_3A;
            end if; 
        end if;
    end process;

    conv_weight_ptr_17_reg_3477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_17_reg_3477 <= conv_weight_ptr_26_reg_8519;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_17_reg_3477 <= ap_const_lv7_42;
            end if; 
        end if;
    end process;

    conv_weight_ptr_18_reg_3501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state106) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_18_reg_3501 <= conv_weight_ptr_27_reg_8532;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state102) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_18_reg_3501 <= ap_const_lv7_4A;
            end if; 
        end if;
    end process;

    conv_weight_ptr_19_reg_3525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state111) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_19_reg_3525 <= conv_weight_ptr_28_reg_8545;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state107) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_19_reg_3525 <= ap_const_lv7_52;
            end if; 
        end if;
    end process;

    conv_weight_ptr_1_reg_3097_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_1_reg_3097 <= add_ln118_reg_8085;
            elsif (((icmp_ln89_fu_7092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                conv_weight_ptr_1_reg_3097 <= conv_weight_ptr_0_reg_3073;
            end if; 
        end if;
    end process;

    conv_weight_ptr_2_reg_3119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_2_reg_3119 <= add_ln171_reg_8103;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_2_reg_3119 <= ap_const_lv4_6;
            end if; 
        end if;
    end process;

    conv_weight_ptr_3_reg_3142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_3_reg_3142 <= add_ln221_reg_8134;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_3_reg_3142 <= ap_const_lv4_8;
            end if; 
        end if;
    end process;

    conv_weight_ptr_4_reg_3165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_4_reg_3165 <= add_ln271_reg_8165;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_4_reg_3165 <= ap_const_lv4_A;
            end if; 
        end if;
    end process;

    conv_weight_ptr_5_reg_3188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_5_reg_3188 <= add_ln321_reg_8196;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_5_reg_3188 <= ap_const_lv3_4;
            end if; 
        end if;
    end process;

    conv_weight_ptr_6_reg_3211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_6_reg_3211 <= add_ln371_reg_8227;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_6_reg_3211 <= ap_const_lv5_E;
            end if; 
        end if;
    end process;

    conv_weight_ptr_7_reg_3234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_7_reg_3234 <= add_ln421_reg_8258;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_7_reg_3234 <= ap_const_lv5_10;
            end if; 
        end if;
    end process;

    conv_weight_ptr_8_reg_3257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_8_reg_3257 <= add_ln482_reg_8289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_8_reg_3257 <= ap_const_lv5_12;
            end if; 
        end if;
    end process;

    conv_weight_ptr_9_reg_3280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_9_reg_3280 <= add_ln542_reg_8320;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then 
                conv_weight_ptr_9_reg_3280 <= ap_const_lv5_16;
            end if; 
        end if;
    end process;

    i_0_reg_3537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = RESULT_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state121))) then 
                i_0_reg_3537 <= i_reg_8553;
            elsif ((not(((ap_const_logic_0 = RESULT_AWREADY) or (grp_matmul_fu_6769_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
                i_0_reg_3537 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_3018_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_6898_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_3018 <= add_ln69_fu_6904_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten13_reg_3018 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_3040_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_6898_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_3040 <= select_ln70_fu_6996_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_3040 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    row_0_reg_3051_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_0_reg_3051 <= select_ln73_3_reg_8023;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_0_reg_3051 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0))) then
                IMG_addr_read_reg_8052 <= IMG_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    RESULT_addr_reg_7991(29 downto 0) <= empty_fu_6874_p1(32 - 1 downto 0)(29 downto 0);
                    empty_864_reg_7997(28 downto 0) <= empty_864_fu_6894_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_7092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                add_ln104_reg_8067 <= add_ln104_fu_7104_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_7110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln118_reg_8085 <= add_ln118_fu_7127_p2;
                    zext_ln113_reg_8080(2 downto 0) <= zext_ln113_fu_7122_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_7133_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                add_ln171_reg_8103 <= add_ln171_fu_7150_p2;
                    zext_ln166_reg_8098(3 downto 0) <= zext_ln166_fu_7145_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_7169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                add_ln221_reg_8134 <= add_ln221_fu_7186_p2;
                    zext_ln216_reg_8129(3 downto 0) <= zext_ln216_fu_7181_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln242_fu_7205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                add_ln271_reg_8165 <= add_ln271_fu_7222_p2;
                    zext_ln266_reg_8160(3 downto 0) <= zext_ln266_fu_7217_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln321_5_reg_8041 <= add_ln321_5_fu_7045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln292_fu_7241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                add_ln321_reg_8196 <= add_ln321_fu_7262_p2;
                    zext_ln316_reg_8191(3 downto 0) <= zext_ln316_fu_7257_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln342_fu_7281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                add_ln371_reg_8227 <= add_ln371_fu_7298_p2;
                    zext_ln366_reg_8222(4 downto 0) <= zext_ln366_fu_7293_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln392_fu_7317_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                add_ln421_reg_8258 <= add_ln421_fu_7334_p2;
                    zext_ln416_reg_8253(4 downto 0) <= zext_ln416_fu_7329_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln454_fu_7353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                add_ln482_reg_8289 <= add_ln482_fu_7370_p2;
                    zext_ln477_reg_8284(4 downto 0) <= zext_ln477_fu_7365_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln514_fu_7389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                add_ln542_reg_8320 <= add_ln542_fu_7406_p2;
                    zext_ln537_reg_8315(4 downto 0) <= zext_ln537_fu_7401_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                c_in_reg_8075 <= c_in_fu_7116_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                c_out_10_reg_8372 <= c_out_10_fu_7471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                c_out_11_reg_8403 <= c_out_11_fu_7507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                c_out_12_reg_8434 <= c_out_12_fu_7543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                c_out_13_reg_8465 <= c_out_13_fu_7579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                c_out_14_reg_8483 <= c_out_14_fu_7602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                c_out_15_reg_8501 <= c_out_15_fu_7629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                c_out_16_reg_8514 <= c_out_16_fu_7647_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                c_out_17_reg_8527 <= c_out_17_fu_7665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                c_out_18_reg_8540 <= c_out_18_fu_7683_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                c_out_1_reg_8062 <= c_out_1_fu_7098_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                c_out_2_reg_8124 <= c_out_2_fu_7175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                c_out_3_reg_8155 <= c_out_3_fu_7211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                c_out_4_reg_8186 <= c_out_4_fu_7247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                c_out_5_reg_8217 <= c_out_5_fu_7287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                c_out_6_reg_8248 <= c_out_6_fu_7323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                c_out_7_reg_8279 <= c_out_7_fu_7359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                c_out_8_reg_8310 <= c_out_8_fu_7395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                c_out_9_reg_8341 <= c_out_9_fu_7431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                c_out_reg_8093 <= c_out_fu_7139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln613_fu_7465_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                conv_weight_ptr_20_reg_8382 <= conv_weight_ptr_20_fu_7482_p2;
                    zext_ln636_reg_8377(5 downto 0) <= zext_ln636_fu_7477_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln662_fu_7501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                conv_weight_ptr_21_reg_8413 <= conv_weight_ptr_21_fu_7518_p2;
                    zext_ln685_reg_8408(5 downto 0) <= zext_ln685_fu_7513_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln712_fu_7537_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                conv_weight_ptr_22_reg_8444 <= conv_weight_ptr_22_fu_7554_p2;
                    zext_ln735_reg_8439(5 downto 0) <= zext_ln735_fu_7549_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln773_fu_7573_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                conv_weight_ptr_23_reg_8475 <= conv_weight_ptr_23_fu_7590_p2;
                    zext_ln796_reg_8470(5 downto 0) <= zext_ln796_fu_7585_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln833_fu_7596_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                conv_weight_ptr_24_reg_8493 <= conv_weight_ptr_24_fu_7617_p2;
                    zext_ln856_reg_8488(5 downto 0) <= zext_ln856_fu_7612_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln882_fu_7623_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                conv_weight_ptr_25_reg_8506 <= conv_weight_ptr_25_fu_7635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln932_fu_7641_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                conv_weight_ptr_26_reg_8519 <= conv_weight_ptr_26_fu_7653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln981_fu_7659_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                conv_weight_ptr_27_reg_8532 <= conv_weight_ptr_27_fu_7671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1031_fu_7677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state108))) then
                conv_weight_ptr_28_reg_8545 <= conv_weight_ptr_28_fu_7689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln563_fu_7425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                conv_weight_ptr_reg_8351 <= conv_weight_ptr_fu_7446_p2;
                    zext_ln586_reg_8346(4 downto 0) <= zext_ln586_fu_7441_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                i_reg_8553 <= i_fu_7701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln69_reg_8002 <= icmp_ln69_fu_6898_p2;
                icmp_ln69_reg_8002_pp0_iter1_reg <= icmp_ln69_reg_8002;
                select_ln73_1_reg_8011_pp0_iter1_reg <= select_ln73_1_reg_8011;
                select_ln73_2_reg_8017_pp0_iter1_reg <= select_ln73_2_reg_8017;
                select_ln73_3_reg_8023_pp0_iter1_reg <= select_ln73_3_reg_8023;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln69_reg_8002_pp0_iter2_reg <= icmp_ln69_reg_8002_pp0_iter1_reg;
                icmp_ln69_reg_8002_pp0_iter3_reg <= icmp_ln69_reg_8002_pp0_iter2_reg;
                icmp_ln69_reg_8002_pp0_iter4_reg <= icmp_ln69_reg_8002_pp0_iter3_reg;
                icmp_ln69_reg_8002_pp0_iter5_reg <= icmp_ln69_reg_8002_pp0_iter4_reg;
                icmp_ln69_reg_8002_pp0_iter6_reg <= icmp_ln69_reg_8002_pp0_iter5_reg;
                icmp_ln69_reg_8002_pp0_iter7_reg <= icmp_ln69_reg_8002_pp0_iter6_reg;
                icmp_ln69_reg_8002_pp0_iter8_reg <= icmp_ln69_reg_8002_pp0_iter7_reg;
                select_ln73_1_reg_8011_pp0_iter2_reg <= select_ln73_1_reg_8011_pp0_iter1_reg;
                select_ln73_1_reg_8011_pp0_iter3_reg <= select_ln73_1_reg_8011_pp0_iter2_reg;
                select_ln73_1_reg_8011_pp0_iter4_reg <= select_ln73_1_reg_8011_pp0_iter3_reg;
                select_ln73_1_reg_8011_pp0_iter5_reg <= select_ln73_1_reg_8011_pp0_iter4_reg;
                select_ln73_1_reg_8011_pp0_iter6_reg <= select_ln73_1_reg_8011_pp0_iter5_reg;
                select_ln73_1_reg_8011_pp0_iter7_reg <= select_ln73_1_reg_8011_pp0_iter6_reg;
                select_ln73_1_reg_8011_pp0_iter8_reg <= select_ln73_1_reg_8011_pp0_iter7_reg;
                select_ln73_1_reg_8011_pp0_iter9_reg <= select_ln73_1_reg_8011_pp0_iter8_reg;
                select_ln73_2_reg_8017_pp0_iter2_reg <= select_ln73_2_reg_8017_pp0_iter1_reg;
                select_ln73_2_reg_8017_pp0_iter3_reg <= select_ln73_2_reg_8017_pp0_iter2_reg;
                select_ln73_2_reg_8017_pp0_iter4_reg <= select_ln73_2_reg_8017_pp0_iter3_reg;
                select_ln73_2_reg_8017_pp0_iter5_reg <= select_ln73_2_reg_8017_pp0_iter4_reg;
                select_ln73_2_reg_8017_pp0_iter6_reg <= select_ln73_2_reg_8017_pp0_iter5_reg;
                select_ln73_2_reg_8017_pp0_iter7_reg <= select_ln73_2_reg_8017_pp0_iter6_reg;
                select_ln73_2_reg_8017_pp0_iter8_reg <= select_ln73_2_reg_8017_pp0_iter7_reg;
                select_ln73_2_reg_8017_pp0_iter9_reg <= select_ln73_2_reg_8017_pp0_iter8_reg;
                select_ln73_3_reg_8023_pp0_iter2_reg <= select_ln73_3_reg_8023_pp0_iter1_reg;
                select_ln73_3_reg_8023_pp0_iter3_reg <= select_ln73_3_reg_8023_pp0_iter2_reg;
                select_ln73_3_reg_8023_pp0_iter4_reg <= select_ln73_3_reg_8023_pp0_iter3_reg;
                select_ln73_3_reg_8023_pp0_iter5_reg <= select_ln73_3_reg_8023_pp0_iter4_reg;
                select_ln73_3_reg_8023_pp0_iter6_reg <= select_ln73_3_reg_8023_pp0_iter5_reg;
                select_ln73_3_reg_8023_pp0_iter7_reg <= select_ln73_3_reg_8023_pp0_iter6_reg;
                select_ln73_3_reg_8023_pp0_iter8_reg <= select_ln73_3_reg_8023_pp0_iter7_reg;
                select_ln73_3_reg_8023_pp0_iter9_reg <= select_ln73_3_reg_8023_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                icmp_ln935_reg_8580 <= icmp_ln935_fu_7726_p2;
                sub_ln944_reg_8592 <= sub_ln944_fu_7762_p2;
                tmp_V_4_reg_8585 <= tmp_V_4_fu_7731_p3;
                trunc_ln943_reg_8609 <= trunc_ln943_fu_7776_p1;
                trunc_ln944_reg_8599 <= trunc_ln944_fu_7768_p1;
                trunc_ln947_reg_8604 <= trunc_ln947_fu_7772_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_8580 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state118))) then
                icmp_ln958_reg_8619 <= icmp_ln958_fu_7879_p2;
                    or_ln_reg_8614(0) <= or_ln_fu_7871_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_8580 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                m_5_reg_8624 <= m_2_fu_7917_p2(31 downto 1);
                tmp_788_reg_8629 <= m_2_fu_7917_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state116)) then
                p_Result_8_reg_8569 <= linear_out_buf_q0(23 downto 23);
                tmp_V_3_reg_8563 <= linear_out_buf_q0;
                tmp_V_reg_8575 <= tmp_V_fu_7720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_6898_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln73_1_reg_8011 <= select_ln73_1_fu_6930_p3;
                select_ln73_3_reg_8023 <= select_ln73_3_fu_6976_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_6898_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln73_2_reg_8017 <= select_ln73_2_fu_6968_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state120)) then
                select_ln935_reg_8634 <= select_ln935_fu_7984_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    zext_ln172_reg_8108(1 downto 0) <= zext_ln172_fu_7156_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                    zext_ln222_reg_8139(1 downto 0) <= zext_ln222_fu_7192_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                    zext_ln272_reg_8170(1 downto 0) <= zext_ln272_fu_7228_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                    zext_ln322_reg_8201(1 downto 0) <= zext_ln322_fu_7268_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                    zext_ln372_reg_8232(1 downto 0) <= zext_ln372_fu_7304_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    zext_ln422_reg_8263(1 downto 0) <= zext_ln422_fu_7340_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                    zext_ln483_reg_8294(2 downto 0) <= zext_ln483_fu_7376_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                    zext_ln543_reg_8325(2 downto 0) <= zext_ln543_fu_7412_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                    zext_ln592_reg_8356(2 downto 0) <= zext_ln592_fu_7452_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                    zext_ln642_reg_8387(2 downto 0) <= zext_ln642_fu_7488_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                    zext_ln691_reg_8418(2 downto 0) <= zext_ln691_fu_7524_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                    zext_ln741_reg_8449(2 downto 0) <= zext_ln741_fu_7560_p1(2 downto 0);
            end if;
        end if;
    end process;
    RESULT_addr_reg_7991(31 downto 30) <= "00";
    empty_864_reg_7997(63 downto 29) <= "00000000000000000000000000000000000";
    zext_ln113_reg_8080(6 downto 3) <= "0000";
    zext_ln166_reg_8098(6 downto 4) <= "000";
    zext_ln172_reg_8108(3 downto 2) <= "00";
    zext_ln216_reg_8129(6 downto 4) <= "000";
    zext_ln222_reg_8139(3 downto 2) <= "00";
    zext_ln266_reg_8160(6 downto 4) <= "000";
    zext_ln272_reg_8170(3 downto 2) <= "00";
    zext_ln316_reg_8191(6 downto 4) <= "000";
    zext_ln322_reg_8201(3 downto 2) <= "00";
    zext_ln366_reg_8222(6 downto 5) <= "00";
    zext_ln372_reg_8232(3 downto 2) <= "00";
    zext_ln416_reg_8253(6 downto 5) <= "00";
    zext_ln422_reg_8263(3 downto 2) <= "00";
    zext_ln477_reg_8284(6 downto 5) <= "00";
    zext_ln483_reg_8294(3) <= '0';
    zext_ln537_reg_8315(6 downto 5) <= "00";
    zext_ln543_reg_8325(3) <= '0';
    zext_ln586_reg_8346(6 downto 5) <= "00";
    zext_ln592_reg_8356(3) <= '0';
    zext_ln636_reg_8377(6) <= '0';
    zext_ln642_reg_8387(3) <= '0';
    zext_ln685_reg_8408(6) <= '0';
    zext_ln691_reg_8418(3) <= '0';
    zext_ln735_reg_8439(6) <= '0';
    zext_ln741_reg_8449(3) <= '0';
    zext_ln796_reg_8470(6) <= '0';
    zext_ln856_reg_8488(6) <= '0';
    or_ln_reg_8614(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter9, ap_CS_fsm_state114, ap_CS_fsm_state121, ap_CS_fsm_state125, RESULT_AWREADY, RESULT_WREADY, RESULT_BVALID, icmp_ln69_fu_6898_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state14, icmp_ln89_fu_7092_p2, ap_CS_fsm_state15, icmp_ln104_fu_7110_p2, ap_CS_fsm_state19, icmp_ln142_fu_7133_p2, ap_CS_fsm_state24, icmp_ln192_fu_7169_p2, ap_CS_fsm_state29, icmp_ln242_fu_7205_p2, ap_CS_fsm_state34, icmp_ln292_fu_7241_p2, ap_CS_fsm_state39, icmp_ln342_fu_7281_p2, ap_CS_fsm_state44, icmp_ln392_fu_7317_p2, ap_CS_fsm_state51, icmp_ln454_fu_7353_p2, ap_CS_fsm_state56, icmp_ln514_fu_7389_p2, ap_CS_fsm_state61, icmp_ln563_fu_7425_p2, ap_CS_fsm_state66, icmp_ln613_fu_7465_p2, ap_CS_fsm_state71, icmp_ln662_fu_7501_p2, ap_CS_fsm_state76, icmp_ln712_fu_7537_p2, ap_CS_fsm_state83, icmp_ln773_fu_7573_p2, ap_CS_fsm_state88, icmp_ln833_fu_7596_p2, ap_CS_fsm_state93, icmp_ln882_fu_7623_p2, ap_CS_fsm_state98, icmp_ln932_fu_7641_p2, ap_CS_fsm_state103, icmp_ln981_fu_7659_p2, ap_CS_fsm_state108, icmp_ln1031_fu_7677_p2, ap_CS_fsm_state115, icmp_ln1085_fu_7695_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_ap_done, grp_quant_and_pack_fu_3972_ap_done, grp_bn_relu_shortcut_fu_4069_ap_done, grp_avgpool_concat_fu_6751_ap_done, grp_matmul_fu_6769_ap_done, grp_bn1_fu_6795_ap_done, grp_avgpool_8x8_fu_6851_ap_done, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln69_fu_6898_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln69_fu_6898_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln89_fu_7092_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln104_fu_7110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_bn1_fu_6795_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln142_fu_7133_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln192_fu_7169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln242_fu_7205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln292_fu_7241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln342_fu_7281_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln392_fu_7317_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((icmp_ln454_fu_7353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                if (((icmp_ln514_fu_7389_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state56))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((icmp_ln563_fu_7425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state65) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (icmp_ln613_fu_7465_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state70;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state70 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state70) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state70;
                end if;
            when ap_ST_fsm_state71 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state71) and (icmp_ln662_fu_7501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state71;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state75) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state76) and (icmp_ln712_fu_7537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state77 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state77) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state77;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (grp_avgpool_concat_fu_6751_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state83) and (icmp_ln773_fu_7573_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state84 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state84) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (icmp_ln833_fu_7596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state91) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state92) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (icmp_ln882_fu_7623_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state94;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln932_fu_7641_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state99 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state99) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state102) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (icmp_ln981_fu_7659_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state107;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state104 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state104) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state104;
                end if;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state106) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state106;
                end if;
            when ap_ST_fsm_state107 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state107) and (grp_quant_and_pack_fu_3972_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state107;
                end if;
            when ap_ST_fsm_state108 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln1031_fu_7677_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state109 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state109) and (grp_pg_conv3x3_tile_fu_3548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state111) and (grp_bn_relu_shortcut_fu_4069_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state112) and (grp_avgpool_8x8_fu_6851_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                if ((not(((ap_const_logic_0 = RESULT_AWREADY) or (grp_matmul_fu_6769_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln1085_fu_7695_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                if (((ap_const_logic_1 = RESULT_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state121))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state121;
                end if;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                if (((ap_const_logic_1 = RESULT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state125))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state125;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMG_ARADDR <= add_ln321_5_reg_8041(32 - 1 downto 0);

    IMG_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln69_reg_8002_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_ARVALID <= ap_const_logic_1;
        else 
            IMG_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    IMG_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln69_reg_8002_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            IMG_RREADY <= ap_const_logic_1;
        else 
            IMG_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    IMG_blk_n_AR_assign_proc : process(m_axi_IMG_ARREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln69_reg_8002_pp0_iter1_reg)
    begin
        if (((icmp_ln69_reg_8002_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_blk_n_AR <= m_axi_IMG_ARREADY;
        else 
            IMG_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    IMG_blk_n_R_assign_proc : process(m_axi_IMG_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, icmp_ln69_reg_8002_pp0_iter8_reg)
    begin
        if (((icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            IMG_blk_n_R <= m_axi_IMG_RVALID;
        else 
            IMG_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_AWVALID_assign_proc : process(ap_CS_fsm_state114, RESULT_AWREADY, grp_matmul_fu_6769_ap_done)
    begin
        if ((not(((ap_const_logic_0 = RESULT_AWREADY) or (grp_matmul_fu_6769_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            RESULT_AWVALID <= ap_const_logic_1;
        else 
            RESULT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    RESULT_BREADY_assign_proc : process(ap_CS_fsm_state125, RESULT_BVALID)
    begin
        if (((ap_const_logic_1 = RESULT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state125))) then 
            RESULT_BREADY <= ap_const_logic_1;
        else 
            RESULT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    RESULT_WVALID_assign_proc : process(ap_CS_fsm_state121, RESULT_WREADY)
    begin
        if (((ap_const_logic_1 = RESULT_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state121))) then 
            RESULT_WVALID <= ap_const_logic_1;
        else 
            RESULT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    RESULT_blk_n_AW_assign_proc : process(m_axi_RESULT_AWREADY, ap_CS_fsm_state114)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            RESULT_blk_n_AW <= m_axi_RESULT_AWREADY;
        else 
            RESULT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_blk_n_B_assign_proc : process(m_axi_RESULT_BVALID, ap_CS_fsm_state125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            RESULT_blk_n_B <= m_axi_RESULT_BVALID;
        else 
            RESULT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    RESULT_blk_n_W_assign_proc : process(m_axi_RESULT_WREADY, ap_CS_fsm_state121)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            RESULT_blk_n_W <= m_axi_RESULT_WREADY;
        else 
            RESULT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    a_fu_7827_p2 <= (icmp_ln947_fu_7795_p2 and icmp_ln947_1_fu_7821_p2);
    add_ln104_fu_7104_p2 <= std_logic_vector(unsigned(conv_weight_ptr_0_reg_3073) + unsigned(ap_const_lv3_3));
    add_ln118_fu_7127_p2 <= std_logic_vector(unsigned(conv_weight_ptr_1_reg_3097) + unsigned(ap_const_lv3_1));
    add_ln171_fu_7150_p2 <= std_logic_vector(unsigned(conv_weight_ptr_2_reg_3119) + unsigned(ap_const_lv4_1));
    add_ln221_fu_7186_p2 <= std_logic_vector(unsigned(conv_weight_ptr_3_reg_3142) + unsigned(ap_const_lv4_1));
    add_ln271_fu_7222_p2 <= std_logic_vector(unsigned(conv_weight_ptr_4_reg_3165) + unsigned(ap_const_lv4_1));
    add_ln321_2_fu_7018_p2 <= std_logic_vector(unsigned(zext_ln73_fu_7011_p1) + unsigned(zext_ln73_3_fu_7015_p1));
    add_ln321_3_fu_7070_p2 <= std_logic_vector(unsigned(zext_ln73_1_fu_7056_p1) + unsigned(zext_ln321_7_fu_7066_p1));
    add_ln321_4_fu_7039_p2 <= std_logic_vector(unsigned(zext_ln321_fu_7032_p1) + unsigned(zext_ln73_2_fu_7036_p1));
    add_ln321_5_fu_7045_p2 <= std_logic_vector(unsigned(empty_864_reg_7997) + unsigned(add_ln321_4_fu_7039_p2));
    add_ln321_6_fu_7079_p2 <= std_logic_vector(unsigned(add_ln321_3_fu_7070_p2) + unsigned(zext_ln321_8_fu_7076_p1));
    add_ln321_fu_7262_p2 <= std_logic_vector(signed(conv_weight_ptr_5_reg_3188) + signed(ap_const_lv3_1));
    add_ln371_fu_7298_p2 <= std_logic_vector(unsigned(conv_weight_ptr_6_reg_3211) + unsigned(ap_const_lv5_1));
    add_ln421_fu_7334_p2 <= std_logic_vector(unsigned(conv_weight_ptr_7_reg_3234) + unsigned(ap_const_lv5_1));
    add_ln482_fu_7370_p2 <= std_logic_vector(unsigned(conv_weight_ptr_8_reg_3257) + unsigned(ap_const_lv5_1));
    add_ln542_fu_7406_p2 <= std_logic_vector(unsigned(conv_weight_ptr_9_reg_3280) + unsigned(ap_const_lv5_1));
    add_ln69_fu_6904_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_3018) + unsigned(ap_const_lv12_1));
    add_ln70_1_fu_6990_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_3040) + unsigned(ap_const_lv12_1));
    add_ln949_fu_7847_p2 <= std_logic_vector(signed(ap_const_lv24_FFFFE8) + signed(trunc_ln944_reg_8599));
    add_ln958_fu_7888_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_8592));
    add_ln964_fu_7955_p2 <= std_logic_vector(unsigned(select_ln964_fu_7943_p3) + unsigned(sub_ln964_fu_7950_p2));
    and_ln73_fu_6950_p2 <= (xor_ln73_fu_6938_p2 and icmp_ln71_fu_6944_p2);
    and_ln949_fu_7859_p2 <= (xor_ln949_fu_7841_p2 and p_Result_6_fu_7852_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(89);
    ap_CS_fsm_state101 <= ap_CS_fsm(90);
    ap_CS_fsm_state102 <= ap_CS_fsm(91);
    ap_CS_fsm_state103 <= ap_CS_fsm(92);
    ap_CS_fsm_state104 <= ap_CS_fsm(93);
    ap_CS_fsm_state105 <= ap_CS_fsm(94);
    ap_CS_fsm_state106 <= ap_CS_fsm(95);
    ap_CS_fsm_state107 <= ap_CS_fsm(96);
    ap_CS_fsm_state108 <= ap_CS_fsm(97);
    ap_CS_fsm_state109 <= ap_CS_fsm(98);
    ap_CS_fsm_state110 <= ap_CS_fsm(99);
    ap_CS_fsm_state111 <= ap_CS_fsm(100);
    ap_CS_fsm_state112 <= ap_CS_fsm(101);
    ap_CS_fsm_state113 <= ap_CS_fsm(102);
    ap_CS_fsm_state114 <= ap_CS_fsm(103);
    ap_CS_fsm_state115 <= ap_CS_fsm(104);
    ap_CS_fsm_state116 <= ap_CS_fsm(105);
    ap_CS_fsm_state117 <= ap_CS_fsm(106);
    ap_CS_fsm_state118 <= ap_CS_fsm(107);
    ap_CS_fsm_state119 <= ap_CS_fsm(108);
    ap_CS_fsm_state120 <= ap_CS_fsm(109);
    ap_CS_fsm_state121 <= ap_CS_fsm(110);
    ap_CS_fsm_state125 <= ap_CS_fsm(114);
    ap_CS_fsm_state13 <= ap_CS_fsm(2);
    ap_CS_fsm_state14 <= ap_CS_fsm(3);
    ap_CS_fsm_state15 <= ap_CS_fsm(4);
    ap_CS_fsm_state16 <= ap_CS_fsm(5);
    ap_CS_fsm_state17 <= ap_CS_fsm(6);
    ap_CS_fsm_state18 <= ap_CS_fsm(7);
    ap_CS_fsm_state19 <= ap_CS_fsm(8);
    ap_CS_fsm_state20 <= ap_CS_fsm(9);
    ap_CS_fsm_state21 <= ap_CS_fsm(10);
    ap_CS_fsm_state22 <= ap_CS_fsm(11);
    ap_CS_fsm_state23 <= ap_CS_fsm(12);
    ap_CS_fsm_state24 <= ap_CS_fsm(13);
    ap_CS_fsm_state25 <= ap_CS_fsm(14);
    ap_CS_fsm_state26 <= ap_CS_fsm(15);
    ap_CS_fsm_state27 <= ap_CS_fsm(16);
    ap_CS_fsm_state28 <= ap_CS_fsm(17);
    ap_CS_fsm_state29 <= ap_CS_fsm(18);
    ap_CS_fsm_state30 <= ap_CS_fsm(19);
    ap_CS_fsm_state31 <= ap_CS_fsm(20);
    ap_CS_fsm_state32 <= ap_CS_fsm(21);
    ap_CS_fsm_state33 <= ap_CS_fsm(22);
    ap_CS_fsm_state34 <= ap_CS_fsm(23);
    ap_CS_fsm_state35 <= ap_CS_fsm(24);
    ap_CS_fsm_state36 <= ap_CS_fsm(25);
    ap_CS_fsm_state37 <= ap_CS_fsm(26);
    ap_CS_fsm_state38 <= ap_CS_fsm(27);
    ap_CS_fsm_state39 <= ap_CS_fsm(28);
    ap_CS_fsm_state40 <= ap_CS_fsm(29);
    ap_CS_fsm_state41 <= ap_CS_fsm(30);
    ap_CS_fsm_state42 <= ap_CS_fsm(31);
    ap_CS_fsm_state43 <= ap_CS_fsm(32);
    ap_CS_fsm_state44 <= ap_CS_fsm(33);
    ap_CS_fsm_state45 <= ap_CS_fsm(34);
    ap_CS_fsm_state46 <= ap_CS_fsm(35);
    ap_CS_fsm_state47 <= ap_CS_fsm(36);
    ap_CS_fsm_state48 <= ap_CS_fsm(37);
    ap_CS_fsm_state49 <= ap_CS_fsm(38);
    ap_CS_fsm_state50 <= ap_CS_fsm(39);
    ap_CS_fsm_state51 <= ap_CS_fsm(40);
    ap_CS_fsm_state52 <= ap_CS_fsm(41);
    ap_CS_fsm_state53 <= ap_CS_fsm(42);
    ap_CS_fsm_state54 <= ap_CS_fsm(43);
    ap_CS_fsm_state55 <= ap_CS_fsm(44);
    ap_CS_fsm_state56 <= ap_CS_fsm(45);
    ap_CS_fsm_state57 <= ap_CS_fsm(46);
    ap_CS_fsm_state58 <= ap_CS_fsm(47);
    ap_CS_fsm_state59 <= ap_CS_fsm(48);
    ap_CS_fsm_state60 <= ap_CS_fsm(49);
    ap_CS_fsm_state61 <= ap_CS_fsm(50);
    ap_CS_fsm_state62 <= ap_CS_fsm(51);
    ap_CS_fsm_state63 <= ap_CS_fsm(52);
    ap_CS_fsm_state64 <= ap_CS_fsm(53);
    ap_CS_fsm_state65 <= ap_CS_fsm(54);
    ap_CS_fsm_state66 <= ap_CS_fsm(55);
    ap_CS_fsm_state67 <= ap_CS_fsm(56);
    ap_CS_fsm_state68 <= ap_CS_fsm(57);
    ap_CS_fsm_state69 <= ap_CS_fsm(58);
    ap_CS_fsm_state70 <= ap_CS_fsm(59);
    ap_CS_fsm_state71 <= ap_CS_fsm(60);
    ap_CS_fsm_state72 <= ap_CS_fsm(61);
    ap_CS_fsm_state73 <= ap_CS_fsm(62);
    ap_CS_fsm_state74 <= ap_CS_fsm(63);
    ap_CS_fsm_state75 <= ap_CS_fsm(64);
    ap_CS_fsm_state76 <= ap_CS_fsm(65);
    ap_CS_fsm_state77 <= ap_CS_fsm(66);
    ap_CS_fsm_state78 <= ap_CS_fsm(67);
    ap_CS_fsm_state79 <= ap_CS_fsm(68);
    ap_CS_fsm_state80 <= ap_CS_fsm(69);
    ap_CS_fsm_state81 <= ap_CS_fsm(70);
    ap_CS_fsm_state82 <= ap_CS_fsm(71);
    ap_CS_fsm_state83 <= ap_CS_fsm(72);
    ap_CS_fsm_state84 <= ap_CS_fsm(73);
    ap_CS_fsm_state85 <= ap_CS_fsm(74);
    ap_CS_fsm_state86 <= ap_CS_fsm(75);
    ap_CS_fsm_state87 <= ap_CS_fsm(76);
    ap_CS_fsm_state88 <= ap_CS_fsm(77);
    ap_CS_fsm_state89 <= ap_CS_fsm(78);
    ap_CS_fsm_state90 <= ap_CS_fsm(79);
    ap_CS_fsm_state91 <= ap_CS_fsm(80);
    ap_CS_fsm_state92 <= ap_CS_fsm(81);
    ap_CS_fsm_state93 <= ap_CS_fsm(82);
    ap_CS_fsm_state94 <= ap_CS_fsm(83);
    ap_CS_fsm_state95 <= ap_CS_fsm(84);
    ap_CS_fsm_state96 <= ap_CS_fsm(85);
    ap_CS_fsm_state97 <= ap_CS_fsm(86);
    ap_CS_fsm_state98 <= ap_CS_fsm(87);
    ap_CS_fsm_state99 <= ap_CS_fsm(88);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln69_reg_8002_pp0_iter8_reg, IMG_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IMG_RVALID) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, icmp_ln69_reg_8002_pp0_iter8_reg, IMG_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IMG_RVALID) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter9_assign_proc : process(icmp_ln69_reg_8002_pp0_iter8_reg, IMG_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((icmp_ln69_reg_8002_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_logic_0 = IMG_RVALID));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln69_reg_8002_pp0_iter1_reg, IMG_ARREADY)
    begin
                ap_block_state4_io <= ((icmp_ln69_reg_8002_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_0 = IMG_ARREADY));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln69_fu_6898_p2)
    begin
        if ((icmp_ln69_fu_6898_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state125, RESULT_BVALID)
    begin
        if (((ap_const_logic_1 = RESULT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state125))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_3033_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln69_reg_8002, c_0_reg_3029, ap_CS_fsm_pp0_stage0, select_ln73_1_reg_8011, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln69_reg_8002 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_0_phi_fu_3033_p4 <= select_ln73_1_reg_8011;
        else 
            ap_phi_mux_c_0_phi_fu_3033_p4 <= c_0_reg_3029;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_3055_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln69_reg_8002, row_0_reg_3051, ap_CS_fsm_pp0_stage0, select_ln73_3_reg_8023, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln69_reg_8002 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_row_0_phi_fu_3055_p4 <= select_ln73_3_reg_8023;
        else 
            ap_phi_mux_row_0_phi_fu_3055_p4 <= row_0_reg_3051;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state125, RESULT_BVALID)
    begin
        if (((ap_const_logic_1 = RESULT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state125))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln739_fu_7980_p1 <= p_Result_10_fu_7968_p5;
    c_fu_6910_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_3033_p4) + unsigned(ap_const_lv2_1));
    c_in_fu_7116_p2 <= std_logic_vector(unsigned(c_in_0_reg_3107) + unsigned(ap_const_lv2_1));
    c_out_10_fu_7471_p2 <= std_logic_vector(unsigned(c_out58_0_reg_3326) + unsigned(ap_const_lv3_1));
    c_out_11_fu_7507_p2 <= std_logic_vector(unsigned(c_out60_0_reg_3349) + unsigned(ap_const_lv3_1));
    c_out_12_fu_7543_p2 <= std_logic_vector(unsigned(c_out62_0_reg_3372) + unsigned(ap_const_lv3_1));
    c_out_13_fu_7579_p2 <= std_logic_vector(unsigned(c_out64_0_reg_3395) + unsigned(ap_const_lv4_1));
    c_out_14_fu_7602_p2 <= std_logic_vector(unsigned(c_out66_0_reg_3418) + unsigned(ap_const_lv4_1));
    c_out_15_fu_7629_p2 <= std_logic_vector(unsigned(c_out68_0_reg_3441) + unsigned(ap_const_lv4_1));
    c_out_16_fu_7647_p2 <= std_logic_vector(unsigned(c_out70_0_reg_3465) + unsigned(ap_const_lv4_1));
    c_out_17_fu_7665_p2 <= std_logic_vector(unsigned(c_out72_0_reg_3489) + unsigned(ap_const_lv4_1));
    c_out_18_fu_7683_p2 <= std_logic_vector(unsigned(c_out74_0_reg_3513) + unsigned(ap_const_lv4_1));
    c_out_1_fu_7098_p2 <= std_logic_vector(unsigned(c_out_0_reg_3085) + unsigned(ap_const_lv2_1));
    c_out_2_fu_7175_p2 <= std_logic_vector(unsigned(c_out42_0_reg_3153) + unsigned(ap_const_lv2_1));
    c_out_3_fu_7211_p2 <= std_logic_vector(unsigned(c_out44_0_reg_3176) + unsigned(ap_const_lv2_1));
    c_out_4_fu_7247_p2 <= std_logic_vector(unsigned(c_out46_0_reg_3199) + unsigned(ap_const_lv2_1));
    c_out_5_fu_7287_p2 <= std_logic_vector(unsigned(c_out48_0_reg_3222) + unsigned(ap_const_lv2_1));
    c_out_6_fu_7323_p2 <= std_logic_vector(unsigned(c_out50_0_reg_3245) + unsigned(ap_const_lv2_1));
    c_out_7_fu_7359_p2 <= std_logic_vector(unsigned(c_out52_0_reg_3268) + unsigned(ap_const_lv3_1));
    c_out_8_fu_7395_p2 <= std_logic_vector(unsigned(c_out54_0_reg_3291) + unsigned(ap_const_lv3_1));
    c_out_9_fu_7431_p2 <= std_logic_vector(unsigned(c_out56_0_reg_3303) + unsigned(ap_const_lv3_1));
    c_out_fu_7139_p2 <= std_logic_vector(unsigned(c_out40_0_reg_3130) + unsigned(ap_const_lv2_1));
    col_fu_6984_p2 <= std_logic_vector(unsigned(select_ln73_2_fu_6968_p3) + unsigned(ap_const_lv6_1));
    conv_weight_ptr_20_fu_7482_p2 <= std_logic_vector(unsigned(conv_weight_ptr_11_reg_3338) + unsigned(ap_const_lv6_1));
    conv_weight_ptr_21_fu_7518_p2 <= std_logic_vector(unsigned(conv_weight_ptr_12_reg_3361) + unsigned(ap_const_lv6_1));
    conv_weight_ptr_22_fu_7554_p2 <= std_logic_vector(unsigned(conv_weight_ptr_13_reg_3384) + unsigned(ap_const_lv6_1));
    conv_weight_ptr_23_fu_7590_p2 <= std_logic_vector(unsigned(conv_weight_ptr_14_reg_3407) + unsigned(ap_const_lv6_1));
    conv_weight_ptr_24_fu_7617_p2 <= std_logic_vector(signed(conv_weight_ptr_15_reg_3430) + signed(ap_const_lv5_1));
    conv_weight_ptr_25_fu_7635_p2 <= std_logic_vector(unsigned(conv_weight_ptr_16_reg_3453) + unsigned(ap_const_lv7_1));
    conv_weight_ptr_26_fu_7653_p2 <= std_logic_vector(unsigned(conv_weight_ptr_17_reg_3477) + unsigned(ap_const_lv7_1));
    conv_weight_ptr_27_fu_7671_p2 <= std_logic_vector(unsigned(conv_weight_ptr_18_reg_3501) + unsigned(ap_const_lv7_1));
    conv_weight_ptr_28_fu_7689_p2 <= std_logic_vector(unsigned(conv_weight_ptr_19_reg_3525) + unsigned(ap_const_lv7_1));
    conv_weight_ptr_fu_7446_p2 <= std_logic_vector(signed(conv_weight_ptr_10_reg_3315) + signed(ap_const_lv4_1));
    empty_864_fu_6894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_V1_fu_6884_p4),64));
    empty_fu_6874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output3_fu_6864_p4),64));
    grp_avgpool_8x8_fu_6851_ap_start <= grp_avgpool_8x8_fu_6851_ap_start_reg;

    grp_avgpool_concat_fu_6751_H_fmap_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_avgpool_concat_fu_6751_H_fmap <= ap_const_lv6_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_avgpool_concat_fu_6751_H_fmap <= ap_const_lv6_10;
        else 
            grp_avgpool_concat_fu_6751_H_fmap <= "XXXXXX";
        end if; 
    end process;

    grp_avgpool_concat_fu_6751_ap_start <= grp_avgpool_concat_fu_6751_ap_start_reg;

    grp_avgpool_concat_fu_6751_in_channels_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            grp_avgpool_concat_fu_6751_in_channels <= ap_const_lv7_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_avgpool_concat_fu_6751_in_channels <= ap_const_lv7_10;
        else 
            grp_avgpool_concat_fu_6751_in_channels <= "XXXXXXX";
        end if; 
    end process;

    grp_bn1_fu_6795_ap_start <= grp_bn1_fu_6795_ap_start_reg;

    grp_bn_relu_shortcut_fu_4069_H_fmap_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            grp_bn_relu_shortcut_fu_4069_H_fmap <= ap_const_lv7_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            grp_bn_relu_shortcut_fu_4069_H_fmap <= ap_const_lv7_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_bn_relu_shortcut_fu_4069_H_fmap <= ap_const_lv7_20;
        else 
            grp_bn_relu_shortcut_fu_4069_H_fmap <= "XXXXXXX";
        end if; 
    end process;

    grp_bn_relu_shortcut_fu_4069_ap_start <= grp_bn_relu_shortcut_fu_4069_ap_start_reg;

    grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_7_q0, layer1_0_bn2_bias_fi_7_q0, layer1_1_bn1_bias_fi_7_q0, layer1_1_bn2_bias_fi_7_q0, layer1_2_bn1_bias_fi_7_q0, layer1_2_bn2_bias_fi_7_q0, layer2_0_bn1_bias_fi_7_q0, layer2_0_bn2_bias_fi_7_q0, layer2_1_bn1_bias_fi_7_q0, layer2_1_bn2_bias_fi_7_q0, layer2_2_bn1_bias_fi_7_q0, layer2_2_bn2_bias_fi_7_q0, layer3_0_bn1_bias_fi_7_q0, layer3_0_bn2_bias_fi_7_q0, layer3_1_bn1_bias_fi_7_q0, layer3_1_bn2_bias_fi_7_q0, layer3_2_bn1_bias_fi_7_q0, layer3_2_bn2_bias_fi_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_2_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_2_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_1_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_1_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_0_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer3_0_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_2_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_2_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_1_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_1_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_0_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer2_0_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_2_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_2_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_1_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_1_bn1_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_0_bn2_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= layer1_0_bn1_bias_fi_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_6_q0, layer1_0_bn2_bias_fi_6_q0, layer1_1_bn1_bias_fi_6_q0, layer1_1_bn2_bias_fi_6_q0, layer1_2_bn1_bias_fi_6_q0, layer1_2_bn2_bias_fi_6_q0, layer2_0_bn1_bias_fi_6_q0, layer2_0_bn2_bias_fi_6_q0, layer2_1_bn1_bias_fi_6_q0, layer2_1_bn2_bias_fi_6_q0, layer2_2_bn1_bias_fi_6_q0, layer2_2_bn2_bias_fi_6_q0, layer3_0_bn1_bias_fi_6_q0, layer3_0_bn2_bias_fi_6_q0, layer3_1_bn1_bias_fi_6_q0, layer3_1_bn2_bias_fi_6_q0, layer3_2_bn1_bias_fi_6_q0, layer3_2_bn2_bias_fi_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_2_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_2_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_1_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_1_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_0_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer3_0_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_2_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_2_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_1_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_1_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_0_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer2_0_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_2_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_2_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_1_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_1_bn1_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_0_bn2_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= layer1_0_bn1_bias_fi_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_5_q0, layer1_0_bn2_bias_fi_5_q0, layer1_1_bn1_bias_fi_5_q0, layer1_1_bn2_bias_fi_5_q0, layer1_2_bn1_bias_fi_5_q0, layer1_2_bn2_bias_fi_5_q0, layer2_0_bn1_bias_fi_5_q0, layer2_0_bn2_bias_fi_5_q0, layer2_1_bn1_bias_fi_5_q0, layer2_1_bn2_bias_fi_5_q0, layer2_2_bn1_bias_fi_5_q0, layer2_2_bn2_bias_fi_5_q0, layer3_0_bn1_bias_fi_5_q0, layer3_0_bn2_bias_fi_5_q0, layer3_1_bn1_bias_fi_5_q0, layer3_1_bn2_bias_fi_5_q0, layer3_2_bn1_bias_fi_5_q0, layer3_2_bn2_bias_fi_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_2_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_2_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_1_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_1_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_0_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer3_0_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_2_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_2_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_1_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_1_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_0_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer2_0_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_2_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_2_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_1_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_1_bn1_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_0_bn2_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= layer1_0_bn1_bias_fi_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_4_q0, layer1_0_bn2_bias_fi_4_q0, layer1_1_bn1_bias_fi_4_q0, layer1_1_bn2_bias_fi_4_q0, layer1_2_bn1_bias_fi_4_q0, layer1_2_bn2_bias_fi_4_q0, layer2_0_bn1_bias_fi_4_q0, layer2_0_bn2_bias_fi_4_q0, layer2_1_bn1_bias_fi_4_q0, layer2_1_bn2_bias_fi_4_q0, layer2_2_bn1_bias_fi_4_q0, layer2_2_bn2_bias_fi_4_q0, layer3_0_bn1_bias_fi_4_q0, layer3_0_bn2_bias_fi_4_q0, layer3_1_bn1_bias_fi_4_q0, layer3_1_bn2_bias_fi_4_q0, layer3_2_bn1_bias_fi_4_q0, layer3_2_bn2_bias_fi_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_2_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_2_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_1_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_1_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_0_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer3_0_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_2_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_2_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_1_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_1_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_0_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer2_0_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_2_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_2_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_1_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_1_bn1_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_0_bn2_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= layer1_0_bn1_bias_fi_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_3_q0, layer1_0_bn2_bias_fi_3_q0, layer1_1_bn1_bias_fi_3_q0, layer1_1_bn2_bias_fi_3_q0, layer1_2_bn1_bias_fi_3_q0, layer1_2_bn2_bias_fi_3_q0, layer2_0_bn1_bias_fi_3_q0, layer2_0_bn2_bias_fi_3_q0, layer2_1_bn1_bias_fi_3_q0, layer2_1_bn2_bias_fi_3_q0, layer2_2_bn1_bias_fi_3_q0, layer2_2_bn2_bias_fi_3_q0, layer3_0_bn1_bias_fi_3_q0, layer3_0_bn2_bias_fi_3_q0, layer3_1_bn1_bias_fi_3_q0, layer3_1_bn2_bias_fi_3_q0, layer3_2_bn1_bias_fi_3_q0, layer3_2_bn2_bias_fi_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_2_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_2_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_1_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_1_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_0_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer3_0_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_2_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_2_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_1_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_1_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_0_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer2_0_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_2_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_2_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_1_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_1_bn1_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_0_bn2_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= layer1_0_bn1_bias_fi_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_2_q0, layer1_0_bn2_bias_fi_2_q0, layer1_1_bn1_bias_fi_2_q0, layer1_1_bn2_bias_fi_2_q0, layer1_2_bn1_bias_fi_2_q0, layer1_2_bn2_bias_fi_2_q0, layer2_0_bn1_bias_fi_2_q0, layer2_0_bn2_bias_fi_2_q0, layer2_1_bn1_bias_fi_2_q0, layer2_1_bn2_bias_fi_2_q0, layer2_2_bn1_bias_fi_2_q0, layer2_2_bn2_bias_fi_2_q0, layer3_0_bn1_bias_fi_2_q0, layer3_0_bn2_bias_fi_2_q0, layer3_1_bn1_bias_fi_2_q0, layer3_1_bn2_bias_fi_2_q0, layer3_2_bn1_bias_fi_2_q0, layer3_2_bn2_bias_fi_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_2_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_2_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_1_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_1_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_0_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer3_0_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_2_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_2_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_1_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_1_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_0_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer2_0_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_2_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_2_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_1_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_1_bn1_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_0_bn2_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= layer1_0_bn1_bias_fi_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_1_q0, layer1_0_bn2_bias_fi_1_q0, layer1_1_bn1_bias_fi_1_q0, layer1_1_bn2_bias_fi_1_q0, layer1_2_bn1_bias_fi_1_q0, layer1_2_bn2_bias_fi_1_q0, layer2_0_bn1_bias_fi_1_q0, layer2_0_bn2_bias_fi_1_q0, layer2_1_bn1_bias_fi_1_q0, layer2_1_bn2_bias_fi_1_q0, layer2_2_bn1_bias_fi_1_q0, layer2_2_bn2_bias_fi_1_q0, layer3_0_bn1_bias_fi_1_q0, layer3_0_bn2_bias_fi_1_q0, layer3_1_bn1_bias_fi_1_q0, layer3_1_bn2_bias_fi_1_q0, layer3_2_bn1_bias_fi_1_q0, layer3_2_bn2_bias_fi_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_2_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_2_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_1_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_1_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_0_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer3_0_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_2_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_2_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_1_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_1_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_0_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer2_0_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_2_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_2_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_1_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_1_bn1_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_0_bn2_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= layer1_0_bn1_bias_fi_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0_assign_proc : process(layer1_0_bn1_bias_fi_q0, layer1_0_bn2_bias_fi_q0, layer1_1_bn1_bias_fi_q0, layer1_1_bn2_bias_fi_q0, layer1_2_bn1_bias_fi_q0, layer1_2_bn2_bias_fi_q0, layer2_0_bn1_bias_fi_q0, layer2_0_bn2_bias_fi_q0, layer2_1_bn1_bias_fi_q0, layer2_1_bn2_bias_fi_q0, layer2_2_bn1_bias_fi_q0, layer2_2_bn2_bias_fi_q0, layer3_0_bn1_bias_fi_q0, layer3_0_bn2_bias_fi_q0, layer3_1_bn1_bias_fi_q0, layer3_1_bn2_bias_fi_q0, layer3_2_bn1_bias_fi_q0, layer3_2_bn2_bias_fi_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_2_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_2_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_1_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_1_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_0_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer3_0_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_2_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_2_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_1_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_1_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_0_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer2_0_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_2_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_2_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_1_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_1_bn1_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_0_bn2_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= layer1_0_bn1_bias_fi_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_0_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_7_q0, layer1_0_bn4_bias_fi_7_q0, layer1_1_bn3_bias_fi_7_q0, layer1_1_bn4_bias_fi_7_q0, layer1_2_bn3_bias_fi_7_q0, layer1_2_bn4_bias_fi_7_q0, layer2_0_bn3_bias_fi_7_q0, layer2_0_bn4_bias_fi_7_q0, layer2_1_bn3_bias_fi_7_q0, layer2_1_bn4_bias_fi_7_q0, layer2_2_bn3_bias_fi_7_q0, layer2_2_bn4_bias_fi_7_q0, layer3_0_bn3_bias_fi_7_q0, layer3_0_bn4_bias_fi_7_q0, layer3_1_bn3_bias_fi_7_q0, layer3_1_bn4_bias_fi_7_q0, layer3_2_bn3_bias_fi_7_q0, layer3_2_bn4_bias_fi_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_2_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_2_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_1_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_1_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_0_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer3_0_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_2_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_2_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_1_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_1_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_0_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer2_0_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_2_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_2_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_1_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_1_bn3_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_0_bn4_bias_fi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= layer1_0_bn3_bias_fi_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_6_q0, layer1_0_bn4_bias_fi_6_q0, layer1_1_bn3_bias_fi_6_q0, layer1_1_bn4_bias_fi_6_q0, layer1_2_bn3_bias_fi_6_q0, layer1_2_bn4_bias_fi_6_q0, layer2_0_bn3_bias_fi_6_q0, layer2_0_bn4_bias_fi_6_q0, layer2_1_bn3_bias_fi_6_q0, layer2_1_bn4_bias_fi_6_q0, layer2_2_bn3_bias_fi_6_q0, layer2_2_bn4_bias_fi_6_q0, layer3_0_bn3_bias_fi_6_q0, layer3_0_bn4_bias_fi_6_q0, layer3_1_bn3_bias_fi_6_q0, layer3_1_bn4_bias_fi_6_q0, layer3_2_bn3_bias_fi_6_q0, layer3_2_bn4_bias_fi_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_2_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_2_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_1_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_1_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_0_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer3_0_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_2_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_2_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_1_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_1_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_0_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer2_0_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_2_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_2_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_1_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_1_bn3_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_0_bn4_bias_fi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= layer1_0_bn3_bias_fi_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_5_q0, layer1_0_bn4_bias_fi_5_q0, layer1_1_bn3_bias_fi_5_q0, layer1_1_bn4_bias_fi_5_q0, layer1_2_bn3_bias_fi_5_q0, layer1_2_bn4_bias_fi_5_q0, layer2_0_bn3_bias_fi_5_q0, layer2_0_bn4_bias_fi_5_q0, layer2_1_bn3_bias_fi_5_q0, layer2_1_bn4_bias_fi_5_q0, layer2_2_bn3_bias_fi_5_q0, layer2_2_bn4_bias_fi_5_q0, layer3_0_bn3_bias_fi_5_q0, layer3_0_bn4_bias_fi_5_q0, layer3_1_bn3_bias_fi_5_q0, layer3_1_bn4_bias_fi_5_q0, layer3_2_bn3_bias_fi_5_q0, layer3_2_bn4_bias_fi_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_2_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_2_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_1_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_1_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_0_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer3_0_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_2_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_2_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_1_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_1_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_0_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer2_0_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_2_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_2_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_1_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_1_bn3_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_0_bn4_bias_fi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= layer1_0_bn3_bias_fi_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_4_q0, layer1_0_bn4_bias_fi_4_q0, layer1_1_bn3_bias_fi_4_q0, layer1_1_bn4_bias_fi_4_q0, layer1_2_bn3_bias_fi_4_q0, layer1_2_bn4_bias_fi_4_q0, layer2_0_bn3_bias_fi_4_q0, layer2_0_bn4_bias_fi_4_q0, layer2_1_bn3_bias_fi_4_q0, layer2_1_bn4_bias_fi_4_q0, layer2_2_bn3_bias_fi_4_q0, layer2_2_bn4_bias_fi_4_q0, layer3_0_bn3_bias_fi_4_q0, layer3_0_bn4_bias_fi_4_q0, layer3_1_bn3_bias_fi_4_q0, layer3_1_bn4_bias_fi_4_q0, layer3_2_bn3_bias_fi_4_q0, layer3_2_bn4_bias_fi_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_2_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_2_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_1_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_1_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_0_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer3_0_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_2_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_2_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_1_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_1_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_0_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer2_0_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_2_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_2_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_1_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_1_bn3_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_0_bn4_bias_fi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= layer1_0_bn3_bias_fi_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_3_q0, layer1_0_bn4_bias_fi_3_q0, layer1_1_bn3_bias_fi_3_q0, layer1_1_bn4_bias_fi_3_q0, layer1_2_bn3_bias_fi_3_q0, layer1_2_bn4_bias_fi_3_q0, layer2_0_bn3_bias_fi_3_q0, layer2_0_bn4_bias_fi_3_q0, layer2_1_bn3_bias_fi_3_q0, layer2_1_bn4_bias_fi_3_q0, layer2_2_bn3_bias_fi_3_q0, layer2_2_bn4_bias_fi_3_q0, layer3_0_bn3_bias_fi_3_q0, layer3_0_bn4_bias_fi_3_q0, layer3_1_bn3_bias_fi_3_q0, layer3_1_bn4_bias_fi_3_q0, layer3_2_bn3_bias_fi_3_q0, layer3_2_bn4_bias_fi_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_2_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_2_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_1_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_1_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_0_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer3_0_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_2_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_2_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_1_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_1_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_0_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer2_0_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_2_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_2_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_1_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_1_bn3_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_0_bn4_bias_fi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= layer1_0_bn3_bias_fi_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_2_q0, layer1_0_bn4_bias_fi_2_q0, layer1_1_bn3_bias_fi_2_q0, layer1_1_bn4_bias_fi_2_q0, layer1_2_bn3_bias_fi_2_q0, layer1_2_bn4_bias_fi_2_q0, layer2_0_bn3_bias_fi_2_q0, layer2_0_bn4_bias_fi_2_q0, layer2_1_bn3_bias_fi_2_q0, layer2_1_bn4_bias_fi_2_q0, layer2_2_bn3_bias_fi_2_q0, layer2_2_bn4_bias_fi_2_q0, layer3_0_bn3_bias_fi_2_q0, layer3_0_bn4_bias_fi_2_q0, layer3_1_bn3_bias_fi_2_q0, layer3_1_bn4_bias_fi_2_q0, layer3_2_bn3_bias_fi_2_q0, layer3_2_bn4_bias_fi_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_2_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_2_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_1_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_1_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_0_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer3_0_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_2_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_2_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_1_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_1_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_0_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer2_0_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_2_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_2_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_1_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_1_bn3_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_0_bn4_bias_fi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= layer1_0_bn3_bias_fi_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_1_q0, layer1_0_bn4_bias_fi_1_q0, layer1_1_bn3_bias_fi_1_q0, layer1_1_bn4_bias_fi_1_q0, layer1_2_bn3_bias_fi_1_q0, layer1_2_bn4_bias_fi_1_q0, layer2_0_bn3_bias_fi_1_q0, layer2_0_bn4_bias_fi_1_q0, layer2_1_bn3_bias_fi_1_q0, layer2_1_bn4_bias_fi_1_q0, layer2_2_bn3_bias_fi_1_q0, layer2_2_bn4_bias_fi_1_q0, layer3_0_bn3_bias_fi_1_q0, layer3_0_bn4_bias_fi_1_q0, layer3_1_bn3_bias_fi_1_q0, layer3_1_bn4_bias_fi_1_q0, layer3_2_bn3_bias_fi_1_q0, layer3_2_bn4_bias_fi_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_2_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_2_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_1_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_1_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_0_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer3_0_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_2_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_2_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_1_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_1_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_0_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer2_0_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_2_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_2_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_1_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_1_bn3_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_0_bn4_bias_fi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= layer1_0_bn3_bias_fi_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0_assign_proc : process(layer1_0_bn3_bias_fi_q0, layer1_0_bn4_bias_fi_q0, layer1_1_bn3_bias_fi_q0, layer1_1_bn4_bias_fi_q0, layer1_2_bn3_bias_fi_q0, layer1_2_bn4_bias_fi_q0, layer2_0_bn3_bias_fi_q0, layer2_0_bn4_bias_fi_q0, layer2_1_bn3_bias_fi_q0, layer2_1_bn4_bias_fi_q0, layer2_2_bn3_bias_fi_q0, layer2_2_bn4_bias_fi_q0, layer3_0_bn3_bias_fi_q0, layer3_0_bn4_bias_fi_q0, layer3_1_bn3_bias_fi_q0, layer3_1_bn4_bias_fi_q0, layer3_2_bn3_bias_fi_q0, layer3_2_bn4_bias_fi_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_2_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_2_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_1_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_1_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_0_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer3_0_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_2_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_2_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_1_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_1_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_0_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer2_0_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_2_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_2_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_1_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_1_bn3_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_0_bn4_bias_fi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= layer1_0_bn3_bias_fi_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_bias_1_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0_assign_proc : process(layer1_0_bn1_weight_7_q0, layer1_0_bn2_weight_7_q0, layer1_1_bn1_weight_7_q0, layer1_1_bn2_weight_7_q0, layer1_2_bn1_weight_7_q0, layer1_2_bn2_weight_7_q0, layer2_0_bn1_weight_7_q0, layer2_0_bn2_weight_7_q0, layer2_1_bn1_weight_7_q0, layer2_1_bn2_weight_7_q0, layer2_2_bn1_weight_7_q0, layer2_2_bn2_weight_7_q0, layer3_0_bn1_weight_7_q0, layer3_0_bn2_weight_7_q0, layer3_1_bn1_weight_7_q0, layer3_1_bn2_weight_7_q0, layer3_2_bn1_weight_7_q0, layer3_2_bn2_weight_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_2_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_2_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_1_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_1_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_0_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer3_0_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_2_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_2_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_1_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_1_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_0_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer2_0_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_2_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_2_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_1_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_1_bn1_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_0_bn2_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= layer1_0_bn1_weight_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0_assign_proc : process(layer1_0_bn1_weight_6_q0, layer1_0_bn2_weight_6_q0, layer1_1_bn1_weight_6_q0, layer1_1_bn2_weight_6_q0, layer1_2_bn1_weight_6_q0, layer1_2_bn2_weight_6_q0, layer2_0_bn1_weight_6_q0, layer2_0_bn2_weight_6_q0, layer2_1_bn1_weight_6_q0, layer2_1_bn2_weight_6_q0, layer2_2_bn1_weight_6_q0, layer2_2_bn2_weight_6_q0, layer3_0_bn1_weight_6_q0, layer3_0_bn2_weight_6_q0, layer3_1_bn1_weight_6_q0, layer3_1_bn2_weight_6_q0, layer3_2_bn1_weight_6_q0, layer3_2_bn2_weight_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_2_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_2_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_1_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_1_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_0_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer3_0_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_2_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_2_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_1_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_1_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_0_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer2_0_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_2_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_2_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_1_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_1_bn1_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_0_bn2_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= layer1_0_bn1_weight_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0_assign_proc : process(layer1_0_bn1_weight_5_q0, layer1_0_bn2_weight_5_q0, layer1_1_bn1_weight_5_q0, layer1_1_bn2_weight_5_q0, layer1_2_bn1_weight_5_q0, layer1_2_bn2_weight_5_q0, layer2_0_bn1_weight_5_q0, layer2_0_bn2_weight_5_q0, layer2_1_bn1_weight_5_q0, layer2_1_bn2_weight_5_q0, layer2_2_bn1_weight_5_q0, layer2_2_bn2_weight_5_q0, layer3_0_bn1_weight_5_q0, layer3_0_bn2_weight_5_q0, layer3_1_bn1_weight_5_q0, layer3_1_bn2_weight_5_q0, layer3_2_bn1_weight_5_q0, layer3_2_bn2_weight_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_2_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_2_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_1_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_1_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_0_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer3_0_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_2_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_2_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_1_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_1_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_0_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer2_0_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_2_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_2_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_1_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_1_bn1_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_0_bn2_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= layer1_0_bn1_weight_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0_assign_proc : process(layer1_0_bn1_weight_4_q0, layer1_0_bn2_weight_4_q0, layer1_1_bn1_weight_4_q0, layer1_1_bn2_weight_4_q0, layer1_2_bn1_weight_4_q0, layer1_2_bn2_weight_4_q0, layer2_0_bn1_weight_4_q0, layer2_0_bn2_weight_4_q0, layer2_1_bn1_weight_4_q0, layer2_1_bn2_weight_4_q0, layer2_2_bn1_weight_4_q0, layer2_2_bn2_weight_4_q0, layer3_0_bn1_weight_4_q0, layer3_0_bn2_weight_4_q0, layer3_1_bn1_weight_4_q0, layer3_1_bn2_weight_4_q0, layer3_2_bn1_weight_4_q0, layer3_2_bn2_weight_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_2_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_2_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_1_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_1_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_0_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer3_0_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_2_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_2_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_1_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_1_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_0_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer2_0_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_2_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_2_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_1_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_1_bn1_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_0_bn2_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= layer1_0_bn1_weight_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0_assign_proc : process(layer1_0_bn1_weight_3_q0, layer1_0_bn2_weight_3_q0, layer1_1_bn1_weight_3_q0, layer1_1_bn2_weight_3_q0, layer1_2_bn1_weight_3_q0, layer1_2_bn2_weight_3_q0, layer2_0_bn1_weight_3_q0, layer2_0_bn2_weight_3_q0, layer2_1_bn1_weight_3_q0, layer2_1_bn2_weight_3_q0, layer2_2_bn1_weight_3_q0, layer2_2_bn2_weight_3_q0, layer3_0_bn1_weight_3_q0, layer3_0_bn2_weight_3_q0, layer3_1_bn1_weight_3_q0, layer3_1_bn2_weight_3_q0, layer3_2_bn1_weight_3_q0, layer3_2_bn2_weight_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_2_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_2_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_1_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_1_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_0_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer3_0_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_2_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_2_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_1_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_1_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_0_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer2_0_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_2_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_2_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_1_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_1_bn1_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_0_bn2_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= layer1_0_bn1_weight_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0_assign_proc : process(layer1_0_bn1_weight_2_q0, layer1_0_bn2_weight_2_q0, layer1_1_bn1_weight_2_q0, layer1_1_bn2_weight_2_q0, layer1_2_bn1_weight_2_q0, layer1_2_bn2_weight_2_q0, layer2_0_bn1_weight_2_q0, layer2_0_bn2_weight_2_q0, layer2_1_bn1_weight_2_q0, layer2_1_bn2_weight_2_q0, layer2_2_bn1_weight_2_q0, layer2_2_bn2_weight_2_q0, layer3_0_bn1_weight_2_q0, layer3_0_bn2_weight_2_q0, layer3_1_bn1_weight_2_q0, layer3_1_bn2_weight_2_q0, layer3_2_bn1_weight_2_q0, layer3_2_bn2_weight_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_2_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_2_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_1_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_1_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_0_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer3_0_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_2_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_2_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_1_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_1_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_0_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer2_0_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_2_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_2_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_1_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_1_bn1_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_0_bn2_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= layer1_0_bn1_weight_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0_assign_proc : process(layer1_0_bn1_weight_1_q0, layer1_0_bn2_weight_1_q0, layer1_1_bn1_weight_1_q0, layer1_1_bn2_weight_1_q0, layer1_2_bn1_weight_1_q0, layer1_2_bn2_weight_1_q0, layer2_0_bn1_weight_1_q0, layer2_0_bn2_weight_1_q0, layer2_1_bn1_weight_1_q0, layer2_1_bn2_weight_1_q0, layer2_2_bn1_weight_1_q0, layer2_2_bn2_weight_1_q0, layer3_0_bn1_weight_1_q0, layer3_0_bn2_weight_1_q0, layer3_1_bn1_weight_1_q0, layer3_1_bn2_weight_1_q0, layer3_2_bn1_weight_1_q0, layer3_2_bn2_weight_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_2_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_2_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_1_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_1_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_0_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer3_0_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_2_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_2_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_1_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_1_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_0_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer2_0_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_2_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_2_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_1_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_1_bn1_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_0_bn2_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= layer1_0_bn1_weight_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0_assign_proc : process(layer1_0_bn1_weight_s_q0, layer1_0_bn2_weight_s_q0, layer1_1_bn1_weight_s_q0, layer1_1_bn2_weight_s_q0, layer1_2_bn1_weight_s_q0, layer1_2_bn2_weight_s_q0, layer2_0_bn1_weight_s_q0, layer2_0_bn2_weight_s_q0, layer2_1_bn1_weight_s_q0, layer2_1_bn2_weight_s_q0, layer2_2_bn1_weight_s_q0, layer2_2_bn2_weight_s_q0, layer3_0_bn1_weight_s_q0, layer3_0_bn2_weight_s_q0, layer3_1_bn1_weight_s_q0, layer3_1_bn2_weight_s_q0, layer3_2_bn1_weight_s_q0, layer3_2_bn2_weight_s_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_2_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_2_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_1_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_1_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_0_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer3_0_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_2_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_2_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_1_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_1_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_0_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer2_0_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_2_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_2_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_1_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_1_bn1_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_0_bn2_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= layer1_0_bn1_weight_s_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_0_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0_assign_proc : process(layer1_0_bn3_weight_7_q0, layer1_0_bn4_weight_7_q0, layer1_1_bn3_weight_7_q0, layer1_1_bn4_weight_7_q0, layer1_2_bn3_weight_7_q0, layer1_2_bn4_weight_7_q0, layer2_0_bn3_weight_7_q0, layer2_0_bn4_weight_7_q0, layer2_1_bn3_weight_7_q0, layer2_1_bn4_weight_7_q0, layer2_2_bn3_weight_7_q0, layer2_2_bn4_weight_7_q0, layer3_0_bn3_weight_7_q0, layer3_0_bn4_weight_7_q0, layer3_1_bn3_weight_7_q0, layer3_1_bn4_weight_7_q0, layer3_2_bn3_weight_7_q0, layer3_2_bn4_weight_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_2_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_2_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_1_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_1_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_0_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer3_0_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_2_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_2_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_1_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_1_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_0_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer2_0_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_2_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_2_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_1_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_1_bn3_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_0_bn4_weight_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= layer1_0_bn3_weight_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0_assign_proc : process(layer1_0_bn3_weight_6_q0, layer1_0_bn4_weight_6_q0, layer1_1_bn3_weight_6_q0, layer1_1_bn4_weight_6_q0, layer1_2_bn3_weight_6_q0, layer1_2_bn4_weight_6_q0, layer2_0_bn3_weight_6_q0, layer2_0_bn4_weight_6_q0, layer2_1_bn3_weight_6_q0, layer2_1_bn4_weight_6_q0, layer2_2_bn3_weight_6_q0, layer2_2_bn4_weight_6_q0, layer3_0_bn3_weight_6_q0, layer3_0_bn4_weight_6_q0, layer3_1_bn3_weight_6_q0, layer3_1_bn4_weight_6_q0, layer3_2_bn3_weight_6_q0, layer3_2_bn4_weight_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_2_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_2_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_1_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_1_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_0_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer3_0_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_2_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_2_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_1_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_1_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_0_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer2_0_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_2_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_2_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_1_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_1_bn3_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_0_bn4_weight_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= layer1_0_bn3_weight_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0_assign_proc : process(layer1_0_bn3_weight_5_q0, layer1_0_bn4_weight_5_q0, layer1_1_bn3_weight_5_q0, layer1_1_bn4_weight_5_q0, layer1_2_bn3_weight_5_q0, layer1_2_bn4_weight_5_q0, layer2_0_bn3_weight_5_q0, layer2_0_bn4_weight_5_q0, layer2_1_bn3_weight_5_q0, layer2_1_bn4_weight_5_q0, layer2_2_bn3_weight_5_q0, layer2_2_bn4_weight_5_q0, layer3_0_bn3_weight_5_q0, layer3_0_bn4_weight_5_q0, layer3_1_bn3_weight_5_q0, layer3_1_bn4_weight_5_q0, layer3_2_bn3_weight_5_q0, layer3_2_bn4_weight_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_2_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_2_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_1_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_1_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_0_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer3_0_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_2_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_2_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_1_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_1_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_0_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer2_0_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_2_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_2_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_1_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_1_bn3_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_0_bn4_weight_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= layer1_0_bn3_weight_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0_assign_proc : process(layer1_0_bn3_weight_4_q0, layer1_0_bn4_weight_4_q0, layer1_1_bn3_weight_4_q0, layer1_1_bn4_weight_4_q0, layer1_2_bn3_weight_4_q0, layer1_2_bn4_weight_4_q0, layer2_0_bn3_weight_4_q0, layer2_0_bn4_weight_4_q0, layer2_1_bn3_weight_4_q0, layer2_1_bn4_weight_4_q0, layer2_2_bn3_weight_4_q0, layer2_2_bn4_weight_4_q0, layer3_0_bn3_weight_4_q0, layer3_0_bn4_weight_4_q0, layer3_1_bn3_weight_4_q0, layer3_1_bn4_weight_4_q0, layer3_2_bn3_weight_4_q0, layer3_2_bn4_weight_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_2_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_2_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_1_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_1_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_0_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer3_0_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_2_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_2_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_1_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_1_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_0_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer2_0_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_2_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_2_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_1_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_1_bn3_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_0_bn4_weight_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= layer1_0_bn3_weight_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0_assign_proc : process(layer1_0_bn3_weight_3_q0, layer1_0_bn4_weight_3_q0, layer1_1_bn3_weight_3_q0, layer1_1_bn4_weight_3_q0, layer1_2_bn3_weight_3_q0, layer1_2_bn4_weight_3_q0, layer2_0_bn3_weight_3_q0, layer2_0_bn4_weight_3_q0, layer2_1_bn3_weight_3_q0, layer2_1_bn4_weight_3_q0, layer2_2_bn3_weight_3_q0, layer2_2_bn4_weight_3_q0, layer3_0_bn3_weight_3_q0, layer3_0_bn4_weight_3_q0, layer3_1_bn3_weight_3_q0, layer3_1_bn4_weight_3_q0, layer3_2_bn3_weight_3_q0, layer3_2_bn4_weight_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_2_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_2_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_1_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_1_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_0_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer3_0_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_2_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_2_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_1_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_1_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_0_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer2_0_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_2_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_2_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_1_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_1_bn3_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_0_bn4_weight_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= layer1_0_bn3_weight_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0_assign_proc : process(layer1_0_bn3_weight_2_q0, layer1_0_bn4_weight_2_q0, layer1_1_bn3_weight_2_q0, layer1_1_bn4_weight_2_q0, layer1_2_bn3_weight_2_q0, layer1_2_bn4_weight_2_q0, layer2_0_bn3_weight_2_q0, layer2_0_bn4_weight_2_q0, layer2_1_bn3_weight_2_q0, layer2_1_bn4_weight_2_q0, layer2_2_bn3_weight_2_q0, layer2_2_bn4_weight_2_q0, layer3_0_bn3_weight_2_q0, layer3_0_bn4_weight_2_q0, layer3_1_bn3_weight_2_q0, layer3_1_bn4_weight_2_q0, layer3_2_bn3_weight_2_q0, layer3_2_bn4_weight_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_2_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_2_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_1_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_1_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_0_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer3_0_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_2_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_2_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_1_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_1_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_0_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer2_0_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_2_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_2_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_1_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_1_bn3_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_0_bn4_weight_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= layer1_0_bn3_weight_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0_assign_proc : process(layer1_0_bn3_weight_1_q0, layer1_0_bn4_weight_1_q0, layer1_1_bn3_weight_1_q0, layer1_1_bn4_weight_1_q0, layer1_2_bn3_weight_1_q0, layer1_2_bn4_weight_1_q0, layer2_0_bn3_weight_1_q0, layer2_0_bn4_weight_1_q0, layer2_1_bn3_weight_1_q0, layer2_1_bn4_weight_1_q0, layer2_2_bn3_weight_1_q0, layer2_2_bn4_weight_1_q0, layer3_0_bn3_weight_1_q0, layer3_0_bn4_weight_1_q0, layer3_1_bn3_weight_1_q0, layer3_1_bn4_weight_1_q0, layer3_2_bn3_weight_1_q0, layer3_2_bn4_weight_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_2_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_2_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_1_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_1_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_0_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer3_0_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_2_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_2_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_1_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_1_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_0_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer2_0_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_2_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_2_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_1_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_1_bn3_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_0_bn4_weight_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= layer1_0_bn3_weight_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0_assign_proc : process(layer1_0_bn3_weight_s_q0, layer1_0_bn4_weight_s_q0, layer1_1_bn3_weight_s_q0, layer1_1_bn4_weight_s_q0, layer1_2_bn3_weight_s_q0, layer1_2_bn4_weight_s_q0, layer2_0_bn3_weight_s_q0, layer2_0_bn4_weight_s_q0, layer2_1_bn3_weight_s_q0, layer2_1_bn4_weight_s_q0, layer2_2_bn3_weight_s_q0, layer2_2_bn4_weight_s_q0, layer3_0_bn3_weight_s_q0, layer3_0_bn4_weight_s_q0, layer3_1_bn3_weight_s_q0, layer3_1_bn4_weight_s_q0, layer3_2_bn3_weight_s_q0, layer3_2_bn4_weight_s_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_2_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_2_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_1_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_1_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_0_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer3_0_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_2_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_2_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_1_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_1_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_0_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer2_0_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_2_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_2_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_1_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_1_bn3_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_0_bn4_weight_s_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= layer1_0_bn3_weight_s_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_bn_weight_1_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_channel_tile_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_channel_tile <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0_assign_proc : process(layer1_0_rprelu1_pre_7_q0, layer1_0_rprelu2_pre_7_q0, layer1_1_rprelu1_pre_7_q0, layer1_1_rprelu2_pre_7_q0, layer1_2_rprelu1_pre_7_q0, layer1_2_rprelu2_pre_7_q0, layer2_0_rprelu1_pre_7_q0, layer2_0_rprelu2_pre_7_q0, layer2_1_rprelu1_pre_7_q0, layer2_1_rprelu2_pre_7_q0, layer2_2_rprelu1_pre_7_q0, layer2_2_rprelu2_pre_7_q0, layer3_0_rprelu1_pre_7_q0, layer3_0_rprelu2_pre_7_q0, layer3_1_rprelu1_pre_7_q0, layer3_1_rprelu2_pre_7_q0, layer3_2_rprelu1_pre_7_q0, layer3_2_rprelu2_pre_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_2_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_2_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_1_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_1_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_0_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer3_0_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_2_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_2_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_1_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_1_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_0_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer2_0_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_2_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_2_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_1_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_1_rprelu1_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_0_rprelu2_pre_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= layer1_0_rprelu1_pre_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0_assign_proc : process(layer1_0_rprelu1_pre_6_q0, layer1_0_rprelu2_pre_6_q0, layer1_1_rprelu1_pre_6_q0, layer1_1_rprelu2_pre_6_q0, layer1_2_rprelu1_pre_6_q0, layer1_2_rprelu2_pre_6_q0, layer2_0_rprelu1_pre_6_q0, layer2_0_rprelu2_pre_6_q0, layer2_1_rprelu1_pre_6_q0, layer2_1_rprelu2_pre_6_q0, layer2_2_rprelu1_pre_6_q0, layer2_2_rprelu2_pre_6_q0, layer3_0_rprelu1_pre_6_q0, layer3_0_rprelu2_pre_6_q0, layer3_1_rprelu1_pre_6_q0, layer3_1_rprelu2_pre_6_q0, layer3_2_rprelu1_pre_6_q0, layer3_2_rprelu2_pre_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_2_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_2_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_1_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_1_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_0_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer3_0_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_2_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_2_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_1_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_1_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_0_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer2_0_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_2_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_2_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_1_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_1_rprelu1_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_0_rprelu2_pre_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= layer1_0_rprelu1_pre_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0_assign_proc : process(layer1_0_rprelu1_pre_5_q0, layer1_0_rprelu2_pre_5_q0, layer1_1_rprelu1_pre_5_q0, layer1_1_rprelu2_pre_5_q0, layer1_2_rprelu1_pre_5_q0, layer1_2_rprelu2_pre_5_q0, layer2_0_rprelu1_pre_5_q0, layer2_0_rprelu2_pre_5_q0, layer2_1_rprelu1_pre_5_q0, layer2_1_rprelu2_pre_5_q0, layer2_2_rprelu1_pre_5_q0, layer2_2_rprelu2_pre_5_q0, layer3_0_rprelu1_pre_5_q0, layer3_0_rprelu2_pre_5_q0, layer3_1_rprelu1_pre_5_q0, layer3_1_rprelu2_pre_5_q0, layer3_2_rprelu1_pre_5_q0, layer3_2_rprelu2_pre_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_2_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_2_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_1_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_1_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_0_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer3_0_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_2_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_2_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_1_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_1_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_0_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer2_0_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_2_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_2_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_1_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_1_rprelu1_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_0_rprelu2_pre_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= layer1_0_rprelu1_pre_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0_assign_proc : process(layer1_0_rprelu1_pre_4_q0, layer1_0_rprelu2_pre_4_q0, layer1_1_rprelu1_pre_4_q0, layer1_1_rprelu2_pre_4_q0, layer1_2_rprelu1_pre_4_q0, layer1_2_rprelu2_pre_4_q0, layer2_0_rprelu1_pre_4_q0, layer2_0_rprelu2_pre_4_q0, layer2_1_rprelu1_pre_4_q0, layer2_1_rprelu2_pre_4_q0, layer2_2_rprelu1_pre_4_q0, layer2_2_rprelu2_pre_4_q0, layer3_0_rprelu1_pre_4_q0, layer3_0_rprelu2_pre_4_q0, layer3_1_rprelu1_pre_4_q0, layer3_1_rprelu2_pre_4_q0, layer3_2_rprelu1_pre_4_q0, layer3_2_rprelu2_pre_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_2_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_2_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_1_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_1_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_0_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer3_0_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_2_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_2_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_1_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_1_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_0_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer2_0_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_2_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_2_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_1_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_1_rprelu1_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_0_rprelu2_pre_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= layer1_0_rprelu1_pre_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0_assign_proc : process(layer1_0_rprelu1_pre_3_q0, layer1_0_rprelu2_pre_3_q0, layer1_1_rprelu1_pre_3_q0, layer1_1_rprelu2_pre_3_q0, layer1_2_rprelu1_pre_3_q0, layer1_2_rprelu2_pre_3_q0, layer2_0_rprelu1_pre_3_q0, layer2_0_rprelu2_pre_3_q0, layer2_1_rprelu1_pre_3_q0, layer2_1_rprelu2_pre_3_q0, layer2_2_rprelu1_pre_3_q0, layer2_2_rprelu2_pre_3_q0, layer3_0_rprelu1_pre_3_q0, layer3_0_rprelu2_pre_3_q0, layer3_1_rprelu1_pre_3_q0, layer3_1_rprelu2_pre_3_q0, layer3_2_rprelu1_pre_3_q0, layer3_2_rprelu2_pre_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_2_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_2_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_1_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_1_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_0_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer3_0_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_2_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_2_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_1_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_1_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_0_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer2_0_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_2_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_2_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_1_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_1_rprelu1_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_0_rprelu2_pre_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= layer1_0_rprelu1_pre_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0_assign_proc : process(layer1_0_rprelu1_pre_2_q0, layer1_0_rprelu2_pre_2_q0, layer1_1_rprelu1_pre_2_q0, layer1_1_rprelu2_pre_2_q0, layer1_2_rprelu1_pre_2_q0, layer1_2_rprelu2_pre_2_q0, layer2_0_rprelu1_pre_2_q0, layer2_0_rprelu2_pre_2_q0, layer2_1_rprelu1_pre_2_q0, layer2_1_rprelu2_pre_2_q0, layer2_2_rprelu1_pre_2_q0, layer2_2_rprelu2_pre_2_q0, layer3_0_rprelu1_pre_2_q0, layer3_0_rprelu2_pre_2_q0, layer3_1_rprelu1_pre_2_q0, layer3_1_rprelu2_pre_2_q0, layer3_2_rprelu1_pre_2_q0, layer3_2_rprelu2_pre_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_2_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_2_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_1_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_1_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_0_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer3_0_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_2_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_2_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_1_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_1_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_0_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer2_0_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_2_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_2_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_1_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_1_rprelu1_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_0_rprelu2_pre_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= layer1_0_rprelu1_pre_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0_assign_proc : process(layer1_0_rprelu1_pre_1_q0, layer1_0_rprelu2_pre_1_q0, layer1_1_rprelu1_pre_1_q0, layer1_1_rprelu2_pre_1_q0, layer1_2_rprelu1_pre_1_q0, layer1_2_rprelu2_pre_1_q0, layer2_0_rprelu1_pre_1_q0, layer2_0_rprelu2_pre_1_q0, layer2_1_rprelu1_pre_1_q0, layer2_1_rprelu2_pre_1_q0, layer2_2_rprelu1_pre_1_q0, layer2_2_rprelu2_pre_1_q0, layer3_0_rprelu1_pre_1_q0, layer3_0_rprelu2_pre_1_q0, layer3_1_rprelu1_pre_1_q0, layer3_1_rprelu2_pre_1_q0, layer3_2_rprelu1_pre_1_q0, layer3_2_rprelu2_pre_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_2_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_2_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_1_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_1_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_0_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer3_0_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_2_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_2_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_1_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_1_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_0_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer2_0_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_2_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_2_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_1_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_1_rprelu1_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_0_rprelu2_pre_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= layer1_0_rprelu1_pre_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0_assign_proc : process(layer1_0_rprelu1_pre_q0, layer1_0_rprelu2_pre_q0, layer1_1_rprelu1_pre_q0, layer1_1_rprelu2_pre_q0, layer1_2_rprelu1_pre_q0, layer1_2_rprelu2_pre_q0, layer2_0_rprelu1_pre_q0, layer2_0_rprelu2_pre_q0, layer2_1_rprelu1_pre_q0, layer2_1_rprelu2_pre_q0, layer2_2_rprelu1_pre_q0, layer2_2_rprelu2_pre_q0, layer3_0_rprelu1_pre_q0, layer3_0_rprelu2_pre_q0, layer3_1_rprelu1_pre_q0, layer3_1_rprelu2_pre_q0, layer3_2_rprelu1_pre_q0, layer3_2_rprelu2_pre_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_2_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_2_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_1_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_1_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_0_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer3_0_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_2_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_2_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_1_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_1_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_0_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer2_0_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_2_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_2_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_1_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_1_rprelu1_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_0_rprelu2_pre_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= layer1_0_rprelu1_pre_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_weight_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0_assign_proc : process(layer1_0_rprelu1_shi_15_q0, layer1_0_rprelu2_shi_15_q0, layer1_1_rprelu1_shi_15_q0, layer1_1_rprelu2_shi_15_q0, layer1_2_rprelu1_shi_15_q0, layer1_2_rprelu2_shi_15_q0, layer2_0_rprelu1_shi_15_q0, layer2_0_rprelu2_shi_15_q0, layer2_1_rprelu1_shi_15_q0, layer2_1_rprelu2_shi_15_q0, layer2_2_rprelu1_shi_15_q0, layer2_2_rprelu2_shi_15_q0, layer3_0_rprelu1_shi_15_q0, layer3_0_rprelu2_shi_15_q0, layer3_1_rprelu1_shi_15_q0, layer3_1_rprelu2_shi_15_q0, layer3_2_rprelu1_shi_15_q0, layer3_2_rprelu2_shi_15_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_2_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_2_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_1_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_1_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_0_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer3_0_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_2_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_2_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_1_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_1_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_0_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer2_0_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_2_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_2_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_1_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_1_rprelu1_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_0_rprelu2_shi_15_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= layer1_0_rprelu1_shi_15_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0_assign_proc : process(layer1_0_rprelu1_shi_14_q0, layer1_0_rprelu2_shi_14_q0, layer1_1_rprelu1_shi_14_q0, layer1_1_rprelu2_shi_14_q0, layer1_2_rprelu1_shi_14_q0, layer1_2_rprelu2_shi_14_q0, layer2_0_rprelu1_shi_14_q0, layer2_0_rprelu2_shi_14_q0, layer2_1_rprelu1_shi_14_q0, layer2_1_rprelu2_shi_14_q0, layer2_2_rprelu1_shi_14_q0, layer2_2_rprelu2_shi_14_q0, layer3_0_rprelu1_shi_14_q0, layer3_0_rprelu2_shi_14_q0, layer3_1_rprelu1_shi_14_q0, layer3_1_rprelu2_shi_14_q0, layer3_2_rprelu1_shi_14_q0, layer3_2_rprelu2_shi_14_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_2_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_2_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_1_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_1_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_0_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer3_0_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_2_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_2_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_1_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_1_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_0_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer2_0_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_2_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_2_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_1_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_1_rprelu1_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_0_rprelu2_shi_14_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= layer1_0_rprelu1_shi_14_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0_assign_proc : process(layer1_0_rprelu1_shi_13_q0, layer1_0_rprelu2_shi_13_q0, layer1_1_rprelu1_shi_13_q0, layer1_1_rprelu2_shi_13_q0, layer1_2_rprelu1_shi_13_q0, layer1_2_rprelu2_shi_13_q0, layer2_0_rprelu1_shi_13_q0, layer2_0_rprelu2_shi_13_q0, layer2_1_rprelu1_shi_13_q0, layer2_1_rprelu2_shi_13_q0, layer2_2_rprelu1_shi_13_q0, layer2_2_rprelu2_shi_13_q0, layer3_0_rprelu1_shi_13_q0, layer3_0_rprelu2_shi_13_q0, layer3_1_rprelu1_shi_13_q0, layer3_1_rprelu2_shi_13_q0, layer3_2_rprelu1_shi_13_q0, layer3_2_rprelu2_shi_13_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_2_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_2_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_1_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_1_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_0_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer3_0_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_2_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_2_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_1_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_1_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_0_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer2_0_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_2_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_2_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_1_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_1_rprelu1_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_0_rprelu2_shi_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= layer1_0_rprelu1_shi_13_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0_assign_proc : process(layer1_0_rprelu1_shi_12_q0, layer1_0_rprelu2_shi_12_q0, layer1_1_rprelu1_shi_12_q0, layer1_1_rprelu2_shi_12_q0, layer1_2_rprelu1_shi_12_q0, layer1_2_rprelu2_shi_12_q0, layer2_0_rprelu1_shi_12_q0, layer2_0_rprelu2_shi_12_q0, layer2_1_rprelu1_shi_12_q0, layer2_1_rprelu2_shi_12_q0, layer2_2_rprelu1_shi_12_q0, layer2_2_rprelu2_shi_12_q0, layer3_0_rprelu1_shi_12_q0, layer3_0_rprelu2_shi_12_q0, layer3_1_rprelu1_shi_12_q0, layer3_1_rprelu2_shi_12_q0, layer3_2_rprelu1_shi_12_q0, layer3_2_rprelu2_shi_12_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_2_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_2_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_1_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_1_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_0_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer3_0_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_2_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_2_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_1_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_1_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_0_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer2_0_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_2_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_2_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_1_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_1_rprelu1_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_0_rprelu2_shi_12_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= layer1_0_rprelu1_shi_12_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0_assign_proc : process(layer1_0_rprelu1_shi_11_q0, layer1_0_rprelu2_shi_11_q0, layer1_1_rprelu1_shi_11_q0, layer1_1_rprelu2_shi_11_q0, layer1_2_rprelu1_shi_11_q0, layer1_2_rprelu2_shi_11_q0, layer2_0_rprelu1_shi_11_q0, layer2_0_rprelu2_shi_11_q0, layer2_1_rprelu1_shi_11_q0, layer2_1_rprelu2_shi_11_q0, layer2_2_rprelu1_shi_11_q0, layer2_2_rprelu2_shi_11_q0, layer3_0_rprelu1_shi_11_q0, layer3_0_rprelu2_shi_11_q0, layer3_1_rprelu1_shi_11_q0, layer3_1_rprelu2_shi_11_q0, layer3_2_rprelu1_shi_11_q0, layer3_2_rprelu2_shi_11_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_2_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_2_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_1_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_1_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_0_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer3_0_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_2_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_2_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_1_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_1_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_0_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer2_0_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_2_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_2_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_1_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_1_rprelu1_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_0_rprelu2_shi_11_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= layer1_0_rprelu1_shi_11_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0_assign_proc : process(layer1_0_rprelu1_shi_10_q0, layer1_0_rprelu2_shi_10_q0, layer1_1_rprelu1_shi_10_q0, layer1_1_rprelu2_shi_10_q0, layer1_2_rprelu1_shi_10_q0, layer1_2_rprelu2_shi_10_q0, layer2_0_rprelu1_shi_10_q0, layer2_0_rprelu2_shi_10_q0, layer2_1_rprelu1_shi_10_q0, layer2_1_rprelu2_shi_10_q0, layer2_2_rprelu1_shi_10_q0, layer2_2_rprelu2_shi_10_q0, layer3_0_rprelu1_shi_10_q0, layer3_0_rprelu2_shi_10_q0, layer3_1_rprelu1_shi_10_q0, layer3_1_rprelu2_shi_10_q0, layer3_2_rprelu1_shi_10_q0, layer3_2_rprelu2_shi_10_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_2_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_2_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_1_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_1_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_0_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer3_0_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_2_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_2_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_1_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_1_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_0_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer2_0_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_2_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_2_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_1_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_1_rprelu1_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_0_rprelu2_shi_10_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= layer1_0_rprelu1_shi_10_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0_assign_proc : process(layer1_0_rprelu1_shi_9_q0, layer1_0_rprelu2_shi_9_q0, layer1_1_rprelu1_shi_9_q0, layer1_1_rprelu2_shi_9_q0, layer1_2_rprelu1_shi_9_q0, layer1_2_rprelu2_shi_9_q0, layer2_0_rprelu1_shi_9_q0, layer2_0_rprelu2_shi_9_q0, layer2_1_rprelu1_shi_9_q0, layer2_1_rprelu2_shi_9_q0, layer2_2_rprelu1_shi_9_q0, layer2_2_rprelu2_shi_9_q0, layer3_0_rprelu1_shi_9_q0, layer3_0_rprelu2_shi_9_q0, layer3_1_rprelu1_shi_9_q0, layer3_1_rprelu2_shi_9_q0, layer3_2_rprelu1_shi_9_q0, layer3_2_rprelu2_shi_9_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_2_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_2_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_1_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_1_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_0_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer3_0_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_2_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_2_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_1_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_1_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_0_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer2_0_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_2_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_2_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_1_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_1_rprelu1_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_0_rprelu2_shi_9_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= layer1_0_rprelu1_shi_9_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0_assign_proc : process(layer1_0_rprelu1_shi_8_q0, layer1_0_rprelu2_shi_8_q0, layer1_1_rprelu1_shi_8_q0, layer1_1_rprelu2_shi_8_q0, layer1_2_rprelu1_shi_8_q0, layer1_2_rprelu2_shi_8_q0, layer2_0_rprelu1_shi_8_q0, layer2_0_rprelu2_shi_8_q0, layer2_1_rprelu1_shi_8_q0, layer2_1_rprelu2_shi_8_q0, layer2_2_rprelu1_shi_8_q0, layer2_2_rprelu2_shi_8_q0, layer3_0_rprelu1_shi_8_q0, layer3_0_rprelu2_shi_8_q0, layer3_1_rprelu1_shi_8_q0, layer3_1_rprelu2_shi_8_q0, layer3_2_rprelu1_shi_8_q0, layer3_2_rprelu2_shi_8_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_2_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_2_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_1_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_1_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_0_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer3_0_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_2_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_2_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_1_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_1_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_0_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer2_0_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_2_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_2_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_1_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_1_rprelu1_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_0_rprelu2_shi_8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= layer1_0_rprelu1_shi_8_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_x_bias_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0_assign_proc : process(layer1_0_rprelu1_shi_7_q0, layer1_0_rprelu2_shi_7_q0, layer1_1_rprelu1_shi_7_q0, layer1_1_rprelu2_shi_7_q0, layer1_2_rprelu1_shi_7_q0, layer1_2_rprelu2_shi_7_q0, layer2_0_rprelu1_shi_7_q0, layer2_0_rprelu2_shi_7_q0, layer2_1_rprelu1_shi_7_q0, layer2_1_rprelu2_shi_7_q0, layer2_2_rprelu1_shi_7_q0, layer2_2_rprelu2_shi_7_q0, layer3_0_rprelu1_shi_7_q0, layer3_0_rprelu2_shi_7_q0, layer3_1_rprelu1_shi_7_q0, layer3_1_rprelu2_shi_7_q0, layer3_2_rprelu1_shi_7_q0, layer3_2_rprelu2_shi_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_2_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_2_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_1_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_1_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_0_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer3_0_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_2_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_2_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_1_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_1_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_0_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer2_0_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_2_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_2_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_1_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_1_rprelu1_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_0_rprelu2_shi_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= layer1_0_rprelu1_shi_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0_assign_proc : process(layer1_0_rprelu1_shi_6_q0, layer1_0_rprelu2_shi_6_q0, layer1_1_rprelu1_shi_6_q0, layer1_1_rprelu2_shi_6_q0, layer1_2_rprelu1_shi_6_q0, layer1_2_rprelu2_shi_6_q0, layer2_0_rprelu1_shi_6_q0, layer2_0_rprelu2_shi_6_q0, layer2_1_rprelu1_shi_6_q0, layer2_1_rprelu2_shi_6_q0, layer2_2_rprelu1_shi_6_q0, layer2_2_rprelu2_shi_6_q0, layer3_0_rprelu1_shi_6_q0, layer3_0_rprelu2_shi_6_q0, layer3_1_rprelu1_shi_6_q0, layer3_1_rprelu2_shi_6_q0, layer3_2_rprelu1_shi_6_q0, layer3_2_rprelu2_shi_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_2_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_2_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_1_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_1_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_0_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer3_0_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_2_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_2_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_1_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_1_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_0_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer2_0_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_2_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_2_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_1_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_1_rprelu1_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_0_rprelu2_shi_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= layer1_0_rprelu1_shi_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0_assign_proc : process(layer1_0_rprelu1_shi_5_q0, layer1_0_rprelu2_shi_5_q0, layer1_1_rprelu1_shi_5_q0, layer1_1_rprelu2_shi_5_q0, layer1_2_rprelu1_shi_5_q0, layer1_2_rprelu2_shi_5_q0, layer2_0_rprelu1_shi_5_q0, layer2_0_rprelu2_shi_5_q0, layer2_1_rprelu1_shi_5_q0, layer2_1_rprelu2_shi_5_q0, layer2_2_rprelu1_shi_5_q0, layer2_2_rprelu2_shi_5_q0, layer3_0_rprelu1_shi_5_q0, layer3_0_rprelu2_shi_5_q0, layer3_1_rprelu1_shi_5_q0, layer3_1_rprelu2_shi_5_q0, layer3_2_rprelu1_shi_5_q0, layer3_2_rprelu2_shi_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_2_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_2_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_1_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_1_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_0_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer3_0_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_2_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_2_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_1_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_1_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_0_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer2_0_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_2_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_2_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_1_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_1_rprelu1_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_0_rprelu2_shi_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= layer1_0_rprelu1_shi_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0_assign_proc : process(layer1_0_rprelu1_shi_4_q0, layer1_0_rprelu2_shi_4_q0, layer1_1_rprelu1_shi_4_q0, layer1_1_rprelu2_shi_4_q0, layer1_2_rprelu1_shi_4_q0, layer1_2_rprelu2_shi_4_q0, layer2_0_rprelu1_shi_4_q0, layer2_0_rprelu2_shi_4_q0, layer2_1_rprelu1_shi_4_q0, layer2_1_rprelu2_shi_4_q0, layer2_2_rprelu1_shi_4_q0, layer2_2_rprelu2_shi_4_q0, layer3_0_rprelu1_shi_4_q0, layer3_0_rprelu2_shi_4_q0, layer3_1_rprelu1_shi_4_q0, layer3_1_rprelu2_shi_4_q0, layer3_2_rprelu1_shi_4_q0, layer3_2_rprelu2_shi_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_2_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_2_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_1_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_1_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_0_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer3_0_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_2_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_2_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_1_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_1_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_0_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer2_0_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_2_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_2_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_1_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_1_rprelu1_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_0_rprelu2_shi_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= layer1_0_rprelu1_shi_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0_assign_proc : process(layer1_0_rprelu1_shi_3_q0, layer1_0_rprelu2_shi_3_q0, layer1_1_rprelu1_shi_3_q0, layer1_1_rprelu2_shi_3_q0, layer1_2_rprelu1_shi_3_q0, layer1_2_rprelu2_shi_3_q0, layer2_0_rprelu1_shi_3_q0, layer2_0_rprelu2_shi_3_q0, layer2_1_rprelu1_shi_3_q0, layer2_1_rprelu2_shi_3_q0, layer2_2_rprelu1_shi_3_q0, layer2_2_rprelu2_shi_3_q0, layer3_0_rprelu1_shi_3_q0, layer3_0_rprelu2_shi_3_q0, layer3_1_rprelu1_shi_3_q0, layer3_1_rprelu2_shi_3_q0, layer3_2_rprelu1_shi_3_q0, layer3_2_rprelu2_shi_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_2_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_2_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_1_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_1_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_0_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer3_0_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_2_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_2_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_1_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_1_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_0_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer2_0_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_2_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_2_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_1_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_1_rprelu1_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_0_rprelu2_shi_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= layer1_0_rprelu1_shi_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0_assign_proc : process(layer1_0_rprelu1_shi_2_q0, layer1_0_rprelu2_shi_2_q0, layer1_1_rprelu1_shi_2_q0, layer1_1_rprelu2_shi_2_q0, layer1_2_rprelu1_shi_2_q0, layer1_2_rprelu2_shi_2_q0, layer2_0_rprelu1_shi_2_q0, layer2_0_rprelu2_shi_2_q0, layer2_1_rprelu1_shi_2_q0, layer2_1_rprelu2_shi_2_q0, layer2_2_rprelu1_shi_2_q0, layer2_2_rprelu2_shi_2_q0, layer3_0_rprelu1_shi_2_q0, layer3_0_rprelu2_shi_2_q0, layer3_1_rprelu1_shi_2_q0, layer3_1_rprelu2_shi_2_q0, layer3_2_rprelu1_shi_2_q0, layer3_2_rprelu2_shi_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_2_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_2_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_1_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_1_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_0_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer3_0_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_2_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_2_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_1_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_1_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_0_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer2_0_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_2_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_2_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_1_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_1_rprelu1_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_0_rprelu2_shi_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= layer1_0_rprelu1_shi_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0_assign_proc : process(layer1_0_rprelu1_shi_1_q0, layer1_0_rprelu2_shi_1_q0, layer1_1_rprelu1_shi_1_q0, layer1_1_rprelu2_shi_1_q0, layer1_2_rprelu1_shi_1_q0, layer1_2_rprelu2_shi_1_q0, layer2_0_rprelu1_shi_1_q0, layer2_0_rprelu2_shi_1_q0, layer2_1_rprelu1_shi_1_q0, layer2_1_rprelu2_shi_1_q0, layer2_2_rprelu1_shi_1_q0, layer2_2_rprelu2_shi_1_q0, layer3_0_rprelu1_shi_1_q0, layer3_0_rprelu2_shi_1_q0, layer3_1_rprelu1_shi_1_q0, layer3_1_rprelu2_shi_1_q0, layer3_2_rprelu1_shi_1_q0, layer3_2_rprelu2_shi_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_2_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_2_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_1_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_1_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_0_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer3_0_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_2_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_2_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_1_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_1_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_0_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer2_0_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_2_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_2_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_1_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_1_rprelu1_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_0_rprelu2_shi_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= layer1_0_rprelu1_shi_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0_assign_proc : process(layer1_0_rprelu1_shi_q0, layer1_0_rprelu2_shi_q0, layer1_1_rprelu1_shi_q0, layer1_1_rprelu2_shi_q0, layer1_2_rprelu1_shi_q0, layer1_2_rprelu2_shi_q0, layer2_0_rprelu1_shi_q0, layer2_0_rprelu2_shi_q0, layer2_1_rprelu1_shi_q0, layer2_1_rprelu2_shi_q0, layer2_2_rprelu1_shi_q0, layer2_2_rprelu2_shi_q0, layer3_0_rprelu1_shi_q0, layer3_0_rprelu2_shi_q0, layer3_1_rprelu1_shi_q0, layer3_1_rprelu2_shi_q0, layer3_2_rprelu1_shi_q0, layer3_2_rprelu2_shi_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_2_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_2_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_1_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_1_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_0_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer3_0_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_2_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_2_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_1_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_1_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_0_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer2_0_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_2_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_2_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_1_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_1_rprelu1_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_0_rprelu2_shi_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= layer1_0_rprelu1_shi_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_relu_y_bias_V_offset <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_stride_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            grp_bn_relu_shortcut_fu_4069_stride <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_bn_relu_shortcut_fu_4069_stride <= ap_const_lv4_1;
        else 
            grp_bn_relu_shortcut_fu_4069_stride <= "XXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0_assign_proc : process(layer1_0_conv1_thres_7_q0, layer1_0_conv2_thres_7_q0, layer1_1_conv1_thres_7_q0, layer1_1_conv2_thres_7_q0, layer1_2_conv1_thres_7_q0, layer1_2_conv2_thres_7_q0, layer2_0_conv1_thres_7_q0, layer2_0_conv2_thres_7_q0, layer2_1_conv1_thres_7_q0, layer2_1_conv2_thres_7_q0, layer2_2_conv1_thres_7_q0, layer2_2_conv2_thres_7_q0, layer3_0_conv1_thres_7_q0, layer3_0_conv2_thres_7_q0, layer3_1_conv1_thres_7_q0, layer3_1_conv2_thres_7_q0, layer3_2_conv1_thres_7_q0, layer3_2_conv2_thres_7_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_2_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_2_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_1_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_1_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_0_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer3_0_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_2_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_2_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_1_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_1_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_0_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer2_0_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_2_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_2_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_1_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_1_conv1_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_0_conv2_thres_7_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= layer1_0_conv1_thres_7_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_0_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0_assign_proc : process(layer1_0_conv1_thres_6_q0, layer1_0_conv2_thres_6_q0, layer1_1_conv1_thres_6_q0, layer1_1_conv2_thres_6_q0, layer1_2_conv1_thres_6_q0, layer1_2_conv2_thres_6_q0, layer2_0_conv1_thres_6_q0, layer2_0_conv2_thres_6_q0, layer2_1_conv1_thres_6_q0, layer2_1_conv2_thres_6_q0, layer2_2_conv1_thres_6_q0, layer2_2_conv2_thres_6_q0, layer3_0_conv1_thres_6_q0, layer3_0_conv2_thres_6_q0, layer3_1_conv1_thres_6_q0, layer3_1_conv2_thres_6_q0, layer3_2_conv1_thres_6_q0, layer3_2_conv2_thres_6_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_2_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_2_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_1_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_1_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_0_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer3_0_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_2_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_2_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_1_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_1_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_0_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer2_0_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_2_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_2_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_1_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_1_conv1_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_0_conv2_thres_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= layer1_0_conv1_thres_6_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_1_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0_assign_proc : process(layer1_0_conv1_thres_5_q0, layer1_0_conv2_thres_5_q0, layer1_1_conv1_thres_5_q0, layer1_1_conv2_thres_5_q0, layer1_2_conv1_thres_5_q0, layer1_2_conv2_thres_5_q0, layer2_0_conv1_thres_5_q0, layer2_0_conv2_thres_5_q0, layer2_1_conv1_thres_5_q0, layer2_1_conv2_thres_5_q0, layer2_2_conv1_thres_5_q0, layer2_2_conv2_thres_5_q0, layer3_0_conv1_thres_5_q0, layer3_0_conv2_thres_5_q0, layer3_1_conv1_thres_5_q0, layer3_1_conv2_thres_5_q0, layer3_2_conv1_thres_5_q0, layer3_2_conv2_thres_5_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_2_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_2_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_1_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_1_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_0_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer3_0_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_2_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_2_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_1_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_1_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_0_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer2_0_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_2_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_2_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_1_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_1_conv1_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_0_conv2_thres_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= layer1_0_conv1_thres_5_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_2_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0_assign_proc : process(layer1_0_conv1_thres_4_q0, layer1_0_conv2_thres_4_q0, layer1_1_conv1_thres_4_q0, layer1_1_conv2_thres_4_q0, layer1_2_conv1_thres_4_q0, layer1_2_conv2_thres_4_q0, layer2_0_conv1_thres_4_q0, layer2_0_conv2_thres_4_q0, layer2_1_conv1_thres_4_q0, layer2_1_conv2_thres_4_q0, layer2_2_conv1_thres_4_q0, layer2_2_conv2_thres_4_q0, layer3_0_conv1_thres_4_q0, layer3_0_conv2_thres_4_q0, layer3_1_conv1_thres_4_q0, layer3_1_conv2_thres_4_q0, layer3_2_conv1_thres_4_q0, layer3_2_conv2_thres_4_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_2_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_2_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_1_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_1_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_0_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer3_0_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_2_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_2_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_1_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_1_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_0_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer2_0_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_2_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_2_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_1_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_1_conv1_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_0_conv2_thres_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= layer1_0_conv1_thres_4_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_3_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0_assign_proc : process(layer1_0_conv1_thres_3_q0, layer1_0_conv2_thres_3_q0, layer1_1_conv1_thres_3_q0, layer1_1_conv2_thres_3_q0, layer1_2_conv1_thres_3_q0, layer1_2_conv2_thres_3_q0, layer2_0_conv1_thres_3_q0, layer2_0_conv2_thres_3_q0, layer2_1_conv1_thres_3_q0, layer2_1_conv2_thres_3_q0, layer2_2_conv1_thres_3_q0, layer2_2_conv2_thres_3_q0, layer3_0_conv1_thres_3_q0, layer3_0_conv2_thres_3_q0, layer3_1_conv1_thres_3_q0, layer3_1_conv2_thres_3_q0, layer3_2_conv1_thres_3_q0, layer3_2_conv2_thres_3_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_2_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_2_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_1_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_1_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_0_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer3_0_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_2_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_2_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_1_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_1_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_0_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer2_0_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_2_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_2_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_1_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_1_conv1_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_0_conv2_thres_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= layer1_0_conv1_thres_3_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_4_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0_assign_proc : process(layer1_0_conv1_thres_2_q0, layer1_0_conv2_thres_2_q0, layer1_1_conv1_thres_2_q0, layer1_1_conv2_thres_2_q0, layer1_2_conv1_thres_2_q0, layer1_2_conv2_thres_2_q0, layer2_0_conv1_thres_2_q0, layer2_0_conv2_thres_2_q0, layer2_1_conv1_thres_2_q0, layer2_1_conv2_thres_2_q0, layer2_2_conv1_thres_2_q0, layer2_2_conv2_thres_2_q0, layer3_0_conv1_thres_2_q0, layer3_0_conv2_thres_2_q0, layer3_1_conv1_thres_2_q0, layer3_1_conv2_thres_2_q0, layer3_2_conv1_thres_2_q0, layer3_2_conv2_thres_2_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_2_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_2_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_1_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_1_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_0_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer3_0_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_2_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_2_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_1_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_1_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_0_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer2_0_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_2_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_2_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_1_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_1_conv1_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_0_conv2_thres_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= layer1_0_conv1_thres_2_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_5_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0_assign_proc : process(layer1_0_conv1_thres_1_q0, layer1_0_conv2_thres_1_q0, layer1_1_conv1_thres_1_q0, layer1_1_conv2_thres_1_q0, layer1_2_conv1_thres_1_q0, layer1_2_conv2_thres_1_q0, layer2_0_conv1_thres_1_q0, layer2_0_conv2_thres_1_q0, layer2_1_conv1_thres_1_q0, layer2_1_conv2_thres_1_q0, layer2_2_conv1_thres_1_q0, layer2_2_conv2_thres_1_q0, layer3_0_conv1_thres_1_q0, layer3_0_conv2_thres_1_q0, layer3_1_conv1_thres_1_q0, layer3_1_conv2_thres_1_q0, layer3_2_conv1_thres_1_q0, layer3_2_conv2_thres_1_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_2_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_2_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_1_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_1_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_0_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer3_0_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_2_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_2_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_1_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_1_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_0_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer2_0_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_2_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_2_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_1_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_1_conv1_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_0_conv2_thres_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= layer1_0_conv1_thres_1_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_6_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0_assign_proc : process(layer1_0_conv1_thres_q0, layer1_0_conv2_thres_q0, layer1_1_conv1_thres_q0, layer1_1_conv2_thres_q0, layer1_2_conv1_thres_q0, layer1_2_conv2_thres_q0, layer2_0_conv1_thres_q0, layer2_0_conv2_thres_q0, layer2_1_conv1_thres_q0, layer2_1_conv2_thres_q0, layer2_2_conv1_thres_q0, layer2_2_conv2_thres_q0, layer3_0_conv1_thres_q0, layer3_0_conv2_thres_q0, layer3_1_conv1_thres_q0, layer3_1_conv2_thres_q0, layer3_2_conv1_thres_q0, layer3_2_conv2_thres_q0, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_2_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_2_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_1_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_1_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_0_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer3_0_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_2_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_2_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_1_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_1_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_0_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer2_0_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_2_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_2_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_1_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_1_conv1_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_0_conv2_thres_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= layer1_0_conv1_thres_q0;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_7_V_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bn_relu_shortcut_fu_4069_threshold_V_offset_assign_proc : process(zext_ln172_reg_8108, zext_ln222_reg_8139, zext_ln272_reg_8170, zext_ln322_reg_8201, zext_ln372_reg_8232, zext_ln422_reg_8263, zext_ln483_reg_8294, zext_ln543_reg_8325, zext_ln592_reg_8356, zext_ln642_reg_8387, zext_ln691_reg_8418, zext_ln741_reg_8449, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, c_out64_0_reg_3395, ap_CS_fsm_state86, c_out66_0_reg_3418, ap_CS_fsm_state91, c_out68_0_reg_3441, ap_CS_fsm_state96, c_out70_0_reg_3465, ap_CS_fsm_state101, c_out72_0_reg_3489, ap_CS_fsm_state106, c_out74_0_reg_3513, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out74_0_reg_3513;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out72_0_reg_3489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out70_0_reg_3465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out68_0_reg_3441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out66_0_reg_3418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= c_out64_0_reg_3395;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln741_reg_8449;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln691_reg_8418;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln642_reg_8387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln592_reg_8356;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln543_reg_8325;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln483_reg_8294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln422_reg_8263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln372_reg_8232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln322_reg_8201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln272_reg_8170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln222_reg_8139;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= zext_ln172_reg_8108;
        else 
            grp_bn_relu_shortcut_fu_4069_threshold_V_offset <= "XXXX";
        end if; 
    end process;

    grp_matmul_fu_6769_ap_start <= grp_matmul_fu_6769_ap_start_reg;

    grp_pg_conv3x3_tile_fu_3548_H_fmap_out_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            grp_pg_conv3x3_tile_fu_3548_H_fmap_out <= ap_const_lv7_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            grp_pg_conv3x3_tile_fu_3548_H_fmap_out <= ap_const_lv7_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_pg_conv3x3_tile_fu_3548_H_fmap_out <= ap_const_lv7_20;
        else 
            grp_pg_conv3x3_tile_fu_3548_H_fmap_out <= "XXXXXXX";
        end if; 
    end process;

    grp_pg_conv3x3_tile_fu_3548_ap_start <= grp_pg_conv3x3_tile_fu_3548_ap_start_reg;

    grp_pg_conv3x3_tile_fu_3548_c_in_assign_proc : process(ap_CS_fsm_state16, c_in_0_reg_3107, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_pg_conv3x3_tile_fu_3548_c_in <= ap_const_lv2_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_pg_conv3x3_tile_fu_3548_c_in <= c_in_0_reg_3107;
        else 
            grp_pg_conv3x3_tile_fu_3548_c_in <= "XX";
        end if; 
    end process;


    grp_pg_conv3x3_tile_fu_3548_in_channels_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            grp_pg_conv3x3_tile_fu_3548_in_channels <= ap_const_lv8_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_pg_conv3x3_tile_fu_3548_in_channels <= ap_const_lv8_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_pg_conv3x3_tile_fu_3548_in_channels <= ap_const_lv8_20;
        else 
            grp_pg_conv3x3_tile_fu_3548_in_channels <= "XXXXXXXX";
        end if; 
    end process;


    grp_pg_conv3x3_tile_fu_3548_weights_V_offset_assign_proc : process(zext_ln113_reg_8080, zext_ln166_reg_8098, zext_ln216_reg_8129, zext_ln266_reg_8160, zext_ln316_reg_8191, zext_ln366_reg_8222, zext_ln416_reg_8253, zext_ln477_reg_8284, zext_ln537_reg_8315, zext_ln586_reg_8346, zext_ln636_reg_8377, zext_ln685_reg_8408, zext_ln735_reg_8439, zext_ln796_reg_8470, zext_ln856_reg_8488, ap_CS_fsm_state16, conv_weight_ptr_16_reg_3453, conv_weight_ptr_17_reg_3477, conv_weight_ptr_18_reg_3501, conv_weight_ptr_19_reg_3525, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= conv_weight_ptr_19_reg_3525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= conv_weight_ptr_18_reg_3501;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= conv_weight_ptr_17_reg_3477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= conv_weight_ptr_16_reg_3453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln856_reg_8488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln796_reg_8470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln735_reg_8439;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln685_reg_8408;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln636_reg_8377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln586_reg_8346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln537_reg_8315;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln477_reg_8284;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln416_reg_8253;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln366_reg_8222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln316_reg_8191;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln266_reg_8160;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln216_reg_8129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln166_reg_8098;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= zext_ln113_reg_8080;
        else 
            grp_pg_conv3x3_tile_fu_3548_weights_V_offset <= "XXXXXXX";
        end if; 
    end process;


    grp_quant_and_pack_fu_3972_H_fmap_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            grp_quant_and_pack_fu_3972_H_fmap <= ap_const_lv7_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_quant_and_pack_fu_3972_H_fmap <= ap_const_lv7_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_quant_and_pack_fu_3972_H_fmap <= ap_const_lv7_20;
        else 
            grp_quant_and_pack_fu_3972_H_fmap <= "XXXXXXX";
        end if; 
    end process;

    grp_quant_and_pack_fu_3972_ap_start <= grp_quant_and_pack_fu_3972_ap_start_reg;

    grp_quant_and_pack_fu_3972_in_channels_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            grp_quant_and_pack_fu_3972_in_channels <= ap_const_lv8_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_quant_and_pack_fu_3972_in_channels <= ap_const_lv8_20;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_quant_and_pack_fu_3972_in_channels <= ap_const_lv8_10;
        else 
            grp_quant_and_pack_fu_3972_in_channels <= "XXXXXXXX";
        end if; 
    end process;

    i_fu_7701_p2 <= std_logic_vector(unsigned(i_0_reg_3537) + unsigned(ap_const_lv4_1));
    icmp_ln1031_fu_7677_p2 <= "1" when (c_out74_0_reg_3513 = ap_const_lv4_8) else "0";
    icmp_ln104_fu_7110_p2 <= "1" when (c_in_0_reg_3107 = ap_const_lv2_3) else "0";
    icmp_ln1085_fu_7695_p2 <= "1" when (i_0_reg_3537 = ap_const_lv4_A) else "0";
    icmp_ln142_fu_7133_p2 <= "1" when (c_out40_0_reg_3130 = ap_const_lv2_2) else "0";
    icmp_ln192_fu_7169_p2 <= "1" when (c_out42_0_reg_3153 = ap_const_lv2_2) else "0";
    icmp_ln242_fu_7205_p2 <= "1" when (c_out44_0_reg_3176 = ap_const_lv2_2) else "0";
    icmp_ln292_fu_7241_p2 <= "1" when (c_out46_0_reg_3199 = ap_const_lv2_2) else "0";
    icmp_ln342_fu_7281_p2 <= "1" when (c_out48_0_reg_3222 = ap_const_lv2_2) else "0";
    icmp_ln392_fu_7317_p2 <= "1" when (c_out50_0_reg_3245 = ap_const_lv2_2) else "0";
    icmp_ln454_fu_7353_p2 <= "1" when (c_out52_0_reg_3268 = ap_const_lv3_4) else "0";
    icmp_ln514_fu_7389_p2 <= "1" when (c_out54_0_reg_3291 = ap_const_lv3_4) else "0";
    icmp_ln563_fu_7425_p2 <= "1" when (c_out56_0_reg_3303 = ap_const_lv3_4) else "0";
    icmp_ln613_fu_7465_p2 <= "1" when (c_out58_0_reg_3326 = ap_const_lv3_4) else "0";
    icmp_ln662_fu_7501_p2 <= "1" when (c_out60_0_reg_3349 = ap_const_lv3_4) else "0";
    icmp_ln69_fu_6898_p2 <= "1" when (indvar_flatten13_reg_3018 = ap_const_lv12_C00) else "0";
    icmp_ln70_fu_6916_p2 <= "1" when (indvar_flatten_reg_3040 = ap_const_lv12_400) else "0";
    icmp_ln712_fu_7537_p2 <= "1" when (c_out62_0_reg_3372 = ap_const_lv3_4) else "0";
    icmp_ln71_fu_6944_p2 <= "1" when (col_0_reg_3062 = ap_const_lv6_20) else "0";
    icmp_ln773_fu_7573_p2 <= "1" when (c_out64_0_reg_3395 = ap_const_lv4_8) else "0";
    icmp_ln833_fu_7596_p2 <= "1" when (c_out66_0_reg_3418 = ap_const_lv4_8) else "0";
    icmp_ln882_fu_7623_p2 <= "1" when (c_out68_0_reg_3441 = ap_const_lv4_8) else "0";
    icmp_ln89_fu_7092_p2 <= "1" when (c_out_0_reg_3085 = ap_const_lv2_2) else "0";
    icmp_ln932_fu_7641_p2 <= "1" when (c_out70_0_reg_3465 = ap_const_lv4_8) else "0";
    icmp_ln935_fu_7726_p2 <= "1" when (tmp_V_3_reg_8563 = ap_const_lv24_0) else "0";
    icmp_ln947_1_fu_7821_p2 <= "0" when (p_Result_5_fu_7816_p2 = ap_const_lv24_0) else "1";
    icmp_ln947_fu_7795_p2 <= "1" when (signed(tmp_786_fu_7785_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_7879_p2 <= "1" when (signed(lsb_index_fu_7780_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln981_fu_7659_p2 <= "1" when (c_out72_0_reg_3489 = ap_const_lv4_8) else "0";
    image_V1_fu_6884_p4 <= image_V(31 downto 3);
    
    l_fu_7754_p3_proc : process(p_Result_9_fu_7746_p3)
    begin
        l_fu_7754_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_9_fu_7746_p3(i) = '1' then
                l_fu_7754_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;


    layer1_0_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_0_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_0_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_0_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_0_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_0_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_0_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_0_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_0_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_0_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_0_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_0_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_0_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_0_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_0_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_0_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_0_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_0_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_0_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_0_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_0_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_0_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_0_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_0_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_0_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_0_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_0_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_0_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_0_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_0_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_0_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_0_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_0_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_0_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_0_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_0_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_0_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_0_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_0_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_0_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_0_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_0_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_0_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_0_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_0_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_0_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_0_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_0_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_0_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_0_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_0_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_0_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_0_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_0_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_0_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_0_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_0_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_0_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_0_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_0_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_0_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_0_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_0_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_0_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_0_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_0_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_0_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_0_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_0_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_0_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_0_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_0_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_0_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_0_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_0_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_0_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_0_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_0_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_0_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_0_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_0_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_0_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_0_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_0_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_0_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_0_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_0_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_0_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_0_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_0_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_0_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_0_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_0_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_0_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_0_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_0_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_0_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_0_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_0_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_0_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_0_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_0_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_0_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_0_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_0_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_0_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_0_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_0_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_0_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_0_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_0_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_0_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_0_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_0_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_0_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_0_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_0_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_0_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_0_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_0_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_0_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_0_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_0_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_0_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_0_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_0_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_0_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_0_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_0_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_0_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_0_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_0_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_1_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_1_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_1_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_1_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_1_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_1_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_1_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_1_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_1_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_1_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_1_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_1_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_1_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_1_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_1_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_1_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_1_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_1_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_1_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_1_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_1_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_1_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_1_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_1_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_1_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_1_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_1_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_1_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_1_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_1_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_1_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_1_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_1_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_1_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_1_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_1_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_1_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_1_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_1_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_1_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_1_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_1_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_1_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_1_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_1_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_1_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_1_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_1_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_1_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_1_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_1_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_1_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_1_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_1_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_1_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_1_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_1_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_1_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_1_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_1_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_1_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_1_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_1_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_1_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_1_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_1_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_1_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_1_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_1_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_1_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_1_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_1_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_1_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_1_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_1_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_1_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_1_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_1_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_1_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_1_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_1_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_1_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_1_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_1_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_1_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_1_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_1_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_1_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_1_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_1_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_1_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_1_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_1_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_1_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_1_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_1_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_1_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_1_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_1_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_1_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_1_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_1_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_1_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer1_1_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_1_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_1_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_1_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_1_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_1_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_1_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_1_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_1_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_1_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_1_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_1_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_1_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_1_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_1_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_1_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_1_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_1_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_1_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_1_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_1_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_1_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_1_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_1_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_1_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_1_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            layer1_1_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_1_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_2_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_2_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_2_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_2_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_2_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_2_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_2_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_2_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_2_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_2_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_2_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_2_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_2_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_2_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_2_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_2_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer1_2_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer1_2_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer1_2_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer1_2_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer1_2_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer1_2_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer1_2_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer1_2_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer1_2_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer1_2_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer1_2_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer1_2_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer1_2_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer1_2_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer1_2_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer1_2_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_2_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_2_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_2_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_2_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_2_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_2_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_2_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_2_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_2_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_2_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_2_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_2_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_2_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_2_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_2_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_2_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer1_2_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer1_2_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer1_2_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer1_2_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer1_2_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer1_2_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer1_2_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer1_2_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer1_2_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer1_2_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer1_2_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer1_2_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer1_2_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer1_2_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer1_2_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer1_2_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_2_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_2_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_2_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_2_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_2_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_2_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_2_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_2_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer1_2_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer1_2_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer1_2_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer1_2_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer1_2_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer1_2_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer1_2_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer1_2_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_2_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_2_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_2_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_2_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_2_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_2_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_2_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_2_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_2_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_2_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_2_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_2_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_2_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_2_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_2_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_2_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_2_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_2_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_2_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_2_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_2_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_2_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_2_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            layer1_2_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_2_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer1_2_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer1_2_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer1_2_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer1_2_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer1_2_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer1_2_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer1_2_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer1_2_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer1_2_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer1_2_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer1_2_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer1_2_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer1_2_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer1_2_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer1_2_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer1_2_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer1_2_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer1_2_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer1_2_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer1_2_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer1_2_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer1_2_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer1_2_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_2_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_2_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer1_2_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_0_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_0_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_0_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_0_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_0_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_0_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_0_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_0_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_0_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_0_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_0_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_0_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_0_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_0_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_0_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_0_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_0_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_0_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_0_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_0_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_0_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_0_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_0_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_0_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_0_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_0_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_0_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_0_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_0_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_0_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_0_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_0_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_0_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_0_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_0_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_0_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_0_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_0_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_0_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_0_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_0_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_0_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_0_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_0_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_0_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_0_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_0_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_0_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_0_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_0_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_0_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_0_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_0_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_0_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_0_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_0_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_0_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_0_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_0_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_0_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_0_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_0_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_0_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_0_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_0_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_0_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_0_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_0_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_0_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_0_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_0_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_0_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_0_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_0_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_0_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_0_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_0_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_0_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_0_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_0_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_0_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_0_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_0_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_0_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_0_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_0_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_0_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_0_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_0_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_0_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_0_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_0_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_0_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_0_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_0_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_0_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_0_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_0_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_0_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_0_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_0_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_0_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_0_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer2_0_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_0_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_0_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_0_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_0_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_0_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_0_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_0_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_0_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_0_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_0_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_0_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_0_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_0_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_0_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_0_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_0_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_0_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_0_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_0_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_0_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_0_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_0_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_0_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_0_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_0_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer2_0_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_0_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_1_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_1_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_1_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_1_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_1_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_1_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_1_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_1_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_1_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_1_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_1_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_1_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_1_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_1_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_1_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_1_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_1_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_1_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_1_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_1_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_1_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_1_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_1_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_1_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_1_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_1_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_1_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_1_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_1_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_1_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_1_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_1_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_1_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_1_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_1_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_1_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_1_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_1_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_1_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_1_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_1_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_1_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_1_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_1_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_1_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_1_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_1_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_1_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_1_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_1_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_1_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_1_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_1_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_1_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_1_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_1_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_1_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_1_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_1_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_1_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_1_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_1_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_1_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_1_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_1_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_1_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_1_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_1_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_1_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_1_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_1_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_1_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_1_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_1_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_1_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_1_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_1_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_1_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_1_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_1_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_1_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_1_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_1_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_1_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_1_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_1_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_1_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_1_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_1_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_1_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_1_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_1_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_1_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_1_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_1_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_1_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_1_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_1_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_1_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_1_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_1_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_1_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_1_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer2_1_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_1_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_1_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_1_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_1_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_1_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_1_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_1_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_1_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_1_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_1_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_1_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_1_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_1_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_1_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_1_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_1_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_1_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_1_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_1_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_1_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_1_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_1_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_1_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_1_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_1_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state69)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer2_1_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_1_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_2_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_2_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_2_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_2_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_2_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_2_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_2_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_2_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_2_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_2_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_2_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_2_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_2_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_2_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_2_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_2_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer2_2_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer2_2_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer2_2_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer2_2_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer2_2_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer2_2_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer2_2_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer2_2_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer2_2_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer2_2_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer2_2_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer2_2_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer2_2_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer2_2_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer2_2_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer2_2_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_2_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_2_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_2_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_2_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_2_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_2_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_2_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_2_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_2_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_2_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_2_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_2_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_2_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_2_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_2_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_2_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer2_2_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer2_2_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer2_2_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer2_2_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer2_2_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer2_2_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer2_2_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer2_2_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer2_2_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer2_2_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer2_2_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer2_2_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer2_2_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer2_2_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer2_2_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer2_2_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_2_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_2_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_2_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_2_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_2_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_2_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_2_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_2_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer2_2_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer2_2_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer2_2_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer2_2_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer2_2_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer2_2_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer2_2_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer2_2_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_2_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_2_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_2_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_2_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_2_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_2_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_2_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_2_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_2_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_2_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_2_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_2_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_2_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_2_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_2_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_2_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_2_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_2_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_2_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_2_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_2_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_2_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_2_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer2_2_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_2_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer2_2_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer2_2_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer2_2_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer2_2_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer2_2_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer2_2_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer2_2_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer2_2_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer2_2_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer2_2_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer2_2_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer2_2_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer2_2_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer2_2_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer2_2_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer2_2_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer2_2_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer2_2_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer2_2_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer2_2_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer2_2_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer2_2_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer2_2_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_2_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state79)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            layer2_2_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer2_2_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_0_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_0_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_0_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_0_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_0_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_0_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_0_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_0_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_0_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_0_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_0_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_0_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_0_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_0_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_0_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_0_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_0_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_0_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_0_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_0_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_0_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_0_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_0_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_0_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_0_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_0_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_0_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_0_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_0_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_0_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_0_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_0_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_0_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_0_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_0_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_0_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_0_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_0_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_0_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_0_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_0_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_0_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_0_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_0_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_0_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_0_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_0_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_0_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_0_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_0_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_0_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_0_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_0_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_0_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_0_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_0_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_0_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_0_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_0_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_0_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_0_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_0_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_0_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_0_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_0_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_0_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_0_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_0_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_0_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_0_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_0_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_0_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_0_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_0_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_0_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_0_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_0_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_0_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_0_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_0_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_0_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_0_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_0_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_0_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_0_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_0_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_0_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_0_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_0_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_0_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_0_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_0_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_0_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_0_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_0_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_0_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_0_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_0_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_0_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_0_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_0_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_0_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_0_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            layer3_0_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_0_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_0_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_0_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_0_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_0_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_0_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_0_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_0_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_0_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_0_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_0_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_0_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_0_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_0_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_0_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_0_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_0_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_0_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_0_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_0_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_0_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_0_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_0_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_0_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_0_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state91)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            layer3_0_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_0_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_1_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_1_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_1_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_1_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_1_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_1_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_1_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_1_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_1_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_1_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_1_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_1_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_1_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_1_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_1_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_1_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_1_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_1_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_1_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_1_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_1_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_1_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_1_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_1_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_1_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_1_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_1_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_1_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_1_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_1_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_1_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_1_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_1_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_1_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_1_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_1_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_1_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_1_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_1_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_1_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_1_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_1_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_1_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_1_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_1_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_1_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_1_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_1_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_1_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_1_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_1_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_1_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_1_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_1_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_1_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_1_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_1_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_1_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_1_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_1_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_1_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_1_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_1_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_1_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_1_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_1_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_1_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_1_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_1_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_1_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_1_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_1_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_1_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_1_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_1_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_1_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_1_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_1_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_1_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_1_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_1_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_1_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_1_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_1_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_1_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_1_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_1_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_1_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_1_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_1_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_1_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_1_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_1_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_1_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_1_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_1_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_1_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_1_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_1_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_1_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_1_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_1_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_1_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            layer3_1_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_1_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_1_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_1_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_1_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_1_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_1_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_1_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_1_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_1_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_1_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_1_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_1_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_1_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_1_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_1_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_1_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_1_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_1_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_1_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_1_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_1_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_1_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_1_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_1_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_1_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            layer3_1_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_1_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_2_bn1_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_2_bn1_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_2_bn1_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_2_bn1_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_2_bn1_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_2_bn1_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_2_bn1_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_2_bn1_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_2_bn1_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_2_bn1_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_2_bn1_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_2_bn1_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_2_bn1_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_2_bn1_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_2_bn1_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn1_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn1_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_2_bn1_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_6_V_ce0;
        else 
            layer3_2_bn2_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_5_V_ce0;
        else 
            layer3_2_bn2_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_4_V_ce0;
        else 
            layer3_2_bn2_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_3_V_ce0;
        else 
            layer3_2_bn2_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_2_V_ce0;
        else 
            layer3_2_bn2_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_1_V_ce0;
        else 
            layer3_2_bn2_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_0_V_ce0;
        else 
            layer3_2_bn2_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_0_7_V_ce0;
        else 
            layer3_2_bn2_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_6_V_ce0;
        else 
            layer3_2_bn2_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_5_V_ce0;
        else 
            layer3_2_bn2_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_4_V_ce0;
        else 
            layer3_2_bn2_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_3_V_ce0;
        else 
            layer3_2_bn2_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_2_V_ce0;
        else 
            layer3_2_bn2_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_1_V_ce0;
        else 
            layer3_2_bn2_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_0_V_ce0;
        else 
            layer3_2_bn2_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn2_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn2_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_0_7_V_ce0;
        else 
            layer3_2_bn2_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_2_bn3_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_2_bn3_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_2_bn3_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_2_bn3_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_2_bn3_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_2_bn3_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_2_bn3_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_2_bn3_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_2_bn3_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_2_bn3_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_2_bn3_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_2_bn3_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_2_bn3_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_2_bn3_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_2_bn3_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn3_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_bn3_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_2_bn3_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_6_V_ce0;
        else 
            layer3_2_bn4_bias_fi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_5_V_ce0;
        else 
            layer3_2_bn4_bias_fi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_4_V_ce0;
        else 
            layer3_2_bn4_bias_fi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_3_V_ce0;
        else 
            layer3_2_bn4_bias_fi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_2_V_ce0;
        else 
            layer3_2_bn4_bias_fi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_1_V_ce0;
        else 
            layer3_2_bn4_bias_fi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_0_V_ce0;
        else 
            layer3_2_bn4_bias_fi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_bias_fi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_bias_fi_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_bias_1_7_V_ce0;
        else 
            layer3_2_bn4_bias_fi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_1_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_6_V_ce0;
        else 
            layer3_2_bn4_weight_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_2_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_5_V_ce0;
        else 
            layer3_2_bn4_weight_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_3_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_4_V_ce0;
        else 
            layer3_2_bn4_weight_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_4_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_3_V_ce0;
        else 
            layer3_2_bn4_weight_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_5_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_2_V_ce0;
        else 
            layer3_2_bn4_weight_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_6_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_1_V_ce0;
        else 
            layer3_2_bn4_weight_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_7_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_0_V_ce0;
        else 
            layer3_2_bn4_weight_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_bn4_weight_s_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_bn4_weight_s_ce0 <= grp_bn_relu_shortcut_fu_4069_bn_weight_1_7_V_ce0;
        else 
            layer3_2_bn4_weight_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_2_conv1_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_2_conv1_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_2_conv1_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_2_conv1_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_2_conv1_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_2_conv1_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_2_conv1_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv1_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_conv1_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_2_conv1_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_1_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_6_V_ce0;
        else 
            layer3_2_conv2_thres_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_2_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_5_V_ce0;
        else 
            layer3_2_conv2_thres_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_3_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_4_V_ce0;
        else 
            layer3_2_conv2_thres_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_4_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_3_V_ce0;
        else 
            layer3_2_conv2_thres_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_5_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_2_V_ce0;
        else 
            layer3_2_conv2_thres_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_6_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_1_V_ce0;
        else 
            layer3_2_conv2_thres_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_7_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_0_V_ce0;
        else 
            layer3_2_conv2_thres_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_conv2_thres_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_conv2_thres_ce0 <= grp_bn_relu_shortcut_fu_4069_threshold_7_V_ce0;
        else 
            layer3_2_conv2_thres_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_2_rprelu1_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_2_rprelu1_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_2_rprelu1_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_2_rprelu1_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_2_rprelu1_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_2_rprelu1_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_2_rprelu1_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_2_rprelu1_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_2_rprelu1_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_2_rprelu1_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_2_rprelu1_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_2_rprelu1_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_2_rprelu1_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_2_rprelu1_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_2_rprelu1_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_2_rprelu1_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_2_rprelu1_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_2_rprelu1_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_2_rprelu1_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_2_rprelu1_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_2_rprelu1_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_2_rprelu1_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_2_rprelu1_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu1_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            layer3_2_rprelu1_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_2_rprelu1_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_6_V_ce0;
        else 
            layer3_2_rprelu2_pre_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_5_V_ce0;
        else 
            layer3_2_rprelu2_pre_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_4_V_ce0;
        else 
            layer3_2_rprelu2_pre_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_3_V_ce0;
        else 
            layer3_2_rprelu2_pre_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_2_V_ce0;
        else 
            layer3_2_rprelu2_pre_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_1_V_ce0;
        else 
            layer3_2_rprelu2_pre_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_0_V_ce0;
        else 
            layer3_2_rprelu2_pre_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_pre_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_pre_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_weight_7_V_ce0;
        else 
            layer3_2_rprelu2_pre_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_10_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_10_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_5_V_ce0;
        else 
            layer3_2_rprelu2_shi_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_11_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_11_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_4_V_ce0;
        else 
            layer3_2_rprelu2_shi_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_12_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_12_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_3_V_ce0;
        else 
            layer3_2_rprelu2_shi_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_13_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_13_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_2_V_ce0;
        else 
            layer3_2_rprelu2_shi_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_14_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_14_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_1_V_ce0;
        else 
            layer3_2_rprelu2_shi_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_15_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_15_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_0_V_ce0;
        else 
            layer3_2_rprelu2_shi_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_1_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_1_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_6_V_ce0;
        else 
            layer3_2_rprelu2_shi_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_2_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_2_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_5_V_ce0;
        else 
            layer3_2_rprelu2_shi_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_3_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_3_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_4_V_ce0;
        else 
            layer3_2_rprelu2_shi_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_4_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_4_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_3_V_ce0;
        else 
            layer3_2_rprelu2_shi_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_5_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_5_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_2_V_ce0;
        else 
            layer3_2_rprelu2_shi_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_6_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_6_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_1_V_ce0;
        else 
            layer3_2_rprelu2_shi_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_7_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_7_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_0_V_ce0;
        else 
            layer3_2_rprelu2_shi_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_8_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_8_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_7_V_ce0;
        else 
            layer3_2_rprelu2_shi_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_9_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_9_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_x_bias_6_V_ce0;
        else 
            layer3_2_rprelu2_shi_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer3_2_rprelu2_shi_ce0_assign_proc : process(grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            layer3_2_rprelu2_shi_ce0 <= grp_bn_relu_shortcut_fu_4069_relu_y_bias_7_V_ce0;
        else 
            layer3_2_rprelu2_shi_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linear_out_buf_address0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state115, grp_matmul_fu_6769_outputs_V_address0, zext_ln1086_fu_7707_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            linear_out_buf_address0 <= zext_ln1086_fu_7707_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            linear_out_buf_address0 <= grp_matmul_fu_6769_outputs_V_address0;
        else 
            linear_out_buf_address0 <= "XXXX";
        end if; 
    end process;


    linear_out_buf_ce0_assign_proc : process(ap_CS_fsm_state114, ap_CS_fsm_state115, grp_matmul_fu_6769_outputs_V_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            linear_out_buf_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            linear_out_buf_ce0 <= grp_matmul_fu_6769_outputs_V_ce0;
        else 
            linear_out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linear_out_buf_we0_assign_proc : process(ap_CS_fsm_state114, grp_matmul_fu_6769_outputs_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            linear_out_buf_we0 <= grp_matmul_fu_6769_outputs_V_we0;
        else 
            linear_out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    lsb_fmap_0_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_address0, grp_quant_and_pack_fu_3972_lsb_buffer_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lsb_fmap_0_V_address0 <= grp_quant_and_pack_fu_3972_lsb_buffer_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            lsb_fmap_0_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_address0;
        else 
            lsb_fmap_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lsb_fmap_0_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_ce0, grp_quant_and_pack_fu_3972_lsb_buffer_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lsb_fmap_0_V_ce0 <= grp_quant_and_pack_fu_3972_lsb_buffer_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            lsb_fmap_0_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_inputs_V_ce0;
        else 
            lsb_fmap_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lsb_fmap_0_V_ce1_assign_proc : process(grp_quant_and_pack_fu_3972_lsb_buffer_V_ce1, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lsb_fmap_0_V_ce1 <= grp_quant_and_pack_fu_3972_lsb_buffer_V_ce1;
        else 
            lsb_fmap_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lsb_fmap_0_V_we1_assign_proc : process(grp_quant_and_pack_fu_3972_lsb_buffer_V_we1, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            lsb_fmap_0_V_we1 <= grp_quant_and_pack_fu_3972_lsb_buffer_V_we1;
        else 
            lsb_fmap_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lsb_index_fu_7780_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_8592));
    lshr_ln947_fu_7810_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln947_fu_7806_p1(24-1 downto 0)))));
    lshr_ln958_fu_7893_p2 <= std_logic_vector(shift_right(unsigned(m_fu_7885_p1),to_integer(unsigned('0' & add_ln958_fu_7888_p2(31-1 downto 0)))));
    m_1_fu_7910_p3 <= 
        lshr_ln958_fu_7893_p2 when (icmp_ln958_reg_8619(0) = '1') else 
        shl_ln958_fu_7904_p2;
    m_2_fu_7917_p2 <= std_logic_vector(unsigned(m_1_fu_7910_p3) + unsigned(or_ln_reg_8614));
    m_6_fu_7940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_8624),32));
    m_fu_7885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_8585),32));

    msb_fmap_0_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_address0, grp_quant_and_pack_fu_3972_msb_buffer_0_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state48, ap_CS_fsm_state80, zext_ln321_9_fu_7085_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_0_V_address0 <= zext_ln321_9_fu_7085_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            msb_fmap_0_V_address0 <= grp_quant_and_pack_fu_3972_msb_buffer_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_0_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_address0;
        else 
            msb_fmap_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    msb_fmap_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_ce0, grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_0_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            msb_fmap_0_V_ce0 <= grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_0_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_0_V_ce0;
        else 
            msb_fmap_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_0_V_ce1_assign_proc : process(grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce1, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            msb_fmap_0_V_ce1 <= grp_quant_and_pack_fu_3972_msb_buffer_0_V_ce1;
        else 
            msb_fmap_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln73_1_reg_8011_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((select_ln73_1_reg_8011_pp0_iter9_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_0_V_we0 <= ap_const_logic_1;
        else 
            msb_fmap_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_0_V_we1_assign_proc : process(grp_quant_and_pack_fu_3972_msb_buffer_0_V_we1, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state65, ap_CS_fsm_state70, ap_CS_fsm_state75, ap_CS_fsm_state87, ap_CS_fsm_state92, ap_CS_fsm_state97, ap_CS_fsm_state102, ap_CS_fsm_state107, ap_CS_fsm_state48, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            msb_fmap_0_V_we1 <= grp_quant_and_pack_fu_3972_msb_buffer_0_V_we1;
        else 
            msb_fmap_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_1_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, zext_ln321_9_fu_7085_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_1_V_address0 <= zext_ln321_9_fu_7085_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_1_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_address0;
        else 
            msb_fmap_1_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    msb_fmap_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_1_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_1_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_1_V_ce0;
        else 
            msb_fmap_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln73_1_reg_8011_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if (((select_ln73_1_reg_8011_pp0_iter9_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_1_V_we0 <= ap_const_logic_1;
        else 
            msb_fmap_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_2_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109, zext_ln321_9_fu_7085_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_2_V_address0 <= zext_ln321_9_fu_7085_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_2_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_address0;
        else 
            msb_fmap_2_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    msb_fmap_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10, grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_2_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            msb_fmap_2_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_inputs_2_V_ce0;
        else 
            msb_fmap_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    msb_fmap_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln73_1_reg_8011_pp0_iter9_reg, ap_enable_reg_pp0_iter10)
    begin
        if ((not((select_ln73_1_reg_8011_pp0_iter9_reg = ap_const_lv2_0)) and not((select_ln73_1_reg_8011_pp0_iter9_reg = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            msb_fmap_2_V_we0 <= ap_const_logic_1;
        else 
            msb_fmap_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln73_fu_6962_p2 <= (icmp_ln70_fu_6916_p2 or and_ln73_fu_6950_p2);
    or_ln949_fu_7865_p2 <= (and_ln949_fu_7859_p2 or a_fu_7827_p2);
    or_ln_fu_7871_p3 <= (ap_const_lv31_0 & or_ln949_fu_7865_p2);

    out_buf_0_0_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_0_V_address0, grp_bn_relu_shortcut_fu_4069_residual_0_V_address0, grp_avgpool_concat_fu_6751_outputs_0_V_address0, grp_bn1_fu_6795_out_buf_0_V_address0, grp_avgpool_8x8_fu_6851_inputs_0_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_0_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_0_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_0_V_address0 <= grp_bn1_fu_6795_out_buf_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_0_V_address0 <= grp_avgpool_concat_fu_6751_outputs_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_0_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_0_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_0_V_address0;
        else 
            out_buf_0_0_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_0_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_0_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_0_V_ce0, grp_avgpool_concat_fu_6751_outputs_0_V_ce0, grp_bn1_fu_6795_out_buf_0_V_ce0, grp_avgpool_8x8_fu_6851_inputs_0_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_0_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_0_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_0_V_ce0 <= grp_bn1_fu_6795_out_buf_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_0_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_0_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_0_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_0_V_ce0;
        else 
            out_buf_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_0_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_0_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_0_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_0_V_ce1;
        else 
            out_buf_0_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_0_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_0_V_d0, grp_bn1_fu_6795_out_buf_0_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_0_V_d0 <= grp_bn1_fu_6795_out_buf_0_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_0_V_d0 <= grp_avgpool_concat_fu_6751_outputs_0_V_d0;
        else 
            out_buf_0_0_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_0_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_0_V_we0, grp_bn1_fu_6795_out_buf_0_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_0_V_we0 <= grp_bn1_fu_6795_out_buf_0_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_0_V_we0 <= grp_avgpool_concat_fu_6751_outputs_0_V_we0;
        else 
            out_buf_0_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_0_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_0_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_0_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_0_V_we1;
        else 
            out_buf_0_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_1_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_1_V_address0, grp_bn_relu_shortcut_fu_4069_residual_1_V_address0, grp_avgpool_concat_fu_6751_outputs_1_V_address0, grp_bn1_fu_6795_out_buf_1_V_address0, grp_avgpool_8x8_fu_6851_inputs_1_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_1_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_1_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_1_V_address0 <= grp_bn1_fu_6795_out_buf_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_1_V_address0 <= grp_avgpool_concat_fu_6751_outputs_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_1_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_1_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_1_V_address0;
        else 
            out_buf_0_1_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_1_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_1_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_1_V_ce0, grp_avgpool_concat_fu_6751_outputs_1_V_ce0, grp_bn1_fu_6795_out_buf_1_V_ce0, grp_avgpool_8x8_fu_6851_inputs_1_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_1_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_1_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_1_V_ce0 <= grp_bn1_fu_6795_out_buf_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_1_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_1_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_1_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_1_V_ce0;
        else 
            out_buf_0_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_1_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_1_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_1_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_1_V_ce1;
        else 
            out_buf_0_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_1_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_1_V_d0, grp_bn1_fu_6795_out_buf_1_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_1_V_d0 <= grp_bn1_fu_6795_out_buf_1_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_1_V_d0 <= grp_avgpool_concat_fu_6751_outputs_1_V_d0;
        else 
            out_buf_0_1_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_1_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_1_V_we0, grp_bn1_fu_6795_out_buf_1_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_1_V_we0 <= grp_bn1_fu_6795_out_buf_1_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_1_V_we0 <= grp_avgpool_concat_fu_6751_outputs_1_V_we0;
        else 
            out_buf_0_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_1_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_1_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_1_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_1_V_we1;
        else 
            out_buf_0_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_2_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_2_V_address0, grp_bn_relu_shortcut_fu_4069_residual_2_V_address0, grp_avgpool_concat_fu_6751_outputs_2_V_address0, grp_bn1_fu_6795_out_buf_2_V_address0, grp_avgpool_8x8_fu_6851_inputs_2_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_2_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_2_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_2_V_address0 <= grp_bn1_fu_6795_out_buf_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_2_V_address0 <= grp_avgpool_concat_fu_6751_outputs_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_2_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_2_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_2_V_address0;
        else 
            out_buf_0_2_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_2_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_2_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_2_V_ce0, grp_avgpool_concat_fu_6751_outputs_2_V_ce0, grp_bn1_fu_6795_out_buf_2_V_ce0, grp_avgpool_8x8_fu_6851_inputs_2_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_2_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_2_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_2_V_ce0 <= grp_bn1_fu_6795_out_buf_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_2_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_2_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_2_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_2_V_ce0;
        else 
            out_buf_0_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_2_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_2_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_2_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_2_V_ce1;
        else 
            out_buf_0_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_2_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_2_V_d0, grp_bn1_fu_6795_out_buf_2_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_2_V_d0 <= grp_bn1_fu_6795_out_buf_2_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_2_V_d0 <= grp_avgpool_concat_fu_6751_outputs_2_V_d0;
        else 
            out_buf_0_2_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_2_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_2_V_we0, grp_bn1_fu_6795_out_buf_2_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_2_V_we0 <= grp_bn1_fu_6795_out_buf_2_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_2_V_we0 <= grp_avgpool_concat_fu_6751_outputs_2_V_we0;
        else 
            out_buf_0_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_2_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_2_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_2_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_2_V_we1;
        else 
            out_buf_0_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_3_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_3_V_address0, grp_bn_relu_shortcut_fu_4069_residual_3_V_address0, grp_avgpool_concat_fu_6751_outputs_3_V_address0, grp_bn1_fu_6795_out_buf_3_V_address0, grp_avgpool_8x8_fu_6851_inputs_3_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_3_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_3_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_3_V_address0 <= grp_bn1_fu_6795_out_buf_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_3_V_address0 <= grp_avgpool_concat_fu_6751_outputs_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_3_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_3_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_3_V_address0;
        else 
            out_buf_0_3_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_3_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_3_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_3_V_ce0, grp_avgpool_concat_fu_6751_outputs_3_V_ce0, grp_bn1_fu_6795_out_buf_3_V_ce0, grp_avgpool_8x8_fu_6851_inputs_3_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_3_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_3_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_3_V_ce0 <= grp_bn1_fu_6795_out_buf_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_3_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_3_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_3_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_3_V_ce0;
        else 
            out_buf_0_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_3_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_3_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_3_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_3_V_ce1;
        else 
            out_buf_0_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_3_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_3_V_d0, grp_bn1_fu_6795_out_buf_3_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_3_V_d0 <= grp_bn1_fu_6795_out_buf_3_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_3_V_d0 <= grp_avgpool_concat_fu_6751_outputs_3_V_d0;
        else 
            out_buf_0_3_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_3_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_3_V_we0, grp_bn1_fu_6795_out_buf_3_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_3_V_we0 <= grp_bn1_fu_6795_out_buf_3_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_3_V_we0 <= grp_avgpool_concat_fu_6751_outputs_3_V_we0;
        else 
            out_buf_0_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_3_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_3_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_3_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_3_V_we1;
        else 
            out_buf_0_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_4_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_4_V_address0, grp_bn_relu_shortcut_fu_4069_residual_4_V_address0, grp_avgpool_concat_fu_6751_outputs_4_V_address0, grp_bn1_fu_6795_out_buf_4_V_address0, grp_avgpool_8x8_fu_6851_inputs_4_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_4_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_4_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_4_V_address0 <= grp_bn1_fu_6795_out_buf_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_4_V_address0 <= grp_avgpool_concat_fu_6751_outputs_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_4_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_4_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_4_V_address0;
        else 
            out_buf_0_4_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_4_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_4_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_4_V_ce0, grp_avgpool_concat_fu_6751_outputs_4_V_ce0, grp_bn1_fu_6795_out_buf_4_V_ce0, grp_avgpool_8x8_fu_6851_inputs_4_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_4_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_4_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_4_V_ce0 <= grp_bn1_fu_6795_out_buf_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_4_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_4_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_4_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_4_V_ce0;
        else 
            out_buf_0_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_4_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_4_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_4_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_4_V_ce1;
        else 
            out_buf_0_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_4_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_4_V_d0, grp_bn1_fu_6795_out_buf_4_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_4_V_d0 <= grp_bn1_fu_6795_out_buf_4_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_4_V_d0 <= grp_avgpool_concat_fu_6751_outputs_4_V_d0;
        else 
            out_buf_0_4_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_4_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_4_V_we0, grp_bn1_fu_6795_out_buf_4_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_4_V_we0 <= grp_bn1_fu_6795_out_buf_4_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_4_V_we0 <= grp_avgpool_concat_fu_6751_outputs_4_V_we0;
        else 
            out_buf_0_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_4_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_4_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_4_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_4_V_we1;
        else 
            out_buf_0_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_5_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_5_V_address0, grp_bn_relu_shortcut_fu_4069_residual_5_V_address0, grp_avgpool_concat_fu_6751_outputs_5_V_address0, grp_bn1_fu_6795_out_buf_5_V_address0, grp_avgpool_8x8_fu_6851_inputs_5_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_5_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_5_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_5_V_address0 <= grp_bn1_fu_6795_out_buf_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_5_V_address0 <= grp_avgpool_concat_fu_6751_outputs_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_5_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_5_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_5_V_address0;
        else 
            out_buf_0_5_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_5_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_5_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_5_V_ce0, grp_avgpool_concat_fu_6751_outputs_5_V_ce0, grp_bn1_fu_6795_out_buf_5_V_ce0, grp_avgpool_8x8_fu_6851_inputs_5_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_5_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_5_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_5_V_ce0 <= grp_bn1_fu_6795_out_buf_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_5_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_5_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_5_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_5_V_ce0;
        else 
            out_buf_0_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_5_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_5_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_5_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_5_V_ce1;
        else 
            out_buf_0_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_5_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_5_V_d0, grp_bn1_fu_6795_out_buf_5_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_5_V_d0 <= grp_bn1_fu_6795_out_buf_5_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_5_V_d0 <= grp_avgpool_concat_fu_6751_outputs_5_V_d0;
        else 
            out_buf_0_5_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_5_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_5_V_we0, grp_bn1_fu_6795_out_buf_5_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_5_V_we0 <= grp_bn1_fu_6795_out_buf_5_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_5_V_we0 <= grp_avgpool_concat_fu_6751_outputs_5_V_we0;
        else 
            out_buf_0_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_5_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_5_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_5_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_5_V_we1;
        else 
            out_buf_0_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_6_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_6_V_address0, grp_bn_relu_shortcut_fu_4069_residual_6_V_address0, grp_avgpool_concat_fu_6751_outputs_6_V_address0, grp_bn1_fu_6795_out_buf_6_V_address0, grp_avgpool_8x8_fu_6851_inputs_6_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_6_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_6_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_6_V_address0 <= grp_bn1_fu_6795_out_buf_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_6_V_address0 <= grp_avgpool_concat_fu_6751_outputs_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_6_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_6_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_6_V_address0;
        else 
            out_buf_0_6_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_6_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_6_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_6_V_ce0, grp_avgpool_concat_fu_6751_outputs_6_V_ce0, grp_bn1_fu_6795_out_buf_6_V_ce0, grp_avgpool_8x8_fu_6851_inputs_6_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_6_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_6_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_6_V_ce0 <= grp_bn1_fu_6795_out_buf_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_6_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_6_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_6_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_6_V_ce0;
        else 
            out_buf_0_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_6_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_6_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_6_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_6_V_ce1;
        else 
            out_buf_0_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_6_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_6_V_d0, grp_bn1_fu_6795_out_buf_6_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_6_V_d0 <= grp_bn1_fu_6795_out_buf_6_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_6_V_d0 <= grp_avgpool_concat_fu_6751_outputs_6_V_d0;
        else 
            out_buf_0_6_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_6_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_6_V_we0, grp_bn1_fu_6795_out_buf_6_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_6_V_we0 <= grp_bn1_fu_6795_out_buf_6_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_6_V_we0 <= grp_avgpool_concat_fu_6751_outputs_6_V_we0;
        else 
            out_buf_0_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_6_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_6_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_6_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_6_V_we1;
        else 
            out_buf_0_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_7_V_address0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_7_V_address0, grp_bn_relu_shortcut_fu_4069_residual_7_V_address0, grp_avgpool_concat_fu_6751_outputs_7_V_address0, grp_bn1_fu_6795_out_buf_7_V_address0, grp_avgpool_8x8_fu_6851_inputs_7_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_7_V_address0 <= grp_avgpool_8x8_fu_6851_inputs_7_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_7_V_address0 <= grp_bn1_fu_6795_out_buf_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_7_V_address0 <= grp_avgpool_concat_fu_6751_outputs_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_7_V_address0 <= grp_bn_relu_shortcut_fu_4069_residual_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_7_V_address0 <= grp_quant_and_pack_fu_3972_prior_outputs_7_V_address0;
        else 
            out_buf_0_7_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_7_V_ce0_assign_proc : process(grp_quant_and_pack_fu_3972_prior_outputs_7_V_ce0, grp_bn_relu_shortcut_fu_4069_residual_7_V_ce0, grp_avgpool_concat_fu_6751_outputs_7_V_ce0, grp_bn1_fu_6795_out_buf_7_V_ce0, grp_avgpool_8x8_fu_6851_inputs_7_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state47, ap_CS_fsm_state50, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state101, ap_CS_fsm_state102, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state111, ap_CS_fsm_state48, ap_CS_fsm_state80, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            out_buf_0_7_V_ce0 <= grp_avgpool_8x8_fu_6851_inputs_7_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_7_V_ce0 <= grp_bn1_fu_6795_out_buf_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_7_V_ce0 <= grp_avgpool_concat_fu_6751_outputs_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_7_V_ce0 <= grp_bn_relu_shortcut_fu_4069_residual_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            out_buf_0_7_V_ce0 <= grp_quant_and_pack_fu_3972_prior_outputs_7_V_ce0;
        else 
            out_buf_0_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_7_V_ce1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_7_V_ce1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_7_V_ce1 <= grp_bn_relu_shortcut_fu_4069_residual_7_V_ce1;
        else 
            out_buf_0_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_7_V_d0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_7_V_d0, grp_bn1_fu_6795_out_buf_7_V_d0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_7_V_d0 <= grp_bn1_fu_6795_out_buf_7_V_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_7_V_d0 <= grp_avgpool_concat_fu_6751_outputs_7_V_d0;
        else 
            out_buf_0_7_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_buf_0_7_V_we0_assign_proc : process(grp_avgpool_concat_fu_6751_outputs_7_V_we0, grp_bn1_fu_6795_out_buf_7_V_we0, ap_CS_fsm_state17, ap_CS_fsm_state50, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_0_7_V_we0 <= grp_bn1_fu_6795_out_buf_7_V_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            out_buf_0_7_V_we0 <= grp_avgpool_concat_fu_6751_outputs_7_V_we0;
        else 
            out_buf_0_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_0_7_V_we1_assign_proc : process(grp_bn_relu_shortcut_fu_4069_residual_7_V_we1, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_0_7_V_we1 <= grp_bn_relu_shortcut_fu_4069_residual_7_V_we1;
        else 
            out_buf_0_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_0_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_0_V_address0, grp_bn1_fu_6795_block_t0_0_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_0_V_address0 <= grp_bn1_fu_6795_block_t0_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_0_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_0_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_address0;
        else 
            out_buf_t0_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_0_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_0_V_ce0, grp_bn1_fu_6795_block_t0_0_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_0_V_ce0 <= grp_bn1_fu_6795_block_t0_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_0_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_0_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce0;
        else 
            out_buf_t0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_0_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_0_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_ce1;
        else 
            out_buf_t0_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_0_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_0_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_0_V_we1;
        else 
            out_buf_t0_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_1_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_1_V_address0, grp_bn1_fu_6795_block_t0_1_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_1_V_address0 <= grp_bn1_fu_6795_block_t0_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_1_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_1_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_address0;
        else 
            out_buf_t0_1_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_1_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_1_V_ce0, grp_bn1_fu_6795_block_t0_1_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_1_V_ce0 <= grp_bn1_fu_6795_block_t0_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_1_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_1_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce0;
        else 
            out_buf_t0_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_1_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_1_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_ce1;
        else 
            out_buf_t0_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_1_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_1_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_1_V_we1;
        else 
            out_buf_t0_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_2_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_2_V_address0, grp_bn1_fu_6795_block_t0_2_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_2_V_address0 <= grp_bn1_fu_6795_block_t0_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_2_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_2_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_address0;
        else 
            out_buf_t0_2_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_2_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_2_V_ce0, grp_bn1_fu_6795_block_t0_2_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_2_V_ce0 <= grp_bn1_fu_6795_block_t0_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_2_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_2_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce0;
        else 
            out_buf_t0_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_2_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_2_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_ce1;
        else 
            out_buf_t0_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_2_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_2_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_2_V_we1;
        else 
            out_buf_t0_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_3_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_3_V_address0, grp_bn1_fu_6795_block_t0_3_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_3_V_address0 <= grp_bn1_fu_6795_block_t0_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_3_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_3_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_address0;
        else 
            out_buf_t0_3_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_3_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_3_V_ce0, grp_bn1_fu_6795_block_t0_3_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_3_V_ce0 <= grp_bn1_fu_6795_block_t0_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_3_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_3_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce0;
        else 
            out_buf_t0_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_3_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_3_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_ce1;
        else 
            out_buf_t0_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_3_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_3_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_3_V_we1;
        else 
            out_buf_t0_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_4_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_4_V_address0, grp_bn1_fu_6795_block_t0_4_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_4_V_address0 <= grp_bn1_fu_6795_block_t0_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_4_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_4_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_address0;
        else 
            out_buf_t0_4_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_4_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_4_V_ce0, grp_bn1_fu_6795_block_t0_4_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_4_V_ce0 <= grp_bn1_fu_6795_block_t0_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_4_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_4_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce0;
        else 
            out_buf_t0_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_4_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_4_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_ce1;
        else 
            out_buf_t0_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_4_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_4_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_4_V_we1;
        else 
            out_buf_t0_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_5_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_5_V_address0, grp_bn1_fu_6795_block_t0_5_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_5_V_address0 <= grp_bn1_fu_6795_block_t0_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_5_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_5_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_address0;
        else 
            out_buf_t0_5_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_5_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_5_V_ce0, grp_bn1_fu_6795_block_t0_5_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_5_V_ce0 <= grp_bn1_fu_6795_block_t0_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_5_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_5_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce0;
        else 
            out_buf_t0_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_5_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_5_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_ce1;
        else 
            out_buf_t0_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_5_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_5_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_5_V_we1;
        else 
            out_buf_t0_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_6_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_6_V_address0, grp_bn1_fu_6795_block_t0_6_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_6_V_address0 <= grp_bn1_fu_6795_block_t0_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_6_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_6_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_address0;
        else 
            out_buf_t0_6_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_6_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_6_V_ce0, grp_bn1_fu_6795_block_t0_6_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_6_V_ce0 <= grp_bn1_fu_6795_block_t0_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_6_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_6_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce0;
        else 
            out_buf_t0_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_6_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_6_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_ce1;
        else 
            out_buf_t0_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_6_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_6_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_6_V_we1;
        else 
            out_buf_t0_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_7_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address0, grp_bn_relu_shortcut_fu_4069_block_t0_7_V_address0, grp_bn1_fu_6795_block_t0_7_V_address0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_7_V_address0 <= grp_bn1_fu_6795_block_t0_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_7_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t0_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_7_V_address0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_address0;
        else 
            out_buf_t0_7_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t0_7_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t0_7_V_ce0, grp_bn1_fu_6795_block_t0_7_V_ce0, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_buf_t0_7_V_ce0 <= grp_bn1_fu_6795_block_t0_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t0_7_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t0_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_7_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce0;
        else 
            out_buf_t0_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_7_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_7_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_ce1;
        else 
            out_buf_t0_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t0_7_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t0_7_V_we1 <= grp_pg_conv3x3_tile_fu_3548_msb_outputs_7_V_we1;
        else 
            out_buf_t0_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_0_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_0_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_0_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_0_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_0_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_address0;
        else 
            out_buf_t1_0_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_0_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_0_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_0_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_0_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_0_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce0;
        else 
            out_buf_t1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_0_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_0_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_ce1;
        else 
            out_buf_t1_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_0_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_0_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_0_V_we1;
        else 
            out_buf_t1_0_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_1_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_1_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_1_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_1_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_1_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_address0;
        else 
            out_buf_t1_1_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_1_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_1_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_1_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_1_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_1_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce0;
        else 
            out_buf_t1_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_1_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_1_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_ce1;
        else 
            out_buf_t1_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_1_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_1_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_1_V_we1;
        else 
            out_buf_t1_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_2_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_2_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_2_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_2_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_2_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_address0;
        else 
            out_buf_t1_2_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_2_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_2_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_2_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_2_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_2_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce0;
        else 
            out_buf_t1_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_2_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_2_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_ce1;
        else 
            out_buf_t1_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_2_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_2_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_2_V_we1;
        else 
            out_buf_t1_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_3_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_3_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_3_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_3_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_3_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_address0;
        else 
            out_buf_t1_3_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_3_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_3_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_3_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_3_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_3_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce0;
        else 
            out_buf_t1_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_3_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_3_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_ce1;
        else 
            out_buf_t1_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_3_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_3_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_3_V_we1;
        else 
            out_buf_t1_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_4_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_4_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_4_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_4_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_4_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_address0;
        else 
            out_buf_t1_4_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_4_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_4_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_4_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_4_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_4_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce0;
        else 
            out_buf_t1_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_4_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_4_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_ce1;
        else 
            out_buf_t1_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_4_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_4_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_4_V_we1;
        else 
            out_buf_t1_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_5_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_5_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_5_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_5_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_5_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_address0;
        else 
            out_buf_t1_5_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_5_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_5_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_5_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_5_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_5_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce0;
        else 
            out_buf_t1_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_5_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_5_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_ce1;
        else 
            out_buf_t1_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_5_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_5_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_5_V_we1;
        else 
            out_buf_t1_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_6_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_6_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_6_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_6_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_6_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_address0;
        else 
            out_buf_t1_6_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_6_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_6_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_6_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_6_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_6_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce0;
        else 
            out_buf_t1_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_6_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_6_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_ce1;
        else 
            out_buf_t1_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_6_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_6_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_6_V_we1;
        else 
            out_buf_t1_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_7_V_address0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address0, grp_bn_relu_shortcut_fu_4069_block_t1_7_V_address0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_7_V_address0 <= grp_bn_relu_shortcut_fu_4069_block_t1_7_V_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_7_V_address0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_address0;
        else 
            out_buf_t1_7_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    out_buf_t1_7_V_ce0_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce0, grp_bn_relu_shortcut_fu_4069_block_t1_7_V_ce0, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state42, ap_CS_fsm_state47, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state69, ap_CS_fsm_state74, ap_CS_fsm_state79, ap_CS_fsm_state86, ap_CS_fsm_state91, ap_CS_fsm_state96, ap_CS_fsm_state101, ap_CS_fsm_state106, ap_CS_fsm_state111, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_buf_t1_7_V_ce0 <= grp_bn_relu_shortcut_fu_4069_block_t1_7_V_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_7_V_ce0 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce0;
        else 
            out_buf_t1_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_7_V_ce1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_7_V_ce1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_ce1;
        else 
            out_buf_t1_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_buf_t1_7_V_we1_assign_proc : process(grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_we1, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state35, ap_CS_fsm_state40, ap_CS_fsm_state45, ap_CS_fsm_state52, ap_CS_fsm_state57, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state72, ap_CS_fsm_state77, ap_CS_fsm_state84, ap_CS_fsm_state89, ap_CS_fsm_state94, ap_CS_fsm_state99, ap_CS_fsm_state104, ap_CS_fsm_state109)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_buf_t1_7_V_we1 <= grp_pg_conv3x3_tile_fu_3548_lsb_outputs_7_V_we1;
        else 
            out_buf_t1_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    output3_fu_6864_p4 <= output_r(31 downto 2);
    p_Result_10_fu_7968_p5 <= (tmp_10_fu_7961_p3 & m_6_fu_7940_p1(22 downto 0));
    p_Result_5_fu_7816_p2 <= (tmp_V_4_reg_8585 and lshr_ln947_fu_7810_p2);
    p_Result_6_fu_7852_p3 <= tmp_V_4_reg_8585(to_integer(unsigned(add_ln949_fu_7847_p2)) downto to_integer(unsigned(add_ln949_fu_7847_p2))) when (to_integer(unsigned(add_ln949_fu_7847_p2))>= 0 and to_integer(unsigned(add_ln949_fu_7847_p2))<=23) else "-";
    p_Result_9_fu_7746_p3 <= (ap_const_lv8_FF & p_Result_s_fu_7736_p4);
    
    p_Result_s_fu_7736_p4_proc : process(tmp_V_4_fu_7731_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(24+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable p_Result_s_fu_7736_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(24 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_17(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_7731_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(24-1-unsigned(ap_const_lv32_17(5-1 downto 0)));
            for p_Result_s_fu_7736_p4_i in 0 to 24-1 loop
                v0_cpy(p_Result_s_fu_7736_p4_i) := tmp_V_4_fu_7731_p3(24-1-p_Result_s_fu_7736_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(24-1 downto 0)))));
        res_mask := res_mask(24-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_7736_p4 <= resvalue(24-1 downto 0);
    end process;


    pool_out_buf_V_address0_assign_proc : process(ap_CS_fsm_state114, grp_matmul_fu_6769_inputs_V_address0, grp_avgpool_8x8_fu_6851_outputs_V_address0, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            pool_out_buf_V_address0 <= grp_avgpool_8x8_fu_6851_outputs_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            pool_out_buf_V_address0 <= grp_matmul_fu_6769_inputs_V_address0;
        else 
            pool_out_buf_V_address0 <= "XXXXXX";
        end if; 
    end process;


    pool_out_buf_V_ce0_assign_proc : process(ap_CS_fsm_state114, grp_matmul_fu_6769_inputs_V_ce0, grp_avgpool_8x8_fu_6851_outputs_V_ce0, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            pool_out_buf_V_ce0 <= grp_avgpool_8x8_fu_6851_outputs_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            pool_out_buf_V_ce0 <= grp_matmul_fu_6769_inputs_V_ce0;
        else 
            pool_out_buf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool_out_buf_V_we0_assign_proc : process(grp_avgpool_8x8_fu_6851_outputs_V_we0, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            pool_out_buf_V_we0 <= grp_avgpool_8x8_fu_6851_outputs_V_we0;
        else 
            pool_out_buf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_fu_6956_p2 <= std_logic_vector(unsigned(select_ln73_fu_6922_p3) + unsigned(ap_const_lv6_1));
    select_ln70_fu_6996_p3 <= 
        ap_const_lv12_1 when (icmp_ln70_fu_6916_p2(0) = '1') else 
        add_ln70_1_fu_6990_p2;
    select_ln73_1_fu_6930_p3 <= 
        c_fu_6910_p2 when (icmp_ln70_fu_6916_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_3033_p4;
    select_ln73_2_fu_6968_p3 <= 
        ap_const_lv6_0 when (or_ln73_fu_6962_p2(0) = '1') else 
        col_0_reg_3062;
    select_ln73_3_fu_6976_p3 <= 
        row_fu_6956_p2 when (and_ln73_fu_6950_p2(0) = '1') else 
        select_ln73_fu_6922_p3;
    select_ln73_fu_6922_p3 <= 
        ap_const_lv6_0 when (icmp_ln70_fu_6916_p2(0) = '1') else 
        ap_phi_mux_row_0_phi_fu_3055_p4;
    select_ln935_fu_7984_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_8580(0) = '1') else 
        bitcast_ln739_fu_7980_p1;
    select_ln964_fu_7943_p3 <= 
        ap_const_lv8_7F when (tmp_788_reg_8629(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln292_fu_7253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_weight_ptr_5_reg_3188),4));

        sext_ln563_fu_7437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_weight_ptr_10_reg_3315),5));

        sext_ln833_fu_7608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_weight_ptr_15_reg_3430),6));

    shl_ln958_fu_7904_p2 <= std_logic_vector(shift_left(unsigned(m_fu_7885_p1),to_integer(unsigned('0' & sub_ln958_fu_7899_p2(31-1 downto 0)))));
    sub_ln944_fu_7762_p2 <= std_logic_vector(unsigned(ap_const_lv32_18) - unsigned(l_fu_7754_p3));
    sub_ln947_fu_7801_p2 <= std_logic_vector(signed(ap_const_lv5_11) - signed(trunc_ln947_reg_8604));
    sub_ln958_fu_7899_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_8592));
    sub_ln964_fu_7950_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_8609));
    tmp_10_fu_7961_p3 <= (p_Result_8_reg_8569 & add_ln964_fu_7955_p2);
    tmp_783_fu_7024_p3 <= (add_ln321_2_fu_7018_p2 & ap_const_lv5_0);
    tmp_784_fu_7059_p3 <= (select_ln73_3_reg_8023_pp0_iter9_reg & ap_const_lv5_0);
    tmp_786_fu_7785_p4 <= lsb_index_fu_7780_p2(31 downto 1);
    tmp_787_fu_7833_p3 <= lsb_index_fu_7780_p2(31 downto 31);
    tmp_V_4_fu_7731_p3 <= 
        tmp_V_reg_8575 when (p_Result_8_reg_8569(0) = '1') else 
        tmp_V_3_reg_8563;
    tmp_V_fu_7720_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(linear_out_buf_q0));
    tmp_fu_7004_p3 <= (select_ln73_1_reg_8011 & ap_const_lv5_0);
    trunc_ln943_fu_7776_p1 <= l_fu_7754_p3(8 - 1 downto 0);
    trunc_ln944_fu_7768_p1 <= sub_ln944_fu_7762_p2(24 - 1 downto 0);
    trunc_ln947_fu_7772_p1 <= sub_ln944_fu_7762_p2(5 - 1 downto 0);
    xor_ln73_fu_6938_p2 <= (icmp_ln70_fu_6916_p2 xor ap_const_lv1_1);
    xor_ln949_fu_7841_p2 <= (tmp_787_fu_7833_p3 xor ap_const_lv1_1);
    zext_ln1086_fu_7707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_3537),64));
    zext_ln113_fu_7122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_1_reg_3097),7));
    zext_ln166_fu_7145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_2_reg_3119),7));
    zext_ln172_fu_7156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out40_0_reg_3130),4));
    zext_ln216_fu_7181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_3_reg_3142),7));
    zext_ln222_fu_7192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out42_0_reg_3153),4));
    zext_ln266_fu_7217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_4_reg_3165),7));
    zext_ln272_fu_7228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out44_0_reg_3176),4));
    zext_ln316_fu_7257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln292_fu_7253_p1),7));
    zext_ln321_7_fu_7066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_784_fu_7059_p3),12));
    zext_ln321_8_fu_7076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_2_reg_8017_pp0_iter9_reg),12));
    zext_ln321_9_fu_7085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_6_fu_7079_p2),64));
    zext_ln321_fu_7032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_783_fu_7024_p3),64));
    zext_ln322_fu_7268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out46_0_reg_3199),4));
    zext_ln366_fu_7293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_6_reg_3211),7));
    zext_ln372_fu_7304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out48_0_reg_3222),4));
    zext_ln416_fu_7329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_7_reg_3234),7));
    zext_ln422_fu_7340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out50_0_reg_3245),4));
    zext_ln477_fu_7365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_8_reg_3257),7));
    zext_ln483_fu_7376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out52_0_reg_3268),4));
    zext_ln537_fu_7401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_9_reg_3280),7));
    zext_ln543_fu_7412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out54_0_reg_3291),4));
    zext_ln586_fu_7441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln563_fu_7437_p1),7));
    zext_ln592_fu_7452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out56_0_reg_3303),4));
    zext_ln636_fu_7477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_11_reg_3338),7));
    zext_ln642_fu_7488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out58_0_reg_3326),4));
    zext_ln685_fu_7513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_12_reg_3361),7));
    zext_ln691_fu_7524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out60_0_reg_3349),4));
    zext_ln735_fu_7549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_13_reg_3384),7));
    zext_ln73_1_fu_7056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_3_reg_8023_pp0_iter9_reg),12));
    zext_ln73_2_fu_7036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_2_reg_8017),64));
    zext_ln73_3_fu_7015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_3_reg_8023),8));
    zext_ln73_fu_7011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_7004_p3),8));
    zext_ln741_fu_7560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out62_0_reg_3372),4));
    zext_ln796_fu_7585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_ptr_14_reg_3407),7));
    zext_ln856_fu_7612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln833_fu_7608_p1),7));
    zext_ln947_fu_7806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_7801_p2),24));
end behav;
