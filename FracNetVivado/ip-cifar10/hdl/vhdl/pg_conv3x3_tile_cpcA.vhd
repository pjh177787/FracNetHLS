-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cpcA_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cpcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1000000000000000000001000000000000000000000000000000000000000000", 
    1 => "1000010010001101011001000000100100000000000000000000000000000000", 
    2 => "0000000000000000000000010011000100000000000000000000000000000000", 
    3 => "1111111110110110110111110111111100000000000000000000000000000000", 
    4 => "1111111111111111111111111111111100000000000000000000000000000000", 
    5 => "1111111111111111111111101111110000000000000000000000000000000000", 
    6 => "1010011010011110000000000000000000000000000000000000000000000000", 
    7 => "0110000110011011000000000000000000000000000000000000000000000000", 
    8 => "1010011010111011000000000000000000000000000000000000000000000000", 
    9 => "1101010010110011000000000000000000000000000000000000000000000000", 
    10 => "1010000110111000000000000000000000000000000000000000000000000000", 
    11 => "1100000110011001000000000000000000000000000000000000000000000000", 
    12 => "1110000001111011000000000000000000000000000000000000000000000000", 
    13 => "1111010110111100000000000000000000000000000000000000000000000000", 
    14 => "1010000011011010000000000000000000000000000000000000000000000000", 
    15 => "1111001110110010000000000000000000000000000000000000000000000000", 
    16 => "1000101010100101000000000000000000000000000000000000000000000000", 
    17 => "0111110101010011000000000000000000000000000000000000000000000000", 
    18 => "0000010011010000000000000000000000000000000000000000000000000000", 
    19 => "1110100011100000000000000000000000000000000000000000000000000000", 
    20 => "1110111110000011000000000000000000000000000000000000000000000000", 
    21 => "0010010011100001000000000000000000000000000000000000000000000000", 
    22 => "1001010111111000000011011110001000000000000000000000000000000000", 
    23 => "0011000000000101001010000010010100000000000000000000000000000000", 
    24 => "1110111111101011101010001001000100000000000000000000000000000000", 
    25 => "0001000001110101001110010110010100000000000000000000000000000000", 
    26 => "0001011001110000000001100110101000000000000000000000000000000000", 
    27 => "0010100000000100001000000000011000000000000000000000000000000000", 
    28 => "1000010011010011001010011001010100000000000000000000000000000000", 
    29 => "0001010101010110100011010110101100000000000000000000000000000000", 
    30 => "1110010011101110010000001100110100000000000000000000000000000000", 
    31 => "0100110110000101110110000000011000000000000000000000000000000000", 
    32 => "1111001011000110110010101000010000000000000000000000000000000000", 
    33 => "0010110111011001100001100110100100000000000000000000000000000000", 
    34 => "0100010000000000011100001001001100000000000000000000000000000000", 
    35 => "1011000000000100010100010001101100000000000000000000000000000000", 
    36 => "1110001000101101101011011000000000000000000000000000000000000000", 
    37 => "1110000001100110011000111111101000000000000000000000000000000000", 
    38 => "1111010011111110101010000111110000000000000000000000000000000000", 
    39 => "0100000001000101111000100010111100000000000000000000000000000000", 
    40 => "1000001100110100101000011111010000000000000000000000000000000000", 
    41 => "0011011111001001100011101111100100000000000000000000000000000000", 
    42 => "1101001101000000000110010011001000000000000000000000000000000000", 
    43 => "1011010111000011010101110001101000000000000000000000000000000000", 
    44 => "1000111000000101110001010100101000000000000000000000000000000000", 
    45 => "0100100000001000000000101001010000000000000000000000000000000000", 
    46 => "1001100000100100000001000011100100000000000000000000000000000000", 
    47 => "1111100000001000001000101000000100000000000000000000000000000000", 
    48 => "0000000100011001111100100111011100000000000000000000000000000000", 
    49 => "1000001011000001110000110000101100000000000000000000000000000000", 
    50 => "1010000000010101101010100001011110111001110101010100101010111011", 
    51 => "1000000000001100000100100010011111100000001111000101011000001111", 
    52 => "1101110111101000010101110000110001011110100010111000010101011110", 
    53 => "0111010110001100000010100111011111110001000110100000000001111111", 
    54 => "0011101100001011100111000101101000100100000010111011110101010100", 
    55 => "0001001000000100110101010011011000101010110101100111010000101111", 
    56 => "0011101010011011011100001100100010000100100110111000101101010000", 
    57 => "1010110110011011000110100100011101101100110110101000101000000111", 
    58 => "0010101000110111011110000000100110111000111110011011100000011011", 
    59 => "0001001001011000110000011010110000101110001111111100100111000000", 
    60 => "1001110000100011110010001001000000011010100011011101110010010000", 
    61 => "1100100101111101101000000010101101111111010111110010000100101010", 
    62 => "0000011110100101000001110110111111010100001101100111000001101001", 
    63 => "1000110001111111110010100000100010011100110000100001100011001100", 
    64 => "0011000001100001010100100110100001000000110000000110010000110001", 
    65 => "1111101001110010000010001000000011111010111001011001100110010111", 
    66 => "0000101110101000001101001101110001010111000100101001111011110000", 
    67 => "1111110111000101100010101111010001011010000010110010111101110000", 
    68 => "0111010100111011100011110010111100110000101000110110101001000100", 
    69 => "0111000010111000100100011010000100001000000001000000001110111011", 
    70 => "0111110110011110101010000100110111000011111101111111000010111100", 
    71 => "1000001110011001101100000000111010010101100100011111000101011000", 
    72 => "0111101001100100101111001001101000010100100000000001111111100010", 
    73 => "0010010011110001110101100111101001011100001000110101000111101000", 
    74 => "1101110101001010010110111111010110011001000110110010100101101100", 
    75 => "0100110001110010010110011001100001111011111100101111111101101010", 
    76 => "0001101110000110100111011010101000110110100100010001110100001111", 
    77 => "1111110011110001110110011010011000011001100000110100111101010000", 
    78 => "1010110111100000001110000001011111010101111101001111101011100001", 
    79 => "1000111101100010100001101011110011000011001010111110110001011100", 
    80 => "1000001101111111101111100001111101110000111010001110000100100000", 
    81 => "1000101001111010001001011000110000010110010100110101100011100000", 
    82 => "1001001100010101100010011111010111110011100101000001100000010100", 
    83 => "0100111001100110100001110111110101001110101111001110001011011001", 
    84 => "1101111110001100100101101110001010001100101000111111110011110001", 
    85 => "1011010101110011110100000011101000110110101001100110111001000000", 
    86 => "0000010110011011001001010011111110101000100011011110000101100100", 
    87 => "0111100100000110111110010000101111101111111100000011101011111101", 
    88 => "0001110010001101101111100011001110101000011110011110100000001011", 
    89 => "0000010100110111001110111110110100110001001110010011100110111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cpcA is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cpcA is
    component pg_conv3x3_tile_cpcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cpcA_rom_U :  component pg_conv3x3_tile_cpcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


