-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cRg6_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111101010111111111111100000000000000000000000000000000", 
    1 => "1111111111111111101111100111111100000000000000000000000000000000", 
    2 => "1000000000000000110000000100000100000000000000000000000000000000", 
    3 => "1000011111110010000111001000000100000000000000000000000000000000", 
    4 => "0000000000011100100101011001100000000000000000000000000000000000", 
    5 => "1111111111011111011111111111110000000000000000000000000000000000", 
    6 => "1100010111101010000000000000000000000000000000000000000000000000", 
    7 => "1011110011001001000000000000000000000000000000000000000000000000", 
    8 => "1101100101001111000000000000000000000000000000000000000000000000", 
    9 => "0000011010000010000000000000000000000000000000000000000000000000", 
    10 => "1101000111111011000000000000000000000000000000000000000000000000", 
    11 => "1000011010000100000000000000000000000000000000000000000000000000", 
    12 => "0101111101101101000000000000000000000000000000000000000000000000", 
    13 => "1001010100000100000000000000000000000000000000000000000000000000", 
    14 => "0010001010110100000000000000000000000000000000000000000000000000", 
    15 => "0011110000110110000000000000000000000000000000000000000000000000", 
    16 => "0011110001110001000000000000000000000000000000000000000000000000", 
    17 => "0001101101111001000000000000000000000000000000000000000000000000", 
    18 => "0111110101110101000000000000000000000000000000000000000000000000", 
    19 => "0000101010001001000000000000000000000000000000000000000000000000", 
    20 => "1011110011001000000000000000000000000000000000000000000000000000", 
    21 => "0010010111011010000000000000000000000000000000000000000000000000", 
    22 => "1001010100100110110111010110011100000000000000000000000000000000", 
    23 => "0110001011000000011010101110100000000000000000000000000000000000", 
    24 => "0111100100110100110000010100000000000000000000000000000000000000", 
    25 => "0000000000011110001000101011011000000000000000000000000000000000", 
    26 => "0011000010100100000000101110010000000000000000000000000000000000", 
    27 => "0100111011100111000110100100000100000000000000000000000000000000", 
    28 => "0001010001000101000000001110011000000000000000000000000000000000", 
    29 => "0011110110110010111101010000011100000000000000000000000000000000", 
    30 => "0110001000101010111100011000011100000000000000000000000000000000", 
    31 => "0111100101000000010010100000111000000000000000000000000000000000", 
    32 => "1011100011001000101111000100100000000000000000000000000000000000", 
    33 => "1100011000000000110100001010010000000000000000000000000000000000", 
    34 => "1010101001011110110011111001010000000000000000000000000000000000", 
    35 => "0010000011011111100100100001100100000000000000000000000000000000", 
    36 => "0110111000100000011010101101011100000000000000000000000000000000", 
    37 => "0001110111010001000100010001101000000000000000000000000000000000", 
    38 => "0110100011111011010011011000001100000000000000000000000000000000", 
    39 => "1000011111101111100101110100100000000000000000000000000000000000", 
    40 => "0001100000101000101111101000001100000000000000000000000000000000", 
    41 => "0110010000110110000001101011101000000000000000000000000000000000", 
    42 => "1100111011111001110011011000000000000000000000000000000000000000", 
    43 => "0000011100101100110001111100010100000000000000000000000000000000", 
    44 => "1001000111001000011000101011000100000000000000000000000000000000", 
    45 => "1111100001011011011001001110001100000000000000000000000000000000", 
    46 => "0100010000100010011100000000010000000000000000000000000000000000", 
    47 => "0100100110100100000011100000101100000000000000000000000000000000", 
    48 => "0000100011000100010111100000101100000000000000000000000000000000", 
    49 => "0110101100111101011111101011101100000000000000000000000000000000", 
    50 => "1100101111110000100101000010101100100011101101110101000100000101", 
    51 => "0011101011100000100101000010010000101110100000011101100101100110", 
    52 => "0000001111100011111111100110110001101000111000000110011101101100", 
    53 => "0011001001001001010111101110000110010010000011010101101001110100", 
    54 => "1100110100110010001111001001000101010010001000110011111100110000", 
    55 => "1000011010110011011111101011100101100100111010110010101011011001", 
    56 => "1000010010100111111011011110100110101000001011111111101010001000", 
    57 => "1100101111010010011010101000101010000110110111100100100100010000", 
    58 => "1110110001010010001011000101011110111010100100011011000100101100", 
    59 => "1010100111101001001111100000001111001011110001001000010110110010", 
    60 => "0011100011001011001000110100101010110110100010111010101000101010", 
    61 => "0001111100111001100111010010111110100111000100010011001101011100", 
    62 => "0111100000010011010111011000000011001001011101101001110010100001", 
    63 => "0000001010101100011011000111100101011111001011101011100001001000", 
    64 => "0100111010110100110111101010000100000110101001000101101100010000", 
    65 => "0000111001010111101100100001001001011100101100010000110101111010", 
    66 => "1010001011000011101111101011001000110011111011010011010100110010", 
    67 => "1101100011100000110010010101111011011001100100011010110010011000", 
    68 => "1001001111010101000011111000010100000001000111100110000110011111", 
    69 => "0101111100011110101111000110111110111110101010100011110000000111", 
    70 => "0001101110000001100010000100010110010110101100001000101000111010", 
    71 => "1010010110101010001001111111010111100011011111110101011010100101", 
    72 => "0001001101110101100110101000010111101100100001010100100010001011", 
    73 => "1010111011000101010110001011111110111010000111011100000100110011", 
    74 => "1000101000000010000011101011011100001010011100110011100110011001", 
    75 => "1001011001001011101001000011011100000110101111010010011101100010", 
    76 => "0001001100010000101011101010011100100000001111011111111001100110", 
    77 => "1010011111011110001010011000010101110000001001001101010101000001", 
    78 => "0010011100001111011011011101001011011000001110100000101101010001", 
    79 => "1101000000011100010011101010011100100111001111001000010010110010", 
    80 => "0110111011011110001111100111010011100011100110110110101001010000", 
    81 => "0000111110101010001000111010010001010100111010100010110101000010", 
    82 => "1111110011111111001001101000011000100110111001000001011100101000", 
    83 => "1001111011101100111110110010110001010001100010010111000000001100", 
    84 => "1001011100010010111111001000001001010001011010101001111110011110", 
    85 => "1101111111001110011010001001010001010101100011111000101000010011", 
    86 => "0000010000000000011001100010100000111100001110111001101101101111", 
    87 => "0100011111011001100101111110000101000101000110000111000100100011", 
    88 => "0111100010001010010110010001111010111111101000101010100110001100", 
    89 => "1001101111001000001100001001010000110100101000111010100111100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cRg6 is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cRg6 is
    component pg_conv3x3_tile_cRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cRg6_rom_U :  component pg_conv3x3_tile_cRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


