-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cibs_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101100010100101101011101111000000000000000000000000000000000000", 
    1 => "0000000000000000000100000000000000000000000000000000000000000000", 
    2 => "0000011001110001110100000000000000000000000000000000000000000000", 
    3 => "0000010010000000000000000000000000000000000000000000000000000000", 
    4 => "0001000110110010000000000100000100000000000000000000000000000000", 
    5 => "0100000010000100111101001001011100000000000000000000000000000000", 
    6 => "0101111011100001000000000000000000000000000000000000000000000000", 
    7 => "0111000100100001000000000000000000000000000000000000000000000000", 
    8 => "0101110101011000000000000000000000000000000000000000000000000000", 
    9 => "1101100100011100000000000000000000000000000000000000000000000000", 
    10 => "0010110110111101000000000000000000000000000000000000000000000000", 
    11 => "1101101100010011000000000000000000000000000000000000000000000000", 
    12 => "1101100001110011000000000000000000000000000000000000000000000000", 
    13 => "0100100101001001000000000000000000000000000000000000000000000000", 
    14 => "0101101111001101000000000000000000000000000000000000000000000000", 
    15 => "0011111101011000000000000000000000000000000000000000000000000000", 
    16 => "0010001010001100000000000000000000000000000000000000000000000000", 
    17 => "0001000101010010000000000000000000000000000000000000000000000000", 
    18 => "0000001101000000000000000000000000000000000000000000000000000000", 
    19 => "0010100001000010000000000000000000000000000000000000000000000000", 
    20 => "0110111000001000000000000000000000000000000000000000000000000000", 
    21 => "0000000000000000000000000000000000000000000000000000000000000000", 
    22 => "1001011100011010100100110000001000000000000000000000000000000000", 
    23 => "0100001001001100000000110100001000000000000000000000000000000000", 
    24 => "0010110100101010101001100000001000000000000000000000000000000000", 
    25 => "0100000011100001110000000111000100000000000000000000000000000000", 
    26 => "0011000000000100000000110010001100000000000000000000000000000000", 
    27 => "0001011100001000011101111010010100000000000000000000000000000000", 
    28 => "1000001110111111110101111010000100000000000000000000000000000000", 
    29 => "0010110111010001000001000101010100000000000000000000000000000000", 
    30 => "0010001001000000101110001101001100000000000000000000000000000000", 
    31 => "0111110110010001000011110011111000000000000000000000000000000000", 
    32 => "1010010000010110101001100010111100000000000000000000000000000000", 
    33 => "0011101011000001101110101010000100000000000000000000000000000000", 
    34 => "0001110011000010000110101010000000000000000000000000000000000000", 
    35 => "0111100101110100101000110110011000000000000000000000000000000000", 
    36 => "0010111010100100101111001110110000000000000000000000000000000000", 
    37 => "0110001111010011010001101101000100000000000000000000000000000000", 
    38 => "1010110000100110111000011100011000000000000000000000000000000000", 
    39 => "0000001111111001110000011010110000000000000000000000000000000000", 
    40 => "1010000111000101100110000000011000000000000000000000000000000000", 
    41 => "1111001000101100110000101010010000000000000000000000000000000000", 
    42 => "1101111001000100000011110011101100000000000000000000000000000000", 
    43 => "0110110111001101110001110001101000000000000000000000000000000000", 
    44 => "1111111001001000011000101001000100000000000000000000000000000000", 
    45 => "1010000110001100110110110000101100000000000000000000000000000000", 
    46 => "1110000001101001011000001011010000000000000000000000000000000000", 
    47 => "0100101011011100001101000000101100000000000000000000000000000000", 
    48 => "0111011001001001001010001001100000000000000000000000000000000000", 
    49 => "1100000001000001011000000010001000000000000000000000000000000000", 
    50 => "0111100110010011011010000010111001011101001110111100011000101010", 
    51 => "1110000000110101100010110100111110101010000100011100101010111011", 
    52 => "1110101100110101000111001000001000100010100100010001101101001010", 
    53 => "0100111010000000110111011111110111001011101001001011100111001000", 
    54 => "0011110011111111000010101011010110010100110111010010000000011011", 
    55 => "0010001010110011000100100111111100010010101111101001011001010100", 
    56 => "0000110011010000010010010001100001000101110100101111100101001001", 
    57 => "1101100001100100111000011010011010111000010001011110000010010010", 
    58 => "1010001000010010010000111000010010110110101111000110100000000100", 
    59 => "0010111101010001101110000010011100101011110001111001001101111101", 
    60 => "1011010111001010001011111100110011010001100110010000111100001000", 
    61 => "0100100101011001101111010101011101000000110110001111101100011100", 
    62 => "1100000001001111001110100000000010100100110110100101010010001010", 
    63 => "1111110111111001111111111100010100100100111000010000001110010101", 
    64 => "1001000001011100110010101110010010010000011110011111110011110110", 
    65 => "1110100001100000010011001010110001011101011001010101011010000000", 
    66 => "1011111011001100111000011110011011111000111110011001111111000000", 
    67 => "1100100011011010110101001000011100010110100100101110100010000010", 
    68 => "1110001001001011001110110001000100011011010111111100000001110011", 
    69 => "0100111001110101011001100110101010001000110100010011111000000011", 
    70 => "1110001110011110110011100101100011011100100110111001100000010001", 
    71 => "0000011011001100010111010111101001010100100011100001110100101011", 
    72 => "0100111010001010010011101001000100001010010010001110000010000101", 
    73 => "1001000010110100011001001010110100010110101000100011100000101000", 
    74 => "0100000111010011010110010111100101000111000100100011000011110010", 
    75 => "1010111001111011110011111100110001011010010011111101001100011000", 
    76 => "1010111000001110011001111110101011110111011111100000010100111101", 
    77 => "0111000001101001010101011001011111011010101111101100000001100100", 
    78 => "1111010011011101101111101010111000101010110001111110000010000010", 
    79 => "0011001010001110110111010010011111100110110001001001001111010011", 
    80 => "1111001000111000111000000100111010011001110001101000111101001000", 
    81 => "1100101100101011011011111001110010001000010101100101001010111001", 
    82 => "0000010000001011001111011001010010001010011111100001101001000100", 
    83 => "1011001110000001111001010101100010001110101001100111000011001110", 
    84 => "0010011100110101110111100010111000100011000111111100101001101101", 
    85 => "1000000001110010001111011110011010100011101001100011000010010110", 
    86 => "1110101110111101101001011111100010011111110110011000110010101001", 
    87 => "0000111001001110010101010010011011011100110101011101001100001001", 
    88 => "0010011001101010001110101100011000110110101010001010100111000010", 
    89 => "1010110000101110110001001011101010010100000010001010100100100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cibs is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cibs is
    component pg_conv3x3_tile_cibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cibs_rom_U :  component pg_conv3x3_tile_cibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


