-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbfk_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111101010111111101011111111000000000000000000000000000000000", 
    1 => "1110001000000000000001110111111100000000000000000000000000000000", 
    2 => "1111111111110111111111111111111100000000000000000000000000000000", 
    3 => "0111111111111111111111111111111100000000000000000000000000000000", 
    4 => "1111111111111111111111111111111100000000000000000000000000000000", 
    5 => "1111011111111111111111111011111100000000000000000000000000000000", 
    6 => "1001111010011100000000000000000000000000000000000000000000000000", 
    7 => "1100001110111110000000000000000000000000000000000000000000000000", 
    8 => "0011001010110011000000000000000000000000000000000000000000000000", 
    9 => "1000101110101100000000000000000000000000000000000000000000000000", 
    10 => "0010100100101101000000000000000000000000000000000000000000000000", 
    11 => "0101101110111110000000000000000000000000000000000000000000000000", 
    12 => "1010101110101101000000000000000000000000000000000000000000000000", 
    13 => "0011001010110100000000000000000000000000000000000000000000000000", 
    14 => "0101101110001010000000000000000000000000000000000000000000000000", 
    15 => "1011101110100000000000000000000000000000000000000000000000000000", 
    16 => "1111000100000001000000000000000000000000000000000000000000000000", 
    17 => "1100001010001100000000000000000000000000000000000000000000000000", 
    18 => "0001110101111011000000000000000000000000000000000000000000000000", 
    19 => "0010110010111011000000000000000000000000000000000000000000000000", 
    20 => "1000011100100110000000000000000000000000000000000000000000000000", 
    21 => "0000000001110100000000000000000000000000000000000000000000000000", 
    22 => "1011111011101000000011100110101000000000000000000000000000000000", 
    23 => "1010110000110001011011100011101100000000000000000000000000000000", 
    24 => "0001001011001011000100101100011000000000000000000000000000000000", 
    25 => "0011110100111001001100010011101100000000000000000000000000000000", 
    26 => "0001000011001001000110101111110100000000000000000000000000000000", 
    27 => "1010110101101111110111101011000000000000000000000000000000000000", 
    28 => "0011100010010001000010100011000100000000000000000000000000000000", 
    29 => "0010100000010101001101110001010000000000000000000000000000000000", 
    30 => "0111111011001110101010100001110000000000000000000000000000000000", 
    31 => "1101111101101101110011110111101000000000000000000000000000000000", 
    32 => "0110111111100011011110011111101000000000000000000000000000000000", 
    33 => "0000110000110011000101111000110000000000000000000000000000000000", 
    34 => "0100101011010000101011001111100100000000000000000000000000000000", 
    35 => "0110010111101011011100010101101000000000000000000000000000000000", 
    36 => "1011100010000011101000010000011100000000000000000000000000000000", 
    37 => "1100011111111000001111010111010100000000000000000000000000000000", 
    38 => "0110100111010010001111000011101100000000000000000000000000000000", 
    39 => "0101111011100001110111011000100000000000000000000000000000000000", 
    40 => "1000111111100111111111010010100000000000000000000000000000000000", 
    41 => "1101101010100110110101011011011100000000000000000000000000000000", 
    42 => "0011101110010011100100010101111100000000000000000000000000000000", 
    43 => "1011000001010110011000001010010100000000000000000000000000000000", 
    44 => "0111000001100101001000111011001100000000000000000000000000000000", 
    45 => "1010100101001011000010100011110100000000000000000000000000000000", 
    46 => "0000010110111000011101011001100000000000000000000000000000000000", 
    47 => "1000011110011001110011011010100000000000000000000000000000000000", 
    48 => "0010101101100001111111010101000000000000000000000000000000000000", 
    49 => "1111010101110000100000001100000100000000000000000000000000000000", 
    50 => "0101001100010101000000111110010111110011001101010111001011000111", 
    51 => "1101001011100100110000000010010001101000000100000111000110100110", 
    52 => "1000010000100100000010100110111111101000011000100110101010111001", 
    53 => "0100111100100010000001100001111001011101000000001001101111001100", 
    54 => "1011000000110000110110001111111001100010011000001111110011111010", 
    55 => "0101010110111011100000010010011111010101000110110111000100000100", 
    56 => "0111101100001100111101011101011110100011110011010111110101010110", 
    57 => "0000100001000100110110110000100111000000111001000011111010000100", 
    58 => "1001010110100000011011010100111110011001010101101010101001010110", 
    59 => "0000001111011111100101010101011000110111110011110011001101011100", 
    60 => "1101001101011011000100101000010110001010000100110110101100100010", 
    61 => "1111111110000111010011001111010011111100001010110000110001111000", 
    62 => "1100111001000101110001000111100010000010100011111100110010111010", 
    63 => "1110010100000101011001001111001011100110001111100100010000100111", 
    64 => "0101101001000111010100010010000010000000010101001000111010110111", 
    65 => "0010110010100111010011100111111100111010011101101000110000101001", 
    66 => "0110111100001111001010000010010001100101011001110000011110011101", 
    67 => "0110010110000100011100100100000001111101011000001111000001000000", 
    68 => "0000001100100011010110000101110011100101010110110101101001011000", 
    69 => "0000111010110100100001100010101011100100111001001010000110001110", 
    70 => "1001111001011101011101000001010111110011001100001101000110111111", 
    71 => "0010101011000110110110010011110001101010010010011111101110010100", 
    72 => "1110101101010001111111001111100101000010111000000100101000010100", 
    73 => "0010001110101011100111111110110001000111000111101101110111100010", 
    74 => "1100010110001110111011100011000101011100010000101110010000000000", 
    75 => "0110111000101110000010011110001110110010000010010010100010011000", 
    76 => "1100101011010001100011011010001010001011010011101000010010100010", 
    77 => "1000010111100110011110010101011101010101101101001010100111110110", 
    78 => "1011010001100111011110000010011111111010001011100101100000100100", 
    79 => "1101100110111110111001111101101111110100001000011000110100110011", 
    80 => "0101100010111111000001110110100111000101101111100101110010101001", 
    81 => "1010011000101010010010011010110010110000001010011111101000110110", 
    82 => "0000001110110011111111101110110010111110101010110011010010001001", 
    83 => "1111011010101111000010011010100010010011100000001010101011010100", 
    84 => "1011011010100110001101000000100101010111110001000000100010111111", 
    85 => "1101010010011110001011111011001111010000000101001111100001001011", 
    86 => "1001000010011001011001011101111011101000000111110100110001001100", 
    87 => "1101110100011111011100010101100111000000101011000110101101111110", 
    88 => "0101110110000001001101000010011110101110010010101010100100010011", 
    89 => "1011101001010011010011001111010011101111000111000001110110001111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbfk is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbfk is
    component pg_conv3x3_tile_cbfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbfk_rom_U :  component pg_conv3x3_tile_cbfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


