-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cudo_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cudo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1000000000000000000000000000000000000000000000000000000000000000", 
    1 => "0000000000000000000000101000000100000000000000000000000000000000", 
    2 => "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "0111111111111111111111111111111100000000000000000000000000000000", 
    4 => "0000000000000000000001000010000100000000000000000000000000000000", 
    5 => "0000000000000000010000000000000000000000000000000000000000000000", 
    6 => "0001011011011001000000000000000000000000000000000000000000000000", 
    7 => "1001110110011100000000000000000000000000000000000000000000000000", 
    8 => "0100011011111000000000000000000000000000000000000000000000000000", 
    9 => "1000000110010100000000000000000000000000000000000000000000000000", 
    10 => "1101101100010111000000000000000000000000000000000000000000000000", 
    11 => "1000110110011100000000000000000000000000000000000000000000000000", 
    12 => "1101011011010101000000000000000000000000000000000000000000000000", 
    13 => "1000110000011100000000000000000000000000000000000000000000000000", 
    14 => "1010111010111101000000000000000000000000000000000000000000000000", 
    15 => "1000111010111101000000000000000000000000000000000000000000000000", 
    16 => "1111100101001101000000000000000000000000000000000000000000000000", 
    17 => "1000011010110010000000000000000000000000000000000000000000000000", 
    18 => "0010011000001001000000000000000000000000000000000000000000000000", 
    19 => "1100000011101010000000000000000000000000000000000000000000000000", 
    20 => "1110101000110100000000000000000000000000000000000000000000000000", 
    21 => "0010010011000000000000000000000000000000000000000000000000000000", 
    22 => "1110110110001011110001010000001000000000000000000000000000000000", 
    23 => "0011001010001111001000111011100100000000000000000000000000000000", 
    24 => "1110100000110101111111010000110100000000000000000000000000000000", 
    25 => "1110101001110110110001110110011000000000000000000000000000000000", 
    26 => "0001000010111011000010101110100100000000000000000000000000000000", 
    27 => "0011000001000100000000000100010000000000000000000000000000000000", 
    28 => "0110001001001110111010101110010000000000000000000000000000000000", 
    29 => "0010000010100100101011011011010100000000000000000000000000000000", 
    30 => "0111010011110010000000101100100000000000000000000000000000000000", 
    31 => "1111000000100001000000101110011100000000000000000000000000000000", 
    32 => "1100010101001111011000110100011100000000000000000000000000000000", 
    33 => "1000101010001100111010001110001000000000000000000000000000000000", 
    34 => "1111010100001011000000011011000100000000000000000000000000000000", 
    35 => "0110001000110101011010000010011100000000000000000000000000000000", 
    36 => "1010000000100101011000100011011100000000000000000000000000000000", 
    37 => "0010011010100000010000110000110000000000000000000000000000000000", 
    38 => "1010111110100100100011011110010100000000000000000000000000000000", 
    39 => "0101110111110101110011010100101000000000000000000000000000000000", 
    40 => "1010010001011000000000101011000000000000000000000000000000000000", 
    41 => "0110011011001110010100101100100100000000000000000000000000000000", 
    42 => "1011101111001001000101111001111100000000000000000000000000000000", 
    43 => "1101100111101111011111001111101100000000000000000000000000000000", 
    44 => "0111101111110000111101001101011000000000000000000000000000000000", 
    45 => "1000010010101111110111110011100000000000000000000000000000000000", 
    46 => "1110100111110000110101011100001100000000000000000000000000000000", 
    47 => "0100010010110111111100001011000100000000000000000000000000000000", 
    48 => "0000110111101100111101010100110000000000000000000000000000000000", 
    49 => "1001001101110100111011100111000000000000000000000000000000000000", 
    50 => "1111010111010101001011111111100110111011110100011111011110101001", 
    51 => "0111110101111010001010100101101101011001110110011000011001110001", 
    52 => "0010000100011111000010111100010100000101000110010010001101101001", 
    53 => "0000011110111100010100110011101000000100001011111101011100001100", 
    54 => "0010001110010010100111100010100000000010110001001111101110101100", 
    55 => "0010110100111011001110101101101010010001001110110110001001010110", 
    56 => "0011100111111100101111001011101100110011101100000100101010000110", 
    57 => "1011010110101110001000111010001110111001000111000000011001000110", 
    58 => "0100010001110100110000101010010110111001101001001100000010011001", 
    59 => "1011110011000001111111010011111010011101100010010100011000111010", 
    60 => "0011101100101011011010000100101000010111011010110110101101010000", 
    61 => "1010100111110110000100010101001000101010110110010101101010110001", 
    62 => "0001111011011100100110101000111100101100100100010101001110001001", 
    63 => "1010111110100010001100001011100001101101101001011111100110111100", 
    64 => "1100010101010100010101000001011101000101001001000111001011100000", 
    65 => "0011010010100001000100100010111101000001101111100000001000011001", 
    66 => "0001100000010101110011111001110001101111010010000010111101001010", 
    67 => "1011010011101000110000111100110010011001010011011100010000100110", 
    68 => "1111001011110101101011001001001010110110111011011010101000100010", 
    69 => "0011111110001011111001010010001101011001100111111001100101010011", 
    70 => "1100001001000011011011010011000111000111111100001110000110001111", 
    71 => "1000110100010010110001100010001110011010100111110010111000100100", 
    72 => "0000011001111000010001011000000000110100101100001111001111011011", 
    73 => "1011010100110111000111101011110111101111101100000010100100111000", 
    74 => "1000001101101101011011110010010000101111010010001100111101110110", 
    75 => "1100010100010111010110101000110101000100001111111010001000100001", 
    76 => "1100011111011011110101100101110110000111010000100011100110011001", 
    77 => "0000101101110101010001010100010010101000000011101001101000111110", 
    78 => "1000101111010000111110111000100110011001101111011101000111011010", 
    79 => "0100001111100001111111100101011000111011111100001110101111100010", 
    80 => "0100110101110101110101110010010100111110110100100000100111001101", 
    81 => "0000110000111000110011111011000011000110011011110111111000110110", 
    82 => "0110001100110001110111101010110010001011110110000011111110101001", 
    83 => "1001111110010001010010011110011011001100001000110100011011110101", 
    84 => "0100100100111101110111111101101111001011110001101000011000101000", 
    85 => "0001000001010111010110001100110000001001100111101110001101101110", 
    86 => "0001000100100111001011000100111110110110001011111001001001001011", 
    87 => "0000000010111001010101010000010000111011011110011110100111101000", 
    88 => "1001110111100111110111010000001110001000000010110000011001110100", 
    89 => "1000010000010001011011110111010100000110110110000011100101101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cudo is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cudo is
    component pg_conv3x3_tile_cudo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cudo_rom_U :  component pg_conv3x3_tile_cudo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


