-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cjbC_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cjbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1100111011111111111110100111010000000000000000000000000000000000", 
    1 => "1000000000100110010101010000000000000000000000000000000000000000", 
    2 => "1000111111000101110000110000000000000000000000000000000000000000", 
    3 => "1111111111111111011111111111111000000000000000000000000000000000", 
    4 => "1111111011111111111101111111010000000000000000000000000000000000", 
    5 => "0110000000001100100010010000100100000000000000000000000000000000", 
    6 => "0000011001101011000000000000000000000000000000000000000000000000", 
    7 => "0111010111100011000000000000000000000000000000000000000000000000", 
    8 => "0101010111011010000000000000000000000000000000000000000000000000", 
    9 => "1101000101111101000000000000000000000000000000000000000000000000", 
    10 => "0110110000101101000000000000000000000000000000000000000000000000", 
    11 => "1101100101100011000000000000000000000000000000000000000000000000", 
    12 => "1001110001111010000000000000000000000000000000000000000000000000", 
    13 => "0101000011010011000000000000000000000000000000000000000000000000", 
    14 => "1111000101100001000000000000000000000000000000000000000000000000", 
    15 => "1101000011010001000000000000000000000000000000000000000000000000", 
    16 => "0111110100000100000000000000000000000000000000000000000000000000", 
    17 => "0010101010010110000000000000000000000000000000000000000000000000", 
    18 => "0100001101000000000000000000000000000000000000000000000000000000", 
    19 => "0110100000000110000000000000000000000000000000000000000000000000", 
    20 => "0110111010001000000000000000000000000000000000000000000000000000", 
    21 => "1010100011111001000000000000000000000000000000000000000000000000", 
    22 => "1000000000000110100100110000011000000000000000000000000000000000", 
    23 => "0110000000000110001000111110010000000000000000000000000000000000", 
    24 => "1110001110001110110001101011100000000000000000000000000000000000", 
    25 => "1101001101111010000100010100001100000000000000000000000000000000", 
    26 => "1010001000010100000000110110011100000000000000000000000000000000", 
    27 => "0100111011001110110010011111110000000000000000000000000000000000", 
    28 => "1100001111101011010100010101111100000000000000000000000000000000", 
    29 => "1000001010110100100111011111111100000000000000000000000000000000", 
    30 => "0111011010110101000111001111101100000000000000000000000000000000", 
    31 => "1110110010110110111001010001111000000000000000000000000000000000", 
    32 => "1010000001010001100011101010101000000000000000000000000000000000", 
    33 => "0001111111100110101110011010101100000000000000000000000000000000", 
    34 => "1000011100001000001110100010011000000000000000000000000000000000", 
    35 => "0111001111110101110001001010010000000000000000000000000000000000", 
    36 => "1010010011111101101110001110100100000000000000000000000000000000", 
    37 => "0100011111111011011011111001101100000000000000000000000000000000", 
    38 => "1010100010100100111010001100011000000000000000000000000000000000", 
    39 => "0010011010101101110110111100100000000000000000000000000000000000", 
    40 => "1110000010000101101011000000011000000000000000000000000000000000", 
    41 => "0111001000101100110010101010010100000000000000000000000000000000", 
    42 => "1101111111000000100011111011101100000000000000000000000000000000", 
    43 => "0111010100011101110101100101101000000000000000000000000000000000", 
    44 => "1111101001001100010000101111000100000000000000000000000000000000", 
    45 => "1010101010001100010110011000101100000000000000000000000000000000", 
    46 => "0011000001000000011000001011011000000000000000000000000000000000", 
    47 => "0111101001110100010100000000111100000000000000000000000000000000", 
    48 => "0010101001000001001010101001100100000000000000000000000000000000", 
    49 => "0100000000000001000000011000000000000000000000000000000000000000", 
    50 => "0110100110110111101111010010111001110001101001111101111101101011", 
    51 => "0110100011101100110111110000100000011110111011101101100100000000", 
    52 => "1110001101110000101101010000011010100101111000011001111101000110", 
    53 => "1000100001110001100111010101100011001010111001001010110001110101", 
    54 => "1111010001010000000010100101111111010011011011010010101010011011", 
    55 => "0110000001110001000101110101110000111010111110111111111011001100", 
    56 => "0100111111110000111001000000101001101101111000001111110101101011", 
    57 => "0100110110101110111000011011000011110101011001111111010111110111", 
    58 => "1010101000000001110010001110110010100010100100001110100111110001", 
    59 => "1111100010000110011110100011010110110001001001001010001100110101", 
    60 => "1010110101100010010100110100101011010111011011100100000100100100", 
    61 => "1001111100000001111101010100011101000110001111000010100101100000", 
    62 => "1001111000101111100100010101001000110101110010110111000101010010", 
    63 => "1110100100111001100011001100111100000100011100010000000100000001", 
    64 => "1111000011001000010011100101010010011110011100001001111011110111", 
    65 => "0100001010100101110001001000111001000001011100100000011010000010", 
    66 => "1011111111001100111100001101011100101001101011011101111101101001", 
    67 => "1100111011110101000000100100101101010111100111110111101110010000", 
    68 => "1011001011001111110110010000010110010011100010011100000011110010", 
    69 => "1111110000111101011101110010001001101001100110010011111100001111", 
    70 => "0110000110100111000010100110111001011010110011110000111000010100", 
    71 => "0000001001000100010110100011000001111111100010100000010100111111", 
    72 => "1100110100101100011011101001101111001101110000111101100110110011", 
    73 => "0001001011110001111000101110010010010110100100101010100000010001", 
    74 => "0000100011010011100111111111110011001100000111110011100011010011", 
    75 => "1000100101100000010000110000011111011010111011001101001100110000", 
    76 => "1010011101000110011001111111011101001111011011110000001101111011", 
    77 => "0011010011101000010011011001110011011000101101001100101000001100", 
    78 => "1100000001011010100111101010111000101010100000011111000100010100", 
    79 => "1011000010010010001111110011111101000000110011000101111011010100", 
    80 => "0000001000111000011001000000101000010101111101101000101101111001", 
    81 => "0110000001100011111011011011111010101010010100100010010010111111", 
    82 => "0110000110110111001111010011110010000010011111010011101001000100", 
    83 => "1001000001001101110001000110001010000100001001100111010011001000", 
    84 => "0000010100100011110110000010101100101010111001011100111000001011", 
    85 => "1101100001010111011011011111011110100111101000101110010010010010", 
    86 => "1110000100001000101001000011100010100110111111110000111110100001", 
    87 => "0000111001000000010101010011111001001100111100110000100100001001", 
    88 => "1010010010100010001000101100011010110010111010111001001011100101", 
    89 => "1001100000001100110110100011101010010100010011011100110101100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cjbC is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cjbC is
    component pg_conv3x3_tile_cjbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cjbC_rom_U :  component pg_conv3x3_tile_cjbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


