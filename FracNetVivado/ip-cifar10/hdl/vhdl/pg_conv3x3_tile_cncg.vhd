-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cncg_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cncg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000110000000000000000000000000000000000000000000", 
    1 => "0000000000000100000000000000000100000000000000000000000000000000", 
    2 => "0000110001001011001000111010000100000000000000000000000000000000", 
    3 => "1111111111011011111011111111011100000000000000000000000000000000", 
    4 => "1110110100000000011101101000000000000000000000000000000000000000", 
    5 => "1000011111101110111000111101000000000000000000000000000000000000", 
    6 => "1000100110001110000000000000000000000000000000000000000000000000", 
    7 => "1010101100001100000000000000000000000000000000000000000000000000", 
    8 => "0011001110101011000000000000000000000000000000000000000000000000", 
    9 => "1100101110001011000000000000000000000000000000000000000000000000", 
    10 => "1000000110110001000000000000000000000000000000000000000000000000", 
    11 => "1100010100101001000000000000000000000000000000000000000000000000", 
    12 => "1111000101101011000000000000000000000000000000000000000000000000", 
    13 => "1011101110010000000000000000000000000000000000000000000000000000", 
    14 => "1101010001000010000000000000000000000000000000000000000000000000", 
    15 => "1010100000001111000000000000000000000000000000000000000000000000", 
    16 => "1000111010110110000000000000000000000000000000000000000000000000", 
    17 => "0011000101110111000000000000000000000000000000000000000000000000", 
    18 => "0100101110010110000000000000000000000000000000000000000000000000", 
    19 => "1011101101100001000000000000000000000000000000000000000000000000", 
    20 => "0110101111011011000000000000000000000000000000000000000000000000", 
    21 => "0000000001000101000000000000000000000000000000000000000000000000", 
    22 => "1001000111111011110010111010011000000000000000000000000000000000", 
    23 => "1111011111011010110110011101101000000000000000000000000000000000", 
    24 => "1010001100111000101001111110011000000000000000000000000000000000", 
    25 => "1110001010001010110001101001100000000000000000000000000000000000", 
    26 => "0001000000110010000100001110101100000000000000000000000000000000", 
    27 => "1110111111110010110111101101100100000000000000000000000000000000", 
    28 => "0010010000010011000100111000111100000000000000000000000000000000", 
    29 => "1110100000100100111010001011000000000000000000000000000000000000", 
    30 => "1110010011101100011000001101010100000000000000000000000000000000", 
    31 => "1001110011011101000100100101111000000000000000000000000000000000", 
    32 => "1110001000101110101000101000001000000000000000000000000000000000", 
    33 => "1000111101100101111111001111010100000000000000000000000000000000", 
    34 => "0000100001010000010101001011000100000000000000000000000000000000", 
    35 => "1100010011110011110101010001100000000000000000000000000000000000", 
    36 => "1111001011000010011001100000110000000000000000000000000000000000", 
    37 => "1001011110011001101100011100110100000000000000000000000000000000", 
    38 => "1011010111111100001011000110000100000000000000000000000000000000", 
    39 => "0011000011010011101010001101100100000000000000000000000000000000", 
    40 => "1001001000110100100011001111011000000000000000000000000000000000", 
    41 => "1101000000100100010101101000010000000000000000000000000000000000", 
    42 => "1101000101000100000111010001101000000000000000000000000000000000", 
    43 => "1000010111101011110101110000111000000000000000000000000000000000", 
    44 => "1000001011100110110111011100110100000000000000000000000000000000", 
    45 => "0100010010001100001100001110110100000000000000000000000000000000", 
    46 => "0001101101110101000101000011100100000000000000000000000000000000", 
    47 => "1110110011111010011011111000001100000000000000000000000000000000", 
    48 => "0100101110011001111110101111011000000000000000000000000000000000", 
    49 => "0100010100110111111110110110110100000000000000000000000000000000", 
    50 => "1001000011011101011101100000000011100000000111010010011010101010", 
    51 => "0010101011100001010010101011111101100000111001001111101000111110", 
    52 => "1101100110100000000110011101100101001001110010101101111011011110", 
    53 => "0100110110111100110000001100111111100101110101011011110001000011", 
    54 => "0111111110011011001101001001001001000001101010111001100101110000", 
    55 => "1001111111110001001110000011110100010100011001100011100101001100", 
    56 => "0011001111011010100100111000111000001101100110000000011111010110", 
    57 => "0100101111101101111111011111100001000111001011011111010111101000", 
    58 => "1010010000100100011010110010100110111101111110110010000110101011", 
    59 => "1000101101101010011010000011111000110110110000011101000100000101", 
    60 => "1011111000101111001000000011101000001110100000001110110010010111", 
    61 => "0000111100100010110001000101100110000111011011011111001101011010", 
    62 => "1011111001101011001100111101100100110110000011001111110001110000", 
    63 => "0001100110001111001111000011011110001101011010110111010011111101", 
    64 => "1000101111010110000001011000100010011111100011110110000100011100", 
    65 => "0000011000111010010001011100011010000100011101010111010111100011", 
    66 => "0001100001010010110101010100101101001010000001011001011110101010", 
    67 => "1001111001010001011111011010010100011010111010000101110000101110", 
    68 => "0001000000111011100111110010101100010000100111100100001001000110", 
    69 => "0111000100001001010000001010000111111000101001010100001111100111", 
    70 => "0101011110001100100111100111010000100100111011011111110011110000", 
    71 => "1100011000110101100001110011110010000110000111110010110011101011", 
    72 => "0001101100110100001101011001000000011100000000110001001101110110", 
    73 => "0010011111110010000010010100101001000000010000000101000001000000", 
    74 => "1100000111001011110110010100100101000110010000010000111100011011", 
    75 => "1101100100011110100101000011100010001100001101110010110000001010", 
    76 => "1101101101000110101111000001010001100111110100100101110101101110", 
    77 => "0001111101111111110111010010011100101001100000100110111110101110", 
    78 => "1101100011011111100100100000011010011101011101001010001011101110", 
    79 => "1010011100100010001001100010110011010101101000110110110111010000", 
    80 => "0010010110010100101111101001011111011100111010001110100110011011", 
    81 => "1001011100110011010100011001111000110111001000101100101011100100", 
    82 => "0101011101011001110000000101111011101011101011111100001000011110", 
    83 => "0101010101101001111110110011010101101100111100001010011111010100", 
    84 => "0001110110111110011101100100101111001110110100101011111101111101", 
    85 => "1110001111110101010000000101111000100110101000100111111100011100", 
    86 => "0000101110011110000110000111000101110110111101001111101111111101", 
    87 => "0000110100010111110110010000101010011101111011110010110011001010", 
    88 => "0111110010001101101011110010001111000101010110110010000110001000", 
    89 => "1000010101100011001100000111101101110010011100011100101111101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cncg is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cncg is
    component pg_conv3x3_tile_cncg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cncg_rom_U :  component pg_conv3x3_tile_cncg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


