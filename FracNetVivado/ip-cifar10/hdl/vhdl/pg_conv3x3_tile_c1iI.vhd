-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c1iI_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c1iI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "0000000000000000000000000000000100000000000000000000000000000000", 
    2 => "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "1111111111111111111111111111111100000000000000000000000000000000", 
    4 => "1111111111111111111111100111111100000000000000000000000000000000", 
    5 => "1000000000000000000000000000001100000000000000000000000000000000", 
    6 => "1100010000100110000000000000000000000000000000000000000000000000", 
    7 => "1111000101101011000000000000000000000000000000000000000000000000", 
    8 => "1111010001110000000000000000000000000000000000000000000000000000", 
    9 => "0111010000010111000000000000000000000000000000000000000000000000", 
    10 => "0110000000111010000000000000000000000000000000000000000000000000", 
    11 => "1101101000111011000000000000000000000000000000000000000000000000", 
    12 => "0001000101110001000000000000000000000000000000000000000000000000", 
    13 => "1111011110001011000000000000000000000000000000000000000000000000", 
    14 => "0111110011110010000000000000000000000000000000000000000000000000", 
    15 => "0111000001110111000000000000000000000000000000000000000000000000", 
    16 => "0101101010011010000000000000000000000000000000000000000000000000", 
    17 => "0010101000001100000000000000000000000000000000000000000000000000", 
    18 => "0111111111110001000000000000000000000000000000000000000000000000", 
    19 => "1110001100110011000000000000000000000000000000000000000000000000", 
    20 => "1110111011101111000000000000000000000000000000000000000000000000", 
    21 => "0001001001000100000000000000000000000000000000000000000000000000", 
    22 => "0111000011000110001110101100010000000000000000000000000000000000", 
    23 => "1001001100100110101111010001110100000000000000000000000000000000", 
    24 => "1101011111001110110011101010101100000000000000000000000000000000", 
    25 => "0011000000001110010000101010010000000000000000000000000000000000", 
    26 => "0011001000011111000000101000010100000000000000000000000000000000", 
    27 => "0001010000110000000100000100110000000000000000000000000000000000", 
    28 => "0001110100111111011111110011110100000000000000000000000000000000", 
    29 => "1010001010011011010000100010010100000000000000000000000000000000", 
    30 => "0010110010001110000010000101111100000000000000000000000000000000", 
    31 => "1100001010110111110010001011000100000000000000000000000000000000", 
    32 => "0001100111111111000111011101101100000000000000000000000000000000", 
    33 => "1101110111010000000001100011110000000000000000000000000000000000", 
    34 => "0011000011001001100110101011000100000000000000000000000000000000", 
    35 => "1111101100110101111101010001100100000000000000000000000000000000", 
    36 => "0111110110101110101111111101101100000000000000000000000000000000", 
    37 => "0111110100100110110001010100011000000000000000000000000000000000", 
    38 => "0000111010000111010100100000100000000000000000000000000000000000", 
    39 => "1000001100110110010101010010100000000000000000000000000000000000", 
    40 => "0111100011110000110010001111010000000000000000000000000000000000", 
    41 => "0111110111100010110011000110010000000000000000000000000000000000", 
    42 => "1100000100110000011001011011011100000000000000000000000000000000", 
    43 => "0100010000000001011000101001001000000000000000000000000000000000", 
    44 => "0100010110100010111110010010100100000000000000000000000000000000", 
    45 => "0010000110001001100110110111100100000000000000000000000000000000", 
    46 => "1111001111000000110000100010001000000000000000000000000000000000", 
    47 => "0000000111011001111010001100001100000000000000000000000000000000", 
    48 => "0100010101000001010000001000001000000000000000000000000000000000", 
    49 => "0101101000110110100100110010110000000000000000000000000000000000", 
    50 => "1000101001100100001001100001001000100000111110000010011010011001", 
    51 => "0000011001111110010111110001100101001100000111100001110101011001", 
    52 => "0101110001100010010101001011010101011000001101100101010000001101", 
    53 => "1101010111001001000011000011011000010000000010000000111001100111", 
    54 => "1101001110000001000100101000101100000111100001110101101100010010", 
    55 => "0010001000101100111100011010010100100010011001111111011110111101", 
    56 => "0110110001111101010010111101000011011000010110001000001010110011", 
    57 => "0101001111000110100101010111001101010011011110100111011000001101", 
    58 => "0101000000111011101000101100010000100000001110111011001001001111", 
    59 => "0111110101111101100100001000101001111110101010001000101100001010", 
    60 => "1011101011101111011100111010100000010010110111110100101010011000", 
    61 => "1011110111100010100000101101111110000111101001100000011101000101", 
    62 => "0000011000100100110101100011100001001110001000010000000100001000", 
    63 => "0010000001101000000101110001100100000110011011001110011101100100", 
    64 => "0011101100011111000010101010101001000101100010110000001000011110", 
    65 => "0000100010111000110111110000001101001000001000101100101110000110", 
    66 => "1101000001010101000110100000010101000000100000010100100111001011", 
    67 => "0011010011110001100010010001110100110111100100101110000001011010", 
    68 => "1010001101110101010100011101101101100000100001110111100100000111", 
    69 => "0100000011111001100101000010111100110101101010000011101100101000", 
    70 => "0100110110000100100101110010001111000001001110100010110100101011", 
    71 => "0111111010011001100010000010001010110001010010101011011101010000", 
    72 => "0000101001010001010010100000011100101100100011100100000010010110", 
    73 => "1111000010110111001000010110111000011001110101011111011011001000", 
    74 => "1011110101000110101110100000111101000001100100100011100001010001", 
    75 => "1010011011101111010111100101111111110101111001000011000111011011", 
    76 => "1001001110100000011000001001100010110110001101101110000010101100", 
    77 => "1100101001010110111111110001101010111000011110110100111010011111", 
    78 => "1000111110111100111111010100001010111110000000100100110100001000", 
    79 => "1111001100100111110100001101010111101111100101100101100111001011", 
    80 => "1000001000111111101011010010100000100010111010010010010101101110", 
    81 => "0010000001010010110000011011100010100100001011000000110011000000", 
    82 => "0111101000001111011011010010101111011110101101011001000101101101", 
    83 => "1101101000000100000000001010001000110010111001001010100111011000", 
    84 => "0101010101000001011101010101010011110110001100110000110101111000", 
    85 => "1010101010011000011001000010011010011010101100110100110100011001", 
    86 => "0100101011111011111101110011001111010110101100111000101100110100", 
    87 => "1010001010010111011110000011101011011110011001000001010101010100", 
    88 => "1000010000010011011011001111111011011100101100100101000101101110", 
    89 => "1111011111100100111101001101111111110111101011101101101001011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c1iI is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c1iI is
    component pg_conv3x3_tile_c1iI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c1iI_rom_U :  component pg_conv3x3_tile_c1iI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


