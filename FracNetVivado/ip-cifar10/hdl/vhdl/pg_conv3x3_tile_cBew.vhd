-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cBew_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0111111100011001110111101111111000000000000000000000000000000000", 
    1 => "0111111111110111011111111011111000000000000000000000000000000000", 
    2 => "0111111111111111100011111100011000000000000000000000000000000000", 
    3 => "0011110010000000000000000000000100000000000000000000000000000000", 
    4 => "1111111111111101111111100111111100000000000000000000000000000000", 
    5 => "1101001000011010000100011111000100000000000000000000000000000000", 
    6 => "0000101100111100000000000000000000000000000000000000000000000000", 
    7 => "0010101001000011000000000000000000000000000000000000000000000000", 
    8 => "1111111101111010000000000000000000000000000000000000000000000000", 
    9 => "1010111001101011000000000000000000000000000000000000000000000000", 
    10 => "1100000111110001000000000000000000000000000000000000000000000000", 
    11 => "1110001001001011000000000000000000000000000000000000000000000000", 
    12 => "1001110110111101000000000000000000000000000000000000000000000000", 
    13 => "1001110100000001000000000000000000000000000000000000000000000000", 
    14 => "1101001101010000000000000000000000000000000000000000000000000000", 
    15 => "1101110101001010000000000000000000000000000000000000000000000000", 
    16 => "0110001111111100000000000000000000000000000000000000000000000000", 
    17 => "1101100101111010000000000000000000000000000000000000000000000000", 
    18 => "0000010100100001000000000000000000000000000000000000000000000000", 
    19 => "0010000101011101000000000000000000000000000000000000000000000000", 
    20 => "1011010010111111000000000000000000000000000000000000000000000000", 
    21 => "1000000000000000000000000000000000000000000000000000000000000000", 
    22 => "0000000100001100111000011010000100000000000000000000000000000000", 
    23 => "0001110001100110110110000100011000000000000000000000000000000000", 
    24 => "1011011011100010000000101101000000000000000000000000000000000000", 
    25 => "1001101011011000100010101101100000000000000000000000000000000000", 
    26 => "1110011110001010011011110010101000000000000000000000000000000000", 
    27 => "1100111111111011111011110000100000000000000000000000000000000000", 
    28 => "1110010101010001000101011001000100000000000000000000000000000000", 
    29 => "0100110001111111000011111110001100000000000000000000000000000000", 
    30 => "1010000100001111010001010010011100000000000000000000000000000000", 
    31 => "1010011001011101001100010001100100000000000000000000000000000000", 
    32 => "1100111011110100110111101001100100000000000000000000000000000000", 
    33 => "0111001010100001100111111011101000000000000000000000000000000000", 
    34 => "1111101111100100111011010100111000000000000000000000000000000000", 
    35 => "1101110111111011100101110010100000000000000000000000000000000000", 
    36 => "0100011110101101001011111100101000000000000000000000000000000000", 
    37 => "0101110011110111100111111111111100000000000000000000000000000000", 
    38 => "0111010100000110101100110111011100000000000000000000000000000000", 
    39 => "1000000010001010001100110100011100000000000000000000000000000000", 
    40 => "1111110111010110111000101000010000000000000000000000000000000000", 
    41 => "1001101110110101110101001011011100000000000000000000000000000000", 
    42 => "0001101011110000001110100101110000000000000000000000000000000000", 
    43 => "1101110111010001110000010110110000000000000000000000000000000000", 
    44 => "1010110001111011010100101001010000000000000000000000000000000000", 
    45 => "0010010010001111110111111011110000000000000000000000000000000000", 
    46 => "0111000000101010011011100110010100000000000000000000000000000000", 
    47 => "0110010111000001001110100010000000000000000000000000000000000000", 
    48 => "1011000001001011000001010110001000000000000000000000000000000000", 
    49 => "1010010101100001101011000000001100000000000000000000000000000000", 
    50 => "0100110000011110011000111101110011011011110011000110100010011111", 
    51 => "1010101000110001110111011100100000110111001001011001110101001000", 
    52 => "0011111111101010101111111001111010000101101001001001111101001010", 
    53 => "0001100001110111100111001111100100011110010001011001110011100101", 
    54 => "1001011000111100110010001010110110101000001001001100001010001101", 
    55 => "1101100000111011000001010000111001001100001010110100010000010010", 
    56 => "1000111011110000110111011010110111111111101000110001100110001000", 
    57 => "0111010101111111001000111001000010010111011010110111011010010101", 
    58 => "0000001011110000101101011000011111010100100010001010100100101011", 
    59 => "0001001000111000110001001100111000001000011000101100000001001010", 
    60 => "1100100101010100110100001100011101000100100101010001101000000010", 
    61 => "1111101010110111010001011111001100011100100001110001100001100010", 
    62 => "1110001100100101001100110010110011100001110111010000000001010011", 
    63 => "0100010011101001110111011010100000111111011001000111001111101000", 
    64 => "1011100101011010101001010000011000111011110001010000100100001100", 
    65 => "1111100010101000101111000011110101011110011110101011111101001000", 
    66 => "1100010100110011011100010001010011111111011001001011010111011100", 
    67 => "1111001100010111010110001010110101001000100011110110101010111010", 
    68 => "1100100001111100010100100010001111011000001111100110011010101011", 
    69 => "1000000001001110010110000110101011000110010110011111100100000101", 
    70 => "1101110011010111110001100101001001011001010000111111011110011110", 
    71 => "0101111000101110001000110011011011110011110010001010011100101011", 
    72 => "1000101000000001010010001000010001100010110110011100100111010100", 
    73 => "1100100110111001101110000000101000010011111100100001100001000010", 
    74 => "1011101100010011110110101001101010100100100111010101011101011111", 
    75 => "0011011100001110000000110010011011001111010101010010101101000101", 
    76 => "1101100111010000101010100100111101110101110011001001111001101100", 
    77 => "0001101100111010001100000010101011000000101010011100111100010101", 
    78 => "1101010101111101110110101011110000111000101010000100010000001000", 
    79 => "1100000111011000111100000110101110101100111101101000101001011010", 
    80 => "0000101000111011111001010010100100010000110000110010100111010000", 
    81 => "0110100011101000001111100000001100001010010101001011101111000110", 
    82 => "1001111010010011101101001110000100100110010011111110100001010111", 
    83 => "1000000110001111100110100001011110111000001001001111101001011000", 
    84 => "0110111000101001011101000010000011111010111010000100010000111110", 
    85 => "1000000001011101011100001110010100000011100011010100100101000001", 
    86 => "0100100010101110101001111010100010100011011011110010101011000000", 
    87 => "1001101101010110101100101111110001100010100110110001111000010001", 
    88 => "0110000100101011110000111100100001000011101001100000111111111001", 
    89 => "1011111101000001000101000000101010001111010001111111000001000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cBew is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cBew is
    component pg_conv3x3_tile_cBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cBew_rom_U :  component pg_conv3x3_tile_cBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


