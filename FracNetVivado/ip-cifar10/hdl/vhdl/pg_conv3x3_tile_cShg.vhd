-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cShg_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111100100000000000000000000000100000000000000000000000000000000", 
    1 => "1100001000000100000010000000000100000000000000000000000000000000", 
    2 => "1000000000000000100000000000001100000000000000000000000000000000", 
    3 => "0100100000000000000000000000001100000000000000000000000000000000", 
    4 => "0000000000000000000010000000000000000000000000000000000000000000", 
    5 => "0011111111111111111111011110011100000000000000000000000000000000", 
    6 => "1111000001000011000000000000000000000000000000000000000000000000", 
    7 => "1111100101100011000000000000000000000000000000000000000000000000", 
    8 => "1111000001100011000000000000000000000000000000000000000000000000", 
    9 => "0111001011110011000000000000000000000000000000000000000000000000", 
    10 => "0100010001110100000000000000000000000000000000000000000000000000", 
    11 => "0110100101010001000000000000000000000000000000000000000000000000", 
    12 => "0110010011010100000000000000000000000000000000000000000000000000", 
    13 => "0101100101000000000000000000000000000000000000000000000000000000", 
    14 => "1000101110101101000000000000000000000000000000000000000000000000", 
    15 => "0110011110101000000000000000000000000000000000000000000000000000", 
    16 => "1010001010001100000000000000000000000000000000000000000000000000", 
    17 => "1110100001010110000000000000000000000000000000000000000000000000", 
    18 => "1110011101010101000000000000000000000000000000000000000000000000", 
    19 => "0000001011001001000000000000000000000000000000000000000000000000", 
    20 => "1001000010000000000000000000000000000000000000000000000000000000", 
    21 => "1011110111010111000000000000000000000000000000000000000000000000", 
    22 => "1000101001100101110000101110011100000000000000000000000000000000", 
    23 => "0101101011001000011110000100110100000000000000000000000000000000", 
    24 => "1111110011111001111111001101000100000000000000000000000000000000", 
    25 => "0010010110111011011010001111010100000000000000000000000000000000", 
    26 => "1111001010110111001000001100011100000000000000000000000000000000", 
    27 => "0011011001000001000000100111101100000000000000000000000000000000", 
    28 => "0001010000111101000110101000111100000000000000000000000000000000", 
    29 => "1110111011100110111011011000010000000000000000000000000000000000", 
    30 => "1111110100111011110111011000010100000000000000000000000000000000", 
    31 => "0011110000010000101011100000110000000000000000000000000000000000", 
    32 => "1101100111010001001110100111000000000000000000000000000000000000", 
    33 => "1000100011111101110011001011010000000000000000000000000000000000", 
    34 => "0001001010101111001000111111011100000000000000000000000000000000", 
    35 => "0000000001000011001000100111000000000000000000000000000000000000", 
    36 => "1010110110011001000111001000100000000000000000000000000000000000", 
    37 => "0100100000100110011111101111101100000000000000000000000000000000", 
    38 => "0011110100001011000010000000101100000000000000000000000000000000", 
    39 => "1000001111001110000000110101100000000000000000000000000000000000", 
    40 => "1000111000101000001111000010100000000000000000000000000000000000", 
    41 => "0000110110100001100100010000101100000000000000000000000000000000", 
    42 => "1111010001011001011011010101000000000000000000000000000000000000", 
    43 => "0010011100100100100001111100010000000000000000000000000000000000", 
    44 => "0001100111010011011000101010010100000000000000000000000000000000", 
    45 => "1111110001001001010000001110001100000000000000000000000000000000", 
    46 => "0100000101000010010100000000000000000000000000000000000000000000", 
    47 => "1000000110101101001011101001101000000000000000000000000000000000", 
    48 => "1001100011010110000101100000010100000000000000000000000000000000", 
    49 => "0000001101110101011110001011101100000000000000000000000000000000", 
    50 => "0010101010011001010111010010100000001010011111010010111100000101", 
    51 => "0100011110110000100100110010111100001100111101000001101100000101", 
    52 => "0011001011111101110001111110011000111000111111110110001011000100", 
    53 => "1101010100001011000111100111010111110001000010000000011001110101", 
    54 => "1101110101011110000111101001000111010011000000100001111100110001", 
    55 => "0001001101011110000111110011100101000111000110100001110100111001", 
    56 => "0001110000110101010111100100100000001100001001010001110101000001", 
    57 => "0101110001011010011100101101001000011110110111100111110000010100", 
    58 => "1000110111010000001010101011011101110010110101010110010101100111", 
    59 => "1111000110100100011111010001001110111011100111001000010110111111", 
    60 => "0011011111000011000100100010101111111000100110110001111011101110", 
    61 => "0011110100110001100111001010101100010111111011010111001110001010", 
    62 => "0111000011100100010111111000001110101001001101001011110010100101", 
    63 => "1000000010100110010101000011100101100010011101100010001000001101", 
    64 => "0100110000111100100011101010010101001100101011011000101100001101", 
    65 => "0110110100010111101000100110101101001101111110000000010100111111", 
    66 => "1111001011000011110011101011001010110011011001011110010110100000", 
    67 => "1010101111111100110111000001111111011101110100111000110100001001", 
    68 => "1001101111011101101011110001001001100101010101001100100101010010", 
    69 => "0110110100011100100111010011101101110111101000000010111100001010", 
    70 => "0001100110111010101000110001010110000110110101000000101001110111", 
    71 => "1110010000101110000001011111011010100011101111101011100000110111", 
    72 => "0000000101001010111100101100110100100000010010001010001011011000", 
    73 => "0110110001000011000010100011111100011011000111101010010101110011", 
    74 => "0100001000001000000001111011011110000111011111100011000110000001", 
    75 => "1011000001111100101101000001011110001010110001101000010100100010", 
    76 => "0011000111000101000111110001011001101000001011001111101001101111", 
    77 => "1010011100010100100101101010010101100000010001001001110100000101", 
    78 => "0001001101000111001111010010000011001010000111110100000101111111", 
    79 => "1111000011011110110011100001001010101111000011001000110100110111", 
    80 => "0110011100001110101111101011011111101001101110000010111111110010", 
    81 => "0100101110000110001011001010011001101100100001101011110100001011", 
    82 => "1111101001111101111101101001011001100110110001001000011100101101", 
    83 => "1000101010101000110100100010110001110000100110011111000010001000", 
    84 => "1001001100010011011000001000011000000101011110111111101100111001", 
    85 => "0000111001111110010010010010011111011101101100000010110100001011", 
    86 => "0010010000011101001011110011101010011000101110011000111101011111", 
    87 => "0100001110001011100101011101110011000001100010100001000100001001", 
    88 => "1101001110000000111111001001101010011111011100011001100100101110", 
    89 => "0001101101011100110100000010111011110000111100111010010110101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cShg is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cShg is
    component pg_conv3x3_tile_cShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cShg_rom_U :  component pg_conv3x3_tile_cShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


