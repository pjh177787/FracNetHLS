-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbjl_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbjl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111110111111111111100000000000000000000000000000000", 
    1 => "0000001100100100000111100111101100000000000000000000000000000000", 
    2 => "0000010110101111110100010010001100000000000000000000000000000000", 
    3 => "0000000000000000000000000000000000000000000000000000000000000000", 
    4 => "0000000100010000000000001000011000000000000000000000000000000000", 
    5 => "0000110000010010000100100000010000000000000000000000000000000000", 
    6 => "1110110001111101000000000000000000000000000000000000000000000000", 
    7 => "1010101011011110000000000000000000000000000000000000000000000000", 
    8 => "0011101011110011000000000000000000000000000000000000000000000000", 
    9 => "0000011111101000000000000000000000000000000000000000000000000000", 
    10 => "0000110101100101000000000000000000000000000000000000000000000000", 
    11 => "0010001011101010000000000000000000000000000000000000000000000000", 
    12 => "0000001110000101000000000000000000000000000000000000000000000000", 
    13 => "0010011011101000000000000000000000000000000000000000000000000000", 
    14 => "0110001011011001000000000000000000000000000000000000000000000000", 
    15 => "1011011011110011000000000000000000000000000000000000000000000000", 
    16 => "0111000101010001000000000000000000000000000000000000000000000000", 
    17 => "0101101001110001000000000000000000000000000000000000000000000000", 
    18 => "0000010001111011000000000000000000000000000000000000000000000000", 
    19 => "1000010010111010000000000000000000000000000000000000000000000000", 
    20 => "1000011001110010000000000000000000000000000000000000000000000000", 
    21 => "0010010111110100000000000000000000000000000000000000000000000000", 
    22 => "1110011011100001100001101011011100000000000000000000000000000000", 
    23 => "1110101111000010111111011000011000000000000000000000000000000000", 
    24 => "1001001011000010111000111010001000000000000000000000000000000000", 
    25 => "0111000100011110001101110110101000000000000000000000000000000000", 
    26 => "1011010111011011001001010100101100000000000000000000000000000000", 
    27 => "0011100101101011001111110010000100000000000000000000000000000000", 
    28 => "0001100010001000000010101001010000000000000000000000000000000000", 
    29 => "0100001010000011001111001001100100000000000000000000000000000000", 
    30 => "1010011111001111001000110100011100000000000000000000000000000000", 
    31 => "1000111011011100001011101111110100000000000000000000000000000000", 
    32 => "0111100011100001101010001111000100000000000000000000000000000000", 
    33 => "0001001100111001111101110010010100000000000000000000000000000000", 
    34 => "0100100011100011001011100111011100000000000000000000000000000000", 
    35 => "0111110011010001001110000110100100000000000000000000000000000000", 
    36 => "1111100111100010101010010011101100000000000000000000000000000000", 
    37 => "0000001101110100001101000001000100000000000000000000000000000000", 
    38 => "0010000111000011000100010010101100000000000000000000000000000000", 
    39 => "0011010110001001001111101111001100000000000000000000000000000000", 
    40 => "0000111111100011000111011101101100000000000000000000000000000000", 
    41 => "1110010001010100001001001111010100000000000000000000000000000000", 
    42 => "1110101100010100011000000110110100000000000000000000000000000000", 
    43 => "0110100000110110111001101000010100000000000000000000000000000000", 
    44 => "0110100001001001000000101111100000000000000000000000000000000000", 
    45 => "0000101000001001000000100011111000000000000000000000000000000000", 
    46 => "1010011101111011100001011001100000000000000000000000000000000000", 
    47 => "0010010010011001010000011011000000000000000000000000000000000000", 
    48 => "0010101101100011100111100101101100000000000000000000000000000000", 
    49 => "0010010000000010000000001101000000000000000000000000000000000000", 
    50 => "1110010100010111010100100110010111101011001101000100011011101011", 
    51 => "0110100000110101110111101101100000001010001001011000101011111000", 
    52 => "0100000100110111011001111111010010010011001101111110110011101111", 
    53 => "0101001110000000101101001000011001000011000000001111110100100101", 
    54 => "0101001000010010111011110010100001000011011100111110111110101110", 
    55 => "1001011000100101010000100010110101110010111101001100000010111101", 
    56 => "0010001100111110001101100001001110100101000111110010111000011101", 
    57 => "0101110000011101011000101111010011011001000001010110011010010011", 
    58 => "1100101100111100100000011010100011001101101100011101101011111110", 
    59 => "1100101101111010001001100010010011011011010011100100101000111100", 
    60 => "0001111100111011101101111101101111010011011100111100101011011110", 
    61 => "1111001100001011101011110111011010101011010011110000111000011110", 
    62 => "0111100100011011101000001000101110101111100100011000000100100110", 
    63 => "1111000110001101001101110011010110100101100110001000011000101010", 
    64 => "1101100001000101010110111000101101001000000111011001111010010111", 
    65 => "0001011111011010001111110001000001011011000110101010110000011101", 
    66 => "0001000011100011111100001001010101100110100000101001001011010110", 
    67 => "0100000111001100110101011001010100011110101110101110011100111110", 
    68 => "1011101101110011001111010001110111011110011000100101100100110100", 
    69 => "0001111010011100101100000110101010110001011000011011010010101000", 
    70 => "1001001010111101110001001001010110011111000001101100111111111001", 
    71 => "0100010011000100010101011010010111001010101000000101000111100000", 
    72 => "1000001111100011110010001011000010110110101111001000011011111101", 
    73 => "0000100011111111100110100000110001001111110111100001101010101110", 
    74 => "1000001010000100010111001010001100011010000110100111100110001110", 
    75 => "0000011000010100001110100101010010011111000010010010101101011001", 
    76 => "0000100010001000010011010011011000000110101101011111010100100110", 
    77 => "0001010110001100011111000100011101000111101101101010010101000011", 
    78 => "1001001000101101010000110111001010101010100011100011100001000100", 
    79 => "1100100110111100001001000000101011010101011000100111111110001010", 
    80 => "1001110010001011100010100010111101101101000011111010010001000010", 
    81 => "1100101011011011111110010000010011011000011000001110011010110100", 
    82 => "1101111110000101100001011111110011001000000111010001100111001000", 
    83 => "1000101000011001001111010011011010011101011100001100011001111111", 
    84 => "1001111010010111111100100000111011010101110111010100000010101001", 
    85 => "0001111001110101011001000111001100000010101001111010100011111111", 
    86 => "1000010111000101111010111101011010100101111010011010100101001010", 
    87 => "0000010110010010110101010100001011000111001110100100101001100100", 
    88 => "0101001100111010111000010110010000001101011010111111101101011100", 
    89 => "1011011000011000110001000010111001101110100101000001111100101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbjl is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbjl is
    component pg_conv3x3_tile_cbjl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbjl_rom_U :  component pg_conv3x3_tile_cbjl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


