-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cxdS_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cxdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000000100000000000000000000000000000000", 
    1 => "0000000000000000000100000000000100000000000000000000000000000000", 
    2 => "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "0011111111111111111100101101011100000000000000000000000000000000", 
    4 to 5=> "0000000000000000000000000000000000000000000000000000000000000000", 
    6 => "0111011001001110000000000000000000000000000000000000000000000000", 
    7 => "1111010001110000000000000000000000000000000000000000000000000000", 
    8 => "1100010000101000000000000000000000000000000000000000000000000000", 
    9 => "1011101101101100000000000000000000000000000000000000000000000000", 
    10 => "0000001000100001000000000000000000000000000000000000000000000000", 
    11 => "0101111101111100000000000000000000000000000000000000000000000000", 
    12 => "1111000110010000000000000000000000000000000000000000000000000000", 
    13 => "1101110011010101000000000000000000000000000000000000000000000000", 
    14 => "1000101011101010000000000000000000000000000000000000000000000000", 
    15 => "1000001011011110000000000000000000000000000000000000000000000000", 
    16 => "0111111111101001000000000000000000000000000000000000000000000000", 
    17 => "1100100011100110000000000000000000000000000000000000000000000000", 
    18 => "0010010000100001000000000000000000000000000000000000000000000000", 
    19 => "1110100011100010000000000000000000000000000000000000000000000000", 
    20 => "1111000000100101000000000000000000000000000000000000000000000000", 
    21 => "0010001001001000000000000000000000000000000000000000000000000000", 
    22 => "1100000011000100010000001010000000000000000000000000000000000000", 
    23 => "1001111111111011110111111011101100000000000000000000000000000000", 
    24 => "1100001111101010110010101100101000000000000000000000000000000000", 
    25 => "1100101011001010110000011101000000000000000000000000000000000000", 
    26 => "0101110001110010110011000100101100000000000000000000000000000000", 
    27 => "0010000100110101001010000010000100000000000000000000000000000000", 
    28 => "1010101011100100110010101010010000000000000000000000000000000000", 
    29 => "0011110110101011000011111101101100000000000000000000000000000000", 
    30 => "1000110111011110100111010100001100000000000000000000000000000000", 
    31 => "0100001011101110111001010100111000000000000000000000000000000000", 
    32 => "0011110100111011001110110100111100000000000000000000000000000000", 
    33 => "0000011010001000100100101101000000000000000000000000000000000000", 
    34 => "0101000010001011000100101010001100000000000000000000000000000000", 
    35 => "0101001000100111001101101011001000000000000000000000000000000000", 
    36 => "0000000000110110010000100111011100000000000000000000000000000000", 
    37 => "1100001000000100110011111101010000000000000000000000000000000000", 
    38 => "1010011000001001001100001010000100000000000000000000000000000000", 
    39 => "1010111001011110011000010001010100000000000000000000000000000000", 
    40 => "0000000001010101000000101011010100000000000000000000000000000000", 
    41 => "0010111010001100010000100100000000000000000000000000000000000000", 
    42 => "1001110010011001000110100001111100000000000000000000000000000000", 
    43 => "0100110111101011111100011111101000000000000000000000000000000000", 
    44 => "1010101101110010111101101101110000000000000000000000000000000000", 
    45 => "0000010000101011110111011011110000000000000000000000000000000000", 
    46 => "1100000000110010110001001110011100000000000000000000000000000000", 
    47 => "1110010111101001011100011011100100000000000000000000000000000000", 
    48 => "1000100111101111111101010100010000000000000000000000000000000000", 
    49 => "1011000101000100111010000101000100000000000000000000000000000000", 
    50 => "0101010100000001000011111011000111110011100100010100011011101001", 
    51 => "1011000111001100000000001100101011101101100010000000000010010001", 
    52 => "0101000110110010000000110110111000010011010110010000011101100110", 
    53 => "1001010000100010100111110010110000010100000010001101110110001100", 
    54 => "0101011111010000110101010000011111000111110101100101100110100111", 
    55 => "1010000000001101011100000000000011110010000011100110011100010110", 
    56 => "0010110000010011111110100100100000001000110001001110101010101001", 
    57 => "0001011100001100011000011000011010010111000111100100011100000110", 
    58 => "1000010001111101110101100010011101101111011101001011110100110111", 
    59 => "1011000001011001100111111001111110100100100010111010001101011111", 
    60 => "1000001101111001011010000001110101110111011100100100100001011010", 
    61 => "1111011101111101001100111100011100010011000111100110110101000011", 
    62 => "0000001010100100110111101000110010011100001011011100100100001101", 
    63 => "1111000110001010101110000011100110111000110000001000001010110110", 
    64 => "1101010100011101110001000100111001001101100100010100110110101000", 
    65 => "1000010000100000010100100000010101011010001110100100011001011001", 
    66 => "0101000000001100010101110000110000001011010000000011110110101010", 
    67 => "0011110101001000010110011010110110000001000010011010110100110111", 
    68 => "0100001001110100010001100011001010011100001111101001101000111111", 
    69 => "1001011010001100110101010000010111000011100100111000100101000100", 
    70 => "1101001000101001111001000100001111011110111110111110001010011011", 
    71 => "1001110101000110100111101011000010001011010011110010100000101000", 
    72 => "0000011101001000110101010000010100000101001100001010000100011001", 
    73 => "1111000010101011001111111011011101100100101010100010101100010000", 
    74 => "1001101101100001011111010011001010011110110110100100011100111100", 
    75 => "1010010100000110110010101101100000010011011101011111101001001000", 
    76 => "1001011111010111100101100101111100000110010000111111111110011000", 
    77 => "1000100100011100111101010001100111101100001100111011100100010101", 
    78 => "0100010001101100111100101011111000101011101111101111101111101010", 
    79 => "0100001010011000101001010111010010111001011011110110110101111110", 
    80 => "0000011110110011011010111000010100011101011100101001100101111001", 
    81 => "0000010100000010000111111111111100001100010010000110101100000111", 
    82 => "0111001000001101011111001011010010000111010110001011101111111111", 
    83 => "0000101110101110001010111000011010001000110101101101001010011001", 
    84 => "1011110010011101011111111000001111100110111011101110010010011100", 
    85 => "0000001000011111111110011010111100011010101010000110100100110010", 
    86 => "0001001110100110110001000010110011110010011100111010101011001100", 
    87 => "0000011011101101001001110010011010111001011110000010100101010010", 
    88 => "1000010010101110100100010000000101101000100011110100011000101000", 
    89 => "0011001111100011011101010011111101001111110001100111010011011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cxdS is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cxdS is
    component pg_conv3x3_tile_cxdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cxdS_rom_U :  component pg_conv3x3_tile_cxdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


