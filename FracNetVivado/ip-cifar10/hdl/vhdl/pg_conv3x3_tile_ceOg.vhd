-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_ceOg_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_ceOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1100010101110000001001000110000100000000000000000000000000000000", 
    1 => "0000000000000000000000000000000100000000000000000000000000000000", 
    2 => "1110010000011111010001110000101100000000000000000000000000000000", 
    3 => "0000000000000000000000000000000000000000000000000000000000000000", 
    4 => "0000000000000000100000010000000000000000000000000000000000000000", 
    5 => "0000001000001000011000100100111100000000000000000000000000000000", 
    6 => "0100011010101101000000000000000000000000000000000000000000000000", 
    7 => "0011111001110001000000000000000000000000000000000000000000000000", 
    8 => "0101111001000011000000000000000000000000000000000000000000000000", 
    9 => "0010111001010010000000000000000000000000000000000000000000000000", 
    10 => "1100000100010000000000000000000000000000000000000000000000000000", 
    11 => "0011011000010100000000000000000000000000000000000000000000000000", 
    12 => "0001000010100110000000000000000000000000000000000000000000000000", 
    13 => "0010011000110100000000000000000000000000000000000000000000000000", 
    14 => "0110001010011101000000000000000000000000000000000000000000000000", 
    15 => "0010011001110111000000000000000000000000000000000000000000000000", 
    16 => "0001101110001111000000000000000000000000000000000000000000000000", 
    17 => "1101100011101001000000000000000000000000000000000000000000000000", 
    18 => "1000011101100010000000000000000000000000000000000000000000000000", 
    19 => "0011100011011000000000000000000000000000000000000000000000000000", 
    20 => "1011111000000011000000000000000000000000000000000000000000000000", 
    21 => "0110001000000100000000000000000000000000000000000000000000000000", 
    22 => "0000011100111011101101110001001000000000000000000000000000000000", 
    23 => "0011101110011011000111101000101100000000000000000000000000000000", 
    24 => "1100001010101000100011101011111000000000000000000000000000000000", 
    25 => "1100010001110000010001011110011100000000000000000000000000000000", 
    26 => "0011000010110110001100110010001100000000000000000000000000000000", 
    27 => "0011000100010101101000111010110100000000000000000000000000000000", 
    28 => "0010011000000110001001110000100000000000000000000000000000000000", 
    29 => "0110011000011100011001001101000100000000000000000000000000000000", 
    30 => "0111101011100001111010001100010000000000000000000000000000000000", 
    31 => "0011000000000000000001000000001000000000000000000000000000000000", 
    32 => "1111110101110010000011010100101000000000000000000000000000000000", 
    33 => "1010100001001000010000001100011000000000000000000000000000000000", 
    34 => "0101110000011100000111101011101100000000000000000000000000000000", 
    35 => "0001110111011000100110000111001000000000000000000000000000000000", 
    36 => "0001000000000000000100100000011100000000000000000000000000000000", 
    37 => "0100001000100101010001011001001100000000000000000000000000000000", 
    38 => "1011011100100010110001010000111100000000000000000000000000000000", 
    39 => "0010010111011010101100100010011000000000000000000000000000000000", 
    40 => "0010111110011001111111000110001000000000000000000000000000000000", 
    41 => "1000010101001001110000010100011000000000000000000000000000000000", 
    42 => "1101010001110100000010100010011100000000000000000000000000000000", 
    43 => "0100111110001010110100010000110100000000000000000000000000000000", 
    44 => "1111010110001001111000111111011000000000000000000000000000000000", 
    45 => "1010010110001111010111110000101000000000000000000000000000000000", 
    46 => "1100110001101100110100000010000000000000000000000000000000000000", 
    47 => "0111100111010001100001000100001100000000000000000000000000000000", 
    48 => "1101000001111000001010101011101000000000000000000000000000000000", 
    49 => "1100100101000001110100000010101000000000000000000000000000000000", 
    50 => "0010001110010010110100111000101111000110100111111101101000000100", 
    51 => "1010000000101110001000111111100110010010011101010110001010111011", 
    52 => "1001101111010101010110000100011100101000101111011011101111100011", 
    53 => "1111111111101000100101010011101011110111100000101000100100000110", 
    54 => "0100111110111000000111111101111101000110001100110000111101101001", 
    55 => "0000001011001000100000001011000010010010101010010000000010110010", 
    56 => "1100010100001101100100111111111110010101000011100100011010110110", 
    57 => "1001100011100010110000010000101010011101110000011000110010110110", 
    58 => "0010000111101010111110001001101010111110100001100111111101100000", 
    59 => "1010100110110001101110000111111101100001011001011110011001111111", 
    60 => "1100100100110101100011100110101101000101101111010011110101101001", 
    61 => "1100010001110001110111100000011111101110101000001101011000001010", 
    62 => "0011000010111001111010010100011010000101110000111110110011100010", 
    63 => "0101110011011100001111110100000100000101111011000011000110111000", 
    64 => "1010001110101010101000101000010000110111000011111011001100110001", 
    65 => "1000001101000000010101000000111101001111011001010001000000001000", 
    66 => "1010011110010001111011010001110000010101011000011001000101001010", 
    67 => "0101010111011010111011100000010110100101111000100000100000000010", 
    68 => "1100111001101100100100010001001001111011111111100101001010000111", 
    69 => "0100010011001110010100111000011010011000110011100110000001000100", 
    70 => "1000011100110110000001111100100111011110000100101000101101011011", 
    71 => "0010011100100110001111000011000001011111101110100101111111010101", 
    72 => "0010101010001001111001110110000011001110011111100100010100100101", 
    73 => "0000100101111111001010000100000101001110101001000110101001101101", 
    74 => "1100110011110110100111100101001010001011011011100010010010110111", 
    75 => "1001101111101101110001011010111000011110000101100111010101001111", 
    76 => "1010011001000110000010011110011011010010001011010011001110110000", 
    77 => "0111111101011011011001011001111001010011100100000100111101101110", 
    78 => "0001011000001111001010010001010100100100100010011110010101001010", 
    79 => "0011011011010100010001110000011111100101001001010101001110110011", 
    80 => "1100110001101100111001010011001001010110101011111010101100000000", 
    81 => "0001101111111001011011000000111110001100111100100001000010100111", 
    82 => "0101001001000011111011110100001110100011111011100111111111000100", 
    83 => "0010001000010010010001110001100101110101001101110110010001001101", 
    84 => "0011110110010111010001110010100110010011100011111110111000101000", 
    85 => "1011110001011011000010001011010100100001100101111010111101000101", 
    86 => "0010000000111110110001110010101111011011101110111001001001011000", 
    87 => "0011011000011010101010110010101011100000100100000100000111001011", 
    88 => "1010110011000110010010100100010001000011011110011011100100001000", 
    89 => "1011100011101000100000111111011110010111110010001000100001111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_ceOg is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_ceOg is
    component pg_conv3x3_tile_ceOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_ceOg_rom_U :  component pg_conv3x3_tile_ceOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


