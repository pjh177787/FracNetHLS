-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c7jG_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c7jG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0011111111111111111111111111111100000000000000000000000000000000", 
    1 to 2=> "0111111111111111111111111111111100000000000000000000000000000000", 
    3 => "1111000000100100000101100110010000000000000000000000000000000000", 
    4 => "1111111111111111111111111111111100000000000000000000000000000000", 
    5 => "1111101111111111101110111111111100000000000000000000000000000000", 
    6 => "0010101110101010000000000000000000000000000000000000000000000000", 
    7 => "0011010001010011000000000000000000000000000000000000000000000000", 
    8 => "1000100110001010000000000000000000000000000000000000000000000000", 
    9 => "1111011011111011000000000000000000000000000000000000000000000000", 
    10 => "0001110010001100000000000000000000000000000000000000000000000000", 
    11 => "1101110001011111000000000000000000000000000000000000000000000000", 
    12 => "1101001110001010000000000000000000000000000000000000000000000000", 
    13 => "1111110001111010000000000000000000000000000000000000000000000000", 
    14 => "1100110111001100000000000000000000000000000000000000000000000000", 
    15 => "1001110001010000000000000000000000000000000000000000000000000000", 
    16 => "0010000001010000000000000000000000000000000000000000000000000000", 
    17 => "1000001110001100000000000000000000000000000000000000000000000000", 
    18 => "1111101111000011000000000000000000000000000000000000000000000000", 
    19 => "0101001100011001000000000000000000000000000000000000000000000000", 
    20 => "0000010001101000000000000000000000000000000000000000000000000000", 
    21 => "1000000000100000000000000000000000000000000000000000000000000000", 
    22 => "0011110010010110011110101100001000000000000000000000000000000000", 
    23 => "0011011000111101000001111010001000000000000000000000000000000000", 
    24 => "0001000000110100001001000110010100000000000000000000000000000000", 
    25 => "1000001101001110000001010000010100000000000000000000000000000000", 
    26 => "1101110100111101110101010111110100000000000000000000000000000000", 
    27 => "1101001001001100011000111100111100000000000000000000000000000000", 
    28 => "0101000011000100010000000101011100000000000000000000000000000000", 
    29 => "1001100010000001100111100001010000000000000000000000000000000000", 
    30 => "0001100101110111100111010111111000000000000000000000000000000000", 
    31 => "1100000011010101011001101011010000000000000000000000000000000000", 
    32 => "0001010100011010000100000101001000000000000000000000000000000000", 
    33 => "0000100000001100101111000001000100000000000000000000000000000000", 
    34 => "1011101011011111001101000101100000000000000000000000000000000000", 
    35 => "0110111111011001100101010001101100000000000000000000000000000000", 
    36 => "1000100001000000100100000000011100000000000000000000000000000000", 
    37 => "0001110101010011100110110010000000000000000000000000000000000000", 
    38 => "0111100111010101100111110101111100000000000000000000000000000000", 
    39 => "0011110000101110010111101100110100000000000000000000000000000000", 
    40 => "1011011111010001000010001110100100000000000000000000000000000000", 
    41 => "1010000001011100100000101000000100000000000000000000000000000000", 
    42 => "0000101100111011100110010010100000000000000000000000000000000000", 
    43 => "0110000001011001001000011101000000000000000000000000000000000000", 
    44 => "0001000101111010011000000001110100000000000000000000000000000000", 
    45 => "0001000111110011101101010100101100000000000000000000000000000000", 
    46 => "1101111001010100110101110100100100000000000000000000000000000000", 
    47 => "1101101000110010010000001111110100000000000000000000000000000000", 
    48 => "0010000010000001001110101111001100000000000000000000000000000000", 
    49 => "0110001000100000011000011111000000000000000000000000000000000000", 
    50 => "0111110000110100011010110100100011010000011100000010100111100100", 
    51 => "0010101011100000011100100011000111000011110111100100101000100101", 
    52 => "1000011100110100011111000001000010010101001111010101110100010000", 
    53 => "1000000001100000011111100111000110010000001101010110010101110101", 
    54 => "0110110100011110000000101111010011111000111110110100001010111001", 
    55 => "1011000001001101000100111110011110000011000011010000101011000001", 
    56 => "0000001110111011000001010111100011000001000010010000000110010000", 
    57 => "1000101001111010100001001011011010001010011011110001101100111100", 
    58 => "1001000100001111010010110000111010000101000101110001100111000100", 
    59 => "0000101011101000010111010010100000000000010001001111001101100000", 
    60 => "1000111001100100110101010000010010011011010001101010000100000010", 
    61 => "0001010000111011001111110000111100001000011101110001101000001101", 
    62 => "1100110011110010111101000110011011111100111100001101000011110101", 
    63 => "1010101001110010011111111001100000011010111101011001100100011001", 
    64 => "1110000001001000011100010101001110000001110010001100010010011011", 
    65 => "1001011001011110010111100000010101011100110101101101100100100101", 
    66 => "0011110001010101010001011010011100001100010001000111101010100111", 
    67 => "0111101100011001100001010000010011110101001100010001010000011000", 
    68 => "1000110101101010000100011101010000010101000110101100000101011000", 
    69 => "1011111010010101100111000101010111001010101111101010100000010111", 
    70 => "1001011100001000010101010010010110001001110101001110000001000100", 
    71 => "1100110001101110011101001011111101101111110011101100110000001010", 
    72 => "1001111100011101101111101111010011111111011101011000100000101100", 
    73 => "0111001000110101110110001000101110001000101101000011001100111001", 
    74 => "0101100011110001110001011011011001111000001010001000010000100100", 
    75 => "0110010111100101011100000011100101110100011001100111001001101001", 
    76 => "1010100010000010000000000011000101101110000101011010000111100000", 
    77 => "1001101110000001011011111000010010101000001100111110110100011100", 
    78 => "0000101001010001111001110100110100011000100010000111001101111110", 
    79 => "0100110001110101100101010001011000100001101000110101111101001111", 
    80 => "0010001010011011000011000111000010100011110011111011000000010000", 
    81 => "0100110011010011010101101100110000001000110011000000110010001100", 
    82 => "0000011011010010100001010111011110100011001010010000000101010110", 
    83 => "1010110010100100110111010011111011110101111111001101110100101100", 
    84 => "0000010111100101110101001111011010100100001011111111111010011111", 
    85 => "0101011101010101000011000001111011001001111101000111100101101111", 
    86 => "0000100010100000110000000100100000101101101000001100010000100101", 
    87 => "1000001110010000011101001011101010010110011101111101010101101000", 
    88 => "1000011100010101101011011111010010100111101010111111100101100100", 
    89 => "0101011001010101001111010011110110011001011110000010101101011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c7jG is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c7jG is
    component pg_conv3x3_tile_c7jG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c7jG_rom_U :  component pg_conv3x3_tile_c7jG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


