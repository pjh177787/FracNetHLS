-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cyd2_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cyd2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001101001111110001001100100000000000000000000000000000000", 
    1 => "0010111011111001001101101010111100000000000000000000000000000000", 
    2 => "0011111111111111001111111111111100000000000000000000000000000000", 
    3 => "0111111111111111111111111111111100000000000000000000000000000000", 
    4 => "0001001111101111111111111111111100000000000000000000000000000000", 
    5 => "0000000001000000000000000111000000000000000000000000000000000000", 
    6 => "1101111011011110000000000000000000000000000000000000000000000000", 
    7 => "0010110011001000000000000000000000000000000000000000000000000000", 
    8 => "1001111010001010000000000000000000000000000000000000000000000000", 
    9 => "1100110101001101000000000000000000000000000000000000000000000000", 
    10 => "1000011101101000000000000000000000000000000000000000000000000000", 
    11 => "0100110001101000000000000000000000000000000000000000000000000000", 
    12 => "1001001110110100000000000000000000000000000000000000000000000000", 
    13 => "1000111100000000000000000000000000000000000000000000000000000000", 
    14 => "1000001011001010000000000000000000000000000000000000000000000000", 
    15 => "1000101010101110000000000000000000000000000000000000000000000000", 
    16 => "1111111101110001000000000000000000000000000000000000000000000000", 
    17 => "1100000111100011000000000000000000000000000000000000000000000000", 
    18 => "0010010010001001000000000000000000000000000000000000000000000000", 
    19 => "0111100101011001000000000000000000000000000000000000000000000000", 
    20 => "1111001000110101000000000000000000000000000000000000000000000000", 
    21 => "0010001000000000000000000000000000000000000000000000000000000000", 
    22 => "1110000010000101110000101010000000000000000000000000000000000000", 
    23 => "0001110011111011110010100111101000000000000000000000000000000000", 
    24 => "1111001111110010000010110100101000000000000000000000000000000000", 
    25 => "1100111011100110010001011101011000000000000000000000000000000000", 
    26 => "0110111111100001111011000000100000000000000000000000000000000000", 
    27 => "0110101100100111101111010011110100000000000000000000000000000000", 
    28 => "0110011101001110011001110001011100000000000000000000000000000000", 
    29 => "0001010010111111000010111110101100000000000000000000000000000000", 
    30 => "1010000101110011000011010010011100000000000000000000000000000000", 
    31 => "0110001011011110110001010101100100000000000000000000000000000000", 
    32 => "1110111111111001101111001100100100000000000000000000000000000000", 
    33 => "1000011000001010100111011011011000000000000000000000000000000000", 
    34 => "0101001111101101101110111110111000000000000000000000000000000000", 
    35 => "0000001000011111001100100111111100000000000000000000000000000000", 
    36 => "1101001000001101000011110101011100000000000000000000000000000000", 
    37 => "1101101010011110010000101110010000000000000000000000000000000000", 
    38 => "1101011100001101100000011010010100000000000000000000000000000000", 
    39 => "1000111100010111011110010001100100000000000000000000000000000000", 
    40 => "0001000011011110111010101001110100000000000000000000000000000000", 
    41 => "1100101001001100010000101000010000000000000000000000000000000000", 
    42 => "1001101011010001000110100100110000000000000000000000000000000000", 
    43 => "0100010110100111101110011110101000000000000000000000000000000000", 
    44 => "1011101111110010110101101000111000000000000000000000000000000000", 
    45 => "0000011100101101110111111011101000000000000000000000000000000000", 
    46 => "1111100000101010011001001100010100000000000000000000000000000000", 
    47 => "1100010001001001001010011101000100000000000000000000000000000000", 
    48 => "0000000111001111010000000110010000000000000000000000000000000000", 
    49 => "1011100101000100111011000101000100000000000000000000000000000000", 
    50 => "1111110000101100110011011011110111111010011011000100001111111101", 
    51 => "1010100100100001000111001101111101101001101001010000010100111011", 
    52 => "0101010111110010100100110101111000100101110001001010000101000010", 
    53 => "0001001101101100110001111111111000000100000011011001110110110100", 
    54 => "0100110000101110110101011000011101111101001101100101011110000111", 
    55 => "1011000111011010101101010100011010111101000000101011011001000111", 
    56 => "0000111111110110110111010000110000000101101000001001110101001000", 
    57 => "0110010100111110011100110000011000011111000110100111011100000110", 
    58 => "1000000010110100111001111010011011010100101100001010010100110110", 
    59 => "1011010010001001100111001001110100001001101000101000101001001010", 
    60 => "1100000011010001110101100000011111100111110100010101110111001010", 
    61 => "1101111100010111001000010100001011000110001110000000111000100010", 
    62 => "1010101001000011000110100010110010001010100011010110100001010000", 
    63 => "0100010011101101011111011011110000110101101001000111011110101000", 
    64 => "1111000011011011001000110100101011110100000100010110001100111100", 
    65 => "1110000011101100011001100010010100011110001111100100111000000001", 
    66 => "0000001011000011010100010001011000001110010001100001011011001010", 
    67 => "1111010100000001000110100110011111000010010111010000101000100100", 
    68 => "1101001011111101010011100011001110111100100111111000101011011101", 
    69 => "0001111111000110010001000011010111011110001111001101110000110100", 
    70 => "0101000011111011100011100100110100011101011110110010000001011010", 
    71 => "1101111101001110111111100111001011000011100011100110010001100101", 
    72 => "1000101101110001110111011110010100001100001111011010000101010000", 
    73 => "1011000111111011100100001010111100110100111010111000100001101001", 
    74 => "1011001000110000010001110011111000000110010010000111001110010111", 
    75 => "1000011100001110110100100001001010010111011111111110001001001001", 
    76 => "1000101111011001101111001100010000100110010000011011101110011000", 
    77 => "0001100101111010111100011010100011010010001111011101101101110100", 
    78 => "0100010111110111110111101011110101010010001111001110100011101000", 
    79 => "0100000011110001111101001100010000101101011011101010001111011110", 
    80 => "0100110001101111001101110010010010011110010110100110000101010000", 
    81 => "0101110010001100100111111111001001001010101111001000111101000110", 
    82 => "1011011010010001101101011101010111111000010110001011000001010010", 
    83 => "0000100110000010101110111000011010001000011111101110101010011011", 
    84 => "0010101000101101011111111011000011000010001010011010001001011110", 
    85 => "0001000000111111111110001100110101111110001011100011100100000010", 
    86 => "0001101110101110101101000010110110001000111011111100101011000000", 
    87 => "0000111000001101001111100011010110111010011101100110000001010101", 
    88 => "1101110110101111101000011100000001101001100011110000011000011101", 
    89 => "0011000010100011011101010011111101001110011101100011000011110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cyd2 is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cyd2 is
    component pg_conv3x3_tile_cyd2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cyd2_rom_U :  component pg_conv3x3_tile_cyd2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


