-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cdEe_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cdEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111101111111111111111111100000000000000000000000000000000", 
    1 => "1111111111101010110111101101111100000000000000000000000000000000", 
    2 => "1111111111110110100110111001111100000000000000000000000000000000", 
    3 => "0110111111111111111111111111111100000000000000000000000000000000", 
    4 => "0111100010100101000010100010011100000000000000000000000000000000", 
    5 => "0111011001000110101100111000000100000000000000000000000000000000", 
    6 => "0000000101100001000000000000000000000000000000000000000000000000", 
    7 => "1111110001111001000000000000000000000000000000000000000000000000", 
    8 => "0101011010000111000000000000000000000000000000000000000000000000", 
    9 => "1101000001011001000000000000000000000000000000000000000000000000", 
    10 => "0011000010010010000000000000000000000000000000000000000000000000", 
    11 => "1000101010010101000000000000000000000000000000000000000000000000", 
    12 => "0000101110010101000000000000000000000000000000000000000000000000", 
    13 => "0000101001101111000000000000000000000000000000000000000000000000", 
    14 => "0000111010001110000000000000000000000000000000000000000000000000", 
    15 => "0010011011000000000000000000000000000000000000000000000000000000", 
    16 => "0001100101100001000000000000000000000000000000000000000000000000", 
    17 => "1001101011100100000000000000000000000000000000000000000000000000", 
    18 => "1110011111111011000000000000000000000000000000000000000000000000", 
    19 => "0111110111011010000000000000000000000000000000000000000000000000", 
    20 => "1111100001000001000000000000000000000000000000000000000000000000", 
    21 => "0110101010000101000000000000000000000000000000000000000000000000", 
    22 => "0000100010000000001011101100010100000000000000000000000000000000", 
    23 => "1100001011100101110000101110010100000000000000000000000000000000", 
    24 => "1001100001110001110100001000011100000000000000000000000000000000", 
    25 => "1001100011110001100110011110111100000000000000000000000000000000", 
    26 => "0001110011101110111010110101110100000000000000000000000000000000", 
    27 => "1100101111101010111011010111001000000000000000000000000000000000", 
    28 => "0010111010110001100011101010110100000000000000000000000000000000", 
    29 => "0101011010110011010000110100111100000000000000000000000000000000", 
    30 => "0000110111101111100011000101000100000000000000000000000000000000", 
    31 => "0110111100110101111011101001110100000000000000000000000000000000", 
    32 => "1011111101000101011001100001010100000000000000000000000000000000", 
    33 => "1011110111001110100010111001111100000000000000000000000000000000", 
    34 => "1010111011000100111000010111011100000000000000000000000000000000", 
    35 => "0101000001001001110001000000010100000000000000000000000000000000", 
    36 => "0011001100110110111000110000110000000000000000000000000000000000", 
    37 => "1101001010010001001101011000111100000000000000000000000000000000", 
    38 => "1001111100010011000101101011101000000000000000000000000000000000", 
    39 => "0000010010100001010111101100100100000000000000000000000000000000", 
    40 => "0010110111110011110111010000010000000000000000000000000000000000", 
    41 => "1001101011110100110111010100000100000000000000000000000000000000", 
    42 => "1000000001100100111010001110011100000000000000000000000000000000", 
    43 => "0100111011110011010110001100100100000000000000000000000000000000", 
    44 => "0100110001011110111000011010010000000000000000000000000000000000", 
    45 => "1011001110010111110110111100101100000000000000000000000000000000", 
    46 => "1010110111110101100010000010000100000000000000000000000000000000", 
    47 => "0111000011010000100111000100101000000000000000000000000000000000", 
    48 => "0111000001101111101011101110101100000000000000000000000000000000", 
    49 => "1100000100000001101100010000000100000000000000000000000000000000", 
    50 => "0010000010001000010100100111010101100010001111110110001000000101", 
    51 => "1101001100101110100100011000111101010111001001100001000110000101", 
    52 => "1111101111010000110011011011111000110110000000011011110101000000", 
    53 => "0001010100011011000011110011011110010001010100010011011010111111", 
    54 => "1011011111010000110101011111011010010110000000101001010101100100", 
    55 => "1110000001100100100100100100001011010000000100000100011010101011", 
    56 => "1111001100100111001100101011000111010011001101110001001010111111", 
    57 => "0011101101110110100110111001100000010010100000111001100101110101", 
    58 => "0111110110011111101100100100100001111000100000100101001011011110", 
    59 => "0101010010010001010010001100110001101100110110101001110011000001", 
    60 => "0011100000011011000110001101101101001010010000010000100001000110", 
    61 => "1110010101101010011110110110101000111001011010100110000000110110", 
    62 => "1100111000100011010011001111100011111101001100111100101001011110", 
    63 => "1111101011101011011011101000100100011010110001011010100000011100", 
    64 => "1001101110010011010000000000100101101111010001111011100101001001", 
    65 => "0110010101000101001110100111011000100100101110110100101001110010", 
    66 => "1000000011011111100010011001110101001001010101010101110010111010", 
    67 => "0100100110111001100110011101011100110100001000110100100001011101", 
    68 => "0001010011100110111000100001100001000010010001100001110001000000", 
    69 => "1001010100011111100000010111011001110101000010111001100101001111", 
    70 => "1110111011110110001101011110001010001101011110100101000101101110", 
    71 => "1010100110110111101001001111101101100011101101110110001001111001", 
    72 => "1011111100010110011100000001000111111011100111110101001000010011", 
    73 => "0000110101010110010101100111001111010110100111100010111001100010", 
    74 => "0001111110100110101101100000000101000100101011001001111111100111", 
    75 => "0011000001101000011101001001111100110010111000000011011010100110", 
    76 => "1010001100000110101000100011100111011110011010011010111101001011", 
    77 => "1000001111000010010000101100000011000111000000101011010110101001", 
    78 => "1100101010110010100111101100100010110010100001110000100011010111", 
    79 => "1100000101100010011110111000000110001100001010110101001010010100", 
    80 => "0110001001000100101001011001001010111100001011100110101111011110", 
    81 => "1011001000110000011000101010010111111010100000010010011000100110", 
    82 => "1111110100110001101001010110101100011111000010111000111100110010", 
    83 => "1001000000110101100001111101010111100100000101100011100011100000", 
    84 => "1101000111000001101100100101100111001100101101011101100010001010", 
    85 => "0001110110010011111001000000000110000100000110110000101010110101", 
    86 => "0101001001110000010011011011010011011011111101001000000011101100", 
    87 => "0111100001110001000100111011010100011010100011000011100100010100", 
    88 => "1001100101101101010000100000101001110101101011010001111000100011", 
    89 => "0000101101111000000000010111100011000100010000110010101111001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cdEe is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cdEe is
    component pg_conv3x3_tile_cdEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cdEe_rom_U :  component pg_conv3x3_tile_cdEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


