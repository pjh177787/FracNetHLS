-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cvdy_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cvdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1001001101110001100010101000000100000000000000000000000000000000", 
    1 => "0010100001000000100000101010011100000000000000000000000000000000", 
    2 => "0100111100111001011101000000001100000000000000000000000000000000", 
    3 => "0011111011111110001011010011111100000000000000000000000000000000", 
    4 => "0000010000011011000011111110010100000000000000000000000000000000", 
    5 => "0000000000001010010000000001000000000000000000000000000000000000", 
    6 => "1000111100001100000000000000000000000000000000000000000000000000", 
    7 => "1110100101000100000000000000000000000000000000000000000000000000", 
    8 => "1000011000011110000000000000000000000000000000000000000000000000", 
    9 => "0100110100000100000000000000000000000000000000000000000000000000", 
    10 => "0010011010110000000000000000000000000000000000000000000000000000", 
    11 => "1100110100100100000000000000000000000000000000000000000000000000", 
    12 => "1101001100000100000000000000000000000000000000000000000000000000", 
    13 => "1100010100000001000000000000000000000000000000000000000000000000", 
    14 => "0010111100101101000000000000000000000000000000000000000000000000", 
    15 => "1010101100110001000000000000000000000000000000000000000000000000", 
    16 => "1111100101100001000000000000000000000000000000000000000000000000", 
    17 => "1000001010111100000000000000000000000000000000000000000000000000", 
    18 => "0010111010001001000000000000000000000000000000000000000000000000", 
    19 => "1100000111101001000000000000000000000000000000000000000000000000", 
    20 => "1110001100011101000000000000000000000000000000000000000000000000", 
    21 => "0110001001001000000000000000000000000000000000000000000000000000", 
    22 => "1100100000001101100010110110001100000000000000000000000000000000", 
    23 => "0011010000001001000000011011100100000000000000000000000000000000", 
    24 => "0100100100100111111110010100111100000000000000000000000000000000", 
    25 => "0100101001000110110001101111011100000000000000000000000000000000", 
    26 => "0011101011001001000110000100100100000000000000000000000000000000", 
    27 => "0011010100110100000010101100111100000000000000000000000000000000", 
    28 => "1101011001010110111001110100011000000000000000000000000000000000", 
    29 => "1000000000111110100000010011011100000000000000000000000000000000", 
    30 => "0011010011010000010111100101100100000000000000000000000000000000", 
    31 => "0101100101101011110110000110001100000000000000000000000000000000", 
    32 => "1011110100011000110110000100100100000000000000000000000000000000", 
    33 => "1000001010101100111011001101011000000000000000000000000000000000", 
    34 => "0111000100001011100110111111001000000000000000000000000000000000", 
    35 => "0010000000000111111001010100011100000000000000000000000000000000", 
    36 => "0101001000111111011101110011011000000000000000000000000000000000", 
    37 => "1000001010110000010000100110110000000000000000000000000000000000", 
    38 => "1101111110110111110000111110010000000000000000000000000000000000", 
    39 => "0111110011110100110011000100100000000000000000000000000000000000", 
    40 => "0011111001111010101110111011000000000000000000000000000000000000", 
    41 => "0111101011011110010000101011010100000000000000000000000000000000", 
    42 => "1111101011011000000110101001111000000000000000000000000000000000", 
    43 => "0100010111100101001110110111101100000000000000000000000000000000", 
    44 => "0011101011110010111101100010011000000000000000000000000000000000", 
    45 => "1010001000111111010101101011101000000000000000000000000000000000", 
    46 => "1110110101010010011101010100011000000000000000000000000000000000", 
    47 => "0000010000100111011000010100100100000000000000000000000000000000", 
    48 => "0100010111101101011001000111010100000000000000000000000000000000", 
    49 => "1111100001110100111011000111000100000000000000000000000000000000", 
    50 => "1101101011101101110011011110110011111111011001000101010110100110", 
    51 => "0111110101100011001010001101000111101000000001000000011000111011", 
    52 => "0110111110010010100010001100110001100101100111010000100101100011", 
    53 => "1010001011101101110000110111001010100111011111110001000111011110", 
    54 => "1000001110100000010101010010101101000011100101100101000100101011", 
    55 => "1011010111101110100101110000111011110101010000000101111000011011", 
    56 => "0000101110100110110101010000101101001111101101100001110101001000", 
    57 => "0100010111101010001000111101001000011011000110111110011000011111", 
    58 => "0100100000110100111001101010101110000000101011000000010111000010", 
    59 => "0111010111001001101111010111111010000101101010100010011100100010", 
    60 => "0111110001011110111100100000101000111111111011101100010001001010", 
    61 => "1111110010010110111100000101011011100100111110000100011010110000", 
    62 => "0011110001011011100111010001011100000010000011010111001101100000", 
    63 => "0000011100101110010010111000100001111101101111110101011111000001", 
    64 => "0100000111001111011001110010111001000100000110101011011110000100", 
    65 => "1111001011100100010100101010001101011001111011100100001000011010", 
    66 => "0000001001010001101010010011010000100100011100000011111001001110", 
    67 => "1011101011000001100110101001000011001011110111011100010000110001", 
    68 => "1110100011110110101111001000001010100101111011011100100101110000", 
    69 => "0011110111011001010011000110000101111001101011011111110101010011", 
    70 => "0000100011011111010011010110110010100010001101010110000101011111", 
    71 => "1101110100101010001111100011000010001011100111000110001000100101", 
    72 => "0000111001110101110001011100011000100100101111100011001111010000", 
    73 => "1011000100010011010101101010110111100101101110110010110000101000", 
    74 => "1011001001100101100010110010011001100011000010000010100111110111", 
    75 => "1100010101010111010110101001100100001110110001010011001000000001", 
    76 => "1010001110001011000111111111010000100110011010010010001111001001", 
    77 => "0011100111110001011100110110100111001001011011100010100101010000", 
    78 => "1000110101010001110100111010000111001010001111011110001111010000", 
    79 => "0000000111010001101101110110011100011111001100001100001111101110", 
    80 => "0110110010110001110101110010010000001000110000000110000110011000", 
    81 => "0011111000111000110011011011001000011011011011010010110101000110", 
    82 => "0010001000010000110101011110110111011000111110010011010101010010", 
    83 => "0000101110110011000001111010011011001010110010110110101011010111", 
    84 => "0001100100111001001111111011001111100011010010010010111011110000", 
    85 => "0101011001100011011110001101110010101001111010100011001100100010", 
    86 => "0101001101100111101101010111110110111010001010011000101001000011", 
    87 => "0010101010010001010001110111010000011010011111010110010011010100", 
    88 => "0011111111101011110110111101111110101000000010110000011101010101", 
    89 => "1001110011000100001001110111011100010110100010100010110101111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cvdy is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cvdy is
    component pg_conv3x3_tile_cvdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cvdy_rom_U :  component pg_conv3x3_tile_cvdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


