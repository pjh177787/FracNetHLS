-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cwdI_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cwdI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0100101010010000000000100011001100000000000000000000000000000000", 
    1 => "0010100000000001100100000110010100000000000000000000000000000000", 
    2 => "0000000000011000010000000000010100000000000000000000000000000000", 
    3 => "0011111111111111111111111111111100000000000000000000000000000000", 
    4 => "0000000000000001011100111011111000000000000000000000000000000000", 
    5 => "1001111111111010011111111111110000000000000000000000000000000000", 
    6 => "0100011011000111000000000000000000000000000000000000000000000000", 
    7 => "1101001110100001000000000000000000000000000000000000000000000000", 
    8 => "1100010011101111000000000000000000000000000000000000000000000000", 
    9 => "1101001011011101000000000000000000000000000000000000000000000000", 
    10 => "0101111001101100000000000000000000000000000000000000000000000000", 
    11 => "0101101111111000000000000000000000000000000000000000000000000000", 
    12 => "1101111100000011000000000000000000000000000000000000000000000000", 
    13 => "1001011010000100000000000000000000000000000000000000000000000000", 
    14 => "1000101000101011000000000000000000000000000000000000000000000000", 
    15 => "1000011010001110000000000000000000000000000000000000000000000000", 
    16 => "0010110000100100000000000000000000000000000000000000000000000000", 
    17 => "1001010000110110000000000000000000000000000000000000000000000000", 
    18 => "0010010000100010000000000000000000000000000000000000000000000000", 
    19 => "1110100011110010000000000000000000000000000000000000000000000000", 
    20 => "1101100000100101000000000000000000000000000000000000000000000000", 
    21 => "0010001000001000000000000000000000000000000000000000000000000000", 
    22 => "1100000011100100011001011110001100000000000000000000000000000000", 
    23 => "0001010011111011100010101010111000000000000000000000000000000000", 
    24 => "1110100110101011101110001010101000000000000000000000000000000000", 
    25 => "0010100100001000001110011001100100000000000000000000000000000000", 
    26 => "1001001100110111010110011110011100000000000000000000000000000000", 
    27 => "0011101000110111101111010010011100000000000000000000000000000000", 
    28 => "0011101011001000101110001110110000000000000000000000000000000000", 
    29 => "0011110010111111000111101111100100000000000000000000000000000000", 
    30 => "0101101111001000100011101100101000000000000000000000000000000000", 
    31 => "0100110011011110111110001110111000000000000000000000000000000000", 
    32 => "0100000001100110010000110011011000000000000000000000000000000000", 
    33 => "0010110011001100101001100001000000000000000000000000000000000000", 
    34 => "1111000010011011000110111010001000000000000000000000000000000000", 
    35 => "1100101000101001101101101011100100000000000000000000000000000000", 
    36 => "1100000011110001101011101111001100000000000000000000000000000000", 
    37 => "1111111011110110111011010111011000000000000000000000000000000000", 
    38 => "1011011011001001101110001010000100000000000000000000000000000000", 
    39 => "1010011000110000011010000001000100000000000000000000000000000000", 
    40 => "1100000001111110110000111001101000000000000000000000000000000000", 
    41 => "0100001001001111110000100110000000000000000000000000000000000000", 
    42 => "1011110111001001000101100001111100000000000000000000000000000000", 
    43 => "1000110110101010111100001111110000000000000000000000000000000000", 
    44 => "1011101111110010111111111111101000000000000000000000000000000000", 
    45 => "1000010011100101110101011011110000000000000000000000000000000000", 
    46 => "1111001111110000010101000010001100000000000000000000000000000000", 
    47 => "1100110111101001111110011011100000000000000000000000000000000000", 
    48 => "0000101111100110111111010100010000000000000000000000000000000000", 
    49 => "1011100101000000111010000111001100000000000000000000000000000000", 
    50 => "0111110110000110001010101001100101111111010110100101001011011001", 
    51 => "1110011100001101010000000000111111001001101100100000000000001010", 
    52 => "1101110000000101010111110110110101001000000101000100011111101111", 
    53 => "0101010010110000000011000010100101010100000011000111100101101000", 
    54 => "1011001101000110001100111101100010100110100001001000101100111110", 
    55 => "1100101010100000011111000101000001000001111001000111110011111000", 
    56 => "1110000000001111001010100111011110111000010111101100111011111111", 
    57 => "1101010100001100000001011010011111111101001111000001000110000011", 
    58 => "1000011001110100101001001001011100111010110100001011111100110011", 
    59 => "1101101101111010110111110010111101000110101010110011101101011100", 
    60 => "1011111100101001001000100011110010110011001001100000101001010101", 
    61 => "0001010111111100010101011010011101010111010110110111010100000001", 
    62 => "0001001010101110000000110000010110100100001000000111101010000110", 
    63 => "1011001000011011101010100001100110111100000010100000101001111111", 
    64 => "1000110011111111010110101101001101010110110110000110111110010001", 
    65 => "1100111001000000111000000101100000000010110000011111001000011101", 
    66 => "0111000000010010010101011000110101001110010000010011101010001001", 
    67 => "1111110001101000110111011010101010111001001010001001011100101110", 
    68 => "0001001010101100111010010000000010111110000101101010011110011111", 
    69 => "1011010110000101111000100100100111101111100101011000110000011011", 
    70 => "1101001111011101111010110101101111011100000100110000100000111011", 
    71 => "1100110011100000110101111110101000010001101011011111110111101000", 
    72 => "1011011110001000111010101000011111110101101100101010010001011100", 
    73 => "1101001010111001000111010011110100101110101101000011101110000000", 
    74 => "1001111110100010000001010011000010011110110110010111111110011100", 
    75 => "1010010000100110110010101101111010011110011111011111001111001001", 
    76 => "1110110001111010100101100001111101100111000000100011111010100000", 
    77 => "1001010110001000111010111010001011111001101101001011100101001110", 
    78 => "1100010101001100111110100011110000010111101100111110010111100010", 
    79 => "0101101011011010011011110110000010011010010111000010010000010110", 
    80 => "0100110110110010010010111000100110111100111000101011110110111100", 
    81 => "0101010100011010110011111101110110100101001000000011111101001101", 
    82 => "1111111100101001010101101011111110010110000011101100100110001110", 
    83 => "0000101110011011010010110100011011000100111111100111001010011001", 
    84 => "1111010011001100011111001001001110100110111011101110110010110110", 
    85 => "0001011100011110111010011110101101111001000111000011101100101011", 
    86 => "1111111110101110111011110111111001000111010001011000101001000000", 
    87 => "0000010011001101001101110011011010110101011110001111110111110010", 
    88 => "1001011010000100001000011100000011110001100011010110011000011101", 
    89 => "0010011011000011010101010000111000000111110001110111101011010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cwdI is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cwdI is
    component pg_conv3x3_tile_cwdI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cwdI_rom_U :  component pg_conv3x3_tile_cwdI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


