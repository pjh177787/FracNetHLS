-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbak_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbak_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000010000100000000000000000000000000000000000000000000000000", 
    1 => "0010100010001010010010001101001000000000000000000000000000000000", 
    2 => "0111101111111111111111111111111100000000000000000000000000000000", 
    3 => "1000000000000000000000000000000000000000000000000000000000000000", 
    4 => "1111100101001100010000010000001100000000000000000000000000000000", 
    5 => "1111111111110110111110100011111100000000000000000000000000000000", 
    6 => "0111100100011010000000000000000000000000000000000000000000000000", 
    7 => "0101010001010001000000000000000000000000000000000000000000000000", 
    8 => "1101100100011010000000000000000000000000000000000000000000000000", 
    9 => "1101000000010011000000000000000000000000000000000000000000000000", 
    10 => "1111100001111000000000000000000000000000000000000000000000000000", 
    11 => "0111100001110001000000000000000000000000000000000000000000000000", 
    12 => "1100100111011000000000000000000000000000000000000000000000000000", 
    13 => "0111100101110011000000000000000000000000000000000000000000000000", 
    14 => "1111010001110001000000000000000000000000000000000000000000000000", 
    15 => "1111100001110001000000000000000000000000000000000000000000000000", 
    16 => "0000100100101100000000000000000000000000000000000000000000000000", 
    17 => "0000111011001010000000000000000000000000000000000000000000000000", 
    18 => "0111101111010001000000000000000000000000000000000000000000000000", 
    19 => "0110001100000000000000000000000000000000000000000000000000000000", 
    20 => "0000010001100000000000000000000000000000000000000000000000000000", 
    21 => "1001011100100010000000000000000000000000000000000000000000000000", 
    22 => "1001111111111000111111111011100000000000000000000000000000000000", 
    23 => "1101011100110010110111010100111000000000000000000000000000000000", 
    24 => "0101000001100100011001000110110100000000000000000000000000000000", 
    25 => "1111011000011011001000111000000100000000000000000000000000000000", 
    26 => "1100111000100001111001111010110100000000000000000000000000000000", 
    27 => "0111001001101100011010101111010100000000000000000000000000000000", 
    28 => "1100101001000100011000001101110100000000000000000000000000000000", 
    29 => "1001100010000011110111000001100000000000000000000000000000000000", 
    30 => "0010101111111011111111000101100100000000000000000000000000000000", 
    31 => "1001001011110110011000101010000000000000000000000000000000000000", 
    32 => "0011111000001110000101110100100000000000000000000000000000000000", 
    33 => "0011000100000111100101010101100100000000000000000000000000000000", 
    34 => "0000111010001110100101110101100000000000000000000000000000000000", 
    35 => "0110110110011011010101010000101100000000000000000000000000000000", 
    36 => "0000101000100000011110010000001100000000000000000000000000000000", 
    37 => "0011110111010010100100100000001000000000000000000000000000000000", 
    38 => "0111001101010110000101010100111100000000000000000000000000000000", 
    39 => "0110010000010110101100100010110100000000000000000000000000000000", 
    40 => "1011101111000111010100001111100000000000000000000000000000000000", 
    41 => "1010001010011100100000111010000000000000000000000000000000000000", 
    42 => "0000000101110001100100010011111000000000000000000000000000000000", 
    43 => "0110010001001000001000011101000000000000000000000000000000000000", 
    44 => "0000100001111000001000001000110100000000000000000000000000000000", 
    45 => "1001000000110111100001000000101100000000000000000000000000000000", 
    46 => "1101101010011100110100011110000100000000000000000000000000000000", 
    47 => "0110110000110010010001001111110000000000000000000000000000000000", 
    48 => "0110000000100000011111000010010100000000000000000000000000000000", 
    49 => "0011101100100011111001111111000000000000000000000000000000000000", 
    50 => "1100000000110101011000001111000011010010110101001100010010111101", 
    51 => "0010101011010010000101001110010110101010011011101110001010100101", 
    52 => "0100010000101111010000100110011101001010110001000110011010010001", 
    53 => "1100010100110101101101000100111011000001101100010111011101101011", 
    54 => "0110011000110000101010000111011111110100011110100110101011101101", 
    55 => "0001011110001001100010100110010100010011000010010110001101100100", 
    56 => "0000001000100000110001110111110001010000001000100101001101000100", 
    57 => "0001111001010110101111010101101100001110000101101011100101001100", 
    58 => "1001011110000001111011010110111110110000000100011000000011110000", 
    59 => "1000101010101101100111011011100010011010010000100100000110100000", 
    60 => "0100100110111000100111110111000000000111111000001010001110011000", 
    61 => "1001111101100101110110010000111010011001011100101101110110000001", 
    62 => "0110010011001110001000100101100000100101111010011011110010001011", 
    63 => "1010101100110110101110011100110110000100100111011000101100110101", 
    64 => "0111000000110100010001111000000011011011000101100010011010000010", 
    65 => "0000100110011111100111100001111101101110000100101000000100100100", 
    66 => "1110010010001100010111000100001110111000110110000011000001010111", 
    67 => "0011110110111000100100010000110110100101001100010001011101001001", 
    68 => "1000010111011011000000101100110110010101100011011000110001101000", 
    69 => "0001111111001000111110100000110011100101111100001110000101010000", 
    70 => "1111011000101100110110010101011011111011101110111010010110101101", 
    71 => "1010001101100100000101011000100001100111110011110001010100011110", 
    72 => "0110111010010100101011000110000010110111101011011000100100011001", 
    73 => "0111001101010101101100001110001111111001100000101001011101110001", 
    74 => "0100100001110101111110101000001011111010100100101110001001001001", 
    75 => "1010000111101101011111010011101101110101111000111111100001000001", 
    76 => "0011111110000011010011010111000111100011101000100000010001100101", 
    77 => "1000101110000010011000011010101010011001100001111110100001110110", 
    78 => "0111001010110000110110010010001000101010011011100010110111000110", 
    79 => "0000101001110001100101011001010010110100000001010101000011000000", 
    80 => "0000001000010010000101010010000001000000110000111110100000110101", 
    81 => "0101111011010111000100100000110000001010110011000011100010000101", 
    82 => "1001011010011000000000010010011010100010000010011010001101010000", 
    83 => "0010011001100100010111011001101000110111111110100001100111001110", 
    84 => "0000000000111100111000000110101110111111111101100000111010011111", 
    85 => "0111001001010111010011000001101111001000110001100101100101000111", 
    86 => "0001000010101110110100000100101001000100101001111001011010010011", 
    87 => "1101100011101110001110001001111110011010110100000000000100101000", 
    88 => "1000111001000101101001011111010010100011101010101000101100011000", 
    89 => "1001011101111001101011100110111101000111000010010000100111011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbak is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbak is
    component pg_conv3x3_tile_cbak_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbak_rom_U :  component pg_conv3x3_tile_cbak_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


