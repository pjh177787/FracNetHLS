-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cNgs_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1000000000000100000000000000000100000000000000000000000000000000", 
    1 => "1000001000100100100000011000010000000000000000000000000000000000", 
    2 => "1111111111110111111111111111111100000000000000000000000000000000", 
    3 => "1110110111111111111111111111111100000000000000000000000000000000", 
    4 => "0000000000000000010000000000011100000000000000000000000000000000", 
    5 => "1010111001001110011010011000000100000000000000000000000000000000", 
    6 => "1000011001100101000000000000000000000000000000000000000000000000", 
    7 => "1110110101110110000000000000000000000000000000000000000000000000", 
    8 => "0010011001001111000000000000000000000000000000000000000000000000", 
    9 => "0100111001110111000000000000000000000000000000000000000000000000", 
    10 => "1101000111010011000000000000000000000000000000000000000000000000", 
    11 => "1101111001010010000000000000000000000000000000000000000000000000", 
    12 => "0111011001000100000000000000000000000000000000000000000000000000", 
    13 => "1101101001110111000000000000000000000000000000000000000000000000", 
    14 => "0111011100110100000000000000000000000000000000000000000000000000", 
    15 => "1000000111001101000000000000000000000000000000000000000000000000", 
    16 => "1111000001100101000000000000000000000000000000000000000000000000", 
    17 => "0010011010001000000000000000000000000000000000000000000000000000", 
    18 => "0010110011000100000000000000000000000000000000000000000000000000", 
    19 => "0001001101001011000000000000000000000000000000000000000000000000", 
    20 => "1010111011111000000000000000000000000000000000000000000000000000", 
    21 => "0111110001011111000000000000000000000000000000000000000000000000", 
    22 => "1010001000010100000000101110010000000000000000000000000000000000", 
    23 => "0101000101001111010100010100000100000000000000000000000000000000", 
    24 => "1001100001111001100100110010000100000000000000000000000000000000", 
    25 => "0010100010111010111010101111110000000000000000000000000000000000", 
    26 => "0000111100101110100111010101111000000000000000000000000000000000", 
    27 => "1011010000110011001000101110001100000000000000000000000000000000", 
    28 => "1000001101001001101111101011000100000000000000000000000000000000", 
    29 => "0000011000011100000100011001110000000000000000000000000000000000", 
    30 => "0011110110010000000110111110111000000000000000000000000000000000", 
    31 => "1000111110101111110110111001100100000000000000000000000000000000", 
    32 => "1011001011010100100101001100000000000000000000000000000000000000", 
    33 => "0011111111011000010011000000100000000000000000000000000000000000", 
    34 => "1101010101000010111001111011011000000000000000000000000000000000", 
    35 => "1101001110101111011101111101101000000000000000000000000000000000", 
    36 => "0011111000100101101110111111100100000000000000000000000000000000", 
    37 => "1011111010001000100110101100111000000000000000000000000000000000", 
    38 => "0101110010010001000000101000111100000000000000000000000000000000", 
    39 => "0100000011111110001101101001101100000000000000000000000000000000", 
    40 => "1001001100010010011110011000100100000000000000000000000000000000", 
    41 => "0000011111100001000111010011111000000000000000000000000000000000", 
    42 => "1000110101000011000011010001001000000000000000000000000000000000", 
    43 => "1010010101001010000100110000010000000000000000000000000000000000", 
    44 => "0111110101011011001101101101100100000000000000000000000000000000", 
    45 => "1000110001001000010111001001100100000000000000000000000000000000", 
    46 => "0101100110001000110000001000011000000000000000000000000000000000", 
    47 => "1010001110111011001111100111010000000000000000000000000000000000", 
    48 => "1011010001110101101011010100100100000000000000000000000000000000", 
    49 => "0010000011110100011000101110101100000000000000000000000000000000", 
    50 => "1011000010100000000110000111000011011000111010001111111000111010", 
    51 => "0010111111000010110011001001100000100111110000001011100100100001", 
    52 => "1100000001100000110000000010010011111000001000001111100110100101", 
    53 => "1010011110111111110010001000101000100101111011110100101111101000", 
    54 => "1010110000111011101001011001100110111101001111111000010011111100", 
    55 => "1111010001010001100110101010010111100000110001011100101010111111", 
    56 => "1111001100110001101000000111001011110000101101000011011010100110", 
    57 => "0000001100001100110101011010110000100011000101101011010111000100", 
    58 => "1011100001101000000100100111011010010101101010110001001010010101", 
    59 => "0111101111111100000011000001100101110010110000111001110011011011", 
    60 => "1001000000001100001101110010000011001111001010100000010110110100", 
    61 => "0100101111001111010011001100101111111110011011100110010000110110", 
    62 => "0000001011010100100001100111110010111000001000001111100011001111", 
    63 => "0001111110110010111011101011001011010001000010011001111100100010", 
    64 => "1111100110001111101000011100001011100001111111110010000001100100", 
    65 => "0000001110111101111111110010111010000101011100000100011111001000", 
    66 => "0101010110000101111100010000001111011100000010100110100000001010", 
    67 => "1101001101111100100100110011111110110100101100000001100000101010", 
    68 => "0101101000110011101101101101011000011010110000111000101011101010", 
    69 => "1001100100010010010010111110001111011011010111111010101000110101", 
    70 => "1011111110011011100010101000110010000100101010000011000011100100", 
    71 => "0111010101010110110101101000101111011011110001001011110010101110", 
    72 => "1110010000011010111101010111010011100111111110110111011100101100", 
    73 => "1000100101010101100010001101000111000110101100001110000110111100", 
    74 => "0001001100100101110010100010100100000111111101001010101011000111", 
    75 => "0000001110100110100000011111100101011000111001011010100011001011", 
    76 => "0101000101111010101001101101011010011010001000100011001111110101", 
    77 => "1011111100000101100100110010001010101011011111001011001100101010", 
    78 => "1111100100100010010010110000100101010101100110110000011110000110", 
    79 => "0100101111011001101101010111010101000011001101001110101011100000", 
    80 => "0100111111111000110101001010101100010101101101000110111000011010", 
    81 => "1001101100110001000001101101000011010111010001110110101011110111", 
    82 => "0000100111100011100110010000010101101010110000100101100101000010", 
    83 => "0001101100111001100011001010000010000010000010110100101111000100", 
    84 => "1100111110100001101101000100100110001110100100100010010111100001", 
    85 => "0000000001100110000010011101111111000101111101010011101110111010", 
    86 => "1011101000111011100111000110011001100001110110010101001010100110", 
    87 => "0100010000000111011110100000010110110101011110101110000000011111", 
    88 => "0001010100011100101101101111101101111011101100010100101101100000", 
    89 => "1010000110101011100101000111010110011100111000110001101100001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cNgs is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cNgs is
    component pg_conv3x3_tile_cNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cNgs_rom_U :  component pg_conv3x3_tile_cNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


