-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_ctde_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_ctde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101001000111101101010000110000100000000000000000000000000000000", 
    1 => "1010000000000000000001100000001100000000000000000000000000000000", 
    2 => "1100000000000000000100000000000100000000000000000000000000000000", 
    3 => "0011101101010111001010111000011100000000000000000000000000000000", 
    4 => "0000000000000000000000000010000000000000000000000000000000000000", 
    5 => "1111011101111111011010000000000000000000000000000000000000000000", 
    6 => "0101111100010111000000000000000000000000000000000000000000000000", 
    7 => "1001001110011100000000000000000000000000000000000000000000000000", 
    8 => "1101010001010110000000000000000000000000000000000000000000000000", 
    9 => "0101000110010100000000000000000000000000000000000000000000000000", 
    10 => "1111111000011110000000000000000000000000000000000000000000000000", 
    11 => "0001010110110100000000000000000000000000000000000000000000000000", 
    12 => "0101100100000111000000000000000000000000000000000000000000000000", 
    13 => "1010000111000010000000000000000000000000000000000000000000000000", 
    14 => "0011011000110101000000000000000000000000000000000000000000000000", 
    15 => "0000001100111001000000000000000000000000000000000000000000000000", 
    16 => "0011011000100101000000000000000000000000000000000000000000000000", 
    17 => "1000010010110110000000000000000000000000000000000000000000000000", 
    18 => "0011011001010010000000000000000000000000000000000000000000000000", 
    19 => "1100001011100010000000000000000000000000000000000000000000000000", 
    20 => "1111100000100100000000000000000000000000000000000000000000000000", 
    21 => "0010011111010001000000000000000000000000000000000000000000000000", 
    22 => "1101010111001010101001010100001100000000000000000000000000000000", 
    23 => "0010010010001101001000101010001100000000000000000000000000000000", 
    24 => "0001110101101111111111000000011100000000000000000000000000000000", 
    25 => "0100100110001110110000011001001000000000000000000000000000000000", 
    26 => "0000010101011110000100101010001100000000000000000000000000000000", 
    27 => "1011000101011100000000110101100100000000000000000000000000000000", 
    28 => "0011100010001100001110001010111000000000000000000000000000000000", 
    29 => "0011110010100001101011001011100100000000000000000000000000000000", 
    30 => "0101011100001110010100111110001000000000000000000000000000000000", 
    31 => "0110100000100011100001100110101000000000000000000000000000000000", 
    32 => "1000000010100111110101101011010000000000000000000000000000000000", 
    33 => "1010100010001110101011001001000000000000000000000000000000000000", 
    34 => "1011010001001001001110001110001000000000000000000000000000000000", 
    35 => "1010001001100000001011000010010100000000000000000000000000000000", 
    36 => "1000000011110100011111001111000000000000000000000000000000000000", 
    37 => "1010001010100100111000100011010000000000000000000000000000000000", 
    38 => "1011101011101110111010001111010100000000000000000000000000000000", 
    39 => "0101011011111111010000010100011100000000000000000000000000000000", 
    40 => "1010111111111010101011001011100000000000000000000000000000000000", 
    41 => "0110010011001111010000101101100100000000000000000000000000000000", 
    42 => "1011110101011101000101110001111100000000000000000000000000000000", 
    43 => "1101110010101101110110101111111100000000000000000000000000000000", 
    44 => "0111111111110000111101011101011000000000000000000000000000000000", 
    45 => "0010010110111111111011010010110000000000000000000000000000000000", 
    46 => "0110100111110000110111001000001100000000000000000000000000000000", 
    47 => "1100010111111100111110001011100100000000000000000000000000000000", 
    48 => "0000101111100110111110000100010100000000000000000000000000000000", 
    49 => "1101011101110000111001100111100000000000000000000000000000000000", 
    50 => "1111110111111110011001111001010110010011110010110101110110100111", 
    51 => "0111110001101111000100101101111100111011000110000000001001110111", 
    52 => "1110010000000111011000100111010110001000001111010100011000111111", 
    53 => "0000011100100110010100011011101001000101011101101111100110001010", 
    54 => "0011110001000010001010101111100010110100010010111000001001111000", 
    55 => "0110110011100010001110100111001011001100101010110110111001110000", 
    56 => "1111010001001011101010101111000111110000110010001100011010110111", 
    57 => "1101011111011101010101010010010010110111001001110111000110000000", 
    58 => "1110111101110000011001000010001100010011111101011011101010110101", 
    59 => "0010111101000001010110000001001101110110101010011010111100111010", 
    60 => "1010001110101011001010100111110100011010000100010010101001010001", 
    61 => "0000011101110101010101111010010101011011010111010111001110001100", 
    62 => "0101011001011110111110001000110100110110101100000101101111110000", 
    63 => "1011100100011000101001000001111110100100000100000000100001101111", 
    64 => "1101100011000000110111100011111100000110111101000111101010011001", 
    65 => "0011111010110101010000100110101101101001111011011101001010011100", 
    66 => "0000000011010101010000010010111111100100110110010011101011001110", 
    67 => "1110010111101100011110001100101111111001110010011101010110111011", 
    68 => "1111001111000101001001000000010010110110110111111000101001100001", 
    69 => "1011100110001101111000110100001101111101000101011010110001001111", 
    70 => "1100000100000011101000010100010010000010100100010010000110010111", 
    71 => "1110111001010100100100111100101001010101101111010110111001101000", 
    72 => "0011010100101000011111000000110111100101101000010000011001010110", 
    73 => "0011111100111011000111100001110111100111100000000011100001111000", 
    74 => "0011001001010011101010000011010001101010110010001010100110100110", 
    75 => "1100011101010111110110111111111101001100001101110111100100001001", 
    76 => "1110110010001010100101100011110001100010010100110011000000010000", 
    77 => "0001010100100101111000010000100111110001100001101000001000011010", 
    78 => "1000111100001000000111111001000110011101011101111101000011100000", 
    79 => "1000110100011010011010110000010000011010001010101110100001110001", 
    80 => "0110110110110001000100110000110100111010010100000011000110101100", 
    81 => "0000011100010000111011010110000011101111001000010101110001011100", 
    82 => "0110100101111010011000000010110010000010100110100001101110001001", 
    83 => "0111101100010011010001010100011010000101000110110010001011011101", 
    84 => "0101110101011100010111110101101111000011110011100111010000111000", 
    85 => "0110001101010111010010001100110001100001111111100111101101011010", 
    86 => "0101011100101111011000000000110011001100010001011001101000000011", 
    87 => "0010011111001101010100011111010100111111011110011011001011011100", 
    88 => "1000101010000000100111011000001110001000000010010110110101010100", 
    89 => "0110110010010010001010000011010100100111100100110011100011101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_ctde is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_ctde is
    component pg_conv3x3_tile_ctde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_ctde_rom_U :  component pg_conv3x3_tile_ctde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


