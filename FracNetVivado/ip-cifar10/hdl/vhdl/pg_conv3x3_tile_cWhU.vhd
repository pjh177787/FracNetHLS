-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cWhU_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0101000000010000000001001000000000000000000000000000000000000000", 
    1 => "0011111111111111111111110100010100000000000000000000000000000000", 
    2 => "1011011011011101111101111101100000000000000000000000000000000000", 
    3 => "0000000000000000000000000001010000000000000000000000000000000000", 
    4 => "1010101011101011101111101011111000000000000000000000000000000000", 
    5 => "0111111111111011111001111111111000000000000000000000000000000000", 
    6 => "0110101110101110000000000000000000000000000000000000000000000000", 
    7 => "1011100110000100000000000000000000000000000000000000000000000000", 
    8 => "0110000100100100000000000000000000000000000000000000000000000000", 
    9 => "1011110010010001000000000000000000000000000000000000000000000000", 
    10 => "0110001101100110000000000000000000000000000000000000000000000000", 
    11 => "0011110011010000000000000000000000000000000000000000000000000000", 
    12 => "0101000111110000000000000000000000000000000000000000000000000000", 
    13 => "1110110111111000000000000000000000000000000000000000000000000000", 
    14 => "1100000101110000000000000000000000000000000000000000000000000000", 
    15 => "1110101110011100000000000000000000000000000000000000000000000000", 
    16 => "0000010110111101000000000000000000000000000000000000000000000000", 
    17 => "0001110111100000000000000000000000000000000000000000000000000000", 
    18 => "0000011101110001000000000000000000000000000000000000000000000000", 
    19 => "0010001000000101000000000000000000000000000000000000000000000000", 
    20 => "1111101011101110000000000000000000000000000000000000000000000000", 
    21 => "1100111111110111000000000000000000000000000000000000000000000000", 
    22 => "0000011100110011000001010001100100000000000000000000000000000000", 
    23 => "0011000011011011001010001110001000000000000000000000000000000000", 
    24 => "0110101000001101111000101000001100000000000000000000000000000000", 
    25 => "1110111101111010110111111011001100000000000000000000000000000000", 
    26 => "0101011010010011010001010111101000000000000000000000000000000000", 
    27 => "1010101011100011110110101000000100000000000000000000000000000000", 
    28 => "0010101011010110000010101010000100000000000000000000000000000000", 
    29 => "0110110111101001111011101111110100000000000000000000000000000000", 
    30 => "1000010111111100000000010011111000000000000000000000000000000000", 
    31 => "0011110110111101100111110100101100000000000000000000000000000000", 
    32 => "1001000001000100001010100010001100000000000000000000000000000000", 
    33 => "0010011111011111001101101001100100000000000000000000000000000000", 
    34 => "1111101000100110011000001100000000000000000000000000000000000000", 
    35 => "1000010001001110001001101010111000000000000000000000000000000000", 
    36 => "1000010100001110000001110110001000000000000000000000000000000000", 
    37 => "1010100011111111000010101010010100000000000000000000000000000000", 
    38 => "0000011110110001100111011101100100000000000000000000000000000000", 
    39 => "1111100011000101001110100101001100000000000000000000000000000000", 
    40 => "1001010100110110110101010000011000000000000000000000000000000000", 
    41 => "1011011100011110100100101101001100000000000000000000000000000000", 
    42 => "1011110111011010001100100111010100000000000000000000000000000000", 
    43 => "0110111100110111101101010100010100000000000000000000000000000000", 
    44 => "1001010100001110010101010000111100000000000000000000000000000000", 
    45 => "1010010111001011100101010100000000000000000000000000000000000000", 
    46 => "1000011010000000111100011100000100000000000000000000000000000000", 
    47 => "1000111010000100110110110100100000000000000000000000000000000000", 
    48 => "1001110100011001000001111011011000000000000000000000000000000000", 
    49 => "1110100100101011011010101111000100000000000000000000000000000000", 
    50 => "0110000000101110011011101111010001011011000011011100011010110110", 
    51 => "1111000100011101100000001100110110101101101001011010100111101000", 
    52 => "0100101111000001001110011101101000100000111011001010111101111010", 
    53 => "1011000011101101110101011010111010100100101001000101111111001100", 
    54 => "1001000001001101101001010000011110111000000001101110110110100101", 
    55 => "0111110011010011100010101101101000001010100000011000101011111010", 
    56 => "0011010110011110110001111101011000111111000100111100110111010010", 
    57 => "0000100011010001100010101100100100001000110001111000101011101001", 
    58 => "0100011111110100110111010010110010001111111001011101100110110111", 
    59 => "1001101100100000001001110010011111000101011111100110000001000000", 
    60 => "1111000011011101010111110110011010100111001110100110011001100110", 
    61 => "0001110001010001100011100000000111011000011100010000100111011000", 
    62 => "0001100011011011110110101001111101000100101010010110111101001010", 
    63 => "0011000010101001110111101101100110110000100001001110100111110101", 
    64 => "0000101000001010100110101001101110100110100111011010100110110001", 
    65 => "0011110111101001010101101101110101111001110110111010101011100001", 
    66 => "0100000111011101110111101101110011011100000001000001010100101111", 
    67 => "1100111101000100010100111010001001010111111101000101111111101000", 
    68 => "0000000111011100101001001011010001011111011000110111011010011110", 
    69 => "0010100111000101100110111110010000011100101111000010000111011000", 
    70 => "1111011101100110010000000000101011101000011011110111001100000100", 
    71 => "1100101010010101000110101000100011001101101001110001100110010100", 
    72 => "1100001110111000100010000100000001001001010100111001101110001001", 
    73 => "0101011110011110010010101011010011001110000000011110011010001000", 
    74 => "1111000011110001110101011010001100101000001001101101000011110100", 
    75 => "1000000010100011110110011010011001100000100001010100101111001100", 
    76 => "0111010010110100000101010110100110110000110011100001010011110101", 
    77 => "1101100100000110010101111111001110110011011111000111010000101011", 
    78 => "0011010100011010101000100010001101011010101001010010001100110110", 
    79 => "1000101011001111000001011011011010110111011011100110010101101010", 
    80 => "1101100010110110010100111100001001001011100011000000010110100100", 
    81 => "0011100110101101110000000010001011101001100001011111100001000010", 
    82 => "1011000110111010000110110011011001101010000100111000100001000110", 
    83 => "0111110011010000000101010000100110100101101001100110100101000100", 
    84 => "0101110001100010110011000011001100000110011001100101001101100111", 
    85 => "1101100100010001010010110110001010101101010100010011101000001110", 
    86 => "1011101100110001000001111110010000110010001111010010010111111011", 
    87 => "0100110100001001101111110110001011011001011010000110100100100001", 
    88 => "0101100011000110011010010001011111101110101010000111001010000111", 
    89 => "0000100000000001000010010000111010011111000100010110010111111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cWhU is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cWhU is
    component pg_conv3x3_tile_cWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cWhU_rom_U :  component pg_conv3x3_tile_cWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


