-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cGfk_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101010000000000000000000000000000000000000000000000000000000000", 
    1 => "1001000000000000000000000000000000000000000000000000000000000000", 
    2 => "1100000000000000000000000000000000000000000000000000000000000000", 
    3 to 4=> "0000000000000000000000000000000000000000000000000000000000000000", 
    5 => "0000000000000000000000000000000100000000000000000000000000000000", 
    6 => "0100001111001110000000000000000000000000000000000000000000000000", 
    7 => "0011001111100100000000000000000000000000000000000000000000000000", 
    8 => "1110000001110000000000000000000000000000000000000000000000000000", 
    9 => "1111010011101000000000000000000000000000000000000000000000000000", 
    10 => "0110000100110100000000000000000000000000000000000000000000000000", 
    11 => "1111000001110101000000000000000000000000000000000000000000000000", 
    12 => "0110100000100101000000000000000000000000000000000000000000000000", 
    13 => "0111101001110011000000000000000000000000000000000000000000000000", 
    14 => "0101100101010011000000000000000000000000000000000000000000000000", 
    15 => "0010100101100001000000000000000000000000000000000000000000000000", 
    16 => "1000011110001110000000000000000000000000000000000000000000000000", 
    17 => "1000101110001100000000000000000000000000000000000000000000000000", 
    18 => "0001010001000000000000000000000000000000000000000000000000000000", 
    19 => "0001010101110011000000000000000000000000000000000000000000000000", 
    20 => "1111001100011001000000000000000000000000000000000000000000000000", 
    21 => "1110101011000100000000000000000000000000000000000000000000000000", 
    22 => "0000100000001100000000111101010000000000000000000000000000000000", 
    23 => "1100010101111000000001000011111100000000000000000000000000000000", 
    24 => "1011110100011001111111000001100100000000000000000000000000000000", 
    25 => "1110011111001000001001101100100100000000000000000000000000000000", 
    26 => "1100001000010111011010101010010000000000000000000000000000000000", 
    27 => "1100101010000100111011101010010000000000000000000000000000000000", 
    28 => "1010001010011101100000001111000000000000000000000000000000000000", 
    29 => "0000001000001000000000100010010000000000000000000000000000000000", 
    30 => "1100001100011110010000110010011000000000000000000000000000000000", 
    31 => "0101000000100001000010111010011100000000000000000000000000000000", 
    32 => "0010010000101011010001010001101000000000000000000000000000000000", 
    33 => "1000101000000110001011000010011100000000000000000000000000000000", 
    34 => "0010101011000100000010001110110100000000000000000000000000000000", 
    35 => "1000101100001111011111111011110000000000000000000000000000000000", 
    36 => "0010010000100001100000100000100100000000000000000000000000000000", 
    37 => "0001110111110100101110001010110100000000000000000000000000000000", 
    38 => "0110110011111010010100101111110100000000000000000000000000000000", 
    39 => "0110101100010100111111010100011100000000000000000000000000000000", 
    40 => "0100100111100101111011000111011000000000000000000000000000000000", 
    41 => "0010001000000000010001101110000000000000000000000000000000000000", 
    42 => "1000010111000111000001110000011100000000000000000000000000000000", 
    43 => "0110000001110011100010000100001000000000000000000000000000000000", 
    44 => "0001010001001011000110100000100100000000000000000000000000000000", 
    45 => "0001101011101000010111000011010100000000000000000000000000000000", 
    46 => "1010010100000000011000011011010000000000000000000000000000000000", 
    47 => "0001000001001000010000001000010000000000000000000000000000000000", 
    48 => "0101010111100001110101011000001100000000000000000000000000000000", 
    49 => "1000001101001001000010101011100000000000000000000000000000000000", 
    50 => "1010110010011011001110100101101010001000110010011001111011011010", 
    51 => "1101110000000001010001110010000111111000100000111000111010100111", 
    52 => "1010010011110101110001000110011111101000011100000110010011100010", 
    53 => "1100011000100110010011100110000011111110001100000110100000111100", 
    54 => "0100101101110000101000010001100001101001011110011110000000001000", 
    55 => "0110100010100001010011000011000111110000000000010001111010110001", 
    56 => "1010110001011011101000100100111100101100110010111010101111011010", 
    57 => "1100001111100110100011110000100010010011110100101010100100100100", 
    58 => "0100000001011111110000000100011111101000110001001111000011001001", 
    59 => "0000000110001011010001100100100100100100000000101010100001011101", 
    60 => "0000111110001000110101000000111000001101000100110110010101001000", 
    61 => "1111111011111101100011111000011010011011010001001011011110100110", 
    62 => "1011010001001110111010100001011011000010000111010010110100110011", 
    63 => "1000011100000110011000101001110010010111001000110101001100111100", 
    64 => "0011100100100100000111100111111100010000010000011000001000101110", 
    65 => "0001001010110101100111001000010101011100001010101110100101000101", 
    66 => "1110000000101101000010111101110101110101110001010011100101011001", 
    67 => "1110101011001101011110111111010111111011110101000111000010111011", 
    68 => "1001100110101011001000101100100101010110000010111000000001101001", 
    69 => "0000010000110111001101000110110000100111101000111111000001000100", 
    70 => "1001111111111010011110110100111101001010001100001010101100101000", 
    71 => "0000000101010110011101000000100000010000001010101111000001101001", 
    72 => "0110000100110111100000101110100100000110100001011010010000110001", 
    73 => "0101011010000100010000010010001010100100011110011010101000000000", 
    74 => "1000101101010000011011001100110110000110010101000011010010011010", 
    75 => "0000001110110011010000011011101101001110111111010011110101110100", 
    76 => "1010001111101011101000010010111011111111111011101011001001011010", 
    77 => "1011101100000001111111011010110010001010110000110101000111100100", 
    78 => "1000000100110111100101010110101111110110101010010101110011101001", 
    79 => "1100011010101100101110101011101011010011110000000110110010110110", 
    80 => "1000101101111011000001001010110011111001101100000010100011001001", 
    81 => "1001001000010111011011011010011110000100110010100001110101001110", 
    82 => "0011111000011011100011110111001111110110010000110000100111101000", 
    83 => "1101101111010011010101011111010110011110100100100011000010111111", 
    84 => "0001010110010101110100000100101011001010100001100110110001001100", 
    85 => "1001101001111101000001110111110000011111111011101001111011101101", 
    86 => "0001001000111101110100001011110010110001110110111001101000101110", 
    87 => "1111101001111011101011111101010111111100011100010000101111100001", 
    88 => "1001001111011010110001011111011011101111010100010011001101111111", 
    89 => "1011111001001101001011110011011010100110111001001100010101111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cGfk is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cGfk is
    component pg_conv3x3_tile_cGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cGfk_rom_U :  component pg_conv3x3_tile_cGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


