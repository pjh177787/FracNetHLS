-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c0iy_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c0iy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110111111011100111010110001011100000000000000000000000000000000", 
    1 => "1011110101111101100101001110000100000000000000000000000000000000", 
    2 => "1000101100100011111110001000010100000000000000000000000000000000", 
    3 => "1111111111110111101011011100111100000000000000000000000000000000", 
    4 => "1111100010111000000010000000001100000000000000000000000000000000", 
    5 => "0000000000000000110000001000001100000000000000000000000000000000", 
    6 => "1011001010001010000000000000000000000000000000000000000000000000", 
    7 => "1101001101110011000000000000000000000000000000000000000000000000", 
    8 => "1101000011101010000000000000000000000000000000000000000000000000", 
    9 => "1100000101000011000000000000000000000000000000000000000000000000", 
    10 => "1001010100111010000000000000000000000000000000000000000000000000", 
    11 => "1100110010101011000000000000000000000000000000000000000000000000", 
    12 => "1100001110101110000000000000000000000000000000000000000000000000", 
    13 => "1001111010100001000000000000000000000000000000000000000000000000", 
    14 => "0010111010000011000000000000000000000000000000000000000000000000", 
    15 => "0001000001011011000000000000000000000000000000000000000000000000", 
    16 => "0111111011011010000000000000000000000000000000000000000000000000", 
    17 => "0110111010000111000000000000000000000000000000000000000000000000", 
    18 => "1111111010010100000000000000000000000000000000000000000000000000", 
    19 => "1010001110110010000000000000000000000000000000000000000000000000", 
    20 => "1111111010111011000000000000000000000000000000000000000000000000", 
    21 => "0000001001001100000000000000000000000000000000000000000000000000", 
    22 => "0110000000000100001000000010011000000000000000000000000000000000", 
    23 => "0110010010010100111101001010011000000000000000000000000000000000", 
    24 => "0111000010011011111111000000011100000000000000000000000000000000", 
    25 => "0001000000001111000000101010000100000000000000000000000000000000", 
    26 => "0011000001001111001010001110001100000000000000000000000000000000", 
    27 => "0101100111110001000110010101111100000000000000000000000000000000", 
    28 => "0001100101110011110111101101110100000000000000000000000000000000", 
    29 => "0111101011011110110101010100011100000000000000000000000000000000", 
    30 => "1100111001001110111111001101011000000000000000000000000000000000", 
    31 => "1010101010111111111011001010110000000000000000000000000000000000", 
    32 => "0001111111110100111111011001100000000000000000000000000000000000", 
    33 => "0001110100100000001011010010101000000000000000000000000000000000", 
    34 => "0010010000101011100111101100000100000000000000000000000000000000", 
    35 => "0111011100110100111001111110100100000000000000000000000000000000", 
    36 => "0101100000111100111111001011110100000000000000000000000000000000", 
    37 => "0101001100101110110011010110011000000000000000000000000000000000", 
    38 => "0000111110001110010110111000110000000000000000000000000000000000", 
    39 => "0001111100010111011111011100010000000000000000000000000000000000", 
    40 => "1111101010100001000011000100000000000000000000000000000000000000", 
    41 => "0101010111101000011001010111111000000000000000000000000000000000", 
    42 => "1100000000110000011001001111011100000000000000000000000000000000", 
    43 => "0100000000000100011100101010001000000000000000000000000000000000", 
    44 => "0100000110100010011110010100110000000000000000000000000000000000", 
    45 => "0000000110001001100100111110110100000000000000000000000000000000", 
    46 => "1110100110110000011011101110101100000000000000000000000000000000", 
    47 => "1010110111010111110001101100100000000000000000000000000000000000", 
    48 => "1110100101010101011010001011000000000000000000000000000000000000", 
    49 => "1110101100110110100100010100111100000000000000000000000000000000", 
    50 => "0011101011010001101110001001101100101010110011111011100101001001", 
    51 => "0000110000110011011110111001101100001100011011110011111001011000", 
    52 => "1001100011100010010101000010010101011010011101100101110000001101", 
    53 => "1101011010101001110001000011011101010000001010000010110101000100", 
    54 => "1011110101000000001111110001111100001100100011110010101101100000", 
    55 => "0001001001110110110101100101010001000010011001101111010011110101", 
    56 => "0110100011111010011010101111000011000000011011011110001010110010", 
    57 => "0111011111010010100100010001111001010011011100100101011100111110", 
    58 => "0101010011000100011111100000011111110000001100101010010010100110", 
    59 => "0000100100101110100000101000001001010110000011001100100100001010", 
    60 => "1001110000011111011001100111111000010010000101110101000001100111", 
    61 => "1011110010001011101010100111110110101000101101011000110011100000", 
    62 => "0000001110001110011010100011101001000111110000010000010100000000", 
    63 => "0000010001110110010111100100100100010111011011100111010001101000", 
    64 => "0011011111010111100001101011110001010101110110111100001010111110", 
    65 => "0101100010111010110111010000100001111110001100101110001100001110", 
    66 => "0111100101011111010110100001010101000101100001010100111100000111", 
    67 => "0011001100110001001000000001010101110110100100010010000000111010", 
    68 => "1010011101001111110010011111011111110000000101110111000101000111", 
    69 => "0101011001111011111001010000111100000111101000001010111000100110", 
    70 => "0100110000010100100111110111100101000111001110110011111101101111", 
    71 => "1111001110110101011100010110101011101110010110111111011001011001", 
    72 => "0000100000011011110011101000011100001001100101101100110010010100", 
    73 => "0101101111111111100001010110111011010010111000110101011111001100", 
    74 => "1001001101000011001000011111101101100000000110110111100001110011", 
    75 => "0011011010001110011000001111100001110110110010010011100101001001", 
    76 => "1101001110111100111110111000100000010111111110101100010010101010", 
    77 => "1110101001010110111001001011011001111101111111110001111000001100", 
    78 => "1011011110101100110000111100000110011101000001110010001100001001", 
    79 => "1001011100000110001101011001010000101111000000100101101101100011", 
    80 => "0000001011100101101010000001100010000100111000000110010100101110", 
    81 => "0110111010110110101011011101100110111000011110110001110001111101", 
    82 => "0100010010000101001100000001001111011101111111001010000001111001", 
    83 => "1001011011001100000000001010101111110110110001101010010101101010", 
    84 => "0111010111010000001111000001000111010011001100100011110101011001", 
    85 => "0010101110001100011100001011110100110010100101000111100101010101", 
    86 => "0100110101101011111100010011101011011110100010011010101010100100", 
    87 => "0011001000110001011110001011101011111100110001110001010001111100", 
    88 => "1000000010100000011011010010011000100110111100111101100111011110", 
    89 => "0111010100100101111100001110110010100001101011100101000000000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c0iy is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c0iy is
    component pg_conv3x3_tile_c0iy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c0iy_rom_U :  component pg_conv3x3_tile_c0iy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


