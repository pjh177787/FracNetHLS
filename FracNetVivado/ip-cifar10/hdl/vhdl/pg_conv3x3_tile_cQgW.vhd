-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cQgW_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010000000000000000000000000000100000000000000000000000000000000", 
    1 => "1110000000000000000000000000000000000000000000000000000000000000", 
    2 => "1111111111111111111011111011111100000000000000000000000000000000", 
    3 => "0111010110100111111111111100111100000000000000000000000000000000", 
    4 => "0000000000000000000000000000000000000000000000000000000000000000", 
    5 => "1111011111001000010010000100000000000000000000000000000000000000", 
    6 => "1001010001000001000000000000000000000000000000000000000000000000", 
    7 => "1111010101100101000000000000000000000000000000000000000000000000", 
    8 => "1101011001001011000000000000000000000000000000000000000000000000", 
    9 => "0101010001100110000000000000000000000000000000000000000000000000", 
    10 => "0110010100110010000000000000000000000000000000000000000000000000", 
    11 => "0101000001010101000000000000000000000000000000000000000000000000", 
    12 => "0110011010010100000000000000000000000000000000000000000000000000", 
    13 => "0001101001010111000000000000000000000000000000000000000000000000", 
    14 => "1000111010101111000000000000000000000000000000000000000000000000", 
    15 => "0100100111001101000000000000000000000000000000000000000000000000", 
    16 => "1010001010001110000000000000000000000000000000000000000000000000", 
    17 => "0010011010001100000000000000000000000000000000000000000000000000", 
    18 => "0010010011000101000000000000000000000000000000000000000000000000", 
    19 => "0001001111000011000000000000000000000000000000000000000000000000", 
    20 => "1000000010101000000000000000000000000000000000000000000000000000", 
    21 => "1011110111110100000000000000000000000000000000000000000000000000", 
    22 => "1001100001100111000010001110011100000000000000000000000000000000", 
    23 => "0001000101011110000110010100101100000000000000000000000000000000", 
    24 => "1111110011110000111111001101010000000000000000000000000000000000", 
    25 => "1010111111011110110111000001110000000000000000000000000000000000", 
    26 => "0001110100011011100111001001111100000000000000000000000000000000", 
    27 => "1010011100010110110100110110111100000000000000000000000000000000", 
    28 => "0001000001100001100100110100111100000000000000000000000000000000", 
    29 => "0010110111110101010100100001110000000000000000000000000000000000", 
    30 => "0011110110111001100111000011100100000000000000000000000000000000", 
    31 => "1100101111101011100110111000100000000000000000000000000000000000", 
    32 => "1100010001110000000001101011000000000000000000000000000000000000", 
    33 => "1011000011010100111010101000010100000000000000000000000000000000", 
    34 => "1110011000001000010000101101011100000000000000000000000000000000", 
    35 => "0100011100101000001100101101111100000000000000000000000000000000", 
    36 => "1000111011001101100110001110100100000000000000000000000000000000", 
    37 => "0011000011110000000100101010110100000000000000000000000000000000", 
    38 => "0111100000100000000011010000111100000000000000000000000000000000", 
    39 => "0100010011001000101000101010011000000000000000000000000000000000", 
    40 => "1001101010000100010110000000100100000000000000000000000000000000", 
    41 => "0000010111100001010110010001101100000000000000000000000000000000", 
    42 => "1101010101001011000011011111000000000000000000000000000000000000", 
    43 => "1110001101001010000100011100000000000000000000000000000000000000", 
    44 => "0010010100111011011000001001000100000000000000000000000000000000", 
    45 => "1101110001000000010010001000100100000000000000000000000000000000", 
    46 => "0100000100010000010000000000111000000000000000000000000000000000", 
    47 => "0010001110101111001111101011011000000000000000000000000000000000", 
    48 => "1001010101010110111101110100010100000000000000000000000000000000", 
    49 => "0010000011110101010010001110011100000000000000000000000000000000", 
    50 => "1111000101001101000100101111011000100001100110010010001000101011", 
    51 => "0000011011000110110101011000111000000111100001101001110100000001", 
    52 => "0101000000001010110001000000011010101001010000000111000110000100", 
    53 => "1010011110101101100010011011101010100111101011011100100100111010", 
    54 => "1010111100110010101011101001010110111010001111111000110100010100", 
    55 => "1011001001111000010001000010011010100011111111000111000100100110", 
    56 => "0110110101111110011001010101001011110001001100100110011110100110", 
    57 => "0001101111011010111101011000110000011111000100101000000101001101", 
    58 => "1010010001110000011100110110011111110101111111000100011011100011", 
    59 => "0110111000100100010000000101100001011001100000111000001010011101", 
    60 => "1001000111011001000111010011001011100101001110110111010111111110", 
    61 => "1111000011000100100011101100011111011110100000100110001000111110", 
    62 => "0100010001000101000111100001000110011000111001001110000010010101", 
    63 => "0011111001100110011001110001101010110110101111001011001000011111", 
    64 => "0101000110000101111001101100101001101111111101010110111101011100", 
    65 => "1000000110111001111010110011111000010100011101000000101101101010", 
    66 => "0101011010000011101011100001101001110001001011011110010000110000", 
    67 => "1101100001110100101101000011111111101110111000100001110010101011", 
    68 => "1001110101011010101111110000000001100011110101011110100101110100", 
    69 => "1011110100011110110001111110001111111111011101100010100100101111", 
    70 => "0011100110110011101101001010110010100100100000001011001111110110", 
    71 => "0110000001111100100001101101011101011010100100001011000000110110", 
    72 => "0011110011000011001001000100010000000100010110100100001001010100", 
    73 => "1011011010000101110010000001001011110101001110101110101100110000", 
    74 => "0000001000001101100111100001010100001111010101101110100010000011", 
    75 => "0011011111010011100000100111111101011011011001101100111011110111", 
    76 => "1111000110111010101111111001000010011010000100110101001101110101", 
    77 => "0010000101010101100110000011001000100010010010110111111001111101", 
    78 => "1111100011110011010100000100100010110000110100110000010010001110", 
    79 => "0001100011011001000111101111010110110110101101011110000001110100", 
    80 => "0001011100101010110101101010010100110110001111011010110100001011", 
    81 => "1011000110110101010001101101010011001110100101110010100010001011", 
    82 => "1011111111100011101001010011000100100110000010100110010001010100", 
    83 => "1101101001000101100110100111110110100110010010111100111111001001", 
    84 => "1001011110010011101111000110100010101110000110110011010111100001", 
    85 => "0000000001110110100010011101111111111101111001010000111111011011", 
    86 => "0011110100111001011111000011001000001011100110111101001011111111", 
    87 => "0000010000000111001100010011111011100000111010111111101001011111", 
    88 => "0000010100010000101101000010101111110011011100111010101101100100", 
    89 => "0000101110010000110001001110101111000100010100110010100000001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cQgW is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cQgW is
    component pg_conv3x3_tile_cQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cQgW_rom_U :  component pg_conv3x3_tile_cQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


