-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbhl_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbhl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "0000000000000000000000000000000000000000000000000000000000000000", 
    3 => "0000000000000000000000000000000100000000000000000000000000000000", 
    4 => "0000000001000000000100000000000000000000000000000000000000000000", 
    5 => "0000000000000000000000000000000000000000000000000000000000000000", 
    6 => "0110000001100101000000000000000000000000000000000000000000000000", 
    7 => "0110101100000100000000000000000000000000000000000000000000000000", 
    8 => "1100010001110101000000000000000000000000000000000000000000000000", 
    9 => "1110100000011000000000000000000000000000000000000000000000000000", 
    10 => "1111000011010011000000000000000000000000000000000000000000000000", 
    11 => "0110100010100110000000000000000000000000000000000000000000000000", 
    12 => "1111010011010010000000000000000000000000000000000000000000000000", 
    13 => "0010101000101000000000000000000000000000000000000000000000000000", 
    14 => "1011000100110101000000000000000000000000000000000000000000000000", 
    15 => "1010111010100110000000000000000000000000000000000000000000000000", 
    16 => "1000011010101110000000000000000000000000000000000000000000000000", 
    17 => "0001100100110011000000000000000000000000000000000000000000000000", 
    18 => "0110011010101010000000000000000000000000000000000000000000000000", 
    19 => "1000010010111000000000000000000000000000000000000000000000000000", 
    20 => "1010011000111101000000000000000000000000000000000000000000000000", 
    21 => "0000010111000100000000000000000000000000000000000000000000000000", 
    22 => "0001000100110101011110010000011100000000000000000000000000000000", 
    23 => "0100111100001010000110011000111100000000000000000000000000000000", 
    24 => "1010111101110101101111011010110100000000000000000000000000000000", 
    25 => "0010000101111111001110010000000100000000000000000000000000000000", 
    26 => "1110111000010110111001111011001000000000000000000000000000000000", 
    27 => "0011001010111001000000101110100100000000000000000000000000000000", 
    28 => "1100011101101110111101010111111000000000000000000000000000000000", 
    29 => "0010100000111101001111010011110100000000000000000000000000000000", 
    30 => "0101000100100011110100010110001100000000000000000000000000000000", 
    31 => "1111101011010100100010101001110000000000000000000000000000000000", 
    32 => "1000001100011110000001110100011100000000000000000000000000000000", 
    33 => "1011101010010111110101101011110000000000000000000000000000000000", 
    34 => "1011011100001110110001110100011000000000000000000000000000000000", 
    35 => "1111100011110001001010000010110100000000000000000000000000000000", 
    36 => "1010110110101001110111010101100000000000000000000000000000000000", 
    37 => "0100110000111110001011001101110100000000000000000000000000000000", 
    38 => "1100010110110011001101111010001100000000000000000000000000000000", 
    39 => "1011011000011011000000101111001000000000000000000000000000000000", 
    40 => "1101111001001111000110101100110100000000000000000000000000000000", 
    41 => "1001100001100101111111000111010000000000000000000000000000000000", 
    42 => "0101101011001101011000101111110100000000000000000000000000000000", 
    43 => "1011100010000001101010100000101100000000000000000000000000000000", 
    44 => "1100110101101010101011101101111000000000000000000000000000000000", 
    45 => "0100001000001101000000000011110000000000000000000000000000000000", 
    46 => "1100001001000000010001011001100000000000000000000000000000000000", 
    47 => "1010011010010110011010111011100100000000000000000000000000000000", 
    48 => "1010100100100001101101100000101000000000000000000000000000000000", 
    49 => "0110010000110000001010001101000100000000000000000000000000000000", 
    50 => "0011111101010011001011011111100100101101010110110011111101011011", 
    51 => "0010110000011011000011001101100100001100000010011000111101011011", 
    52 => "1001100001010110001001101001011111111010011100100001000000001100", 
    53 => "0100111000000101010111011000000101011001001001010101111110000000", 
    54 => "1111010110000100010101101110011011010000111101100111011011100011", 
    55 => "0110101000100101111111000111100111111010111100011010110011101000", 
    56 => "1010100100101101101111011110101000111001101010011010111000110111", 
    57 => "0101001001011110110000101000011111010100111001000010000010010110", 
    58 => "1000111100100000010000001100101101001011010101111110100011000100", 
    59 => "0100110011101011111010001111111101101000001011101011101010001001", 
    60 => "0010101010100001101111011011100010011010100000011111100111111100", 
    61 => "1111010110001101010100110001000111111100000101100100000110100011", 
    62 => "0000010100001100110001011001110000110101110101000111011000111011", 
    63 => "0001010110101001101010100001110101110010001100111000101011001000", 
    64 => "1111001011001000010100011000011110001111001011100000110000110101", 
    65 => "1001000101110110111011100000110101011010011011100100000110101110", 
    66 => "0010000011000110100000111100101000100100101110110101001110010101", 
    67 => "1011001101111011001000111111100111010110010101100001001001011101", 
    68 => "0000011011001001011101001111010000000001011010100000011001110000", 
    69 => "0001101110110010100100000010101110000011111000100001101010000100", 
    70 => "0000101011010110010011011111110111011000011111110001110101100010", 
    71 => "1011111011001010010001011011111011101000010011011010011100110001", 
    72 => "1111010101101110111110011010111101010001100010000001101000011000", 
    73 => "0000101100100011100111111110000001011111110100110001100111010110", 
    74 => "1000000110001011111100101010110101001100010110100111101001100000", 
    75 => "0000001001001101111111110000010010101010001010000111000101110110", 
    76 => "1101101111111111000000000001011011010100110100001101100010000011", 
    77 => "1000110011000011000110010010011100000100101101001110100101010110", 
    78 => "1001001100110101111010110011010001111110000111110000110101100101", 
    79 => "1000000010110000001100101111011111000111001000101100001011010110", 
    80 => "0000011101011111101101010100110001000011010110000011001000000101", 
    81 => "1100001110111000010000101010100011101001000011001110000010010110", 
    82 => "0011100001000110101100111010110101101001111110110110110101100011", 
    83 => "1100011010000111100101010110111010001010010010101110011111100101", 
    84 => "1000011010111001100100010010111001011101110101010110011001001010", 
    85 => "0100010011001111011111000110101110010010011010100111101111101000", 
    86 => "1011010000001111111010000100010011111010011101000101000101001110", 
    87 => "0101010011011101010111000110111111011010100110001001101101001010", 
    88 => "1110101101100001111001101110011010001111111000001110101001111100", 
    89 => "1011001000011110010011010010101110000111111111100001110011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbhl is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbhl is
    component pg_conv3x3_tile_cbhl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbhl_rom_U :  component pg_conv3x3_tile_cbhl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


