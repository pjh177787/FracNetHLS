-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cVhK_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cVhK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000101111111111111110111111111000000000000000000000000000000000", 
    1 => "0000001001010000001101001101011100000000000000000000000000000000", 
    2 => "0011101101111101110101011011100000000000000000000000000000000000", 
    3 => "1000000000000000100010001001001100000000000000000000000000000000", 
    4 => "1000000010101111111111110110011100000000000000000000000000000000", 
    5 => "0000100101101000000100010001000000000000000000000000000000000000", 
    6 => "0010101110100100000000000000000000000000000000000000000000000000", 
    7 => "0010100100010100000000000000000000000000000000000000000000000000", 
    8 => "1000001111100100000000000000000000000000000000000000000000000000", 
    9 => "0111110010100110000000000000000000000000000000000000000000000000", 
    10 => "0000101110001001000000000000000000000000000000000000000000000000", 
    11 => "0110000001010000000000000000000000000000000000000000000000000000", 
    12 => "1100001011111011000000000000000000000000000000000000000000000000", 
    13 => "1111010011111001000000000000000000000000000000000000000000000000", 
    14 => "0000001110001100000000000000000000000000000000000000000000000000", 
    15 => "1010101110001100000000000000000000000000000000000000000000000000", 
    16 => "1101001100110011000000000000000000000000000000000000000000000000", 
    17 => "1101110111100110000000000000000000000000000000000000000000000000", 
    18 => "1101011111110101000000000000000000000000000000000000000000000000", 
    19 => "0010001000000101000000000000000000000000000000000000000000000000", 
    20 => "1111111000100111000000000000000000000000000000000000000000000000", 
    21 => "1100011111110110000000000000000000000000000000000000000000000000", 
    22 => "1100111111110010110001111111001100000000000000000000000000000000", 
    23 => "0011000001010010001000110100001000000000000000000000000000000000", 
    24 => "0100100000110101011000001110011100000000000000000000000000000000", 
    25 => "1111011100110111011101111001000100000000000000000000000000000000", 
    26 => "1100110111011010110011011111111000000000000000000000000000000000", 
    27 => "0110001010100011110001100011101000000000000000000000000000000000", 
    28 => "1011001000001110010000101110000000000000000000000000000000000000", 
    29 => "1100000000001001010001111011110100000000000000000000000000000000", 
    30 => "0001010111011001000100110100100100000000000000000000000000000000", 
    31 => "0011011100000100000100000100101100000000000000000000000000000000", 
    32 => "1011000001100110000010101110001100000000000000000000000000000000", 
    33 => "0010110101000110000001100110100000000000000000000000000000000000", 
    34 => "0010111111011111110011110011100000000000000000000000000000000000", 
    35 => "0100100011001000000000101000011000000000000000000000000000000000", 
    36 => "1100000110000100010111010110001000000000000000000000000000000000", 
    37 => "1010110111010111100010111000101100000000000000000000000000000000", 
    38 => "0000010001110101110000010100001100000000000000000000000000000000", 
    39 => "1111001011101100001110101001001100000000000000000000000000000000", 
    40 => "0001100001110000111111010001001100000000000000000000000000000000", 
    41 => "1000001001010101011000010111000100000000000000000000000000000000", 
    42 => "1001110001110100001111101111010100000000000000000000000000000000", 
    43 => "1111010100111111110101011000010100000000000000000000000000000000", 
    44 => "1101010100101111011101001011101100000000000000000000000000000000", 
    45 => "0100000111101001010100010100011100000000000000000000000000000000", 
    46 => "0000010110000010110110010100001100000000000000000000000000000000", 
    47 => "1010011101010101110110110000100000000000000000000000000000000000", 
    48 => "1011110100011001001101011011001000000000000000000000000000000000", 
    49 => "1000101000101111001111111011000100000000000000000000000000000000", 
    50 => "1110100000011010001011101111010110111011000111011110111010110111", 
    51 => "0110000110110001101100000110011000100001101001001111101111101011", 
    52 => "1011001111001101001010101001001010110000110011000010101110001010", 
    53 => "1000011001100100011000101111010000110000011001000111101011001010", 
    54 => "1101000001101100011001000010011010110000101101101110100111100001", 
    55 => "1111110101011011000010100100001111000110000000010000011001010000", 
    56 => "0100111001010110010001000100001101001111000100100111010110010011", 
    57 => "0100100001010011101010000101100000001000010001011010100101011011", 
    58 => "0010000110101000111010111110110000101001110011111001010000010110", 
    59 => "1000111110000000001101110010001000000011011011101110000001011100", 
    60 => "1100010001100001111111010111010001101011011000001111010100110110", 
    61 => "0000100111001101110101010000101001011101000000010011110111111000", 
    62 => "1011101010000111100011001111110010010000101000011110001001101001", 
    63 => "0111000110101011110110011101100010110000000111010101110011100101", 
    64 => "1011101000011110100010111010100110000110000011111011100101110111", 
    65 => "1011110111001011010101101001011101100111010001100011101010101010", 
    66 => "0110000011000111010111100101010001001010100001000110000000001110", 
    67 => "1000111101101000011101111010101000000111111101111101111010100100", 
    68 => "0110101001111100100111000000101011011111110100111001110010001001", 
    69 => "1010111101100100110110101000010010001101101100001001000111011001", 
    70 => "0011101110110011011000000100101000101001001011111111111010000001", 
    71 => "0010101010010100010111101000001111001110001101101001001110010010", 
    72 => "1100101010011000110100100100001100001100100101010001000100001001", 
    73 => "1100100010001110010110101011000011001011001010000110000111111000", 
    74 => "0100001011110011010111011100010110000111011111001111011101110011", 
    75 => "1101100100110101000110011101111111111101101001011100111010101100", 
    76 => "0111010100110111001101010101001010100100111110110000010001100000", 
    77 => "1101100100000001011111100000000010011111010101001011110000001111", 
    78 => "1011010000011010100101001011111100001001101000010011011100110110", 
    79 => "1001111001000000011011011111001010100101111010010110010100100110", 
    80 => "1100000010110101111101101000001110010011100011101000010010110000", 
    81 => "0001000100010111110000100010001001001001101001011011001001000010", 
    82 => "1101000000100011010010011011001110101011100101110001001011100100", 
    83 => "0111110010010001000011010000001010101100001001100010110101000000", 
    84 => "1001110001100011100011010010000010010011011100110001000101100000", 
    85 => "1110100001110001111011110010001000100101001000000011101101001001", 
    86 => "0011011101001000010001101110010010111011011000000011110110101011", 
    87 => "0000001000100101111110110010000001011010000011001011111101100101", 
    88 => "1100101011000011000111010000001111110010100011101011111100001101", 
    89 => "1000001101000001001110010101111010011110110100011110010111101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cVhK is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cVhK is
    component pg_conv3x3_tile_cVhK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cVhK_rom_U :  component pg_conv3x3_tile_cVhK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


