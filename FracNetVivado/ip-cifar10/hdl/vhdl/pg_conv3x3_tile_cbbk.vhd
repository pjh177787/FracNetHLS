-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbbk_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbbk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000111111111111111101010010000000000000000000000000000000000000", 
    1 => "0111000010000000000000001000100000000000000000000000000000000000", 
    2 => "0111111111110111011111111111111100000000000000000000000000000000", 
    3 => "1000000000000000000000000000000000000000000000000000000000000000", 
    4 => "1111111111011101111111111111111100000000000000000000000000000000", 
    5 => "1111111111111110111111101111111100000000000000000000000000000000", 
    6 => "1110000110110011000000000000000000000000000000000000000000000000", 
    7 => "1111011011000010000000000000000000000000000000000000000000000000", 
    8 => "1100010111011000000000000000000000000000000000000000000000000000", 
    9 => "1001001010111010000000000000000000000000000000000000000000000000", 
    10 => "1100010111001100000000000000000000000000000000000000000000000000", 
    11 => "1111010010001010000000000000000000000000000000000000000000000000", 
    12 => "1100001010001010000000000000000000000000000000000000000000000000", 
    13 => "0001000111111010000000000000000000000000000000000000000000000000", 
    14 => "1100010010011001000000000000000000000000000000000000000000000000", 
    15 => "1100110100011010000000000000000000000000000000000000000000000000", 
    16 => "1010110101011000000000000000000000000000000000000000000000000000", 
    17 => "1000001110001000000000000000000000000000000000000000000000000000", 
    18 => "0001110101010001000000000000000000000000000000000000000000000000", 
    19 => "1111000010000001000000000000000000000000000000000000000000000000", 
    20 => "1101010111101100000000000000000000000000000000000000000000000000", 
    21 => "0001010000100101000000000000000000000000000000000000000000000000", 
    22 => "1000111111110101110111010011100100000000000000000000000000000000", 
    23 => "0011111111100101110001010110111000000000000000000000000000000000", 
    24 => "1100010001101000000011011010110100000000000000000000000000000000", 
    25 => "1011111101011110101101110101001100000000000000000000000000000000", 
    26 => "0000110000111001001001001000010000000000000000000000000000000000", 
    27 => "0101110101111010011111010000101000000000000000000000000000000000", 
    28 => "1111111110100100110101111000110000000000000000000000000000000000", 
    29 => "1101000010011011101111011101000100000000000000000000000000000000", 
    30 => "1100001001011110001001001001001000000000000000000000000000000000", 
    31 => "1011111011101111111110111111101100000000000000000000000000000000", 
    32 => "1010101111111001100101001010100000000000000000000000000000000000", 
    33 => "0111100000001010101110000001001100000000000000000000000000000000", 
    34 => "1011001011001011000001011001000000000000000000000000000000000000", 
    35 => "1100100101110110110101110000000000000000000000000000000000000000", 
    36 => "0100001100000001011110111001101000000000000000000000000000000000", 
    37 => "0111110011010001100110101011101000000000000000000000000000000000", 
    38 => "1100001000010110110101010100111100000000000000000000000000000000", 
    39 => "0010111110110010100101010000101000000000000000000000000000000000", 
    40 => "0100100111110010111000100100010000000000000000000000000000000000", 
    41 => "0010101000111101001100001011100100000000000000000000000000000000", 
    42 => "1000000001101000000100000010110000000000000000000000000000000000", 
    43 => "0110011010000010001000011101001000000000000000000000000000000000", 
    44 => "0000100001100100001000000000110100000000000000000000000000000000", 
    45 => "1000000100110011101101010000100100000000000000000000000000000000", 
    46 => "1101100001110000010001001101011000000000000000000000000000000000", 
    47 => "0110110000100000011001001111100100000000000000000000000000000000", 
    48 => "0100100001110000011101010000011100000000000000000000000000000000", 
    49 => "0011101101101110001001111111000000000000000000000000000000000000", 
    50 => "1100100001110101010010001110110111011000110101001000101010111111", 
    51 => "1110010001101111011110010111001111101000111111010110111011110010", 
    52 => "0111011100111110000001110000111001011111100001110001011110001100", 
    53 => "1110100101110111001011100100111010101000111101010000010011101001", 
    54 => "1000000001101000100001110100111111111101011000100000111100101111", 
    55 => "0001111100101000000101111111010100101111000100010111011101111101", 
    56 => "0000101100100100110001010110010001001110001001101101011101000101", 
    57 => "0001101100010110000111000001100101001110101101101001100101001001", 
    58 => "0101010111001100101100111000111011100101011110010001111000101010", 
    59 => "1001100000110001100111001011100010111011010101001001111110100000", 
    60 => "0000100100111100110001010110001000000111011000001110000100111000", 
    61 => "1111111111110010111100010001101010011101011001001111010111010101", 
    62 => "0010000011101110100000100010110100100100101010000010010100011010", 
    63 => "0111011101011001101101000000011100000101100101001010001011100110", 
    64 => "0111111001100101010001011101100001001010000001011011100001110110", 
    65 => "1000100110010111100001000011110101111111100100111000000100110100", 
    66 => "1000001000000010110111000110000110111010000111000011000001110001", 
    67 => "1011100100111001100100111000111110110110111110010011001110001101", 
    68 => "1010111100100110001010101100111100010110100011011100100001110001", 
    69 => "1001111001001101110000100110011111110100111100010110010111100001", 
    70 => "1000011000111100100010010101100011011100101010011100001011011100", 
    71 => "0010001001100101000111011011100000001110101010011101110010011100", 
    72 => "0000100011011101101001000000010010110111111011001100000000001001", 
    73 => "1011101001010111011100001011101110011010110001011101011001110101", 
    74 => "1011010010010001101001001001001110110010000110011000010100011010", 
    75 => "1001100010011110001000010011101100010000101110110001010001001101", 
    76 => "1011100110011000110011011111000111100111100001010110010100010111", 
    77 => "1000111110000010001010111110100010110100000111101111100001010110", 
    78 => "0111001100100000110101010011011111100010001000100010010000100110", 
    79 => "0000111001010001101011110010001011100101011110010101010101110001", 
    80 => "0000101000011010000100011010010010001000011100011000100110110101", 
    81 => "1100110011010111000101111111010000100010110011001001010010001110", 
    82 => "1101000111101111011100100111010010110100101001011111001111001000", 
    83 => "1000101011100100101011001000001000110110001011110000110111000100", 
    84 => "0110111000110111110000000010101010011111100001010000011010011001", 
    85 => "0011101011000011010111000101101110000010010001000101100001010111", 
    86 => "0101010010101001101101100000001101111100100100111100000010011011", 
    87 => "0111110111101110101100101001010101011110110100010001111100001001", 
    88 => "1100100001001100101011100101010100101011110011001010101001011001", 
    89 => "1001100101010000011000001010101111000011100010010100100111100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbbk is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbbk is
    component pg_conv3x3_tile_cbbk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbbk_rom_U :  component pg_conv3x3_tile_cbbk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


