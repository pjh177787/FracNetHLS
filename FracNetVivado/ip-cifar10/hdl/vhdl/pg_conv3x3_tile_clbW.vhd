-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_clbW_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_clbW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111011110111011111111111111000000000000000000000000000000000", 
    1 => "1111111011111011111010001111111100000000000000000000000000000000", 
    2 => "1001111111100111111111111111111100000000000000000000000000000000", 
    3 => "0111111111111111110111100111111000000000000000000000000000000000", 
    4 => "0001000001000001000001111010000000000000000000000000000000000000", 
    5 => "0000000001001100101001000000000000000000000000000000000000000000", 
    6 => "0000111111101110000000000000000000000000000000000000000000000000", 
    7 => "1000101010101011000000000000000000000000000000000000000000000000", 
    8 => "1001110111111011000000000000000000000000000000000000000000000000", 
    9 => "1001101010101011000000000000000000000000000000000000000000000000", 
    10 => "0000011011001011000000000000000000000000000000000000000000000000", 
    11 => "1000110100001011000000000000000000000000000000000000000000000000", 
    12 => "1000111111001110000000000000000000000000000000000000000000000000", 
    13 => "1011001110010000000000000000000000000000000000000000000000000000", 
    14 => "0000101010001110000000000000000000000000000000000000000000000000", 
    15 => "0000101000011110000000000000000000000000000000000000000000000000", 
    16 => "0111000101100001000000000000000000000000000000000000000000000000", 
    17 => "0000000001111010000000000000000000000000000000000000000000000000", 
    18 => "0111001111110011000000000000000000000000000000000000000000000000", 
    19 => "1111101111000001000000000000000000000000000000000000000000000000", 
    20 => "1111100101101011000000000000000000000000000000000000000000000000", 
    21 => "0000000001100000000000000000000000000000000000000000000000000000", 
    22 => "0101111100101111111110100010000000000000000000000000000000000000", 
    23 => "0000010111111010010101010101110000000000000000000000000000000000", 
    24 => "0101101111011010111111010101101000000000000000000000000000000000", 
    25 => "1000000111111101111101010001111100000000000000000000000000000000", 
    26 => "1111001000011001011100001100010100000000000000000000000000000000", 
    27 => "1011110001100100110010101100010000000000000000000000000000000000", 
    28 => "1100101101011010110110010001000000000000000000000000000000000000", 
    29 => "0001010001111110000001101110111100000000000000000000000000000000", 
    30 => "0100010111110101010001001101100000000000000000000000000000000000", 
    31 => "0111000110010101000110001110110100000000000000000000000000000000", 
    32 => "0101110111011001000100111001010100000000000000000000000000000000", 
    33 => "1010100101100100111011110110111100000000000000000000000000000000", 
    34 => "1100000000000000010101001011011100000000000000000000000000000000", 
    35 => "1000110000100110011111010011011000000000000000000000000000000000", 
    36 => "0000111110111011010101110001111000000000000000000000000000000000", 
    37 => "1101101111010010001100110111010100000000000000000000000000000000", 
    38 => "1110000111111010101011010110011000000000000000000000000000000000", 
    39 => "0011010001000011110010000000100100000000000000000000000000000000", 
    40 => "1011110111001110110010110000100000000000000000000000000000000000", 
    41 => "0001110000000001101111010100110100000000000000000000000000000000", 
    42 => "1101011101000000100011010111001000000000000000000000000000000000", 
    43 => "1001010111001011110100110000111000000000000000000000000000000000", 
    44 => "1100111011100100110101011100111000000000000000000000000000000000", 
    45 => "0100110010011100000100101110011000000000000000000000000000000000", 
    46 => "0001111100111011001111000011100100000000000000000000000000000000", 
    47 => "1110110111001111011000111000101100000000000000000000000000000000", 
    48 => "0100101011111001111000101111010000000000000000000000000000000000", 
    49 => "0000011111101001111110110110111100000000000000000000000000000000", 
    50 => "1001000100110111101000100100011101111001010110101110001011101001", 
    51 => "0110110000001110101001100111011011100000010001100011110010110011", 
    52 => "0100111100100010000111111111100011011111111010100100011011111110", 
    53 => "0100110110101010111001010110011001011011011010111010010011000111", 
    54 => "1011000100000011000101101010100110001000000001110000001100111101", 
    55 => "0011010001011100000010111110010110010011001110010000001011100111", 
    56 => "1100101000001100111111011110010010101011000101011111101111101110", 
    57 => "0101000001011111000001100001011000111100110110100001101000000101", 
    58 => "0100100011110110110011000100000001011100101111001111011001010111", 
    59 => "0000111100100000011111111011101011101101111111110101011100011010", 
    60 => "0000011011001100101000100000101100101101110011001100100101011001", 
    61 => "0111001000101101011010010010011000111001001100111000010010100111", 
    62 => "0001000001110010000100100111001001011110011111000111110111010001", 
    63 => "0000011010011011101000110011110000010110001110000100101001011100", 
    64 => "0110000010000011010100001101000000001110100010000110011001010001", 
    65 => "1011111111111001000000000110111110111001111101000001010011100110", 
    66 => "0000110110101010000010101101110110001110000011100000010010001000", 
    67 => "1000111001000101011111111010001001011011011010100011110010100010", 
    68 => "0111001011001000110101010010011000001001101110001011111100110100", 
    69 => "1000001011011001110010000000100011111111011001010000011101101001", 
    70 => "1110000110110101011000111000000110001000110111101000001010010110", 
    71 => "1010011100000100100111110001100010010011111000001011100111101010", 
    72 => "0000111011010000101011001011001011011011001010111001010101101000", 
    73 => "0000000101100000010111001010101001000110101000000111001101101010", 
    74 => "1001010010000001100100010001000111100110001101110101000111110110", 
    75 => "0101001111010001000000010000100100010001011100001011000111010011", 
    76 => "1101100101110110110001000000101000101111101100000011110110101001", 
    77 => "0000110110110000110101001010010100001101111110101100001111111011", 
    78 => "1101111011101010010110101001111010001001011011010000110000010110", 
    79 => "0011111101110100110111011101101010000111111100110100010101100001", 
    80 => "0000111000011101100110110000001011101010111011101010001110100010", 
    81 => "0010101001100100010111111001110110110111011110000100100101011000", 
    82 => "1001101101110001111010011101000110010011100000001100110000101110", 
    83 => "0000101111100110100010111010111111111010011110001110001111001000", 
    84 => "1101000100111000001111101101111110000110100101101001000000101011", 
    85 => "1010011111111100110001001111111100010010111000100111110100101110", 
    86 => "1000010110100110000111010011100111110000101001001111101110100101", 
    87 => "1100011100011011000101000011101000011111101110010000111011111011", 
    88 => "0001111000110011000110011001000011101000011101001010101010101100", 
    89 => "0010011101000110001011111111000101110010111110110101111011011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_clbW is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_clbW is
    component pg_conv3x3_tile_clbW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_clbW_rom_U :  component pg_conv3x3_tile_clbW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


