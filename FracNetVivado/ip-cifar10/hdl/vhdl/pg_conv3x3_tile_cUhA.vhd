-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cUhA_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cUhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1101001111010110011010000011111000000000000000000000000000000000", 
    1 => "0101000000000000000000000000000000000000000000000000000000000000", 
    2 => "1110100001100000110011111000011000000000000000000000000000000000", 
    3 => "1000000000000000000000000000001100000000000000000000000000000000", 
    4 => "0010101111101111111111111010001100000000000000000000000000000000", 
    5 => "0000111111111000010001110111000000000000000000000000000000000000", 
    6 => "0100010101010100000000000000000000000000000000000000000000000000", 
    7 => "1101010110110100000000000000000000000000000000000000000000000000", 
    8 => "1001001011011000000000000000000000000000000000000000000000000000", 
    9 => "0100110110100111000000000000000000000000000000000000000000000000", 
    10 => "1000010001111110000000000000000000000000000000000000000000000000", 
    11 => "0111010111100011000000000000000000000000000000000000000000000000", 
    12 => "1110001110001100000000000000000000000000000000000000000000000000", 
    13 => "1111010111111001000000000000000000000000000000000000000000000000", 
    14 => "0010110101010100000000000000000000000000000000000000000000000000", 
    15 => "1100010000110000000000000000000000000000000000000000000000000000", 
    16 => "1110111011000000000000000000000000000000000000000000000000000000", 
    17 => "1100010101101110000000000000000000000000000000000000000000000000", 
    18 => "1110111110110111000000000000000000000000000000000000000000000000", 
    19 => "0110001000000101000000000000000000000000000000000000000000000000", 
    20 => "0110111000100101000000000000000000000000000000000000000000000000", 
    21 => "1100011010100110000000000000000000000000000000000000000000000000", 
    22 => "1110101001100000111000011111011100000000000000000000000000000000", 
    23 => "1010001101011011101100110100000100000000000000000000000000000000", 
    24 => "1100100000100101010000001010000100000000000000000000000000000000", 
    25 => "0111000000001011010100101010000000000000000000000000000000000000", 
    26 => "1000110111010001111100011011001000000000000000000000000000000000", 
    27 => "1110001100100011111001110010001000000000000000000000000000000000", 
    28 => "1110011001100100010010100100001000000000000000000000000000000000", 
    29 => "1010010001010001001001100010111100000000000000000000000000000000", 
    30 => "0101111000000100111100111101000100000000000000000000000000000000", 
    31 => "0011010100010000000100100101101100000000000000000000000000000000", 
    32 => "0110000100110101011110010000000100000000000000000000000000000000", 
    33 => "1111010000100110110001010100011000000000000000000000000000000000", 
    34 => "0001011111011111100101110101111000000000000000000000000000000000", 
    35 => "1100000011011100000000001010011000000000000000000000000000000000", 
    36 => "1110001010101100010010001100000100000000000000000000000000000000", 
    37 => "1010010111010100100110110100011100000000000000000000000000000000", 
    38 => "0101011110110100010100010101111100000000000000000000000000000000", 
    39 => "1011101001101111000111100000101100000000000000000000000000000000", 
    40 => "0011000011101000101010001111100000000000000000000000000000000000", 
    41 => "1001001010000101000110110110010000000000000000000000000000000000", 
    42 => "1101101001110100011101101111010100000000000000000000000000000000", 
    43 => "1101011100111100110101011000011100000000000000000000000000000000", 
    44 => "1010000000100100011111001010001100000000000000000000000000000000", 
    45 => "0100000110101001011101010100011100000000000000000000000000000000", 
    46 => "1001011110110010111010111111110000000000000000000000000000000000", 
    47 => "1010010101010101110011110000100000000000000000000000000000000000", 
    48 => "1111110110011000011101101011001100000000000000000000000000000000", 
    49 => "1011110100111110000111110011110100000000000000000000000000000000", 
    50 => "0110101110010001000110000111010110011011110010011000110101110111", 
    51 => "1010101111100011110101001011111010100101101101100001100001100101", 
    52 => "1011001101001111000100110100011110100101010011111010001010000010", 
    53 => "1010001111100100000110001110110010100010101001000111101001001100", 
    54 => "1111001111000000011111101000000010100011110000001111100110110000", 
    55 => "0011100101011011001011110100011001010101000010110000111011010100", 
    56 => "0100111001011010111111011111000001011011011101110111110111110001", 
    57 => "0110100001110010001011000101001011101000111000001100111001111011", 
    58 => "0111010011001100011111011100011000101000101011101000011011000110", 
    59 => "1110111001010000100011100010101101011011011001011110001000001100", 
    60 => "1010110000100001101111001111011011100011101001001110101000010110", 
    61 => "0011010111001001010011110000101101101000001000110011100100000000", 
    62 => "1101001101000011100001011101110110100101111011100110001101111100", 
    63 => "0101001110111101111001011100000011011101011011010101001111100000", 
    64 => "1000010000000111101100100111111010100110001111110111001110101110", 
    65 => "0001010011001001010000101101111011100111010010010111001010011010", 
    66 => "0001000111001011010110000101111101000100100010100101011100100010", 
    67 => "1100011100000000010100110011100101000001111100100110010010101100", 
    68 => "1010001001111100010001101000111110011110100111100101111000001001", 
    69 => "1110111101110100101110101000010011100100111000001001000111000000", 
    70 => "1101111011100011111011001100100101111001011001011110010011010100", 
    71 => "0101000111100110011001110000111010110011111000000000001110110010", 
    72 => "0010000000111111111001000000110001101101000101110010110000001001", 
    73 => "1000101100011010010110100011000111001011010010000100101010111001", 
    74 => "0110011110110100001001111100010011000000110100101110000101010011", 
    75 => "1001000110110001001111011101111000001100110000000100001100000000", 
    76 => "0011110100100111000010011111110001101111111100111010101011100100", 
    77 => "1101100100010011100010110101000010111101010110010010110000001101", 
    78 => "1001111000011010101000000011111101011110101011011011110000110100", 
    79 => "0011100001010000001011000101101011110011111001011111010000111110", 
    80 => "0101010100110101111101101100101101011011001001001000110010100000", 
    81 => "1100000110101110010011111110011000100101010011110111011000000010", 
    82 => "0101001000110010010110111010011110001010110011110101001001101000", 
    83 => "0011111110010001000110101000100110001101000001100010110101000000", 
    84 => "1010101101100110100011010010000000011010001100011001100001100100", 
    85 => "0011011011110100010010011111001110110000001000100011000001001101", 
    86 => "1001111100011001011001111010010001110010010000101011110000111111", 
    87 => "0000110100001010111011110010000010011010000010100010010100100010", 
    88 => "1101100000001110100010110000011111110010100011001000111000010110", 
    89 => "1010101100000000011110000001100010110011110100110110011111111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cUhA is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cUhA is
    component pg_conv3x3_tile_cUhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cUhA_rom_U :  component pg_conv3x3_tile_cUhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


