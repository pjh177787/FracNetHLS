-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_crcU_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_crcU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1110111111101111111101111111111000000000000000000000000000000000", 
    1 => "1111111111111111111111111010111000000000000000000000000000000000", 
    2 => "1111111111111111110110110111111000000000000000000000000000000000", 
    3 to 4=> "0000000000000000000000000000000000000000000000000000000000000000", 
    5 => "0000001001000000111100000100100000000000000000000000000000000000", 
    6 => "0011000111100000000000000000000000000000000000000000000000000000", 
    7 => "0000100000000101000000000000000000000000000000000000000000000000", 
    8 => "0010101011000110000000000000000000000000000000000000000000000000", 
    9 => "0000001010000011000000000000000000000000000000000000000000000000", 
    10 => "0010110110100100000000000000000000000000000000000000000000000000", 
    11 => "0110010100000100000000000000000000000000000000000000000000000000", 
    12 => "0010101010000100000000000000000000000000000000000000000000000000", 
    13 => "1101010110111000000000000000000000000000000000000000000000000000", 
    14 => "0111000100010001000000000000000000000000000000000000000000000000", 
    15 => "1011110111010000000000000000000000000000000000000000000000000000", 
    16 => "0101010101010011000000000000000000000000000000000000000000000000", 
    17 => "0111100101011010000000000000000000000000000000000000000000000000", 
    18 => "0010011101110001000000000000000000000000000000000000000000000000", 
    19 => "1010000001100101000000000000000000000000000000000000000000000000", 
    20 => "1010111110100010000000000000000000000000000000000000000000000000", 
    21 => "0010011011101101000000000000000000000000000000000000000000000000", 
    22 => "1100110111011010011000010101011000000000000000000000000000000000", 
    23 => "0000110000111101010001101001001100000000000000000000000000000000", 
    24 => "1010000000100100011000000010011100000000000000000000000000000000", 
    25 => "1101101011111011010101101000100100000000000000000000000000000000", 
    26 => "0111100101110111010100010101001100000000000000000000000000000000", 
    27 => "1000010001010101000101100001000000000000000000000000000000000000", 
    28 => "1110001010100100011000101100010000000000000000000000000000000000", 
    29 => "0100011000000110011101001111011000000000000000000000000000000000", 
    30 => "0111011110011001000101001101100100000000000000000000000000000000", 
    31 => "1000000110010101011100100100011100000000000000000000000000000000", 
    32 => "1010001100111101101001001111001000000000000000000000000000000000", 
    33 => "0000011000011011101101000010110100000000000000000000000000000000", 
    34 => "1000100000100010110101010010001000000000000000000000000000000000", 
    35 => "1011000001000110101010000001000100000000000000000000000000000000", 
    36 => "0000010110101011010011011001101100000000000000000000000000000000", 
    37 => "0100000101100101011111000111001100000000000000000000000000000000", 
    38 => "1010010010011100011001000110001000000000000000000000000000000000", 
    39 => "0101001010000011101111001101001000000000000000000000000000000000", 
    40 => "0101110100011011001111100111111100000000000000000000000000000000", 
    41 => "1010110010110110100011101100010000000000000000000000000000000000", 
    42 => "1101001100000100100110011000001000000000000000000000000000000000", 
    43 => "1010010101100011010101110001001000000000000000000000000000000000", 
    44 => "0000011011000100010110001000110100000000000000000000000000000000", 
    45 => "0101101001101000001000001010110000000000000000000000000000000000", 
    46 => "1001000001110100011001000011000100000000000000000000000000000000", 
    47 => "0111000000011110001000001001001100000000000000000000000000000000", 
    48 => "0001100111011001000100100110101100000000000000000000000000000000", 
    49 => "1000010111000001100010110100000100000000000000000000000000000000", 
    50 => "0111001001001011001100101011000000110011110001010011001110110010", 
    51 => "0100010011010101011000101000000001010001000111011111011010110000", 
    52 => "1101000011001000110000111100111000010100110001001010010011010010", 
    53 => "0101101011011001000010110100001100101110110011011000101101011011", 
    54 => "0000110001110000001100100011101001111101100110100100011010011010", 
    55 => "1110101111100000110101010001101010011100111000001101010100111000", 
    56 => "1110001000111100110000001100011011001000101001001101000110000111", 
    57 => "0100101001100001111011000011111001001001111010111100110010110010", 
    58 => "0001100101001111001000110101100001001001000110110011010001001010", 
    59 => "1011001001111000100000011100110110111011101100111100000000100101", 
    60 => "1011001100100100010100001010101110111010100011011111000110110101", 
    61 => "1000110110011101110001000000111111111111110100100110101100101010", 
    62 => "1100001001110000001100111001110101001001101001000100000000110001", 
    63 => "0111110011010111001100110100001110111000011111100111110011010010", 
    64 => "0100100000010011000010110100010101001000110100000110011000010111", 
    65 => "0111000101000110000000100000011101001010010111110011101010100001", 
    66 => "1010101001011010110110111011110111010010000100010000000000101111", 
    67 => "1101111010111000100010001001110011110000101011110100100010001000", 
    68 => "0000001100110110100111111100001101111000000001100101101001011001", 
    69 => "1110010001011010001110011001000101011011100100011100010010111011", 
    70 => "0010010110011111100100011100010000100101100100011011100101000001", 
    71 => "1000001100110100100000011000101000010101110010110100100101001000", 
    72 => "1010001110100110110101001011011000111011111011101111001111110010", 
    73 => "1110000001101001011111011100110000010011111001000101010111011000", 
    74 => "0001110100000010000000010110000001001000000000001101110111100100", 
    75 => "1001010000001111011110000101111011000111110001000110111100001010", 
    76 => "0001110000000011010100001001000011111110111110101100101000000111", 
    77 => "0010011000101000011110011010111100101010000101011110000010100111", 
    78 => "1100010100011111101000100000001000010000111101101011100111111001", 
    79 => "0000101101111011001000011000110010001000001100010111100010011000", 
    80 => "1010001111010110111110100001110100110101111111010110100101011010", 
    81 => "1001001000110001001001010001110000000111011101001101110001001110", 
    82 => "1011001011000101111001011110001000101100101001011000100001000010", 
    83 => "0001001001111000010011010111110000000111101001100010101011110111", 
    84 => "1001000111000011110111001010011110000110100011100111110100101101", 
    85 => "1010001000101110110101111001000001110110010001110001110101001001", 
    86 => "0000001100101001110101010100111111100101110101001101000111001111", 
    87 => "1000001010100010111000011000011001011100011101101011100100001001", 
    88 => "1000001001101110001011100001111001010111101010010100100100100000", 
    89 => "1000010100111010110100010111010111110110001100000110100011101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_crcU is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_crcU is
    component pg_conv3x3_tile_crcU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_crcU_rom_U :  component pg_conv3x3_tile_crcU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


