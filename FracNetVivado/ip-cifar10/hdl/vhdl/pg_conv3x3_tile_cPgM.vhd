-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cPgM_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cPgM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111101111111111111100000000000000000000000000000000", 
    1 => "1111111110101111011101011111111100000000000000000000000000000000", 
    2 => "1111111111111111011111111111011100000000000000000000000000000000", 
    3 => "1111111111111111111111111111111100000000000000000000000000000000", 
    4 => "1111111111111111001000001011111100000000000000000000000000000000", 
    5 => "1111111111111111111111111111111100000000000000000000000000000000", 
    6 => "1001110101011011000000000000000000000000000000000000000000000000", 
    7 => "1011110001101001000000000000000000000000000000000000000000000000", 
    8 => "0001010101001111000000000000000000000000000000000000000000000000", 
    9 => "0100100010000010000000000000000000000000000000000000000000000000", 
    10 => "0101010101010011000000000000000000000000000000000000000000000000", 
    11 => "1000101110000010000000000000000000000000000000000000000000000000", 
    12 => "0011010001110011000000000000000000000000000000000000000000000000", 
    13 => "1000101110001110000000000000000000000000000000000000000000000000", 
    14 => "1010011010111100000000000000000000000000000000000000000000000000", 
    15 => "0100011110101100000000000000000000000000000000000000000000000000", 
    16 => "0111010001110001000000000000000000000000000000000000000000000000", 
    17 => "1111110001010010000000000000000000000000000000000000000000000000", 
    18 => "1010110111010101000000000000000000000000000000000000000000000000", 
    19 => "0000001111000001000000000000000000000000000000000000000000000000", 
    20 => "1010110011101000000000000000000000000000000000000000000000000000", 
    21 => "0011110111011000000000000000000000000000000000000000000000000000", 
    22 => "0100011111001100010001001011010000000000000000000000000000000000", 
    23 => "1101101101001101111110010100010100000000000000000000000000000000", 
    24 => "1001100000110010011100101110000100000000000000000000000000000000", 
    25 => "0011110000110001111110001111110100000000000000000000000000000000", 
    26 => "0101011000101111110100111001111000000000000000000000000000000000", 
    27 => "1011011101010110000001110000011000000000000000000000000000000000", 
    28 => "1001000001100001000000101110011100000000000000000000000000000000", 
    29 => "1000111111011010010101010101101000000000000000000000000000000000", 
    30 => "0001001100110110000101001000111100000000000000000000000000000000", 
    31 => "0101010010110000101011100010111000000000000000000000000000000000", 
    32 => "0001101011000000111101001101000000000000000000000000000000000000", 
    33 => "1010010011110000010000100000010000000000000000000000000000000000", 
    34 => "0110010101000100011011011001011000000000000000000000000000000000", 
    35 => "0100000001000001000000001011010000000000000000000000000000000000", 
    36 => "0011111000001100111101101100100000000000000000000000000000000000", 
    37 => "0100000000100110001001101011011000000000000000000000000000000000", 
    38 => "0110010100001010001001001000011100000000000000000000000000000000", 
    39 => "0000000001000010000001001111111000000000000000000000000000000000", 
    40 => "0001001100001110001100111000101100000000000000000000000000000000", 
    41 => "0010100000000000100111010100101100000000000000000000000000000000", 
    42 => "1100110111010001000011011001100000000000000000000000000000000000", 
    43 => "0110011100001000000101110100010000000000000000000000000000000000", 
    44 => "0000000101011011011000101001010100000000000000000000000000000000", 
    45 => "1101010011010001010000011111000100000000000000000000000000000000", 
    46 => "0100000000100010010000000000010000000000000000000000000000000000", 
    47 => "1000001110111100101011100011110000000000000000000000000000000000", 
    48 => "1010100001010111101111100100100100000000000000000000000000000000", 
    49 => "0010000000110101011010001111001100000000000000000000000000000000", 
    50 => "1100111111101100000110111011001010000011010010011000101100110110", 
    51 => "0110111010110001000111110001000001101100110001010011111110010001", 
    52 => "1010000000011100111001001000000010101001001100000111000010100100", 
    53 => "1010011000001100100010101011000110100011011111001100101010111001", 
    54 => "1000101100010110011111110001000110001111000101101001110100010100", 
    55 => "1001001111111110010101000001010110100011101101101000010100110100", 
    56 => "1101011110111100010001001000000100010110101010011001011101000001", 
    57 => "0101111010010010010100011011000000001101110100110001010011010000", 
    58 => "0010010000110000011010101111111011110001111101100100000110001111", 
    59 => "1111010000100100010011100101001111111000100100010000000010110111", 
    60 => "1000101100010101000010000011100101001011001100010110000110111111", 
    61 => "0100110001111101110010011000001110001101111011010010001000010010", 
    62 => "1101010001000110011101100000101111011001011111100111110000101001", 
    63 => "0011010010110110000010101000000010110010110101001010110010001111", 
    64 => "1101000100110101110001100110101111010111101101111100001100011101", 
    65 => "1111110101110101111010100100111010111001001111101100000000000100", 
    66 => "0100000010000011100010101011001001110111011010011010000010101000", 
    67 => "1110000001111001101111000001011111111110011001100010110101101101", 
    68 => "1000001110011011101000111101010111111011100001111110001111110010", 
    69 => "1110111110011110111110101110001111111111111101101010100101110011", 
    70 => "0011001010111011100011100110010010100111101100010001101111110111", 
    71 => "0010010011001110000100001111011011000010100100000111101000000110", 
    72 => "0010101011011000110011000101100000001001001110000010011001001001", 
    73 => "1000101011010101011100101001011010010110001111111101001101010001", 
    74 => "1100000000011001000011010011010000001111011101101000110000100001", 
    75 => "1111111001110111110000101101111100011001010001000100011101101111", 
    76 => "0111000100101011100000011101110100100100101011001111001001101100", 
    77 => "0010001100010100100101110010001101100000101001000001100100101011", 
    78 => "0000101101011001001100000110100010010100100110110100110101001110", 
    79 => "1110101011010011100111111101010010110011100101011010001101110110", 
    80 => "0000011101100000110111100010100000111110011101000111111100101001", 
    81 => "1000001110010100001001000000101111000110110001101101101100001011", 
    82 => "1011011101100001101011110001010010101110011011101000011001110101", 
    83 => "1101101010111101011111111110101010100110110011101110010010001000", 
    84 => "0001011101010011111111001010010110001011011110110111101100001001", 
    85 => "0000011101101110010110010101111111011101101100011011111110111011", 
    86 => "0000011100001101011111000011001011011111101110011111001101111111", 
    87 => "0100101001011111001101010011001011000000100010110100101100011111", 
    88 => "0100010101001010111111000010011111110111011000011011100111100000", 
    89 => "1001011101110110110001000110011011110100111001111010100010101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cPgM is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cPgM is
    component pg_conv3x3_tile_cPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cPgM_rom_U :  component pg_conv3x3_tile_cPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


