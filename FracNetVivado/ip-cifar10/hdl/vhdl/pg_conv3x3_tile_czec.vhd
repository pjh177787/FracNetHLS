-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_czec_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_czec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111111110111111100000000000000000000000000000000", 
    1 => "1111111111111111111111111111111100000000000000000000000000000000", 
    2 => "1111111111111111011111111101111000000000000000000000000000000000", 
    3 => "0011000110001000100000000000001100000000000000000000000000000000", 
    4 => "0001011100001000100000001000011000000000000000000000000000000000", 
    5 => "1111111111111111111111111111111100000000000000000000000000000000", 
    6 => "0000111101001110000000000000000000000000000000000000000000000000", 
    7 => "0101011011010011000000000000000000000000000000000000000000000000", 
    8 => "0110011001111110000000000000000000000000000000000000000000000000", 
    9 => "0001101011111010000000000000000000000000000000000000000000000000", 
    10 => "1000011111011001000000000000000000000000000000000000000000000000", 
    11 => "0111001001101010000000000000000000000000000000000000000000000000", 
    12 => "1011111110110000000000000000000000000000000000000000000000000000", 
    13 => "1101100010010101000000000000000000000000000000000000000000000000", 
    14 => "1110000101001010000000000000000000000000000000000000000000000000", 
    15 => "1101100011001010000000000000000000000000000000000000000000000000", 
    16 => "1011110000101010000000000000000000000000000000000000000000000000", 
    17 => "1101110000101010000000000000000000000000000000000000000000000000", 
    18 => "0010010001100110000000000000000000000000000000000000000000000000", 
    19 => "1111100001010010000000000000000000000000000000000000000000000000", 
    20 => "0001000000100101000000000000000000000000000000000000000000000000", 
    21 => "0001000000011000000000000000000000000000000000000000000000000000", 
    22 => "1110110011100100111001000100010100000000000000000000000000000000", 
    23 => "1101100101100110111110000101011000000000000000000000000000000000", 
    24 => "1011000110011000100010100101000000000000000000000000000000000000", 
    25 => "0011110110011011000100000000111000000000000000000000000000000000", 
    26 => "0010001010111101000110101100111100000000000000000000000000000000", 
    27 => "1100101011111011110111001010101000000000000000000000000000000000", 
    28 => "0011000110010001000110000100100100000000000000000000000000000000", 
    29 => "0100010100110111000010110111111100000000000000000000000000000000", 
    30 => "0011100011001000101011101110101000000000000000000000000000000000", 
    31 => "0010111111000000001100001001110100000000000000000000000000000000", 
    32 => "0111000000100110000010100101011000000000000000000000000000000000", 
    33 => "0101110100011111100101110010101000000000000000000000000000000000", 
    34 => "0110001100111111000101111110001100000000000000000000000000000000", 
    35 => "0101110111101010110101001111100000000000000000000000000000000000", 
    36 => "1100010111011101100101001110001000000000000000000000000000000000", 
    37 => "0111110111010011101111010111101100000000000000000000000000000000", 
    38 => "0011000111110111100110101010001100000000000000000000000000000000", 
    39 => "1100000001000001001110101111101100000000000000000000000000000000", 
    40 => "1100011100111111111101011100010000000000000000000000000000000000", 
    41 => "0101000000110110111001001111100100000000000000000000000000000000", 
    42 => "1111111100101011000100110001111100000000000000000000000000000000", 
    43 => "1000110010101011010100010100010000000000000000000000000000000000", 
    44 => "1011101101011011011010101001101000000000000000000000000000000000", 
    45 => "1001000111011001110001011011010000000000000000000000000000000000", 
    46 => "1111001001110010000100000010011000000000000000000000000000000000", 
    47 => "0110100011100001011110111010001000000000000000000000000000000000", 
    48 => "0000111110101010111101010101110000000000000000000000000000000000", 
    49 => "1010000101010001101110000101001100000000000000000000000000000000", 
    50 => "0111111110111110011110111101100001010111110111010100101011111101", 
    51 => "1011001111100000110100010000100010110111101001111111000101000000", 
    52 => "1101010110100100100101110100101101001010000100000100001111001111", 
    53 => "0101010010110101010011100100010011010000111011000100100001101100", 
    54 => "0011000000001010001100111111110100010011000010011101011001011101", 
    55 => "0110101110100000100101000011111001100011110100000111110100011011", 
    56 => "0110000100000010001010100101100000001010110101001100101001111010", 
    57 => "1101011110011111100101010110011100010001000010100001011101010110", 
    58 => "0100110101111000100101001011101110100110010100011010100100001000", 
    59 => "1101101101111010010101010110111000001010111000110100001001001100", 
    60 => "1010101111111001111001110011111001110001011000001100111101011111", 
    61 => "1010101001100100111011000111110001010010011110011111010001100001", 
    62 => "0100001000000101010000111111110010001111110010100110111010010111", 
    63 => "0011001000000111101110000001110111101011100100011010100010101111", 
    64 => "1101110110110111101010000101011110101110110110110000100100000011", 
    65 => "1100110100111010100000000111110001110111100000100111000101011101", 
    66 => "1100000000001010000111011001001100011011001010000001111110101001", 
    67 => "1110110100101001010101011000111010010000001011110100101101001110", 
    68 => "1101000001000000011110110011101101011010001100010111111100001000", 
    69 => "0010010000100110010111010100101011001111100110110011110110001111", 
    70 => "1101010101001101011001010001111001011101010001100100111000011110", 
    71 => "1110110011110100100100001110101110111001111111011101100101011001", 
    72 => "1011011110001000111010000101010001110111101111010010011000111110", 
    73 => "0101100111101001101101010000111000110110101000000110001100000111", 
    74 => "1111111110000010110010000000001010110111101110010100000001001001", 
    75 => "1011011000000110010011101111101010001110010111010001111101000111", 
    76 => "0101010111110000000101101000110110100101100111101001011010100111", 
    77 => "1001011010001010100010010010000011100100110110010010101101001101", 
    78 => "0101010100001100011110100010110001110101100010100000010100011010", 
    79 => "1101111010011110001001110010000111101110010100100010110000010011", 
    80 => "0001010110100010111000001010100000100111101000000110101010011100", 
    81 => "0101000101000011001101111111010100010101001110000011001111001110", 
    82 => "1111111010111101110001111010001110010100101011011010101010010111", 
    83 => "1110100110001110111010110001111010001100001111000111101010001000", 
    84 => "1100111000000100111100101001010010101100011111111111000010011001", 
    85 => "0001011000001101111110011000011101101101000000001000101110011011", 
    86 => "1111100001001110111001110010111000010111110010111000011000000000", 
    87 => "1100010101110100011100100110110001110101010110100010111101010010", 
    88 => "0101010100000010001101111101010001100010100000010110011110011001", 
    89 => "1011010010000001110101011000101010101111111001111101000001000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_czec is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_czec is
    component pg_conv3x3_tile_czec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_czec_rom_U :  component pg_conv3x3_tile_czec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


