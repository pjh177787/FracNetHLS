-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbek_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbek_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000000000000000000", 
    1 => "0000000010101010100100000000000000000000000000000000000000000000", 
    2 => "0000100010010001001011000100000000000000000000000000000000000000", 
    3 => "0111001011010100111010110111101100000000000000000000000000000000", 
    4 => "1100001011101001101111001010100000000000000000000000000000000000", 
    5 => "0000000101000100111111111010011100000000000000000000000000000000", 
    6 => "1111000001010011000000000000000000000000000000000000000000000000", 
    7 => "0010101000000100000000000000000000000000000000000000000000000000", 
    8 => "1000110011111100000000000000000000000000000000000000000000000000", 
    9 => "1000100001001000000000000000000000000000000000000000000000000000", 
    10 => "1101011011011010000000000000000000000000000000000000000000000000", 
    11 => "0100100100000110000000000000000000000000000000000000000000000000", 
    12 => "1000011110011110000000000000000000000000000000000000000000000000", 
    13 => "0011100000110111000000000000000000000000000000000000000000000000", 
    14 => "1000110100110011000000000000000000000000000000000000000000000000", 
    15 => "0111111000110101000000000000000000000000000000000000000000000000", 
    16 => "0000001100100101000000000000000000000000000000000000000000000000", 
    17 => "0101000100110111000000000000000000000000000000000000000000000000", 
    18 => "1110111011001010000000000000000000000000000000000000000000000000", 
    19 => "0000000010101001000000000000000000000000000000000000000000000000", 
    20 => "1011100100011100000000000000000000000000000000000000000000000000", 
    21 => "0000011100011110000000000000000000000000000000000000000000000000", 
    22 => "0011000000000001001100001000011100000000000000000000000000000000", 
    23 => "1100001101101111110010010011111100000000000000000000000000000000", 
    24 => "1000101011011010110010010101100000000000000000000000000000000000", 
    25 => "0101100011111001101101010001010100000000000000000000000000000000", 
    26 => "1110101000000010011001101010011000000000000000000000000000000000", 
    27 => "1011000011011101000100111010011100000000000000000000000000000000", 
    28 => "1110011100100011110101010110101000000000000000000000000000000000", 
    29 => "1010100100110101111100010001110100000000000000000000000000000000", 
    30 => "0000011000100001011010110010000000000000000000000000000000000000", 
    31 => "0011100011010000001010001010100000000000000000000000000000000000", 
    32 => "1011100011010100100000001000010100000000000000000000000000000000", 
    33 => "0010100010010001000101001011100000000000000000000000000000000000", 
    34 => "0101101111011011010000101100100000000000000000000000000000000000", 
    35 => "1011111011011001001000110110110100000000000000000000000000000000", 
    36 => "1000011100101001000111010100100100000000000000000000000000000000", 
    37 => "1111101010100001111011001111001000000000000000000000000000000000", 
    38 => "1000001100111111011000010110110000000000000000000000000000000000", 
    39 => "1010011011010001000000111011001100000000000000000000000000000000", 
    40 => "1011101101001111001000111010111100000000000000000000000000000000", 
    41 => "0011101100100101000111001001101100000000000000000000000000000000", 
    42 => "1111101011001101110100101010010100000000000000000000000000000000", 
    43 => "0011000000000001100110000100101100000000000000000000000000000000", 
    44 => "1000110111100001110011010101111000000000000000000000000000000000", 
    45 => "1110000001000011000000001011001100000000000000000000000000000000", 
    46 => "1101111101001010111101011001101000000000000000000000000000000000", 
    47 => "0010011110011011010010011011110100000000000000000000000000000000", 
    48 => "1010010101100001111100010110100100000000000000000000000000000000", 
    49 => "0111010011111000011001011101000100000000000000000000000000000000", 
    50 => "1100011001000001011111010111101001000011011101001111110000111010", 
    51 => "0001110011011011001111111101101000010101000110010010110111001011", 
    52 => "1100111101100010011101100111101001000111001111100101010001111110", 
    53 => "0100001100010101010101011010110001001000000001010101010100001100", 
    54 => "1100010000100010010100100100110111000000101011100100101001111001", 
    55 => "0100100000000111011010100101000101111010111101001100111000111110", 
    56 => "1010100110001101110101001000111110111100101001111111100011000100", 
    57 => "1010110011111011100010011100100110110110110101111011100111010101", 
    58 => "1011101000110011011001011110111101011000110011111000011001010011", 
    59 => "1100100111101010011110100101111100000100001011100001101010001000", 
    60 => "1001100000100101001111101000100101001010000101011010100110100110", 
    61 => "1010010100100111010011101000100111101111010011101000101000100111", 
    62 => "1000011000101100011001010001100000011111111101001111010010001110", 
    63 => "0011000010001011101011111010100001111100000000101000111111001010", 
    64 => "1101000111100110101101011110110110001101001110100010010111001101", 
    65 => "0100000000011101101000010000110010110101101100000001011111101100", 
    66 => "1000101100011100110001001110001010100101101100110000110110011101", 
    67 => "0110100100111011000110100010111101010101110100110001001010001000", 
    68 => "0100010110101110111001000101011011110101000111111000011001100010", 
    69 => "0001111101100110101100100001001100110110011010000001101000110110", 
    70 => "0100101010010101110000000010101101110000010101111011100010011000", 
    71 => "0111001110000110000000110001011010111110000010111010011100110101", 
    72 => "0001001110101110111001110000011100000010000010001001100110101101", 
    73 => "1110011100100010001111101111000100001110110101111000100010100000", 
    74 => "1000111110000011100101111100010111100100001000111010100001000001", 
    75 => "0101101001101111111101001100011000100000001011101010001101110110", 
    76 => "1101110110101011100111100000100111011000001100101101100010000111", 
    77 => "1100110011001001010111101100100010001110001111011101100101010000", 
    78 => "0010000000101010010111001010010101111100000110010000111110101101", 
    79 => "0000010010010101000100011011010101100010100100110110100011110111", 
    80 => "0001111111101011000101011100010010100011110011000111010100100110", 
    81 => "1000101001110100010000111111101011011000000110101110010001010110", 
    82 => "1101100001100000100101010010101111010011111011110011111000100010", 
    83 => "0100011000101011100101110001111000011011110110000110011011111001", 
    84 => "0000111010110010000110110010000111001000100011111110111110001110", 
    85 => "0100110000100111000111010000001010010111011010100001100011101100", 
    86 => "1001001001011001110111011101010000110011011111000010010000101110", 
    87 => "1001010000010100010111100010111110101111110110001010111100111001", 
    88 => "1111101111110001010101011100101000001010101001000001011111001110", 
    89 => "0100010000010110010011010000001110001010111111010001010011011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbek is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbek is
    component pg_conv3x3_tile_cbek_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbek_rom_U :  component pg_conv3x3_tile_cbek_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


