-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cHfu_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111111111110010000000000000000000000000000000000", 
    1 => "1000000000100000001000000000000000000000000000000000000000000000", 
    2 => "1010100001000000000000000000000000000000000000000000000000000000", 
    3 => "1111111111111111111111111111111100000000000000000000000000000000", 
    4 => "1111111111111111111111011111111100000000000000000000000000000000", 
    5 => "1111111111111111111111111011111100000000000000000000000000000000", 
    6 => "1100001110011100000000000000000000000000000000000000000000000000", 
    7 => "1110000011100101000000000000000000000000000000000000000000000000", 
    8 => "1110111111001100000000000000000000000000000000000000000000000000", 
    9 => "1100001110101100000000000000000000000000000000000000000000000000", 
    10 => "1110010110111100000000000000000000000000000000000000000000000000", 
    11 => "0010111000101110000000000000000000000000000000000000000000000000", 
    12 => "0110101101110000000000000000000000000000000000000000000000000000", 
    13 => "1010011010100100000000000000000000000000000000000000000000000000", 
    14 => "1110010001110010000000000000000000000000000000000000000000000000", 
    15 => "1010011110001110000000000000000000000000000000000000000000000000", 
    16 => "0001100101110001000000000000000000000000000000000000000000000000", 
    17 => "0011110001110011000000000000000000000000000000000000000000000000", 
    18 => "0000010111111001000000000000000000000000000000000000000000000000", 
    19 => "0000000011100101000000000000000000000000000000000000000000000000", 
    20 => "1110101110011001000000000000000000000000000000000000000000000000", 
    21 => "0110001011000100000000000000000000000000000000000000000000000000", 
    22 => "1011111111011001101111010101100100000000000000000000000000000000", 
    23 => "0100011010101100111011101011010000000000000000000000000000000000", 
    24 => "1101000001110111010010000011101100000000000000000000000000000000", 
    25 => "0110011101011000010001111111000100000000000000000000000000000000", 
    26 => "0111101011111100111110001111100000000000000000000000000000000000", 
    27 => "0110101000100110011010011000011100000000000000000000000000000000", 
    28 => "0001000100111011100100000010000000000000000000000000000000000000", 
    29 => "0001001000001100000100100001110000000000000000000000000000000000", 
    30 => "1110000000110110010000011010010000000000000000000000000000000000", 
    31 => "0101000101101001001010101010001100000000000000000000000000000000", 
    32 => "1000000111011011100100000011100100000000000000000000000000000000", 
    33 => "0001011000001010000101010000011100000000000000000000000000000000", 
    34 => "1111101011100100111011001110000100000000000000000000000000000000", 
    35 => "1000001100010011011100010011000100000000000000000000000000000000", 
    36 => "1100000100110001110101110000010100000000000000000000000000000000", 
    37 => "1001001000101100001010101111110100000000000000000000000000000000", 
    38 => "0100110011011010011110101101110100000000000000000000000000000000", 
    39 => "1011111100110010111101110100011100000000000000000000000000000000", 
    40 => "1100101100101001011101010000011000000000000000000000000000000000", 
    41 => "0010111000101110011011101110000000000000000000000000000000000000", 
    42 => "1000001011000100100000110000011100000000000000000000000000000000", 
    43 => "1010010101100111100010110100100000000000000000000000000000000000", 
    44 => "0001110000011101010110100000100100000000000000000000000000000000", 
    45 => "0100010000111011010110000111000100000000000000000000000000000000", 
    46 => "1100010100100001010100011011100000000000000000000000000000000000", 
    47 => "0000000011001000011000001001010000000000000000000000000000000000", 
    48 => "0101110000100011010001011100000000000000000000000000000000000000", 
    49 => "0000011100001010000000101001101000000000000000000000000000000000", 
    50 => "0011000111011010100100110101111110100101100011111001011011010110", 
    51 => "1100010101011000000101100010110000100100011011111100011100111101", 
    52 => "1010010000001101100000000110011011111000011110000110011010110110", 
    53 => "0000011010110010010010100110100000011101001010110110100111011000", 
    54 => "0010111000110010100011000000100010111110001101111000000000101000", 
    55 => "1001001101011100101101010001011000100110000000100001111101010110", 
    56 => "0110101111000110111100101100100111100000110001101110101011111001", 
    57 => "1100100010000000110011000010010111101000101001001110100110110101", 
    58 => "0010100101011010110100110110001011001001110011010000101111111101", 
    59 => "1000001100110011010101100101000110100010110001110010000011010101", 
    60 => "0001001110001000100100001000110100001100000010010100001111001000", 
    61 => "1001011101011101001101111001001000011010000001011001101110101110", 
    62 => "1011101010001100000110100010010000010010100111100110101100100110", 
    63 => "0000000000110100011010100011110101111101101000111101001011110001", 
    64 => "0000101100000101100101011011101001000101100000010101001101001110", 
    65 => "1000100011010001011011110110000010001100101011110010100001000100", 
    66 => "1110100111100111100111111101100111001011110001011000100001111011", 
    67 => "1001100011000101110000111111110001010100000000101000110011100010", 
    68 => "1111100010100101010110100011101101001110011000011101100010010101", 
    69 => "0000011001110111001001000111110101010110001000110011100011001001", 
    70 => "0000110101111000011101111001111001011001001000001010101010001000", 
    71 => "0010001011010111000100000110000101111000000111111110000001101010", 
    72 => "0100010101101100011000111100001101100111101111010010010101101001", 
    73 => "0101011000001100011000000001101000111000011101011100101011011011", 
    74 => "1110111011011100001101101101011110010100011110000011011110111010", 
    75 => "1111000110010011010000001011011011101011011100000111110101111100", 
    76 => "1001111011001001111000111000100010110110010111000011010111001001", 
    77 => "1010100111000001100011011110010001101000111111111001010111010001", 
    78 => "0000000100000111100101000100101111100110101110110001110011000001", 
    79 => "0100011010011010110110000101101011010011101000010110011000010100", 
    80 => "0011100101011011000001110100100011101000101101110011000010001111", 
    81 => "0101001000110101011111011000011010011100000101100011111101001111", 
    82 => "0100110000111010100001100001111111100110010110111000001110001110", 
    83 => "0010101011010111011101001111101100100110100111110011100110010110", 
    84 => "1000010110010011100111110110110110000010000011101000110101000100", 
    85 => "0001001011110100110001011001010000001110111101101011111010001010", 
    86 => "1000000100111100010110010011000110100011100111000001100000001101", 
    87 => "0000100101111010010111101010010001100101011110110000001001101100", 
    88 => "1000011010110111100110001111011001000111100001011111000001110101", 
    89 => "0011011001111100001001111011011001000000110111001011101011111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cHfu is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cHfu is
    component pg_conv3x3_tile_cHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cHfu_rom_U :  component pg_conv3x3_tile_cHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


