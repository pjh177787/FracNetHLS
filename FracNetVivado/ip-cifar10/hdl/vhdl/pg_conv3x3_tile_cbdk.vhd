-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbdk_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbdk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0111111111001110101011101001011100000000000000000000000000000000", 
    1 => "1111111111111111111111111111111100000000000000000000000000000000", 
    2 => "1111111111111101011111111111111100000000000000000000000000000000", 
    3 => "0111111111111111111111111001111100000000000000000000000000000000", 
    4 => "0000000001000010111011101111101000000000000000000000000000000000", 
    5 => "0000000000000000000000000000000000000000000000000000000000000000", 
    6 => "1110100000000001000000000000000000000000000000000000000000000000", 
    7 => "0010101110000100000000000000000000000000000000000000000000000000", 
    8 => "1010010001111000000000000000000000000000000000000000000000000000", 
    9 => "1000111010111100000000000000000000000000000000000000000000000000", 
    10 => "1111100011010010000000000000000000000000000000000000000000000000", 
    11 => "0010100010100100000000000000000000000000000000000000000000000000", 
    12 => "1110010001110011000000000000000000000000000000000000000000000000", 
    13 => "1011011010110100000000000000000000000000000000000000000000000000", 
    14 => "0111110101110101000000000000000000000000000000000000000000000000", 
    15 => "1101111010110110000000000000000000000000000000000000000000000000", 
    16 => "0000111110101110000000000000000000000000000000000000000000000000", 
    17 => "1001001010001000000000000000000000000000000000000000000000000000", 
    18 => "0101111011001010000000000000000000000000000000000000000000000000", 
    19 => "0010110010111001000000000000000000000000000000000000000000000000", 
    20 => "1011001100100111000000000000000000000000000000000000000000000000", 
    21 => "0010001111011110000000000000000000000000000000000000000000000000", 
    22 => "1110111000011101010101011001011100000000000000000000000000000000", 
    23 => "1101100110100101111011001011110100000000000000000000000000000000", 
    24 => "1111111101111101111111110011101100000000000000000000000000000000", 
    25 => "0110110011101001001001000111010100000000000000000000000000000000", 
    26 => "1100101111011001011111010111101100000000000000000000000000000000", 
    27 => "0010010000000000100100110000001000000000000000000000000000000000", 
    28 => "1111110101101110111101010111111000000000000000000000000000000000", 
    29 => "0000010000100100011101010001010100000000000000000000000000000000", 
    30 => "0000011100000000000111001110101100000000000000000000000000000000", 
    31 => "1001011100011010000000010001100000000000000000000000000000000000", 
    32 => "1000011100011110100101110100011000000000000000000000000000000000", 
    33 => "0000010110111001100111010001100000000000000000000000000000000000", 
    34 => "1110001110001100011001111001100100000000000000000000000000000000", 
    35 => "0001010100101111101101110100011000000000000000000000000000000000", 
    36 => "1000110110001101110101110010100000000000000000000000000000000000", 
    37 => "1101101000100111110010011010011000000000000000000000000000000000", 
    38 => "1000010101011101011001010011101100000000000000000000000000000000", 
    39 => "0010010101001001000001110011001000000000000000000000000000000000", 
    40 => "1000100101001101001001110011001100000000000000000000000000000000", 
    41 => "1011100001000110010100101011110100000000000000000000000000000000", 
    42 => "0111001011001011000000111010111100000000000000000000000000000000", 
    43 => "1101000011000100011010001010100100000000000000000000000000000000", 
    44 => "1010010011001001000000011101111000000000000000000000000000000000", 
    45 => "1100000001001011000000001010100100000000000000000000000000000000", 
    46 => "1100010111001001011101011011100000000000000000000000000000000000", 
    47 => "1010011110011001111010011011110100000000000000000000000000000000", 
    48 => "1010101100110001111111010100001000000000000000000000000000000000", 
    49 => "1111010011111010101000011111000100000000000000000000000000000000", 
    50 => "0111000011000001100110100110100000011010011011001101101011110001", 
    51 => "0000111010100100111111001111111011001100100000001111101011101010", 
    52 => "1000101010100010100101000101101101100010001001001111101001111011", 
    53 => "0100101001000100010101110010101100000101010001000101010100001110", 
    54 => "0011000000100011010000100100110101011000100111100000001000111101", 
    55 => "1111001000001110111010001000001100010010110101011001111000110111", 
    56 => "1010100111101001110000001000111110111100101001111110000011100100", 
    57 => "0000100100111011100110010101001100100101101111111011111101000001", 
    58 => "1011001011101111001110111110111100111000110011111000001010010110", 
    59 => "1000100011101110010010111000010100010100011001100101001011000000", 
    60 => "1000100000000110011010111010111011001100010101101010100100100111", 
    61 => "1010010100001010001111111010110110101101000010111001100001110110", 
    62 => "1100000011100110111010000111011000010000110000001111000011110001", 
    63 => "1111001010101001001011100011011101100000001001001110111000110111", 
    64 => "0100111001000110001101000110010110001111001110100010110111110111", 
    65 => "0110011000110101110101001010011101100101101100010000011110001111", 
    66 => "1101111100111000110010001110101111101100101100001000110110001011", 
    67 => "0111010100111010000001110111111111010001110111111000010000100110", 
    68 => "1000010110001111111111101111001001100001111010111100011011110110", 
    69 => "0010110001011100100101110001011001000000011010010000100101001110", 
    70 => "1000101001111111100000110010110101110111011111111000100001011001", 
    71 => "0011001010010110111000100000010000110110000110100010111100000001", 
    72 => "0000101110011110111000110000111100000110001111100001111111101111", 
    73 => "1110011101111011011011101101000110011011110100001000100010100011", 
    74 => "1001011110010011111110000100110110100110000000101010100011001001", 
    75 => "0110101010101100101111001001000000100010111011001111101001110110", 
    76 => "1100101001110000000011111010101111111011001101101011001010010111", 
    77 => "1111000011010001000111111011110110001110101101000000111110100110", 
    78 => "0011010000000000010111001000001100011000000100011000011010101110", 
    79 => "0000010100010010000000010011010100101010101100111000000001011110", 
    80 => "0100111011100000001111010000010010100011011100001011110101101000", 
    81 => "0000101001111100010000111101000011111011001000101110010011011010", 
    82 => "1001100110110000110001100110010110110010010000100011110010100111", 
    83 => "0101000000100011100110110001111011011010100100110101111000000100", 
    84 => "0011011011100111000011010010001110110100100001000010011110111101", 
    85 => "1011101010001001000111111101100011010110011001010011110111001100", 
    86 => "1001001001010001011111001101010000100011100111010111100100101010", 
    87 => "1000010000010000010001100011101011100000111011011001101000111010", 
    88 => "0011101101010001011011001111010010111011111110000111101111111110", 
    89 => "0000001001010110010011010000100010011001111100010001011010111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbdk is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbdk is
    component pg_conv3x3_tile_cbdk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbdk_rom_U :  component pg_conv3x3_tile_cbdk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


