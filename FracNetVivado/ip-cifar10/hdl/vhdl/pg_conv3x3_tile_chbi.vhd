-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_chbi_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_chbi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111100111111011100000000000000000000000000000000", 
    1 => "1000000000001000000001010100000000000000000000000000000000000000", 
    2 => "1111011111011101111011111101111100000000000000000000000000000000", 
    3 => "1111010000000010000110110001010100000000000000000000000000000000", 
    4 => "1111111111111111101111111110111100000000000000000000000000000000", 
    5 => "1111111111111111111000011111111100000000000000000000000000000000", 
    6 => "0100111000101101000000000000000000000000000000000000000000000000", 
    7 => "0111000000010101000000000000000000000000000000000000000000000000", 
    8 => "0000100000001001000000000000000000000000000000000000000000000000", 
    9 => "1101100001001100000000000000000000000000000000000000000000000000", 
    10 => "1101011110111101000000000000000000000000000000000000000000000000", 
    11 => "1101011000010110000000000000000000000000000000000000000000000000", 
    12 => "1001100010101011000000000000000000000000000000000000000000000000", 
    13 => "0000110000001111000000000000000000000000000000000000000000000000", 
    14 => "0000101110001111000000000000000000000000000000000000000000000000", 
    15 => "1000110001001000000000000000000000000000000000000000000000000000", 
    16 => "0100010001011011000000000000000000000000000000000000000000000000", 
    17 => "0101000111011001000000000000000000000000000000000000000000000000", 
    18 => "0000011001000001000000000000000000000000000000000000000000000000", 
    19 => "0011000101010010000000000000000000000000000000000000000000000000", 
    20 => "1110111000000010000000000000000000000000000000000000000000000000", 
    21 => "0100000010000000000000000000000000000000000000000000000000000000", 
    22 => "0001010100111001100101110001001100000000000000000000000000000000", 
    23 => "0100101111011000000111111000101100000000000000000000000000000000", 
    24 => "1001110001110001000111000110011100000000000000000000000000000000", 
    25 => "1110010000100000001001001110001100000000000000000000000000000000", 
    26 => "0010110010010001001010100010000100000000000000000000000000000000", 
    27 => "0011000000010101001001100000011100000000000000000000000000000000", 
    28 => "1100011010010000100011101010100100000000000000000000000000000000", 
    29 => "1101011100111110011101111111111100000000000000000000000000000000", 
    30 => "1010101001100100110011001001000000000000000000000000000000000000", 
    31 => "0111000110000000101110100110101100000000000000000000000000000000", 
    32 => "1110110101000100011101000100011100000000000000000000000000000000", 
    33 => "1011100001000111100100111100001100000000000000000000000000000000", 
    34 => "0100110011000001001110101010100000000000000000000000000000000000", 
    35 => "1011110111001110100110110110011100000000000000000000000000000000", 
    36 => "0111101000000000111010000100101100000000000000000000000000000000", 
    37 => "0101011111111001010011111001001000000000000000000000000000000000", 
    38 => "1011001100001010110000010010011100000000000000000000000000000000", 
    39 => "0010000111011011100000111010111100000000000000000000000000000000", 
    40 => "1010000111110001110111010000011000000000000000000000000000000000", 
    41 => "1011001001101100010001101010011000000000000000000000000000000000", 
    42 => "1101111001100100000011110000101100000000000000000000000000000000", 
    43 => "0100111011101111110110110000101000000000000000000000000000000000", 
    44 => "1111010101001000111000101011011100000000000000000000000000000000", 
    45 => "1010010110001100010110110000101000000000000000000000000000000000", 
    46 => "1110000001101101011000000010000000000000000000000000000000000000", 
    47 => "0111101111011000000000000000101100000000000000000000000000000000", 
    48 => "1101100101011000001010101011101000000000000000000000000000000000", 
    49 => "1110000001100000001000001010101000000000000000000000000000000000", 
    50 => "0111000111011011000001000010011001011101110110110111010100100110", 
    51 => "1001000100010000001110110111100110010011011100010100001010111011", 
    52 => "1010001110100000000010001010011110101000111011000001101111000111", 
    53 => "1101010100001100000001111010110010010100000001101000000100000101", 
    54 => "1011110011111100000001111001110110000111101010110010001011000010", 
    55 => "1111011111111110100000000110011100111111100111100000001010010110", 
    56 => "0000000000010101000001110001101101011010001111011000111011111010", 
    57 => "1011100001111010111001011010001010110001011001011000010010110111", 
    58 => "1111000100001010011010011010011010110101100111011101000001010110", 
    59 => "1110111110110100101110000100111101111001111000101101001111001111", 
    60 => "0110101101111100100011100111111001010111100110010100111000001000", 
    61 => "1100010011101100101101001101011110000110110001001111100000000110", 
    62 => "1000001011101001001111000100101000110000111110001011010010001001", 
    63 => "1010010111111001101100110000010100000100010001000011001110011100", 
    64 => "1010000001111100111011101110011100000101011110000001001101110101", 
    65 => "1000101101111000010001000000011100000111110001010101001010000000", 
    66 => "1011111011001100111000101010011010011001001110001000010101100000", 
    67 => "1100010111001010111000100000001100010000101001100010101000001010", 
    68 => "1110010011001100100110111011010001101011101111111001010110110011", 
    69 => "1100110011101100011100111110101010001000010101000111111011010110", 
    70 => "1111011110011000110001110001111011011100100010101101100001000011", 
    71 => "1000011010100110010011011111000001011110010010100000110100110111", 
    72 => "0100100010000001111010100100100101001111011011111110000010000000", 
    73 => "1000100010110100001001000000111000010101111000111100100000001100", 
    74 => "0100010010110010000110110101110010110111100101100011000011111111", 
    75 => "1010111000101011010011011010100000011000010011001111000100000110", 
    76 => "1010111001000100010011011111100011001011111110010000011100100001", 
    77 => "0011100000111011010011000001111011110000101101100100001101000100", 
    78 => "1111010101001110111111100010011100100101111101110110010110011010", 
    79 => "0001001011001100001001010100011111100110110101000001001010101011", 
    80 => "1111001001111100110010001000011000011000101010001000111110101010", 
    81 => "0100001000101011010011010000111010011100011100100101000010010010", 
    82 => "0100000000101011111100011001000111010010011001000111101011100101", 
    83 => "1010011010001010001111111001101100111111000100101100011011101100", 
    84 => "0000110010100100110010100010100001110011100110111101110110001001", 
    85 => "1101100001110010001011011010110000100001101100111010101010000100", 
    86 => "0110000010101001101011100110101011111111010010111100000101001001", 
    87 => "0001011001001000001101110001011011000001100110001110000100000000", 
    88 => "1110101001111010111111100110011000010010110010011111101111010011", 
    89 => "1011010011101100110000100111001110011100000011011000101101100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_chbi is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_chbi is
    component pg_conv3x3_tile_chbi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_chbi_rom_U :  component pg_conv3x3_tile_chbi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


