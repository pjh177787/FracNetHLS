-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c8jQ_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c8jQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0000111111111101111101111111001100000000000000000000000000000000", 
    1 => "0000100000100100000000001110111100000000000000000000000000000000", 
    2 => "0000011110111110110111111100011100000000000000000000000000000000", 
    3 => "1000000000000000001000000000000100000000000000000000000000000000", 
    4 => "1111111111110111011110110101111000000000000000000000000000000000", 
    5 => "1000000000000000000000000000011100000000000000000000000000000000", 
    6 => "0011000101100011000000000000000000000000000000000000000000000000", 
    7 => "0011011101100001000000000000000000000000000000000000000000000000", 
    8 => "0001100101100101000000000000000000000000000000000000000000000000", 
    9 => "1001001101101100000000000000000000000000000000000000000000000000", 
    10 => "0101010101010100000000000000000000000000000000000000000000000000", 
    11 => "0000110110000100000000000000000000000000000000000000000000000000", 
    12 => "1111010001110111000000000000000000000000000000000000000000000000", 
    13 => "0000001000000000000000000000000000000000000000000000000000000000", 
    14 => "0000000101000100000000000000000000000000000000000000000000000000", 
    15 => "1000110100000010000000000000000000000000000000000000000000000000", 
    16 => "1100001011011010000000000000000000000000000000000000000000000000", 
    17 => "0111100101100101000000000000000000000000000000000000000000000000", 
    18 => "0000101101100011000000000000000000000000000000000000000000000000", 
    19 => "0111000100010001000000000000000000000000000000000000000000000000", 
    20 => "0001011001111010000000000000000000000000000000000000000000000000", 
    21 => "1000010000100000000000000000000000000000000000000000000000000000", 
    22 => "1001101011111101110111111101100100000000000000000000000000000000", 
    23 => "0001100000011001001110101111100100000000000000000000000000000000", 
    24 => "1000011111011000000101111001100000000000000000000000000000000000", 
    25 => "1001010101010010100101010100001100000000000000000000000000000000", 
    26 => "1010111000111100111011011101100000000000000000000000000000000000", 
    27 => "0101011101011011100111010001101000000000000000000000000000000000", 
    28 => "0011011110100000000001101101101100000000000000000000000000000000", 
    29 => "1001010100110110100101110110111000000000000000000000000000000000", 
    30 => "1010100011110100101111000000011000000000000000000000000000000000", 
    31 => "0111100000010100011100101110011100000000000000000000000000000000", 
    32 => "1001000111011001100100001110100100000000000000000000000000000000", 
    33 => "0100010000000110101100010100011100000000000000000000000000000000", 
    34 => "1111001011001010001011101111000000000000000000000000000000000000", 
    35 => "1101100111110010110001101000000000000000000000000000000000000000", 
    36 => "0101111100000001001110110001011000000000000000000000000000000000", 
    37 => "1001111010010100101010100001101100000000000000000000000000000000", 
    38 => "0111101110010101110001000010001100000000000000000000000000000000", 
    39 => "0000111100011011100111010001100100000000000000000000000000000000", 
    40 => "0100101011110001111111100100000100000000000000000000000000000000", 
    41 => "1000101001001100010100100001010100000000000000000000000000000000", 
    42 => "1000100100110111100100010010110000000000000000000000000000000000", 
    43 => "1010011000100000000010010100100000000000000000000000000000000000", 
    44 => "0001100101111010011000000000110100000000000000000000000000000000", 
    45 => "0000000101110111101101000100101100000000000000000000000000000000", 
    46 => "1101100001010100010101111010000000000000000000000000000000000000", 
    47 => "0110100000110000010010001111110100000000000000000000000000000000", 
    48 => "0110000101010000001101000011011000000000000000000000000000000000", 
    49 => "0010000001101010011000001111000000000000000000000000000000000000", 
    50 => "1000100000010001100010001110100010000001010010011000100011101001", 
    51 => "0101000000110111011001100111001000111000011111100110011010011110", 
    52 => "0000101100011010000101100011111011000101101110100011001100010110", 
    53 => "1000010100100011001101100001111001011000011101110110011100101011", 
    54 => "1110101101010000100001110100010001001100000101100000111000001110", 
    55 => "1101001001000101010100101110010110000010000101001011001010010011", 
    56 => "0110101101110110100011110000001001001001100001101001100110001010", 
    57 => "1000001000110100000111010001001110101010011101110011100000101111", 
    58 => "1001001100000101000010101100110011000111011110010001111001100101", 
    59 => "1101101011101000010111101010000111111011110101000110111010110000", 
    60 => "1000101011100000101001110001100110001011111011101110000001011100", 
    61 => "0001101001111010100111110001011100010011011101101011101010011101", 
    62 => "0100010011110010011001100011010111111101011001100100010001100100", 
    63 => "0111101001011010101110111001011111000001011100001111011111110100", 
    64 => "1110000001000101010110010111001110001100010001000011010010111011", 
    65 => "1000010011101101100001001000110100111101110100011101100110100100", 
    66 => "0001010000010100010101001110010010011101000100110101000010110110", 
    67 => "0110110101001001101110110000011010000001111010010111010010001101", 
    68 => "1010110111100000000111001111110001000100110001010001100001111000", 
    69 => "0001110010010001110111000001011010100100101011000110110101000001", 
    70 => "1000001000000000010101011101110110000110000011111111110011000000", 
    71 => "1100010001110101110101101110101010101110001011111100111010001010", 
    72 => "1001011000111000101101100001010011010111001001001100101010101100", 
    73 => "1101001001010011111110010010101110100000010010111011001100010100", 
    74 => "1111010011010101111101011011001100100000001100011000010100101010", 
    75 => "1110110010011011100000010000001000011110001101001010110001001010", 
    76 => "1110000000001100010010000111000110100110000011011011110100010000", 
    77 => "1000111110010000011001100000010111001110001100111100110100000101", 
    78 => "0010101100110111100101111010110100000010011111000000001010000000", 
    79 => "0101111001100011101011011010011010100101001000010011010101100000", 
    80 => "0110101110011111000011000010100110110011001111110011000100001000", 
    81 => "0100011111001111011101100101010010010001011011101011111001011100", 
    82 => "0001101101111011000000001111110000110011001001010001000101000100", 
    83 => "1001101000100111010011000011110111010100011110110001110100101111", 
    84 => "0110011110100101110110011111111110001100011000111010011100011011", 
    85 => "0011011111010101100111000010111111001110011101001010100101000111", 
    86 => "0000000010100000110011100100000001111000101101100100010000010111", 
    87 => "1000101110010110111100101111101100011111011001110101000101001000", 
    88 => "1000000001000101111111101101010010100111101011010110100101101100", 
    89 => "0011100001010111011101110010101110001110101111000101100110000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c8jQ is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c8jQ is
    component pg_conv3x3_tile_c8jQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c8jQ_rom_U :  component pg_conv3x3_tile_c8jQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


