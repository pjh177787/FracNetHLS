-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cIfE_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cIfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1100000000000000000000000001000000000000000000000000000000000000", 
    1 => "1111111111111111111111100111111100000000000000000000000000000000", 
    2 => "1101101101010001101101011111111100000000000000000000000000000000", 
    3 => "0111111011011010111111111111111000000000000000000000000000000000", 
    4 => "0111111111111111101111111110111100000000000000000000000000000000", 
    5 => "1111111111111011111011111111111000000000000000000000000000000000", 
    6 => "0000001000010010000000000000000000000000000000000000000000000000", 
    7 => "0001110110000100000000000000000000000000000000000000000000000000", 
    8 => "0100101100011111000000000000000000000000000000000000000000000000", 
    9 => "0011000011100010000000000000000000000000000000000000000000000000", 
    10 => "0111001001010110000000000000000000000000000000000000000000000000", 
    11 => "1000101110001100000000000000000000000000000000000000000000000000", 
    12 => "0101101000110101000000000000000000000000000000000000000000000000", 
    13 => "1000101100001101000000000000000000000000000000000000000000000000", 
    14 => "1100101110101111000000000000000000000000000000000000000000000000", 
    15 => "1100011110100111000000000000000000000000000000000000000000000000", 
    16 => "1011001110001100000000000000000000000000000000000000000000000000", 
    17 => "1001010001110011000000000000000000000000000000000000000000000000", 
    18 => "0001010101010011000000000000000000000000000000000000000000000000", 
    19 => "0011011111111011000000000000000000000000000000000000000000000000", 
    20 => "0101011100110011000000000000000000000000000000000000000000000000", 
    21 => "1011111001111110000000000000000000000000000000000000000000000000", 
    22 => "1000000000100101111100010100010100000000000000000000000000000000", 
    23 => "0011101110111011011110111001100100000000000000000000000000000000", 
    24 => "1101011101111110110101011100000000000000000000000000000000000000", 
    25 => "0100010111011000000101110101010100000000000000000000000000000000", 
    26 => "1000001101010111000100111111011000000000000000000000000000000000", 
    27 => "1001110111110011000111010010100100000000000000000000000000000000", 
    28 => "0011101100101010000111100001101000000000000000000000000000000000", 
    29 => "1011110011010000000100110011101000000000000000000000000000000000", 
    30 => "1001001110011011001100110011101000000000000000000000000000000000", 
    31 => "0110111111010101000111000100011100000000000000000000000000000000", 
    32 => "1111111001101111011001100001100000000000000000000000000000000000", 
    33 => "1001110111110110000101010111101000000000000000000000000000000000", 
    34 => "1101101011110010110100011000111000000000000000000000000000000000", 
    35 => "0001000001010001000110100010011000000000000000000000000000000000", 
    36 => "1110111110101010010100111000110000000000000000000000000000000000", 
    37 => "0011111110011010101110010001101000000000000000000000000000000000", 
    38 => "1101011000010110110101010110011100000000000000000000000000000000", 
    39 => "1011111000011001011011100001100000000000000000000000000000000000", 
    40 => "0000101111000010010111010111110000000000000000000000000000000000", 
    41 => "1101100011101110101111101001001000000000000000000000000000000000", 
    42 => "1001110011011011100010010001001000000000000000000000000000000000", 
    43 => "0110110001110111000111001100000100000000000000000000000000000000", 
    44 => "1000010000100010000110110000110000000000000000000000000000000000", 
    45 => "1001101011011101101111000101001000000000000000000000000000000000", 
    46 => "1011010000110110101000110110011100000000000000000000000000000000", 
    47 => "1001001011001110011000000100111000000000000000000000000000000000", 
    48 => "1101100111110001110101011000010000000000000000000000000000000000", 
    49 => "1100001111001000010000101011101000000000000000000000000000000000", 
    50 => "1000000010100111001111000111111110110010011100011001101010101100", 
    51 => "0001110110110100110101010100011101011110101100101001110101000111", 
    52 => "0010000000111111100110001111001001010101001110010101101011010011", 
    53 => "1111001010011100110000000111010010100111101111011100010011100011", 
    54 => "1011000001001101101110101100111110100010100001000100101000101011", 
    55 => "1010000001110011001000000010011111100000001101100100001010110101", 
    56 => "0110110001110101011000000111100111111110011101011111100010111101", 
    57 => "1101000101011101000001100100011101010101100100101001001110000010", 
    58 => "1101001111000010001110000001110010110111101110010001101000011110", 
    59 => "0010000010101111101011000000110011100101111001001010110001011101", 
    60 => "1010111101011111000110011011010011101100000110110111001100000001", 
    61 => "1011111110111010111111011000100100001110011001000101100111111001", 
    62 => "1111001000010111000101100111000001001010101001110010101001011110", 
    63 => "0011100111001110000110001110011100011001000010001010100000110000", 
    64 => "1110111111111111000000100101010111111111101111100110010011000111", 
    65 => "0001001110101100111111011001001110010110000110101011100110000111", 
    66 => "1000110011100101000000010010101000000110101111010011101100100110", 
    67 => "1001001101111011010100000010111101110111100011100100000110000111", 
    68 => "1000101110010011111100110000000101010010011010011101111101101001", 
    69 => "1010110110010110101100001100111001000100010000110010000101001111", 
    70 => "1101101101001101111110100100001011001011100110000100110111001011", 
    71 => "0001010001111110010000101110101111011000011100100110000010001000", 
    72 => "1101111001111010001011001011110111111000010111110001110110010110", 
    73 => "0100101011010111110110110010000111011000111100110110100000011101", 
    74 => "1101001101010000101010100010001111110111010111001010000100111110", 
    75 => "0101011100101010111110000001000101011100000011100100101011110000", 
    76 => "1101001001110100100001010110100111111101111110010000011110111011", 
    77 => "1011110110100011010001111011011010110011001100111011010101010111", 
    78 => "0000110110100011000100111011001100101000101110011010000010000000", 
    79 => "1110100100001010100100111010111010001101110011010111110001100110", 
    80 => "0111111011011011001001010101100101001011100100010010110001111001", 
    81 => "0110001000010110000001011110110100001001100101000111100000111110", 
    82 => "0010001010001101001010000101000100110110000000111010111111011011", 
    83 => "0110101110111001110100111011010100110010000010110000001110110101", 
    84 => "0001010110000101111101001001001101101110100011100101100000000011", 
    85 => "1000001010111101110001001011001010001111111000001110001010011000", 
    86 => "0001010010011100101000011011111111111000010010111000110110111100", 
    87 => "1111000001001111101011100011010110010100101110101000001100101000", 
    88 => "1001011001100010010011011000010000100100100100010010101101011000", 
    89 => "1001111000000010000011010011011010100011111010010110010000001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cIfE is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cIfE is
    component pg_conv3x3_tile_cIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cIfE_rom_U :  component pg_conv3x3_tile_cIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


