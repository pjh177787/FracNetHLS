-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbkl_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbkl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111110111111111111000000000000000000000000000000000", 
    1 => "1111110111111101111101101101110000000000000000000000000000000000", 
    2 => "1100000110010001010001001011110000000000000000000000000000000000", 
    3 => "0000000100001100101100100000011100000000000000000000000000000000", 
    4 => "0111111111111111101101001110111100000000000000000000000000000000", 
    5 => "0011111111101111111111101111011100000000000000000000000000000000", 
    6 => "0010010001100101000000000000000000000000000000000000000000000000", 
    7 => "0110111110001010000000000000000000000000000000000000000000000000", 
    8 => "1001100011100101000000000000000000000000000000000000000000000000", 
    9 => "0010101110001100000000000000000000000000000000000000000000000000", 
    10 => "1010100001000000000000000000000000000000000000000000000000000000", 
    11 => "0000101101001110000000000000000000000000000000000000000000000000", 
    12 => "1110000101100101000000000000000000000000000000000000000000000000", 
    13 => "0110001001101011000000000000000000000000000000000000000000000000", 
    14 => "0111001000111111000000000000000000000000000000000000000000000000", 
    15 => "1001110101100011000000000000000000000000000000000000000000000000", 
    16 => "1011110111111010000000000000000000000000000000000000000000000000", 
    17 => "0101001100010011000000000000000000000000000000000000000000000000", 
    18 => "1110011011101010000000000000000000000000000000000000000000000000", 
    19 => "0100001010111000000000000000000000000000000000000000000000000000", 
    20 => "1000011000110110000000000000000000000000000000000000000000000000", 
    21 => "1010011111110100000000000000000000000000000000000000000000000000", 
    22 => "0110000010101111011100001000110100000000000000000000000000000000", 
    23 => "0100111000000110110100001000000000000000000000000000000000000000", 
    24 => "1001110000110001101111011010001100000000000000000000000000000000", 
    25 => "1010101001101111100110010000111100000000000000000000000000000000", 
    26 => "1110000000010010011001110010001000000000000000000000000000000000", 
    27 => "0010001111111011001010100110010000000000000000000000000000000000", 
    28 => "0001111011101000111110101101010100000000000000000000000000000000", 
    29 => "1100000110001001001111000000100100000000000000000000000000000000", 
    30 => "0110001110001110110100010100011000000000000000000000000000000000", 
    31 => "1101001101010110101001101001010000000000000000000000000000000000", 
    32 => "0001010100001000100111111110001100000000000000000000000000000000", 
    33 => "1000101000110101110101000010110100000000000000000000000000000000", 
    34 => "1001001100011111100001110010011000000000000000000000000000000000", 
    35 => "1111101011110011111011000010100000000000000000000000000000000000", 
    36 => "1010011111100110101111110001101000000000000000000000000000000000", 
    37 => "0001110000100011000101100111101100000000000000000000000000000000", 
    38 => "1111000110100001011110100000101100000000000000000000000000000000", 
    39 => "0101111010011011101010101111101100000000000000000000000000000000", 
    40 => "1111101011010000100110001001000000000000000000000000000000000000", 
    41 => "1000110000010011101111000101000100000000000000000000000000000000", 
    42 => "0100101001110101010000101111100100000000000000000000000000000000", 
    43 => "1010110011001101101010100001100000000000000000000000000000000000", 
    44 => "0111100000001000001010101111001000000000000000000000000000000000", 
    45 => "0000101000001101000000100011101000000000000000000000000000000000", 
    46 => "1101111001010011000001011000101000000000000000000000000000000000", 
    47 => "1010011010110000010000111111110000000000000000000000000000000000", 
    48 => "1010100100110111101111100011101000000000000000000000000000000000", 
    49 => "0100010000000011100010001101000000000000000000000000000000000000", 
    50 => "0011101101011011001001110000110001000101010110101000011101001101", 
    51 => "0010110000010001100110111101100010101101010011011000111101011011", 
    52 => "0101110000011111001010101101001010010010010101101010101011010011", 
    53 => "0000010010001101110011010100111000001000100001001010110111100000", 
    54 => "1101100001111010110111011010000000010001011010100000110111000110", 
    55 => "0000011001110001000011000101110001111100001101111000100001101000", 
    56 => "1010001101101101101011101010010110100011001111111010111000111101", 
    57 => "0101000001011100011000101111010001011011110001011100010010110011", 
    58 => "1110111110100100100001001110100000001100100100001111001011011100", 
    59 => "0000110001100010000011000011010100001010000001101100000000101000", 
    60 => "1011111101110011111011111100100010010011111001001110100111000010", 
    61 => "1100010000001110001101110011000100101010001101101011001100100110", 
    62 => "1011010111011000100000001000110110111110000100110101001111011101", 
    63 => "0011010111111111111110101001110101111110100111100101001100001010", 
    64 => "1101111011000100010110001000001110001000110011001100111010010111", 
    65 => "0001001101000110001010100011011111011110010011100011000000100101", 
    66 => "1011100011100111100101111001010010000010011111011111001011010100", 
    67 => "1000101001111011001111111000100110011010010011101100000000110111", 
    68 => "1001101011000001011101001000010011111100011001111001111101111000", 
    69 => "1101101111111100010000000010001010100011111000001011001010000001", 
    70 => "0101000010010001000011000100010011001000010100001001100111001000", 
    71 => "0011011011001100110110010001010110101010101101001000111101100101", 
    72 => "1111011100111000110011011100000010110110101100000001010110011000", 
    73 => "0000000100010111101011110000110001010101010110100000100010001110", 
    74 => "0000100001011101110100000010011001001000001111101111101011001011", 
    75 => "0000111101000111101110100101010010101010100010010010010100000101", 
    76 => "0000100010101110010000110001111011110110011001011101000101010011", 
    77 => "0001010011000101111111010010011011000011101101001110000101000010", 
    78 => "0001001010110111100000100111010011111010001010100001000001000100", 
    79 => "1011100111100011010101110001111100000111011101001111010011111110", 
    80 => "0111010000011010001110100000110100000001000110110001101000010100", 
    81 => "1111100101101011110111001010111011011000011000001011001110110100", 
    82 => "1110111001110011100110101110110001000000010111010101100101000011", 
    83 => "1011101000011101001111011011000010011100011010010100010111111111", 
    84 => "1001011110010011011100000010011101000101100011011110010001111000", 
    85 => "0001000001010101101000000110011110100011111010111010101001110110", 
    86 => "1011010101000101001110001100011010100111011000010100010101011001", 
    87 => "0101010011001111101101100000001001000111001110001100000000101101", 
    88 => "0100001101100101111100000010010000001111011010010101101110011100", 
    89 => "1011001000011000100011010011011011011011001111000001000000010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbkl is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbkl is
    component pg_conv3x3_tile_cbkl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbkl_rom_U :  component pg_conv3x3_tile_cbkl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


