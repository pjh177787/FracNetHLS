-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cbkb_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cbkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111101100101101100101001101111100000000000000000000000000000000", 
    1 => "1111000000000000000000000000111000000000000000000000000000000000", 
    2 => "1111111111111110110111111001111100000000000000000000000000000000", 
    3 => "0000000100010000100000001100000000000000000000000000000000000000", 
    4 => "0111111111111111111111111111110000000000000000000000000000000000", 
    5 => "0111111111111111101111111111111000000000000000000000000000000000", 
    6 => "0000010010101111000000000000000000000000000000000000000000000000", 
    7 => "1111100001101011000000000000000000000000000000000000000000000000", 
    8 => "0000111101011111000000000000000000000000000000000000000000000000", 
    9 => "0010011101001010000000000000000000000000000000000000000000000000", 
    10 => "0010100011000000000000000000000000000000000000000000000000000000", 
    11 => "0110011001010110000000000000000000000000000000000000000000000000", 
    12 => "0000010001010110000000000000000000000000000000000000000000000000", 
    13 => "0111011100110011000000000000000000000000000000000000000000000000", 
    14 => "0111110001110001000000000000000000000000000000000000000000000000", 
    15 => "1101110100101011000000000000000000000000000000000000000000000000", 
    16 => "0110000011110000000000000000000000000000000000000000000000000000", 
    17 => "0010101010101100000000000000000000000000000000000000000000000000", 
    18 => "1010011101100010000000000000000000000000000000000000000000000000", 
    19 => "0000100011011000000000000000000000000000000000000000000000000000", 
    20 => "1011001101010011000000000000000000000000000000000000000000000000", 
    21 => "1000001010100101000000000000000000000000000000000000000000000000", 
    22 => "1010111100011101111101111001101100000000000000000000000000000000", 
    23 => "0010110000011010001011101010101000000000000000000000000000000000", 
    24 => "1110001110011110001000111001100100000000000000000000000000000000", 
    25 => "1110111111011000111001110001011000000000000000000000000000000000", 
    26 => "1011010111111100111100010001110000000000000000000000000000000000", 
    27 => "0011000000010101001110111001110100000000000000000000000000000000", 
    28 => "0011011001000010011100010001011100000000000000000000000000000000", 
    29 => "0111010011110011010000110100101100000000000000000000000000000000", 
    30 => "0101111110111011010100111111110100000000000000000000000000000000", 
    31 => "1001010001010010000111000101011100000000000000000000000000000000", 
    32 => "0101110100110010100011100010101000000000000000000000000000000000", 
    33 => "1111110101011011110101111011011100000000000000000000000000000000", 
    34 => "0011010000001000001101010011001100000000000000000000000000000000", 
    35 => "1001111111111010100110001110010000000000000000000000000000000000", 
    36 => "0110010011001001000111101000011000000000000000000000000000000000", 
    37 => "0110001100001101010001011001111100000000000000000000000000000000", 
    38 => "0011111100110010000111101111101100000000000000000000000000000000", 
    39 => "0000110111010000101110010000010100000000000000000000000000000000", 
    40 => "0010001110000100110110110110000000000000000000000000000000000000", 
    41 => "0011010100011010100100010110111000000000000000000000000000000000", 
    42 => "1100000011110100011000100011010100000000000000000000000000000000", 
    43 => "0100111010000000110101010000010100000000000000000000000000000000", 
    44 => "1111110010011001011000111111011000000000000000000000000000000000", 
    45 => "1010110111000011100110011010101100000000000000000000000000000000", 
    46 => "1010110001111100110110001011101100000000000000000000000000000000", 
    47 => "0111100111100000100011000101001100000000000000000000000000000000", 
    48 => "1101100001101110001000101011101100000000000000000000000000000000", 
    49 => "1100100101000000110101000000010100000000000000000000000000000000", 
    50 => "0010011011000011100110110100101100100110010100011001101001001001", 
    51 => "0110010100111011001000110111110010111101111110000100011010111011", 
    52 => "1111011111010110010011001000011101000100100001110011101100100010", 
    53 => "1101001100110011000101000010011101011011100100100001101010110010", 
    54 => "1101110011100000000101000011011001010000001000100100000111110100", 
    55 => "1111101101110101001100100101000111101001000001001100100101110001", 
    56 => "1000110100010011111111001101001010011001111110010100111000110010", 
    57 => "1001111111000000000110011010110110000110110000111001000001010101", 
    58 => "0110010000010001001111000111100110011111101001100000101101001010", 
    59 => "1010000010101111000110011011010100110011001111101111001101000001", 
    60 => "1001001000110000010100000010000111000111000100001010100101000001", 
    61 => "1100110000100100010011100001000011101101001000101001010000111011", 
    62 => "1010011100110111010001011011110110110011100101111100000100110010", 
    63 => "0001010001111110011100110000000111001001010000010100110100100110", 
    64 => "0000011110100111010101000000011001111111100011101111000000101001", 
    65 => "0010011100100100001110100000110111100110101100100100000000011110", 
    66 => "1100001010010111000001110001110011000101000001001100010110001010", 
    67 => "1001000101110010101000100010110110100100010101111100101001011011", 
    68 => "0111100001111100110101101000101001100000111101000101001111101011", 
    69 => "0100010111010011011101010001011001111010110000001100001011001001", 
    70 => "1100000111110110001010001010000111011011111111110000001000111111", 
    71 => "0100100001100111001111001110001101101011100000100111000010011001", 
    72 => "0001100011011001110000110011010010011110000011110000011000100110", 
    73 => "0011110101011100001011000101000101010001101111001010011011111110", 
    74 => "0101110110111110111111100110001100010100001011101000010011100011", 
    75 => "1000001011010100011101101110111010011110111101101010100010101110", 
    76 => "1010001110000111000101100001100100010110010111100110111100100010", 
    77 => "0111110101110000001101011000111001000011110001011011011100111011", 
    78 => "0001011110111111101101111110000001100110100100110111011101000010", 
    79 => "0110000101110011010001111010100110010011001101100101011010111110", 
    80 => "0001100101100010000111011000011101001100100010100100101100100000", 
    81 => "1011011001111001000001000010010100110011000100011010011001100110", 
    82 => "0111010101100001111011111100011100010111011010101110111110000000", 
    83 => "1110000001110111000011010101011101100101001001110110010001010101", 
    84 => "1101010110011001000011101001000011010101001101110000010000011010", 
    85 => "1011110001010011000011011001001101000100101111010000111110100100", 
    86 => "0010001011101110011101101010111000000011100111101001001010001011", 
    87 => "1011011111010010100010110110101110000111100001100011001010111011", 
    88 => "1000010100000001000001111001000011011111111100001001110000101001", 
    89 => "1010000100110101100010110111100101000110100010010011100110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cbkb is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cbkb is
    component pg_conv3x3_tile_cbkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cbkb_rom_U :  component pg_conv3x3_tile_cbkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


