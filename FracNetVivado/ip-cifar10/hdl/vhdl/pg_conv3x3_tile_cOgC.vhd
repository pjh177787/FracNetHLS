-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cOgC_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cOgC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111111111111111100000000000000000000000000000000", 
    1 => "1111001011111111111111101101111100000000000000000000000000000000", 
    2 => "1000000000000000000000000001010000000000000000000000000000000000", 
    3 => "0000010000100111110111111101111100000000000000000000000000000000", 
    4 => "0000000000000000000000000000000100000000000000000000000000000000", 
    5 => "0010000111000000000000001000000000000000000000000000000000000000", 
    6 => "0000000010100110000000000000000000000000000000000000000000000000", 
    7 => "1011010001110001000000000000000000000000000000000000000000000000", 
    8 => "0000001110110101000000000000000000000000000000000000000000000000", 
    9 => "0011100001110000000000000000000000000000000000000000000000000000", 
    10 => "0001101110001110000000000000000000000000000000000000000000000000", 
    11 => "0110110001110101000000000000000000000000000000000000000000000000", 
    12 => "1000010010101001000000000000000000000000000000000000000000000000", 
    13 => "0000010000000100000000000000000000000000000000000000000000000000", 
    14 => "0111010011010000000000000000000000000000000000000000000000000000", 
    15 => "0011010001110010000000000000000000000000000000000000000000000000", 
    16 => "1101110101100011000000000000000000000000000000000000000000000000", 
    17 => "0001000101110101000000000000000000000000000000000000000000000000", 
    18 => "0001110001111101000000000000000000000000000000000000000000000000", 
    19 => "1000011010001001000000000000000000000000000000000000000000000000", 
    20 => "1011110011101001000000000000000000000000000000000000000000000000", 
    21 => "0010110111011010000000000000000000000000000000000000000000000000", 
    22 => "1001110110011011100111010101101000000000000000000000000000000000", 
    23 => "1110001010100100111000101010111000000000000000000000000000000000", 
    24 => "0000000100000111000000111010011000000000000000000000000000000000", 
    25 => "1010010000010010011001100111011000000000000000000000000000000000", 
    26 => "0110011011101110111000101000011000000000000000000000000000000000", 
    27 => "1110110011100100001001100111011000000000000000000000000000000000", 
    28 => "1101110011101000100110001100000000000000000000000000000000000000", 
    29 => "0001000110011011001101010011100000000000000000000000000000000000", 
    30 => "0100011100011010010100011100111000000000000000000000000000000000", 
    31 => "0100110101100000000010100110011000000000000000000000000000000000", 
    32 => "0011101011100001101110001000100100000000000000000000000000000000", 
    33 => "1000110110100011111101010001111000000000000000000000000000000000", 
    34 => "1110110011110011110011000100100000000000000000000000000000000000", 
    35 => "0110110001010011000101001011100000000000000000000000000000000000", 
    36 => "0111011000111010011000111100011000000000000000000000000000000000", 
    37 => "0101110110000001001111010011101100000000000000000000000000000000", 
    38 => "1100100001011011000011001001001100000000000000000000000000000000", 
    39 => "0000001100101111110101111100110000000000000000000000000000000000", 
    40 => "0001110000011100101110101110011100000000000000000000000000000000", 
    41 => "0101000000101110110010001111101100000000000000000000000000000000", 
    42 => "1100111010010001100111011100000000000000000000000000000000000000", 
    43 => "1011011100101100110101111100010000000000000000000000000000000000", 
    44 => "0010100101111000011010101011100100000000000000000000000000000000", 
    45 => "1101000000110000011000001011100100000000000000000000000000000000", 
    46 => "0100110001101000010000100000010000000000000000000000000000000000", 
    47 => "0000100110111100001111100001111100000000000000000000000000000000", 
    48 => "0001101011110111011111100100100100000000000000000000000000000000", 
    49 => "0110000000110100011000101010101100000000000000000000000000000000", 
    50 => "1010101111110101100110111010011000001011001000011001100111101000", 
    51 => "1011111000100000001111001001000000111100100010100100111001110110", 
    52 => "0000100000000000111111110000000000101000100000101110100100100000", 
    53 => "1001001001001101010010001010010110100010000011100100001010110000", 
    54 => "0011111100111110111111010000011110111011001011100011100100000010", 
    55 => "1100110000110100010111100001000101001100001111000011110100001100", 
    56 => "1001010110101111110111111100011010010111000011110111010100000100", 
    57 => "0101101111110010010111010001101000001111110100010001100101001000", 
    58 => "1110010000110000011011011001111010110001101101000101010110001110", 
    59 => "1100110000110100000011100111011111110100001010000000000000110011", 
    60 => "1000101000000011000110011011111001110111100110111100100110111010", 
    61 => "1101100110111000110011000010011110000100000000001010101100110000", 
    62 => "0101000001110100000001110000101110011000011111100100110010101011", 
    63 => "0011000010100100000000101100011110111110111111000001100001000111", 
    64 => "0101101101111110111011001010101100000111100011011110101101011101", 
    65 => "1001111101110011110010100010011011100101111101010100001101101101", 
    66 => "1100010110000111100000111011000001110011100011111010000000110000", 
    67 => "0101011010101010111011010110010101011110001100000010100001111001", 
    68 => "1001110100011010101101101101000010001111101001110110000111110000", 
    69 => "1111111101010010110111100110010111011110010110101011100001100101", 
    70 => "0001101110101010101111000011010010000100101110010111101101010111", 
    71 => "1000110010000010001011101010011111001000011011100101101011000101", 
    72 => "0110100000110111110000101110101010000100110101011100000000011010", 
    73 => "1001011011001101010110111000111100010000001111100101000111010000", 
    74 => "0110001000010111100011000011011100001110010111000010100110000001", 
    75 => "0001111101111111101000010111110100011011010001001101011111100110", 
    76 => "0111010110000001000101001101110111100101101111111111001001101101", 
    77 => "0010001100110101001110010001100001111111111001001101011100001011", 
    78 => "0000111100100100001111010000010000011110110110100011111101001011", 
    79 => "1101011000011101010101111011010010110111000111001010000000100010", 
    80 => "0010011111000010101110110010000001000011000001011011000001100000", 
    81 => "1011011110101111001001100010011101000110110100101011100000000010", 
    82 => "1111110001101001101011111011010010100111011010100011110100100001", 
    83 => "0001100000011110011111110111100011100110110010101110000010001111", 
    84 => "1001010110111011101010101011010000000001010100110010000110011110", 
    85 => "0001111111010110011000011011010001011000101010110010100110001001", 
    86 => "0000110110000001011111000011000001011100101110111011101011111111", 
    87 => "1101101010001111001001010010011111110100110110101000101000110111", 
    88 => "0001010010000010101110000011111110110111001000111011100111100000", 
    89 => "0011011101011100101001011010011000100110110010101010001101101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cOgC is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cOgC is
    component pg_conv3x3_tile_cOgC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cOgC_rom_U :  component pg_conv3x3_tile_cOgC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


