-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cDeQ_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111111111010111000000000000000000000000000000000", 
    1 => "0111111011000010001001010111101000000000000000000000000000000000", 
    2 => "1101111111111110111011111101110000000000000000000000000000000000", 
    3 => "1111101101001011001011010111111000000000000000000000000000000000", 
    4 => "1111111111111110111011111010001100000000000000000000000000000000", 
    5 => "1111111110111111111111001111111000000000000000000000000000000000", 
    6 => "0000101011001110000000000000000000000000000000000000000000000000", 
    7 => "0010101010000100000000000000000000000000000000000000000000000000", 
    8 => "1000111111010001000000000000000000000000000000000000000000000000", 
    9 => "1011011111001000000000000000000000000000000000000000000000000000", 
    10 => "1000111111011010000000000000000000000000000000000000000000000000", 
    11 => "1011010011100001000000000000000000000000000000000000000000000000", 
    12 => "0000101111111100000000000000000000000000000000000000000000000000", 
    13 => "1011111111000011000000000000000000000000000000000000000000000000", 
    14 => "0100100110011000000000000000000000000000000000000000000000000000", 
    15 => "1000110111100101000000000000000000000000000000000000000000000000", 
    16 => "0010000110100000000000000000000000000000000000000000000000000000", 
    17 => "0100001110001100000000000000000000000000000000000000000000000000", 
    18 => "0001010001010000000000000000000000000000000000000000000000000000", 
    19 => "0001010101111001000000000000000000000000000000000000000000000000", 
    20 => "1111000110011001000000000000000000000000000000000000000000000000", 
    21 => "0110101001010100000000000000000000000000000000000000000000000000", 
    22 => "0100100001001000001110000000010100000000000000000000000000000000", 
    23 => "0111110000101110011001101110011000000000000000000000000000000000", 
    24 => "1101000011100000110111000010001100000000000000000000000000000000", 
    25 => "0110001111000111011111001110110000000000000000000000000000000000", 
    26 => "0100000010000111011000001010011100000000000000000000000000000000", 
    27 => "1100100000001101011010100101110000000000000000000000000000000000", 
    28 => "0110010011001001001110001100000000000000000000000000000000000000", 
    29 => "1110101011111100010001000011010000000000000000000000000000000000", 
    30 => "1000010100011110010000110010011000000000000000000000000000000000", 
    31 => "1100111110111001111111111011110000000000000000000000000000000000", 
    32 => "1010010111001011111101010000001000000000000000000000000000000000", 
    33 => "1110001001000110010001101011011000000000000000000000000000000000", 
    34 => "0000111101001010000110101111110100000000000000000000000000000000", 
    35 => "0110111100010110111111010001100100000000000000000000000000000000", 
    36 => "0010000000100001110101110000000100000000000000000000000000000000", 
    37 => "0011100011110000101110101110110100000000000000000000000000000000", 
    38 => "0100010011011010010100101001100100000000000000000000000000000000", 
    39 => "1110000001100100000111000110001100000000000000000000000000000000", 
    40 => "0100100110110100011110000010000100000000000000000000000000000000", 
    41 => "1011001010000000000000101111000000000000000000000000000000000000", 
    42 => "1001010111000101000001110100011100000000000000000000000000000000", 
    43 => "0110010000010011100011011110101000000000000000000000000000000000", 
    44 => "0001110001001011010110100000100100000000000000000000000000000000", 
    45 => "1111101011100000110111001111011000000000000000000000000000000000", 
    46 => "1101010110111001010000011011101000000000000000000000000000000000", 
    47 => "0101000011001000011010101001010000000000000000000000000000000000", 
    48 => "0000010111100001110101010000000100000000000000000000000000000000", 
    49 => "1101111101001001001010100001100000000000000000000000000000000000", 
    50 => "1011100011001011000110111101101110110101100011010001101101011001", 
    51 => "1001011011100101000010111010100010010100011001010000100100111000", 
    52 => "0100100110010110110001000010010100011000110000011100001010110101", 
    53 => "1100110001100110010101010001100011011010011001000101010110010100", 
    54 => "0100111110111001001101010111100001001101100110010111010110011010", 
    55 => "0010101011110000110111001101100001010100101101001101110010100000", 
    56 => "0111100000000011001000110100111000111000110100110010000101000110", 
    57 => "1100101100111010111011011101010000001001101010111110100111001100", 
    58 => "1101010110000011110000100111001110101110010001001011100011010011", 
    59 => "1100001000100011010001110010100101000010001101111000100000111110", 
    60 => "0110010101100000111110100011001000000101100100001101110000011000", 
    61 => "0101100101000001100010111001011010101011100000011011011110111011", 
    62 => "0011101011001111111010110001100010011110010111100011001010011000", 
    63 => "0011001110101110101100011000010000000000101000011111101110001100", 
    64 => "1010101010000000101011100011010000000111110000001010101100111010", 
    65 => "1101000111100110001011101011001011110011111001000100011010100110", 
    66 => "1110000001100110101011011101111011110001111110111111010101110001", 
    67 => "1001110101101100110101110100000011011111010101100001000110101111", 
    68 => "0110000111000101010000000100110000011101010110100100010110010001", 
    69 => "0000010001100111001001100010111100100110101001111111110001101110", 
    70 => "0000011110101100001111100011100101010111101010011101110010001000", 
    71 => "0010011100010100000101100010000000000001101111001001001000101001", 
    72 => "1100010000101111000000100101001010011010100011111100000001110000", 
    73 => "1100011010011010001010001101001010100101100010111100100101010001", 
    74 => "1010101010011000001000110110100110010100010011100000101011001110", 
    75 => "0011010100100110000000101011101000000011011111011110101000110110", 
    76 => "1000000110011111011010000010101000011101010111000010000001001100", 
    77 => "1010100110010011101111111110110001010100111000100100001010111000", 
    78 => "1010000100100101001001000010100111010110010011010001010000101111", 
    79 => "1010010001111100111010101011100111110001100001001100100010110001", 
    80 => "1000101100011000000110010110100011010001111110010100111000001010", 
    81 => "0000001010110101011011010001110100001001110100000000011100101101", 
    82 => "0011110000101011000111110111011101001110101110110001001101000010", 
    83 => "1000011011011111010101001111001101001110100010010011110010111111", 
    84 => "1001111110110001111111110111011010011011111101110111000100111010", 
    85 => "1001001000010110000001111001110001000010000111111001111011100111", 
    86 => "0101110001101010101000111010101101001011011011010011001000100110", 
    87 => "1000111101110001010010011010110101101100111000110010110011101001", 
    88 => "0011000101111010110001001110111010111101011101110011000110111101", 
    89 => "1001111101101100001001111110010111110010101011101001110101001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cDeQ is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cDeQ is
    component pg_conv3x3_tile_cDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cDeQ_rom_U :  component pg_conv3x3_tile_cDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


