-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cMgi_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111111110010111111100000000000000000000000000000000", 
    1 => "1111101101000100110000100100001100000000000000000000000000000000", 
    2 => "1111111111010110011111101111111100000000000000000000000000000000", 
    3 => "1111111111111111111111111111111100000000000000000000000000000000", 
    4 => "1100000001001000001000101010011100000000000000000000000000000000", 
    5 => "1111100111001110110010000001100100000000000000000000000000000000", 
    6 => "1000000000111111000000000000000000000000000000000000000000000000", 
    7 => "1101010101110101000000000000000000000000000000000000000000000000", 
    8 => "0100011100110100000000000000000000000000000000000000000000000000", 
    9 => "0101011001010110000000000000000000000000000000000000000000000000", 
    10 => "1000000110011111000000000000000000000000000000000000000000000000", 
    11 => "1110100000100100000000000000000000000000000000000000000000000000", 
    12 => "0110010001111011000000000000000000000000000000000000000000000000", 
    13 => "0111001001000110000000000000000000000000000000000000000000000000", 
    14 => "1111010001010000000000000000000000000000000000000000000000000000", 
    15 => "0000000010000100000000000000000000000000000000000000000000000000", 
    16 => "0101110101110011000000000000000000000000000000000000000000000000", 
    17 => "1011111100010111000000000000000000000000000000000000000000000000", 
    18 => "0010110011101101000000000000000000000000000000000000000000000000", 
    19 => "0000001111001001000000000000000000000000000000000000000000000000", 
    20 => "1011110011001001000000000000000000000000000000000000000000000000", 
    21 => "0010110111011000000000000000000000000000000000000000000000000000", 
    22 => "0110010001001100000001001110010100000000000000000000000000000000", 
    23 => "0100101101101111110000010101110100000000000000000000000000000000", 
    24 => "0000001100100010000000111010001100000000000000000000000000000000", 
    25 => "0011000000110001001000101111011100000000000000000000000000000000", 
    26 => "1100111100001110110010011100011000000000000000000000000000000000", 
    27 => "1110011110010111010001110111001100000000000000000000000000000000", 
    28 => "1000111011100000101011001011000000000000000000000000000000000000", 
    29 => "1000111101111010010011010111001000000000000000000000000000000000", 
    30 => "0001101000001110000110001001100100000000000000000000000000000000", 
    31 => "1000011100101111101001111010111000000000000000000000000000000000", 
    32 => "1111011111101001100100110000100100000000000000000000000000000000", 
    33 => "0001011111011011010101010101100000000000000000000000000000000000", 
    34 => "1110110111110011111111010001000000000000000000000000000000000000", 
    35 => "0100010000001010000000101001010100000000000000000000000000000000", 
    36 => "0001001101100010111010111001111000000000000000000000000000000000", 
    37 => "1101001000110110011000001101011000000000000000000000000000000000", 
    38 => "0100110111011011010000001001011100000000000000000000000000000000", 
    39 => "0100000011010010100100101001000000000000000000000000000000000000", 
    40 => "0101001100001110011110101011111100000000000000000000000000000000", 
    41 => "0110100000100100100011101111101000000000000000000000000000000000", 
    42 => "1101111001010001100011010100100000000000000000000000000000000000", 
    43 => "1011010110001010000101010100010000000000000000000000000000000000", 
    44 => "0011100101111011011100011011000100000000000000000000000000000000", 
    45 => "1001010010001010010010011111100100000000000000000000000000000000", 
    46 => "0101000110001001010000001010010000000000000000000000000000000000", 
    47 => "1010011110111111101111110011110000000000000000000000000000000000", 
    48 => "1010111001110100100111000100100100000000000000000000000000000000", 
    49 => "0110000001110100011000001110001100000000000000000000000000000000", 
    50 => "1010101011100100101110101110000010001010010011001000100101111111", 
    51 => "0000011111010010010010011001100000010101000000011001110111000000", 
    52 => "1010101100100110111111001000000011111010001110000101010010000100", 
    53 => "0111110000011111111010101011000100100101110111111100110010101011", 
    54 => "0010111000110111101101011000100110001111001111110001110110011111", 
    55 => "0101101100011110100101000011011100110011010000001101011010110110", 
    56 => "0011001111011010000000000010001000100011100000010010001101010110", 
    57 => "1101001110110101100001000010011010110001101101011101110011101011", 
    58 => "0011100011011000011110110101000011010100101010100001111010011101", 
    59 => "0101011000110100000001000011010111010000011100011101110011111101", 
    60 => "1000001000001100110111110001000011001010001001100100000111100100", 
    61 => "0110111111100111000010011000101011001000101011101010100000100000", 
    62 => "0000111011010100000000100010110000011000010111101110101011101100", 
    63 => "1101110010010000111010111000100110010101110001011000111111001011", 
    64 => "1011100101001001100000001110011010100011111011111010101111000001", 
    65 => "0011000111101011110010100101110010110001101110001100011111001000", 
    66 => "0100000010000010100000000001001111110010000000110010001000111000", 
    67 => "0001011001111010100110110011011011111100001100100001100010011100", 
    68 => "0110001100111010111001101101010101110011110010110001101011011010", 
    69 => "1000110110011010000000011100000111101010000101101010101010010101", 
    70 => "0001101100001001100010110000110010001101101000000011100110100000", 
    71 => "1011000011000110001011000110101101010110110011001111100010100100", 
    72 => "0110110000000100111111000001000001100011101110001011011000101010", 
    73 => "0001001011010001110100000001000000010111001000010101010100011001", 
    74 => "0011001100110111110011110010110110001100010101000000111111000111", 
    75 => "0000110110111110010100101111101001011001110011011001101001011011", 
    76 => "0101010110111001100001000100111101110001101000000011000011101000", 
    77 => "0000000100111101110010100110101001100101111111101011001100111010", 
    78 => "0110101100111101110100010100001001000111100100000000111110101011", 
    79 => "0100001101010001100111110101010001010011011100001111001001110010", 
    80 => "0000101111101100110010111001100000111111001011001111001001111000", 
    81 => "1001101110110000010011110101100111000111110001111100001000111011", 
    82 => "0010010001101111111111111101010000111010111111100010010010100011", 
    83 => "1101111100010100110101011111101010001110100000110010111010001011", 
    84 => "0100010111110011111101001000000010001111111101110010111010001011", 
    85 => "1000110101100110000010011101111101110001111100010001001111101011", 
    86 => "0011001100110111111111011010010001001100111111010011101010100110", 
    87 => "0011110011101010001011111011011011100001101110101010100000011110", 
    88 => "0100011101011001001101100111001000011011011100110010111001110001", 
    89 => "1011100110101010100000000100100011100100110001011000101000101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cMgi is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cMgi is
    component pg_conv3x3_tile_cMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cMgi_rom_U :  component pg_conv3x3_tile_cMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


