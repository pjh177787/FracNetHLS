-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cfYi_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cfYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0111011111111111111111111111111100000000000000000000000000000000", 
    1 => "0000000000000000000000000000000000000000000000000000000000000000", 
    2 => "0010000011010110100000110010000100000000000000000000000000000000", 
    3 => "0011111111111111111111111111111000000000000000000000000000000000", 
    4 => "0011111111111111111111111111111100000000000000000000000000000000", 
    5 => "0111111111111111111111111111111100000000000000000000000000000000", 
    6 => "1001011011111001000000000000000000000000000000000000000000000000", 
    7 => "0001000100101001000000000000000000000000000000000000000000000000", 
    8 => "0100100010001011000000000000000000000000000000000000000000000000", 
    9 => "1001101100001110000000000000000000000000000000000000000000000000", 
    10 => "0000000110010000000000000000000000000000000000000000000000000000", 
    11 => "1000101100001011000000000000000000000000000000000000000000000000", 
    12 => "1001111011101010000000000000000000000000000000000000000000000000", 
    13 => "0000101001001110000000000000000000000000000000000000000000000000", 
    14 => "0110000010110110000000000000000000000000000000000000000000000000", 
    15 => "0010001001001100000000000000000000000000000000000000000000000000", 
    16 => "1111100001110001000000000000000000000000000000000000000000000000", 
    17 => "1101100101010001000000000000000000000000000000000000000000000000", 
    18 => "1110011101000011000000000000000000000000000000000000000000000000", 
    19 => "0011110111011010000000000000000000000000000000000000000000000000", 
    20 => "0011111001000011000000000000000000000000000000000000000000000000", 
    21 => "0000000000000100000000000000000000000000000000000000000000000000", 
    22 => "0100001101101000110100110001011000000000000000000000000000000000", 
    23 => "0100100001111001000110000101100100000000000000000000000000000000", 
    24 => "0100101101101101010100010100110100000000000000000000000000000000", 
    25 => "1100010001100001000000000110000100000000000000000000000000000000", 
    26 => "0010001000000110001000110010011100000000000000000000000000000000", 
    27 => "1101100111001001111110111100110100000000000000000000000000000000", 
    28 => "0110101111101101011010101110010000000000000000000000000000000000", 
    29 => "0110011011010100011000101111000100000000000000000000000000000000", 
    30 => "0010100011100001101010001000010000000000000000000000000000000000", 
    31 => "0011110110000010101011100010111000000000000000000000000000000000", 
    32 => "0110110001110010001011100010100000000000000000000000000000000000", 
    33 => "0011110001000000100010000100000000000000000000000000000000000000", 
    34 => "0001111010001101000111010011001100000000000000000000000000000000", 
    35 => "0101010101011011001100100110011100000000000000000000000000000000", 
    36 => "0001011000011111110101110010011000000000000000000000000000000000", 
    37 => "0110000000010011010000101111010100000000000000000000000000000000", 
    38 => "0011111110100110110110110100100000000000000000000000000000000000", 
    39 => "0100101001100101111100010010100000000000000000000000000000000000", 
    40 => "0110010110011001001110010110001100000000000000000000000000000000", 
    41 => "1011001010111000110010010010010000000000000000000000000000000000", 
    42 => "1101010001100100011011101011001100000000000000000000000000000000", 
    43 => "0100111011001000110101010001100000000000000000000000000000000000", 
    44 => "0110100001001011011000111001011100000000000000000000000000000000", 
    45 => "1010111110001101010111110000101100000000000000000000000000000000", 
    46 => "1110010011101000011110000011000000000000000000000000000000000000", 
    47 => "0111000001010100000001000000001100000000000000000000000000000000", 
    48 => "1100001001101000000010001111100000000000000000000000000000000000", 
    49 => "1100000010000001000100010000101000000000000000000000000000000000", 
    50 => "0100110010000100110010001011000001001100000111100101101001100100", 
    51 => "1101001100001110010100111110011101010111001111100100001000011010", 
    52 => "1110010100110101000100100100001011100000100110010001111110101011", 
    53 => "0001110010000101011111110111100011011010101001011101110110000010", 
    54 => "0000010000111000010010000100011100100100101101100100100101101001", 
    55 => "1000001000100101011000100111001010000000001010110111001011110011", 
    56 => "1001011100111110100011111011001101010100001110100101011010111111", 
    57 => "1000100011100011110100010000011010001101110000011001100110000110", 
    58 => "0110111011010110010110101001000000011110100001100101011000001000", 
    59 => "1011001001100001011010010010110110100000001011010000001111010000", 
    60 => "1010010110111000010001100101100001000011000011100010111101101100", 
    61 => "0000110001110000110011100100000010000100001110101010101100010010", 
    62 => "0000110000100100110001010000011011100110001000101100110110100011", 
    63 => "0110111111111010001111111100010101001101011001000010000101100101", 
    64 => "1011000010101011101000101000010000110001100011110111011110110000", 
    65 => "1000100010100100010101000100100101001101101011011001000001001001", 
    66 => "1011110110011011101011000110110010000100101100101000110101001010", 
    67 => "1100101001010000110101101000001110001110100000101101100011000110", 
    68 => "1110010011000100010100010000001101011001110111100101000000000001", 
    69 => "1101010011010101010001110100011010111000110001011100011011000000", 
    70 => "0010101110110111000011000101101111011110011010100000100000011011", 
    71 => "0011010000110100001101001000011101000110100000100001110111001111", 
    72 => "0011101000001000000001100001000010001010010101010100100000110101", 
    73 => "1011000111111111000000100000001101111110101011100000101001111000", 
    74 => "0100001111010110001101100010001000001100110111011010101010110110", 
    75 => "1011111001101101010001111010111000011010110111101101110000011010", 
    76 => "1010111001001110001011110011111001110011011011110011001100101111", 
    77 => "1111001101010001010111001011111111111011100100100010111000101100", 
    78 => "1101011110011011110011111100100010101110100101101110100111000011", 
    79 => "1010110110000010010111111010100111010100000101110011001100000100", 
    80 => "1110010111111100111001010011011110011010111011100000101101001110", 
    81 => "0111001110111101011011100101110010001110010101100000100000101111", 
    82 => "1111001101000111011111011001001111010011110011110101111110100100", 
    83 => "1000001100010001110001000001100110100101001101010001000001001101", 
    84 => "0011010111110111010111000001111110000111100111100010100000011001", 
    85 => "1001110111011110011111011111011111100000101000111010101011001110", 
    86 => "0000001000110000100001100010101010011010101110111001001001111100", 
    87 => "0000111001010110000100010010101111000110110001100001001110011101", 
    88 => "0000010010100110111101110110011010111110001010000011110100100010", 
    89 => "1010101011111010110001010111011010010111100001001110100100101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cfYi is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cfYi is
    component pg_conv3x3_tile_cfYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cfYi_rom_U :  component pg_conv3x3_tile_cfYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


