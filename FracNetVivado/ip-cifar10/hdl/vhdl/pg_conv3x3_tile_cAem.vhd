-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cAem_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "0111111111111111111111111111111100000000000000000000000000000000", 
    2 => "1111111111111111111111111111111000000000000000000000000000000000", 
    3 => "0011111110010000110100100000011100000000000000000000000000000000", 
    4 => "0010101000011111110111111111111100000000000000000000000000000000", 
    5 => "0000011101010111010111111111100000000000000000000000000000000000", 
    6 => "0000101010001110000000000000000000000000000000000000000000000000", 
    7 => "0110111010100011000000000000000000000000000000000000000000000000", 
    8 => "0010101010001110000000000000000000000000000000000000000000000000", 
    9 => "1011101011101011000000000000000000000000000000000000000000000000", 
    10 => "1000001110011001000000000000000000000000000000000000000000000000", 
    11 => "1110011001011011000000000000000000000000000000000000000000000000", 
    12 => "1011101100111100000000000000000000000000000000000000000000000000", 
    13 => "1101111000110111000000000000000000000000000000000000000000000000", 
    14 => "1101101111001010000000000000000000000000000000000000000000000000", 
    15 => "1001000011001010000000000000000000000000000000000000000000000000", 
    16 => "1011011001110000000000000000000000000000000000000000000000000000", 
    17 => "1101110101101010000000000000000000000000000000000000000000000000", 
    18 => "0010010010100001000000000000000000000000000000000000000000000000", 
    19 => "0110100101010100000000000000000000000000000000000000000000000000", 
    20 => "0001000000100001000000000000000000000000000000000000000000000000", 
    21 => "0000000000011000000000000000000000000000000000000000000000000000", 
    22 => "0100110000100001010001000000000100000000000000000000000000000000", 
    23 => "1100110101100110111111000101011000000000000000000000000000000000", 
    24 => "1011000111001010100010100100001000000000000000000000000000000000", 
    25 => "0011001111011010100010100001100000000000000000000000000000000000", 
    26 => "0110110100111100101011010001111100000000000000000000000000000000", 
    27 => "1100111111101011111111011101101000000000000000000000000000000000", 
    28 => "1111010110000001001101010010000100000000000000000000000000000000", 
    29 => "0100100101110011100010110110111100000000000000000000000000000000", 
    30 => "1010011111001111001011110011001100000000000000000000000000000000", 
    31 => "1100111111101100011100011001100000000000000000000000000000000000", 
    32 => "0011111111011000101111011101100100000000000000000000000000000000", 
    33 => "0000000110100010100111101010101000000000000000000000000000000000", 
    34 => "0110101110100011110100111010011000000000000000000000000000000000", 
    35 => "0100110111101011100111110111101000000000000000000000000000000000", 
    36 => "0100010111001011100000101100001100000000000000000000000000000000", 
    37 => "1001010100010101101111011111011000000000000000000000000000000000", 
    38 => "0010000010011001000100101110001100000000000000000000000000000000", 
    39 => "1001001000001011000110101111001100000000000000000000000000000000", 
    40 => "0111011000011111000000001100010100000000000000000000000000000000", 
    41 => "1101100100010100110001001111110100000000000000000000000000000000", 
    42 => "0101101011110000010100110100110000000000000000000000000000000000", 
    43 => "1100110111101011110000010100110000000000000000000000000000000000", 
    44 => "1010101101111011011000101011100000000000000000000000000000000000", 
    45 => "1011010011100100110101011011110100000000000000000000000000000000", 
    46 => "1101001000111010010001000110011000000000000000000000000000000000", 
    47 => "0110010101000001001110011010001000000000000000000000000000000000", 
    48 => "1001011111001011010101010100110000000000000000000000000000000000", 
    49 => "1010010101000001101010000101000100000000000000000000000000000000", 
    50 => "0101110101010000001010101111100101011011110100010110001011011101", 
    51 => "1010011111100101111001011110100010110010101001110101000101101000", 
    52 => "1111111111111011111001010101111011000111110000101110011111011110", 
    53 => "1101110001110010010011101110110011011000111001001000111011101101", 
    54 => "0111001001001100101100101000011110100011001100100100000010000111", 
    55 => "1101101110100101011001010011111011111001101001110110110110111110", 
    56 => "0100111010100000101110110101111111011000110101010110100110101001", 
    57 => "1111010100011100001101110001011000000101001000100111011110101011", 
    58 => "0101000010001100110101011001001111000100110010001011100100100010", 
    59 => "0101011101111110100111100110111101001000111000110110001001001110", 
    60 => "1101100110011001110010000100111011100101111001011100101101000110", 
    61 => "0110101010110101100010001111101110001000000010000000110100000010", 
    62 => "0000101011100100000100101110110100001101111011010100110010101011", 
    63 => "0111000101101001101101010001110110100000110101100001001100110100", 
    64 => "0001000100110001101111001100011000011001100100011000110101001011", 
    65 => "1101110110100000000100000111110001010111111100001101010101101001", 
    66 => "0100100110010110100111110001011010011011100000000000110101111001", 
    67 => "0111110100111101000111011001101100011001000011010000001000001110", 
    68 => "1100101000110100010111000001101111011010001100100111010110101011", 
    69 => "1000001100000100100011010010011010100110100000110110000100000100", 
    70 => "1101010111001101111001110001111011011101110101101110011010011010", 
    71 => "1101111101000110110011001011000010111011111110011011000000101001", 
    72 => "1001001000000011111110000010010111000111000000111001100011010100", 
    73 => "0101100000111000101101010011000101001000111110110100001001010110", 
    74 => "1100101110011010011010000111000010110111100110010110101101011000", 
    75 => "1010001100000110010011001111110010001111010101011100111111000111", 
    76 => "1101011111010001110101001000010110000100110011101101111010110100", 
    77 => "1001001000101010111000000111100011100000100110011000101110010001", 
    78 => "0100010101110100010111101011110010111110101111100110010011001001", 
    79 => "0000001110111001011000100100100111101100000011100010110101010011", 
    80 => "1001011100111011011111110010100000000111000000110110101101010100", 
    81 => "0101001101000110011111110100100000001100010101000000001001000110", 
    82 => "1001011000010101111001001110001000000100011011001010101101111111", 
    83 => "1000000110001111111010100011111110011001000101011101101000101000", 
    84 => "1110101000001101111111000000110011111110011110011101000010011000", 
    85 => "1000001001011101111110011010111101101011101010010000100100000001", 
    86 => "1000101001101010111001110010100010110111010001110010001011001000", 
    87 => "1000010011010010001100100110111001100011110111110010110000010010", 
    88 => "1111010100000110111100110001100001101010101000110100011000001001", 
    89 => "1011011110000001111101010001101010111110011001111100000101011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cAem is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cAem is
    component pg_conv3x3_tile_cAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cAem_rom_U :  component pg_conv3x3_tile_cAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


