-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_cFfa_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_cFfa_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111000100011001000000100110000000000000000000000000000000000", 
    1 => "1111111111111111111111011001100000000000000000000000000000000000", 
    2 => "1111111111111111111111111111000000000000000000000000000000000000", 
    3 => "0000000000000001000000000000000000000000000000000000000000000000", 
    4 => "0000000001000100000000000010000000000000000000000000000000000000", 
    5 => "0000101001101110111011110011100000000000000000000000000000000000", 
    6 => "0100001111000110000000000000000000000000000000000000000000000000", 
    7 => "0001001110000000000000000000000000000000000000000000000000000000", 
    8 => "0110101110100111000000000000000000000000000000000000000000000000", 
    9 => "1100000010000011000000000000000000000000000000000000000000000000", 
    10 => "0000101110000110000000000000000000000000000000000000000000000000", 
    11 => "0110001110001101000000000000000000000000000000000000000000000000", 
    12 => "0000101010001101000000000000000000000000000000000000000000000000", 
    13 => "0000101100001100000000000000000000000000000000000000000000000000", 
    14 => "0000001110001100000000000000000000000000000000000000000000000000", 
    15 => "0000001110101110000000000000000000000000000000000000000000000000", 
    16 => "0111010001110101000000000000000000000000000000000000000000000000", 
    17 => "1111110001110011000000000000000000000000000000000000000000000000", 
    18 => "0001000001010000000000000000000000000000000000000000000000000000", 
    19 => "0001011101110011000000000000000000000000000000000000000000000000", 
    20 => "0111111100010001000000000000000000000000000000000000000000000000", 
    21 => "1010111001110110000000000000000000000000000000000000000000000000", 
    22 => "1100000000100101111000011000011000000000000000000000000000000000", 
    23 => "0001011110011011110111010001110100000000000000000000000000000000", 
    24 => "1011001110011011110110110001100100000000000000000000000000000000", 
    25 => "1110110111011001110001101101100100000000000000000000000000000000", 
    26 => "1100010010111111110001010001111100000000000000000000000000000000", 
    27 => "1001010110011011000110010111101100000000000000000000000000000000", 
    28 => "0011001000011111000000101011100000000000000000000000000000000000", 
    29 => "1001101011001000001110000001100000000000000000000000000000000000", 
    30 => "1000010110011111001101110011111000000000000000000000000000000000", 
    31 => "1100010011100001000110011110001000000000000000000000000000000000", 
    32 => "0110110001100111011001010011011000000000000000000000000000000000", 
    33 => "1010101101111111000111001011110100000000000000000000000000000000", 
    34 => "0010110011010000000100101011100100000000000000000000000000000000", 
    35 => "1001010001011101011011101011110000000000000000000000000000000000", 
    36 => "1110110100100011111101110000011000000000000000000000000000000000", 
    37 => "0001101111000000101110001000111000000000000000000000000000000000", 
    38 => "0100000000100111010100110110010000000000000000000000000000000000", 
    39 => "0111101010110001111110010101100100000000000000000000000000000000", 
    40 => "0010100110000000101110001011100000000000000000000000000000000000", 
    41 => "1111101000100000110001101011000000000000000000000000000000000000", 
    42 => "1001011111000011000000110100011100000000000000000000000000000000", 
    43 => "0100110001110011100010010100001000000000000000000000000000000000", 
    44 => "0001011000001011000100100001100100000000000000000000000000000000", 
    45 => "0111101011001000101111101101000000000000000000000000000000000000", 
    46 => "1011010100100110111000011011011000000000000000000000000000000000", 
    47 => "0001001001001100010000001000011000000000000000000000000000000000", 
    48 => "0100100111110101110101010001001100000000000000000000000000000000", 
    49 => "1100101111001001001000100011101000000000000000000000000000000000", 
    50 => "1110100000000101101100000001001010111000110001001011111010111011", 
    51 => "0101001110110000010101010010011101110110101100110001100100000101", 
    52 => "0110000000000000110110001101001100000000110101001111100010100010", 
    53 => "1100011001010010010001000111000111110010011101100111000000100000", 
    54 => "0010101100110100011000010000101000010111101010100110000100001010", 
    55 => "1001000001100101110000011000110011110000011000010100000010000001", 
    56 => "1000110001100001010101010110101101001100001100110101000101000100", 
    57 => "0000001100010110000000100001101000000000101010011010101010111000", 
    58 => "1111011101000011100111000001000011100111110100001011111101101010", 
    59 => "0010001100100011011010110111110011101011001100101010001001010111", 
    60 => "1010111101111000100101110000000001001111010110100111111101100000", 
    61 => "1011111111001110110111011000001110001111110011001000111100101000", 
    62 => "1111010001001011111010100001111011000010000110010010111000110111", 
    63 => "0011011111010110000001001011000000010101100010111010000100110110", 
    64 => "0100001101100111010001110110010010111011001111110111001001011100", 
    65 => "1001000101100000100100011000011010011011001001101100001110100110", 
    66 => "1111011011000110001000101111011100100110110011100111001100000001", 
    67 => "1101111001011101011110000011111101100111110001000110001110111110", 
    68 => "0000101000111011110101000111100001001001000111010000111101111101", 
    69 => "1100010000010011100111000001110111010110111100110010000001011100", 
    70 => "1101011111001110010111100101001100011001101110000110111111001101", 
    71 => "0000110111011111101000110010100000110000110100101001000010001011", 
    72 => "1100100001111000000100100111010011000000100010010110110110111011", 
    73 => "0100001010100100010000110010000110011000001101110101111111010001", 
    74 => "1010111101010001001110011000110110100111010101101010000011011010", 
    75 => "0001010111010010011011110010010101011010010101010011111100110000", 
    76 => "1111111001100100111010001010101011111010111011000101001111011101", 
    77 => "0111011100010001000001011000010000100011010000100001000100100110", 
    78 => "0000011100110110000100001000101110100010101010010101100001001010", 
    79 => "1100000000001110101010001011111110101010100010011010010010110010", 
    80 => "0010111110011011001110100100000011000010111100001000110000011001", 
    81 => "1101001000010101010001011010011010110001110001000001111000011110", 
    82 => "0000111000001111110011100101011100111110011100010110100111101100", 
    83 => "0101101111010011011101101010110110110011000010111111000010111101", 
    84 => "0001010110010110011111000101101111001001101011101110100001011011", 
    85 => "1001001000111101000001010011110000001111011000111111011011001001", 
    86 => "1101001000111101100010011011100010111111010110110001110110100111", 
    87 => "1101111001101011011011010011010011110110001010011010010001101100", 
    88 => "0001101110000010011110001011110011101101011100011010101100111001", 
    89 => "1011111001000001001011010011011010100011001001101010111001011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_cFfa is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_cFfa is
    component pg_conv3x3_tile_cFfa_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_cFfa_rom_U :  component pg_conv3x3_tile_cFfa_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


