-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pg_conv3x3_tile_c2iS_rom is 
    generic(
             DWIDTH     : integer := 64; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 90
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pg_conv3x3_tile_c2iS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1111111111111111011100111101101100000000000000000000000000000000", 
    1 => "1111111111111111111111111111111100000000000000000000000000000000", 
    2 => "1111111111111111111111011111111100000000000000000000000000000000", 
    3 => "1011111110011111101110001110100100000000000000000000000000000000", 
    4 => "1011110000000000000000000000000100000000000000000000000000000000", 
    5 => "0000000000001001110110110000000000000000000000000000000000000000", 
    6 => "1100100110001110000000000000000000000000000000000000000000000000", 
    7 => "1010101001001000000000000000000000000000000000000000000000000000", 
    8 => "0100110110001010000000000000000000000000000000000000000000000000", 
    9 => "0011001101010111000000000000000000000000000000000000000000000000", 
    10 => "0110110000111110000000000000000000000000000000000000000000000000", 
    11 => "1001111011011011000000000000000000000000000000000000000000000000", 
    12 => "0011000101110010000000000000000000000000000000000000000000000000", 
    13 => "1100001011101001000000000000000000000000000000000000000000000000", 
    14 => "0000001011001000000000000000000000000000000000000000000000000000", 
    15 => "0101000000111111000000000000000000000000000000000000000000000000", 
    16 => "0001111101111111000000000000000000000000000000000000000000000000", 
    17 => "0011001110011101000000000000000000000000000000000000000000000000", 
    18 => "0001000101010001000000000000000000000000000000000000000000000000", 
    19 => "1110101100000011000000000000000000000000000000000000000000000000", 
    20 => "1101011111001101000000000000000000000000000000000000000000000000", 
    21 => "0111000001101010000000000000000000000000000000000000000000000000", 
    22 => "0011100111011010000110100010101000000000000000000000000000000000", 
    23 => "0000101100010011100100010001110100000000000000000000000000000000", 
    24 => "1001011100011010000001101010101000000000000000000000000000000000", 
    25 => "1100010011100111110110001001010100000000000000000000000000000000", 
    26 => "0001000010010110000010010011111000000000000000000000000000000000", 
    27 => "0001010000100000001010110001111000000000000000000000000000000000", 
    28 => "1001110001011110000111110010001000000000000000000000000000000000", 
    29 => "0110110001100010110010100110110000000000000000000000000000000000", 
    30 => "1001000010011111100100110000001100000000000000000000000000000000", 
    31 => "1000000001101101111011001110010100000000000000000000000000000000", 
    32 => "0001100011011011000100010000011000000000000000000000000000000000", 
    33 => "1010110010011110110011101011110000000000000000000000000000000000", 
    34 => "1100010000000100011100011011011000000000000000000000000000000000", 
    35 => "1110101010110101010101011011100000000000000000000000000000000000", 
    36 => "0011110111011010100111110101111000000000000000000000000000000000", 
    37 => "0111110100100111110001010100011100000000000000000000000000000000", 
    38 => "0010011100011001000111100000100100000000000000000000000000000000", 
    39 => "1000001010110111111000001000000000000000000000000000000000000000", 
    40 => "1011100011110000111010001101010100000000000000000000000000000000", 
    41 => "0101100011110010110011000110010000000000000000000000000000000000", 
    42 => "1101000000001010011000111001011100000000000000000000000000000000", 
    43 => "0100010100000000000100100001000000000000000000000000000000000000", 
    44 => "0100101111100100100101010001100100000000000000000000000000000000", 
    45 => "1010100110001001100110000111101100000000000000000000000000000000", 
    46 => "1000000010000000010000100000001000000000000000000000000000000000", 
    47 => "0000100011010001011010001101011100000000000000000000000000000000", 
    48 => "0000010101000001000000111001001100000000000000000000000000000000", 
    49 => "0001101010110111000110100011110100000000000000000000000000000000", 
    50 => "0000011110111110011100111001011100100111001110110011001101000011", 
    51 => "0000011101111110011100101101100011000111010110100111001000011100", 
    52 => "1000000001100010110101010111011000001110110001101101110101001101", 
    53 => "1111100110010001100011000010111100101010100000001001111101101110", 
    54 => "0010111101000100010111110010111100101110100000110001101101000000", 
    55 => "0010011000101100111101011000000101000010001101100111110101100101", 
    56 => "1100110111101110011010111111001010000101010000010010001010111011", 
    57 => "0000000101101110110000000110111100111110011110100111000000101101", 
    58 => "1111010010011001000110101011010100110101010100011000101101010011", 
    59 => "0010011001110100101011000001101001111010101000101001101001001000", 
    60 => "1011110110000000101110101000100000000110110011010000101000011001", 
    61 => "1111110111110011110000100110011110100111111110000100011111110101", 
    62 => "0000100000111011111100100001100010001011101010110011110000011000", 
    63 => "0100001011101010111100111001001110110110101111000111000111101100", 
    64 => "0011111100000111001011111011100001101001100010010100101000001000", 
    65 => "1000101110111000001111111011010101000000011001101100100010011111", 
    66 => "1100011110001111101110110100010000100001000100110100101101001001", 
    67 => "0001111011011001100010001101110100110101100001010110100001011010", 
    68 => "1111100111000011111110010100111000100001110001111011100111110100", 
    69 => "1111001000110011100001001011010100010010010010111010110010110100", 
    70 => "0101010010011010101011010000010101000001111100100000111000101010", 
    71 => "1001010100010110001010000110001011010010101010011111111000110100", 
    72 => "1000001000001110010110101000010000011101000011101101100010010111", 
    73 => "0011011010100100101010011111100000010111101101111111101011001010", 
    74 => "1010010101110110100101000010011111001010101101110101110010110101", 
    75 => "1011110000100011110101100111011111001100101011010011101011011001", 
    76 => "0001100011111111011110101110001001011100101111110111110010000101", 
    77 => "0001111101001110101111111000000010101010010110100101110110011111", 
    78 => "1100111001111001111111010100001010111100001001011101101101001001", 
    79 => "0010001100010001110001001111110010101110000000010001100001001111", 
    80 => "0000100010111001001010000010100011100110110100100010110000101110", 
    81 => "0110000011111110011100010100010010110111001011010011101110110001", 
    82 => "0110101000001111110101010011011011011100011011011100001110000010", 
    83 => "1101001000111100000001001011100101110110111001001010100111101011", 
    84 => "0010111001111101001101100100001110000110101100100000010101110001", 
    85 => "1010110100001110011000101010011001101100101100110101100100001011", 
    86 => "0100111010110010011011010011001001000110101100111110001000000000", 
    87 => "0110001000011101011110000000101011111100110001010011000001011110", 
    88 => "1001110000010000011011000111110011111100101100100001000001011111", 
    89 => "1111111110100101111101001100111010100001101000011100101000111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pg_conv3x3_tile_c2iS is
    generic (
        DataWidth : INTEGER := 64;
        AddressRange : INTEGER := 90;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pg_conv3x3_tile_c2iS is
    component pg_conv3x3_tile_c2iS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pg_conv3x3_tile_c2iS_rom_U :  component pg_conv3x3_tile_c2iS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


