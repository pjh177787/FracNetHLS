-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_layer_1D_weight_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weights_all_V_AWVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_AWREADY : IN STD_LOGIC;
    m_axi_weights_all_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_WREADY : IN STD_LOGIC;
    m_axi_weights_all_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_weights_all_V_WLAST : OUT STD_LOGIC;
    m_axi_weights_all_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_ARREADY : IN STD_LOGIC;
    m_axi_weights_all_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RVALID : IN STD_LOGIC;
    m_axi_weights_all_V_RREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_RLAST : IN STD_LOGIC;
    m_axi_weights_all_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BVALID : IN STD_LOGIC;
    m_axi_weights_all_V_BREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_all_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    weights_all_ptr_start_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    c_out_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_out_channels_offset : IN STD_LOGIC_VECTOR (11 downto 0);
    pw_out_channels_offset : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_64 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_65 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_66 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_67 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_68 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_69 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_70 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_73 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_74 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_75 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_76 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_77 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_78 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_79 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_84 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_85 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_86 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_87 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_88 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_89 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_90 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_91 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_92 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_93 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_94 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_95 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_96 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_97 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_98 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_99 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_100 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_101 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_102 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_103 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_104 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_105 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_106 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_107 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_108 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_109 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_110 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_111 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_112 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_113 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_114 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_115 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_116 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_117 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_118 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_119 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_120 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_121 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_122 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_123 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_124 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_125 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_126 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_127 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_128 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_129 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_130 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_131 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_132 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_133 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_134 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_135 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_136 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_137 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_138 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_139 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_140 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_141 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_142 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_143 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_144 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_145 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_146 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_147 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_148 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_149 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_150 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_151 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_152 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_153 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_154 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_155 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_156 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_157 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_158 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_159 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_160 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_161 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_162 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_163 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_164 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_165 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_166 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_167 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_168 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_169 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_170 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_171 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_172 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_173 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_174 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_175 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_176 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_177 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_178 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_179 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_180 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_181 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_182 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_183 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_184 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_185 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_186 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_187 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_188 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_189 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_190 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_191 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_192 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_193 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_194 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_195 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_196 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_197 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_198 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_199 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_200 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_201 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_202 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_203 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_204 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_205 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_206 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_207 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_208 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_209 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_210 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_211 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_212 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_213 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_214 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_215 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_216 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_217 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_218 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_219 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_220 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_221 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_222 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_223 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_224 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_225 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_226 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_227 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_228 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_229 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_230 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_231 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_232 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_233 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_234 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_235 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_236 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_237 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_238 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_239 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_240 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_241 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_242 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_243 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_244 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_245 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_246 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_247 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_248 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_249 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_250 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_251 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_252 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_253 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_254 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_255 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of load_layer_1D_weight_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_all_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_all_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal weights_all_ptr_fu_312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_reg_4387 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_1_fu_322_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_1_reg_4392 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_fu_326_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_reg_4403 : STD_LOGIC_VECTOR (26 downto 0);
    signal conv_channels_after_s_fu_332_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_channels_after_s_reg_4408 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln58_1_fu_342_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln58_1_reg_4413 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_1_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_1_reg_4427 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_1_fu_365_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_1_reg_4432 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_2_fu_397_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_2_reg_4443 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_2_fu_405_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_2_reg_4448 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_9_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal weights_all_ptr_9_reg_4453 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_1_fu_444_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln73_1_reg_4464 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_4_fu_447_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_4_reg_4469 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_3_fu_456_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_3_reg_4474 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_5_fu_471_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_5_reg_4485 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_4_fu_479_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_4_reg_4490 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_5_fu_502_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_5_reg_4501 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_7_fu_507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_7_reg_4506 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_6_fu_525_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_6_reg_4518 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_7_fu_538_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_7_reg_4523 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln647_fu_553_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_reg_4534 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_reg_4539 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_reg_4544 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_reg_4549 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_reg_4554 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_reg_4559 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_reg_4564 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_reg_4569 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_reg_4574 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_reg_4579 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_s_reg_4584 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_s_reg_4589 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_s_reg_4594 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_s_reg_4599 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_s_reg_4604 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_s_reg_4609 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_s_reg_4614 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_s_reg_4619 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_s_reg_4624 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_s_reg_4629 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_s_reg_4634 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_s_reg_4639 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_s_reg_4644 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_s_reg_4649 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_s_reg_4654 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_s_reg_4659 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_s_reg_4664 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_s_reg_4669 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_s_reg_4674 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_s_reg_4679 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_s_reg_4684 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_s_reg_4689 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_1_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_1_reg_4700 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_1_reg_4705 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_1_reg_4710 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_1_reg_4715 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_1_reg_4720 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_1_reg_4725 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_1_reg_4730 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_1_reg_4735 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_1_reg_4740 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_1_reg_4745 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_1_reg_4750 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_1_reg_4755 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_1_reg_4760 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_1_reg_4765 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_1_reg_4770 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_1_reg_4775 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_1_reg_4780 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_1_reg_4785 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_1_reg_4790 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_1_reg_4795 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_1_reg_4800 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_1_reg_4805 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_1_reg_4810 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_1_reg_4815 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_1_reg_4820 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_1_reg_4825 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_1_reg_4830 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_1_reg_4835 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_1_reg_4840 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_1_reg_4845 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_1_reg_4850 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_1_reg_4855 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_2_fu_1191_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_2_reg_4860 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_2_reg_4865 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_2_reg_4870 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_2_reg_4875 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_2_reg_4880 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_2_reg_4885 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_2_reg_4890 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_2_reg_4895 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_2_reg_4900 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_2_reg_4905 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_2_reg_4910 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_2_reg_4915 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_2_reg_4920 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_2_reg_4925 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_2_reg_4930 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_2_reg_4935 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_2_reg_4940 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_2_reg_4945 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_2_reg_4950 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_2_reg_4955 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_2_reg_4960 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_2_reg_4965 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_2_reg_4970 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_2_reg_4975 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_2_reg_4980 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_2_reg_4985 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_2_reg_4990 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_2_reg_4995 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_2_reg_5000 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_2_reg_5005 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_2_reg_5010 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_2_reg_5015 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_3_fu_1505_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_3_reg_5020 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_3_reg_5025 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_3_reg_5030 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_3_reg_5035 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_3_reg_5040 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_3_reg_5045 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_3_reg_5050 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_3_reg_5055 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_3_reg_5060 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_3_reg_5065 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_3_reg_5070 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_3_reg_5075 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_3_reg_5080 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_3_reg_5085 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_3_reg_5090 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_3_reg_5095 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_3_reg_5100 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_3_reg_5105 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_3_reg_5110 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_3_reg_5115 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_3_reg_5120 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_3_reg_5125 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_3_reg_5130 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_3_reg_5135 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_3_reg_5140 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_3_reg_5145 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_3_reg_5150 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_3_reg_5155 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_3_reg_5160 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_3_reg_5165 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_3_reg_5170 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_3_reg_5175 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_4_fu_1819_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_4_reg_5180 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_4_reg_5185 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_4_reg_5190 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_4_reg_5195 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_4_reg_5200 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_4_reg_5205 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_4_reg_5210 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_4_reg_5215 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_4_reg_5220 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_4_reg_5225 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_4_reg_5230 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_4_reg_5235 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_4_reg_5240 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_4_reg_5245 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_4_reg_5250 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_4_reg_5255 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_4_reg_5260 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_4_reg_5265 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_4_reg_5270 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_4_reg_5275 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_4_reg_5280 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_4_reg_5285 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_4_reg_5290 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_4_reg_5295 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_4_reg_5300 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_4_reg_5305 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_4_reg_5310 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_4_reg_5315 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_4_reg_5320 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_4_reg_5325 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_4_reg_5330 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_4_reg_5335 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_5_fu_2133_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_5_reg_5340 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_5_reg_5345 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_5_reg_5350 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_5_reg_5355 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_5_reg_5360 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_5_reg_5365 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_5_reg_5370 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_5_reg_5375 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_5_reg_5380 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_5_reg_5385 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_5_reg_5390 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_5_reg_5395 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_5_reg_5400 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_5_reg_5405 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_5_reg_5410 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_5_reg_5415 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_5_reg_5420 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_5_reg_5425 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_5_reg_5430 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_5_reg_5435 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_5_reg_5440 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_5_reg_5445 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_5_reg_5450 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_5_reg_5455 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_5_reg_5460 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_5_reg_5465 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_5_reg_5470 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_5_reg_5475 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_5_reg_5480 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_5_reg_5485 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_5_reg_5490 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_5_reg_5495 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_6_fu_2447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_6_reg_5500 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_6_reg_5505 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_6_reg_5510 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_6_reg_5515 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_6_reg_5520 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_6_reg_5525 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_6_reg_5530 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_6_reg_5535 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_6_reg_5540 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_6_reg_5545 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_6_reg_5550 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_6_reg_5555 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_6_reg_5560 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_6_reg_5565 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_6_reg_5570 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_6_reg_5575 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_6_reg_5580 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_6_reg_5585 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_6_reg_5590 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_6_reg_5595 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_6_reg_5600 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_6_reg_5605 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_6_reg_5610 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_6_reg_5615 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_6_reg_5620 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_6_reg_5625 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_6_reg_5630 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_6_reg_5635 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_6_reg_5640 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_6_reg_5645 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_6_reg_5650 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_6_reg_5655 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_2_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_4_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_6_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_8_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_10_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_12_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_14_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_16_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_304_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln61_fu_308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_fu_318_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_3_fu_361_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal pw_channels_after_ti_fu_373_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_5_fu_401_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln59_fu_383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal factor_fu_410_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln73_fu_418_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln73_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_7_fu_452_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_9_fu_475_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_6_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_11_fu_498_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_13_fu_522_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_8_fu_530_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_15_fu_534_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln647_7_fu_2761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln30_1_reg_4432 <= add_ln30_1_fu_365_p2;
                conv_channels_after_s_reg_4408 <= conv_out_channels_offset(10 downto 5);
                weights_all_ptr_1_reg_4427 <= weights_all_ptr_1_fu_356_p2;
                    zext_ln58_1_reg_4413(5 downto 0) <= zext_ln58_1_fu_342_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln30_2_reg_4448 <= add_ln30_2_fu_405_p2;
                weights_all_ptr_2_reg_4443 <= weights_all_ptr_2_fu_397_p2;
                weights_all_ptr_9_reg_4453 <= weights_all_ptr_9_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln30_3_reg_4474 <= add_ln30_3_fu_456_p2;
                weights_all_ptr_4_reg_4469 <= weights_all_ptr_4_fu_447_p2;
                    zext_ln73_1_reg_4464(7 downto 0) <= zext_ln73_1_fu_444_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln30_4_reg_4490 <= add_ln30_4_fu_479_p2;
                weights_all_ptr_5_reg_4485 <= weights_all_ptr_5_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln30_5_reg_4501 <= add_ln30_5_fu_502_p2;
                weights_all_ptr_7_reg_4506 <= weights_all_ptr_7_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln30_6_reg_4518 <= add_ln30_6_fu_525_p2;
                add_ln30_7_reg_4523 <= add_ln30_7_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln30_reg_4403 <= add_ln30_fu_326_p2;
                weights_all_ptr_reg_4387 <= weights_all_ptr_fu_312_p2;
                    zext_ln30_1_reg_4392(25 downto 0) <= zext_ln30_1_fu_322_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                trunc_ln647_1_reg_4700 <= trunc_ln647_1_fu_877_p1;
                weight_buffer_10_V_1_reg_4750 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_1_reg_4755 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_1_reg_4760 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_1_reg_4765 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_1_reg_4770 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_1_reg_4775 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_1_reg_4780 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_1_reg_4785 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_1_reg_4790 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_1_reg_4795 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_1_reg_4705 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_1_reg_4800 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_1_reg_4805 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_1_reg_4810 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_1_reg_4815 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_1_reg_4820 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_1_reg_4825 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_1_reg_4830 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_1_reg_4835 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_1_reg_4840 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_1_reg_4845 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_1_reg_4710 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_1_reg_4850 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_1_reg_4855 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_1_reg_4715 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_1_reg_4720 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_1_reg_4725 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_1_reg_4730 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_1_reg_4735 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_1_reg_4740 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_1_reg_4745 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                trunc_ln647_2_reg_4860 <= trunc_ln647_2_fu_1191_p1;
                weight_buffer_10_V_2_reg_4910 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_2_reg_4915 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_2_reg_4920 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_2_reg_4925 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_2_reg_4930 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_2_reg_4935 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_2_reg_4940 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_2_reg_4945 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_2_reg_4950 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_2_reg_4955 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_2_reg_4865 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_2_reg_4960 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_2_reg_4965 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_2_reg_4970 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_2_reg_4975 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_2_reg_4980 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_2_reg_4985 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_2_reg_4990 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_2_reg_4995 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_2_reg_5000 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_2_reg_5005 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_2_reg_4870 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_2_reg_5010 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_2_reg_5015 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_2_reg_4875 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_2_reg_4880 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_2_reg_4885 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_2_reg_4890 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_2_reg_4895 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_2_reg_4900 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_2_reg_4905 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                trunc_ln647_3_reg_5020 <= trunc_ln647_3_fu_1505_p1;
                weight_buffer_10_V_3_reg_5070 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_3_reg_5075 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_3_reg_5080 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_3_reg_5085 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_3_reg_5090 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_3_reg_5095 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_3_reg_5100 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_3_reg_5105 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_3_reg_5110 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_3_reg_5115 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_3_reg_5025 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_3_reg_5120 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_3_reg_5125 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_3_reg_5130 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_3_reg_5135 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_3_reg_5140 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_3_reg_5145 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_3_reg_5150 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_3_reg_5155 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_3_reg_5160 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_3_reg_5165 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_3_reg_5030 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_3_reg_5170 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_3_reg_5175 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_3_reg_5035 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_3_reg_5040 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_3_reg_5045 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_3_reg_5050 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_3_reg_5055 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_3_reg_5060 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_3_reg_5065 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                trunc_ln647_4_reg_5180 <= trunc_ln647_4_fu_1819_p1;
                weight_buffer_10_V_4_reg_5230 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_4_reg_5235 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_4_reg_5240 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_4_reg_5245 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_4_reg_5250 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_4_reg_5255 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_4_reg_5260 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_4_reg_5265 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_4_reg_5270 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_4_reg_5275 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_4_reg_5185 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_4_reg_5280 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_4_reg_5285 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_4_reg_5290 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_4_reg_5295 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_4_reg_5300 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_4_reg_5305 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_4_reg_5310 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_4_reg_5315 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_4_reg_5320 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_4_reg_5325 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_4_reg_5190 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_4_reg_5330 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_4_reg_5335 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_4_reg_5195 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_4_reg_5200 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_4_reg_5205 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_4_reg_5210 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_4_reg_5215 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_4_reg_5220 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_4_reg_5225 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                trunc_ln647_5_reg_5340 <= trunc_ln647_5_fu_2133_p1;
                weight_buffer_10_V_5_reg_5390 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_5_reg_5395 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_5_reg_5400 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_5_reg_5405 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_5_reg_5410 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_5_reg_5415 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_5_reg_5420 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_5_reg_5425 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_5_reg_5430 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_5_reg_5435 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_5_reg_5345 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_5_reg_5440 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_5_reg_5445 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_5_reg_5450 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_5_reg_5455 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_5_reg_5460 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_5_reg_5465 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_5_reg_5470 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_5_reg_5475 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_5_reg_5480 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_5_reg_5485 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_5_reg_5350 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_5_reg_5490 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_5_reg_5495 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_5_reg_5355 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_5_reg_5360 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_5_reg_5365 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_5_reg_5370 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_5_reg_5375 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_5_reg_5380 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_5_reg_5385 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                trunc_ln647_6_reg_5500 <= trunc_ln647_6_fu_2447_p1;
                weight_buffer_10_V_6_reg_5550 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_6_reg_5555 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_6_reg_5560 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_6_reg_5565 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_6_reg_5570 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_6_reg_5575 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_6_reg_5580 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_6_reg_5585 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_6_reg_5590 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_6_reg_5595 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_6_reg_5505 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_6_reg_5600 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_6_reg_5605 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_6_reg_5610 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_6_reg_5615 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_6_reg_5620 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_6_reg_5625 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_6_reg_5630 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_6_reg_5635 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_6_reg_5640 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_6_reg_5645 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_6_reg_5510 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_6_reg_5650 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_6_reg_5655 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_6_reg_5515 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_6_reg_5520 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_6_reg_5525 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_6_reg_5530 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_6_reg_5535 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_6_reg_5540 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_6_reg_5545 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                trunc_ln647_reg_4534 <= trunc_ln647_fu_553_p1;
                weight_buffer_10_V_s_reg_4584 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_s_reg_4589 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_s_reg_4594 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_s_reg_4599 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_s_reg_4604 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_s_reg_4609 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_s_reg_4614 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_s_reg_4619 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_s_reg_4624 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_s_reg_4629 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_reg_4539 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_s_reg_4634 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_s_reg_4639 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_s_reg_4644 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_s_reg_4649 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_s_reg_4654 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_s_reg_4659 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_s_reg_4664 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_s_reg_4669 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_s_reg_4674 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_s_reg_4679 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_reg_4544 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_s_reg_4684 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_s_reg_4689 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_reg_4549 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_reg_4554 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_reg_4559 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_reg_4564 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_reg_4569 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_reg_4574 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_reg_4579 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    zext_ln30_1_reg_4392(26) <= '0';
    zext_ln58_1_reg_4413(11 downto 6) <= "000000";
    zext_ln73_1_reg_4464(11 downto 8) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_1_fu_365_p2 <= std_logic_vector(unsigned(zext_ln30_3_fu_361_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_2_fu_405_p2 <= std_logic_vector(unsigned(zext_ln30_5_fu_401_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_3_fu_456_p2 <= std_logic_vector(unsigned(zext_ln30_7_fu_452_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_4_fu_479_p2 <= std_logic_vector(unsigned(zext_ln30_9_fu_475_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_5_fu_502_p2 <= std_logic_vector(unsigned(zext_ln30_11_fu_498_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_6_fu_525_p2 <= std_logic_vector(unsigned(zext_ln30_13_fu_522_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_7_fu_538_p2 <= std_logic_vector(unsigned(zext_ln30_15_fu_534_p1) + unsigned(zext_ln30_1_reg_4392));
    add_ln30_fu_326_p2 <= std_logic_vector(unsigned(zext_ln30_fu_318_p1) + unsigned(zext_ln30_1_fu_322_p1));
    add_ln73_fu_418_p2 <= std_logic_vector(unsigned(zext_ln59_fu_383_p1) + unsigned(factor_fu_410_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_weights_all_V_RVALID, ap_CS_fsm_state16)
    begin
        if ((((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_weights_all_V_RVALID, ap_CS_fsm_state16)
    begin
        if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= trunc_ln647_reg_4534;
    ap_return_1 <= weight_buffer_1_V_w_reg_4539;
    ap_return_10 <= weight_buffer_10_V_s_reg_4584;
    ap_return_100 <= weight_buffer_4_V_w_3_reg_5040;
    ap_return_101 <= weight_buffer_5_V_w_3_reg_5045;
    ap_return_102 <= weight_buffer_6_V_w_3_reg_5050;
    ap_return_103 <= weight_buffer_7_V_w_3_reg_5055;
    ap_return_104 <= weight_buffer_8_V_w_3_reg_5060;
    ap_return_105 <= weight_buffer_9_V_w_3_reg_5065;
    ap_return_106 <= weight_buffer_10_V_3_reg_5070;
    ap_return_107 <= weight_buffer_11_V_3_reg_5075;
    ap_return_108 <= weight_buffer_12_V_3_reg_5080;
    ap_return_109 <= weight_buffer_13_V_3_reg_5085;
    ap_return_11 <= weight_buffer_11_V_s_reg_4589;
    ap_return_110 <= weight_buffer_14_V_3_reg_5090;
    ap_return_111 <= weight_buffer_15_V_3_reg_5095;
    ap_return_112 <= weight_buffer_16_V_3_reg_5100;
    ap_return_113 <= weight_buffer_17_V_3_reg_5105;
    ap_return_114 <= weight_buffer_18_V_3_reg_5110;
    ap_return_115 <= weight_buffer_19_V_3_reg_5115;
    ap_return_116 <= weight_buffer_20_V_3_reg_5120;
    ap_return_117 <= weight_buffer_21_V_3_reg_5125;
    ap_return_118 <= weight_buffer_22_V_3_reg_5130;
    ap_return_119 <= weight_buffer_23_V_3_reg_5135;
    ap_return_12 <= weight_buffer_12_V_s_reg_4594;
    ap_return_120 <= weight_buffer_24_V_3_reg_5140;
    ap_return_121 <= weight_buffer_25_V_3_reg_5145;
    ap_return_122 <= weight_buffer_26_V_3_reg_5150;
    ap_return_123 <= weight_buffer_27_V_3_reg_5155;
    ap_return_124 <= weight_buffer_28_V_3_reg_5160;
    ap_return_125 <= weight_buffer_29_V_3_reg_5165;
    ap_return_126 <= weight_buffer_30_V_3_reg_5170;
    ap_return_127 <= weight_buffer_31_V_3_reg_5175;
    ap_return_128 <= trunc_ln647_4_reg_5180;
    ap_return_129 <= weight_buffer_1_V_w_4_reg_5185;
    ap_return_13 <= weight_buffer_13_V_s_reg_4599;
    ap_return_130 <= weight_buffer_2_V_w_4_reg_5190;
    ap_return_131 <= weight_buffer_3_V_w_4_reg_5195;
    ap_return_132 <= weight_buffer_4_V_w_4_reg_5200;
    ap_return_133 <= weight_buffer_5_V_w_4_reg_5205;
    ap_return_134 <= weight_buffer_6_V_w_4_reg_5210;
    ap_return_135 <= weight_buffer_7_V_w_4_reg_5215;
    ap_return_136 <= weight_buffer_8_V_w_4_reg_5220;
    ap_return_137 <= weight_buffer_9_V_w_4_reg_5225;
    ap_return_138 <= weight_buffer_10_V_4_reg_5230;
    ap_return_139 <= weight_buffer_11_V_4_reg_5235;
    ap_return_14 <= weight_buffer_14_V_s_reg_4604;
    ap_return_140 <= weight_buffer_12_V_4_reg_5240;
    ap_return_141 <= weight_buffer_13_V_4_reg_5245;
    ap_return_142 <= weight_buffer_14_V_4_reg_5250;
    ap_return_143 <= weight_buffer_15_V_4_reg_5255;
    ap_return_144 <= weight_buffer_16_V_4_reg_5260;
    ap_return_145 <= weight_buffer_17_V_4_reg_5265;
    ap_return_146 <= weight_buffer_18_V_4_reg_5270;
    ap_return_147 <= weight_buffer_19_V_4_reg_5275;
    ap_return_148 <= weight_buffer_20_V_4_reg_5280;
    ap_return_149 <= weight_buffer_21_V_4_reg_5285;
    ap_return_15 <= weight_buffer_15_V_s_reg_4609;
    ap_return_150 <= weight_buffer_22_V_4_reg_5290;
    ap_return_151 <= weight_buffer_23_V_4_reg_5295;
    ap_return_152 <= weight_buffer_24_V_4_reg_5300;
    ap_return_153 <= weight_buffer_25_V_4_reg_5305;
    ap_return_154 <= weight_buffer_26_V_4_reg_5310;
    ap_return_155 <= weight_buffer_27_V_4_reg_5315;
    ap_return_156 <= weight_buffer_28_V_4_reg_5320;
    ap_return_157 <= weight_buffer_29_V_4_reg_5325;
    ap_return_158 <= weight_buffer_30_V_4_reg_5330;
    ap_return_159 <= weight_buffer_31_V_4_reg_5335;
    ap_return_16 <= weight_buffer_16_V_s_reg_4614;
    ap_return_160 <= trunc_ln647_5_reg_5340;
    ap_return_161 <= weight_buffer_1_V_w_5_reg_5345;
    ap_return_162 <= weight_buffer_2_V_w_5_reg_5350;
    ap_return_163 <= weight_buffer_3_V_w_5_reg_5355;
    ap_return_164 <= weight_buffer_4_V_w_5_reg_5360;
    ap_return_165 <= weight_buffer_5_V_w_5_reg_5365;
    ap_return_166 <= weight_buffer_6_V_w_5_reg_5370;
    ap_return_167 <= weight_buffer_7_V_w_5_reg_5375;
    ap_return_168 <= weight_buffer_8_V_w_5_reg_5380;
    ap_return_169 <= weight_buffer_9_V_w_5_reg_5385;
    ap_return_17 <= weight_buffer_17_V_s_reg_4619;
    ap_return_170 <= weight_buffer_10_V_5_reg_5390;
    ap_return_171 <= weight_buffer_11_V_5_reg_5395;
    ap_return_172 <= weight_buffer_12_V_5_reg_5400;
    ap_return_173 <= weight_buffer_13_V_5_reg_5405;
    ap_return_174 <= weight_buffer_14_V_5_reg_5410;
    ap_return_175 <= weight_buffer_15_V_5_reg_5415;
    ap_return_176 <= weight_buffer_16_V_5_reg_5420;
    ap_return_177 <= weight_buffer_17_V_5_reg_5425;
    ap_return_178 <= weight_buffer_18_V_5_reg_5430;
    ap_return_179 <= weight_buffer_19_V_5_reg_5435;
    ap_return_18 <= weight_buffer_18_V_s_reg_4624;
    ap_return_180 <= weight_buffer_20_V_5_reg_5440;
    ap_return_181 <= weight_buffer_21_V_5_reg_5445;
    ap_return_182 <= weight_buffer_22_V_5_reg_5450;
    ap_return_183 <= weight_buffer_23_V_5_reg_5455;
    ap_return_184 <= weight_buffer_24_V_5_reg_5460;
    ap_return_185 <= weight_buffer_25_V_5_reg_5465;
    ap_return_186 <= weight_buffer_26_V_5_reg_5470;
    ap_return_187 <= weight_buffer_27_V_5_reg_5475;
    ap_return_188 <= weight_buffer_28_V_5_reg_5480;
    ap_return_189 <= weight_buffer_29_V_5_reg_5485;
    ap_return_19 <= weight_buffer_19_V_s_reg_4629;
    ap_return_190 <= weight_buffer_30_V_5_reg_5490;
    ap_return_191 <= weight_buffer_31_V_5_reg_5495;
    ap_return_192 <= trunc_ln647_6_reg_5500;
    ap_return_193 <= weight_buffer_1_V_w_6_reg_5505;
    ap_return_194 <= weight_buffer_2_V_w_6_reg_5510;
    ap_return_195 <= weight_buffer_3_V_w_6_reg_5515;
    ap_return_196 <= weight_buffer_4_V_w_6_reg_5520;
    ap_return_197 <= weight_buffer_5_V_w_6_reg_5525;
    ap_return_198 <= weight_buffer_6_V_w_6_reg_5530;
    ap_return_199 <= weight_buffer_7_V_w_6_reg_5535;
    ap_return_2 <= weight_buffer_2_V_w_reg_4544;
    ap_return_20 <= weight_buffer_20_V_s_reg_4634;
    ap_return_200 <= weight_buffer_8_V_w_6_reg_5540;
    ap_return_201 <= weight_buffer_9_V_w_6_reg_5545;
    ap_return_202 <= weight_buffer_10_V_6_reg_5550;
    ap_return_203 <= weight_buffer_11_V_6_reg_5555;
    ap_return_204 <= weight_buffer_12_V_6_reg_5560;
    ap_return_205 <= weight_buffer_13_V_6_reg_5565;
    ap_return_206 <= weight_buffer_14_V_6_reg_5570;
    ap_return_207 <= weight_buffer_15_V_6_reg_5575;
    ap_return_208 <= weight_buffer_16_V_6_reg_5580;
    ap_return_209 <= weight_buffer_17_V_6_reg_5585;
    ap_return_21 <= weight_buffer_21_V_s_reg_4639;
    ap_return_210 <= weight_buffer_18_V_6_reg_5590;
    ap_return_211 <= weight_buffer_19_V_6_reg_5595;
    ap_return_212 <= weight_buffer_20_V_6_reg_5600;
    ap_return_213 <= weight_buffer_21_V_6_reg_5605;
    ap_return_214 <= weight_buffer_22_V_6_reg_5610;
    ap_return_215 <= weight_buffer_23_V_6_reg_5615;
    ap_return_216 <= weight_buffer_24_V_6_reg_5620;
    ap_return_217 <= weight_buffer_25_V_6_reg_5625;
    ap_return_218 <= weight_buffer_26_V_6_reg_5630;
    ap_return_219 <= weight_buffer_27_V_6_reg_5635;
    ap_return_22 <= weight_buffer_22_V_s_reg_4644;
    ap_return_220 <= weight_buffer_28_V_6_reg_5640;
    ap_return_221 <= weight_buffer_29_V_6_reg_5645;
    ap_return_222 <= weight_buffer_30_V_6_reg_5650;
    ap_return_223 <= weight_buffer_31_V_6_reg_5655;
    ap_return_224 <= trunc_ln647_7_fu_2761_p1;
    ap_return_225 <= m_axi_weights_all_V_RDATA(31 downto 16);
    ap_return_226 <= m_axi_weights_all_V_RDATA(47 downto 32);
    ap_return_227 <= m_axi_weights_all_V_RDATA(63 downto 48);
    ap_return_228 <= m_axi_weights_all_V_RDATA(79 downto 64);
    ap_return_229 <= m_axi_weights_all_V_RDATA(95 downto 80);
    ap_return_23 <= weight_buffer_23_V_s_reg_4649;
    ap_return_230 <= m_axi_weights_all_V_RDATA(111 downto 96);
    ap_return_231 <= m_axi_weights_all_V_RDATA(127 downto 112);
    ap_return_232 <= m_axi_weights_all_V_RDATA(143 downto 128);
    ap_return_233 <= m_axi_weights_all_V_RDATA(159 downto 144);
    ap_return_234 <= m_axi_weights_all_V_RDATA(175 downto 160);
    ap_return_235 <= m_axi_weights_all_V_RDATA(191 downto 176);
    ap_return_236 <= m_axi_weights_all_V_RDATA(207 downto 192);
    ap_return_237 <= m_axi_weights_all_V_RDATA(223 downto 208);
    ap_return_238 <= m_axi_weights_all_V_RDATA(239 downto 224);
    ap_return_239 <= m_axi_weights_all_V_RDATA(255 downto 240);
    ap_return_24 <= weight_buffer_24_V_s_reg_4654;
    ap_return_240 <= m_axi_weights_all_V_RDATA(271 downto 256);
    ap_return_241 <= m_axi_weights_all_V_RDATA(287 downto 272);
    ap_return_242 <= m_axi_weights_all_V_RDATA(303 downto 288);
    ap_return_243 <= m_axi_weights_all_V_RDATA(319 downto 304);
    ap_return_244 <= m_axi_weights_all_V_RDATA(335 downto 320);
    ap_return_245 <= m_axi_weights_all_V_RDATA(351 downto 336);
    ap_return_246 <= m_axi_weights_all_V_RDATA(367 downto 352);
    ap_return_247 <= m_axi_weights_all_V_RDATA(383 downto 368);
    ap_return_248 <= m_axi_weights_all_V_RDATA(399 downto 384);
    ap_return_249 <= m_axi_weights_all_V_RDATA(415 downto 400);
    ap_return_25 <= weight_buffer_25_V_s_reg_4659;
    ap_return_250 <= m_axi_weights_all_V_RDATA(431 downto 416);
    ap_return_251 <= m_axi_weights_all_V_RDATA(447 downto 432);
    ap_return_252 <= m_axi_weights_all_V_RDATA(463 downto 448);
    ap_return_253 <= m_axi_weights_all_V_RDATA(479 downto 464);
    ap_return_254 <= m_axi_weights_all_V_RDATA(495 downto 480);
    ap_return_255 <= m_axi_weights_all_V_RDATA(511 downto 496);
    ap_return_26 <= weight_buffer_26_V_s_reg_4664;
    ap_return_27 <= weight_buffer_27_V_s_reg_4669;
    ap_return_28 <= weight_buffer_28_V_s_reg_4674;
    ap_return_29 <= weight_buffer_29_V_s_reg_4679;
    ap_return_3 <= weight_buffer_3_V_w_reg_4549;
    ap_return_30 <= weight_buffer_30_V_s_reg_4684;
    ap_return_31 <= weight_buffer_31_V_s_reg_4689;
    ap_return_32 <= trunc_ln647_1_reg_4700;
    ap_return_33 <= weight_buffer_1_V_w_1_reg_4705;
    ap_return_34 <= weight_buffer_2_V_w_1_reg_4710;
    ap_return_35 <= weight_buffer_3_V_w_1_reg_4715;
    ap_return_36 <= weight_buffer_4_V_w_1_reg_4720;
    ap_return_37 <= weight_buffer_5_V_w_1_reg_4725;
    ap_return_38 <= weight_buffer_6_V_w_1_reg_4730;
    ap_return_39 <= weight_buffer_7_V_w_1_reg_4735;
    ap_return_4 <= weight_buffer_4_V_w_reg_4554;
    ap_return_40 <= weight_buffer_8_V_w_1_reg_4740;
    ap_return_41 <= weight_buffer_9_V_w_1_reg_4745;
    ap_return_42 <= weight_buffer_10_V_1_reg_4750;
    ap_return_43 <= weight_buffer_11_V_1_reg_4755;
    ap_return_44 <= weight_buffer_12_V_1_reg_4760;
    ap_return_45 <= weight_buffer_13_V_1_reg_4765;
    ap_return_46 <= weight_buffer_14_V_1_reg_4770;
    ap_return_47 <= weight_buffer_15_V_1_reg_4775;
    ap_return_48 <= weight_buffer_16_V_1_reg_4780;
    ap_return_49 <= weight_buffer_17_V_1_reg_4785;
    ap_return_5 <= weight_buffer_5_V_w_reg_4559;
    ap_return_50 <= weight_buffer_18_V_1_reg_4790;
    ap_return_51 <= weight_buffer_19_V_1_reg_4795;
    ap_return_52 <= weight_buffer_20_V_1_reg_4800;
    ap_return_53 <= weight_buffer_21_V_1_reg_4805;
    ap_return_54 <= weight_buffer_22_V_1_reg_4810;
    ap_return_55 <= weight_buffer_23_V_1_reg_4815;
    ap_return_56 <= weight_buffer_24_V_1_reg_4820;
    ap_return_57 <= weight_buffer_25_V_1_reg_4825;
    ap_return_58 <= weight_buffer_26_V_1_reg_4830;
    ap_return_59 <= weight_buffer_27_V_1_reg_4835;
    ap_return_6 <= weight_buffer_6_V_w_reg_4564;
    ap_return_60 <= weight_buffer_28_V_1_reg_4840;
    ap_return_61 <= weight_buffer_29_V_1_reg_4845;
    ap_return_62 <= weight_buffer_30_V_1_reg_4850;
    ap_return_63 <= weight_buffer_31_V_1_reg_4855;
    ap_return_64 <= trunc_ln647_2_reg_4860;
    ap_return_65 <= weight_buffer_1_V_w_2_reg_4865;
    ap_return_66 <= weight_buffer_2_V_w_2_reg_4870;
    ap_return_67 <= weight_buffer_3_V_w_2_reg_4875;
    ap_return_68 <= weight_buffer_4_V_w_2_reg_4880;
    ap_return_69 <= weight_buffer_5_V_w_2_reg_4885;
    ap_return_7 <= weight_buffer_7_V_w_reg_4569;
    ap_return_70 <= weight_buffer_6_V_w_2_reg_4890;
    ap_return_71 <= weight_buffer_7_V_w_2_reg_4895;
    ap_return_72 <= weight_buffer_8_V_w_2_reg_4900;
    ap_return_73 <= weight_buffer_9_V_w_2_reg_4905;
    ap_return_74 <= weight_buffer_10_V_2_reg_4910;
    ap_return_75 <= weight_buffer_11_V_2_reg_4915;
    ap_return_76 <= weight_buffer_12_V_2_reg_4920;
    ap_return_77 <= weight_buffer_13_V_2_reg_4925;
    ap_return_78 <= weight_buffer_14_V_2_reg_4930;
    ap_return_79 <= weight_buffer_15_V_2_reg_4935;
    ap_return_8 <= weight_buffer_8_V_w_reg_4574;
    ap_return_80 <= weight_buffer_16_V_2_reg_4940;
    ap_return_81 <= weight_buffer_17_V_2_reg_4945;
    ap_return_82 <= weight_buffer_18_V_2_reg_4950;
    ap_return_83 <= weight_buffer_19_V_2_reg_4955;
    ap_return_84 <= weight_buffer_20_V_2_reg_4960;
    ap_return_85 <= weight_buffer_21_V_2_reg_4965;
    ap_return_86 <= weight_buffer_22_V_2_reg_4970;
    ap_return_87 <= weight_buffer_23_V_2_reg_4975;
    ap_return_88 <= weight_buffer_24_V_2_reg_4980;
    ap_return_89 <= weight_buffer_25_V_2_reg_4985;
    ap_return_9 <= weight_buffer_9_V_w_reg_4579;
    ap_return_90 <= weight_buffer_26_V_2_reg_4990;
    ap_return_91 <= weight_buffer_27_V_2_reg_4995;
    ap_return_92 <= weight_buffer_28_V_2_reg_5000;
    ap_return_93 <= weight_buffer_29_V_2_reg_5005;
    ap_return_94 <= weight_buffer_30_V_2_reg_5010;
    ap_return_95 <= weight_buffer_31_V_2_reg_5015;
    ap_return_96 <= trunc_ln647_3_reg_5020;
    ap_return_97 <= weight_buffer_1_V_w_3_reg_5025;
    ap_return_98 <= weight_buffer_2_V_w_3_reg_5030;
    ap_return_99 <= weight_buffer_3_V_w_3_reg_5035;
    conv_channels_after_s_fu_332_p4 <= conv_out_channels_offset(10 downto 5);
    factor_fu_410_p3 <= (pw_channels_after_ti_fu_373_p4 & ap_const_lv1_0);

    m_axi_weights_all_V_ARADDR_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln30_2_fu_346_p1, zext_ln30_4_fu_387_p1, zext_ln30_6_fu_434_p1, zext_ln30_8_fu_461_p1, zext_ln30_10_fu_484_p1, zext_ln30_12_fu_512_p1, zext_ln30_14_fu_543_p1, zext_ln30_16_fu_867_p1)
    begin
        if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_16_fu_867_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_14_fu_543_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_12_fu_512_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_10_fu_484_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_8_fu_461_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_6_fu_434_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_4_fu_387_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_2_fu_346_p1(32 - 1 downto 0);
        else 
            m_axi_weights_all_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_weights_all_V_ARBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_ARID <= ap_const_lv1_0;
    m_axi_weights_all_V_ARLEN <= ap_const_lv32_1;
    m_axi_weights_all_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_ARPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_ARQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_ARREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_ARUSER <= ap_const_lv1_0;

    m_axi_weights_all_V_ARVALID_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_AWADDR <= ap_const_lv32_0;
    m_axi_weights_all_V_AWBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_AWID <= ap_const_lv1_0;
    m_axi_weights_all_V_AWLEN <= ap_const_lv32_0;
    m_axi_weights_all_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_AWPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_AWQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_AWREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_AWUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_AWVALID <= ap_const_logic_0;
    m_axi_weights_all_V_BREADY <= ap_const_logic_0;

    m_axi_weights_all_V_RREADY_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_weights_all_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_weights_all_V_WID <= ap_const_lv1_0;
    m_axi_weights_all_V_WLAST <= ap_const_logic_0;
    m_axi_weights_all_V_WSTRB <= ap_const_lv64_0;
    m_axi_weights_all_V_WUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_WVALID <= ap_const_logic_0;
    pw_channels_after_ti_fu_373_p4 <= pw_out_channels_offset(10 downto 5);
    trunc_ln61_fu_308_p1 <= weights_all_ptr_start_offset(12 - 1 downto 0);
    trunc_ln647_1_fu_877_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_2_fu_1191_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_3_fu_1505_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_4_fu_1819_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_5_fu_2133_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_6_fu_2447_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_7_fu_2761_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_fu_553_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);

    weights_all_V_blk_n_AR_assign_proc : process(m_axi_weights_all_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_all_V_blk_n_AR <= m_axi_weights_all_V_ARREADY;
        else 
            weights_all_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_all_V_blk_n_R_assign_proc : process(m_axi_weights_all_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            weights_all_V_blk_n_R <= m_axi_weights_all_V_RVALID;
        else 
            weights_all_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weights_all_ptr_1_fu_356_p2 <= std_logic_vector(unsigned(weights_all_ptr_reg_4387) + unsigned(zext_ln58_1_fu_342_p1));
    weights_all_ptr_2_fu_397_p2 <= std_logic_vector(unsigned(zext_ln58_1_reg_4413) + unsigned(weights_all_ptr_1_reg_4427));
    weights_all_ptr_4_fu_447_p2 <= std_logic_vector(unsigned(weights_all_ptr_2_reg_4443) + unsigned(zext_ln73_1_fu_444_p1));
    weights_all_ptr_5_fu_471_p2 <= std_logic_vector(unsigned(zext_ln58_1_reg_4413) + unsigned(weights_all_ptr_4_reg_4469));
    weights_all_ptr_6_fu_494_p2 <= std_logic_vector(unsigned(zext_ln58_1_reg_4413) + unsigned(weights_all_ptr_5_reg_4485));
    weights_all_ptr_7_fu_507_p2 <= std_logic_vector(unsigned(zext_ln73_1_reg_4464) + unsigned(weights_all_ptr_6_fu_494_p2));
    weights_all_ptr_8_fu_530_p2 <= std_logic_vector(unsigned(zext_ln58_1_reg_4413) + unsigned(weights_all_ptr_7_reg_4506));
    weights_all_ptr_9_fu_428_p2 <= std_logic_vector(unsigned(zext_ln73_fu_424_p1) + unsigned(zext_ln58_fu_370_p1));
    weights_all_ptr_fu_312_p2 <= std_logic_vector(unsigned(zext_ln61_fu_304_p1) + unsigned(trunc_ln61_fu_308_p1));
    zext_ln30_10_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_4_reg_4490),64));
    zext_ln30_11_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_6_fu_494_p2),27));
    zext_ln30_12_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_5_reg_4501),64));
    zext_ln30_13_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_7_reg_4506),27));
    zext_ln30_14_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_6_reg_4518),64));
    zext_ln30_15_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_8_fu_530_p2),27));
    zext_ln30_16_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_7_reg_4523),64));
    zext_ln30_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_V_offset),27));
    zext_ln30_2_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_reg_4403),64));
    zext_ln30_3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_1_fu_356_p2),27));
    zext_ln30_4_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_reg_4432),64));
    zext_ln30_5_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_2_fu_397_p2),27));
    zext_ln30_6_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_reg_4448),64));
    zext_ln30_7_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_4_fu_447_p2),27));
    zext_ln30_8_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_3_reg_4474),64));
    zext_ln30_9_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_5_fu_471_p2),27));
    zext_ln30_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_fu_312_p2),27));
    zext_ln58_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_channels_after_s_fu_332_p4),12));
    zext_ln58_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_channels_after_s_reg_4408),8));
    zext_ln59_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pw_channels_after_ti_fu_373_p4),7));
    zext_ln61_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out_offset),12));
    zext_ln73_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_9_reg_4453),12));
    zext_ln73_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_fu_418_p2),8));
end behav;
