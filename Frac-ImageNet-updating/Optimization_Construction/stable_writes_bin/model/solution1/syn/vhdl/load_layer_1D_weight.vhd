-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_layer_1D_weight is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weights_all_V_AWVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_AWREADY : IN STD_LOGIC;
    m_axi_weights_all_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_WREADY : IN STD_LOGIC;
    m_axi_weights_all_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_weights_all_V_WLAST : OUT STD_LOGIC;
    m_axi_weights_all_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_ARREADY : IN STD_LOGIC;
    m_axi_weights_all_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RVALID : IN STD_LOGIC;
    m_axi_weights_all_V_RREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_RLAST : IN STD_LOGIC;
    m_axi_weights_all_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BVALID : IN STD_LOGIC;
    m_axi_weights_all_V_BREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_all_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    weights_all_ptr_start_offset : IN STD_LOGIC_VECTOR (12 downto 0);
    c_out : IN STD_LOGIC_VECTOR (5 downto 0);
    conv_out_channels_offset : IN STD_LOGIC_VECTOR (11 downto 0);
    pw_out_channels_offset : IN STD_LOGIC_VECTOR (11 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_64 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_65 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_66 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_67 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_68 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_69 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_70 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_71 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_72 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_73 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_74 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_75 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_76 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_77 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_78 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_79 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_80 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_81 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_82 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_83 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_84 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_85 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_86 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_87 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_88 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_89 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_90 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_91 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_92 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_93 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_94 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_95 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_96 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_97 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_98 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_99 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_100 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_101 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_102 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_103 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_104 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_105 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_106 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_107 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_108 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_109 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_110 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_111 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_112 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_113 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_114 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_115 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_116 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_117 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_118 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_119 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_120 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_121 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_122 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_123 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_124 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_125 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_126 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_127 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_128 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_129 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_130 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_131 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_132 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_133 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_134 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_135 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_136 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_137 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_138 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_139 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_140 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_141 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_142 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_143 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_144 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_145 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_146 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_147 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_148 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_149 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_150 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_151 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_152 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_153 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_154 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_155 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_156 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_157 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_158 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_159 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_160 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_161 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_162 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_163 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_164 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_165 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_166 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_167 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_168 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_169 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_170 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_171 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_172 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_173 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_174 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_175 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_176 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_177 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_178 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_179 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_180 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_181 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_182 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_183 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_184 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_185 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_186 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_187 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_188 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_189 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_190 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_191 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_192 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_193 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_194 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_195 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_196 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_197 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_198 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_199 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_200 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_201 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_202 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_203 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_204 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_205 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_206 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_207 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_208 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_209 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_210 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_211 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_212 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_213 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_214 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_215 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_216 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_217 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_218 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_219 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_220 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_221 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_222 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_223 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_224 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_225 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_226 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_227 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_228 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_229 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_230 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_231 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_232 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_233 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_234 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_235 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_236 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_237 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_238 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_239 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_240 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_241 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_242 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_243 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_244 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_245 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_246 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_247 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_248 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_249 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_250 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_251 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_252 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_253 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_254 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_255 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of load_layer_1D_weight is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_all_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_all_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln120_fu_314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln120_reg_4409 : STD_LOGIC_VECTOR (11 downto 0);
    signal factor_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal factor_reg_4414 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_all_ptr_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_reg_4420 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_17_fu_360_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_17_reg_4425 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_fu_364_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_reg_4436 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln121_1_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln121_1_reg_4441 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_8_fu_407_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_8_reg_4455 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_11_fu_412_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_11_reg_4460 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_12_fu_432_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_12_reg_4465 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_9_fu_451_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_9_reg_4477 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_10_fu_469_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_10_reg_4488 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_13_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_13_reg_4499 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_11_fu_492_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_11_reg_4504 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_12_fu_518_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_12_reg_4515 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_15_fu_528_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_all_ptr_15_reg_4520 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_13_fu_547_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_13_reg_4532 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_14_fu_560_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln30_14_reg_4537 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln647_fu_575_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_reg_4548 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_reg_4553 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_reg_4558 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_reg_4563 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_reg_4568 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_reg_4573 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_reg_4578 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_reg_4583 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_reg_4588 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_reg_4593 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_s_reg_4598 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_s_reg_4603 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_s_reg_4608 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_s_reg_4613 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_s_reg_4618 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_s_reg_4623 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_s_reg_4628 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_s_reg_4633 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_s_reg_4638 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_s_reg_4643 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_s_reg_4648 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_s_reg_4653 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_s_reg_4658 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_s_reg_4663 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_s_reg_4668 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_s_reg_4673 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_s_reg_4678 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_s_reg_4683 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_s_reg_4688 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_s_reg_4693 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_s_reg_4698 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_s_reg_4703 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_8_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_8_reg_4714 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_8_reg_4719 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_8_reg_4724 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_8_reg_4729 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_8_reg_4734 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_8_reg_4739 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_8_reg_4744 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_8_reg_4749 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_8_reg_4754 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_8_reg_4759 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_8_reg_4764 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_8_reg_4769 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_8_reg_4774 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_8_reg_4779 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_8_reg_4784 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_8_reg_4789 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_8_reg_4794 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_8_reg_4799 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_8_reg_4804 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_8_reg_4809 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_8_reg_4814 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_8_reg_4819 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_8_reg_4824 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_8_reg_4829 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_8_reg_4834 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_8_reg_4839 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_8_reg_4844 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_8_reg_4849 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_8_reg_4854 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_8_reg_4859 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_8_reg_4864 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_8_reg_4869 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_9_fu_1213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_9_reg_4874 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_9_reg_4879 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_9_reg_4884 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_9_reg_4889 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_9_reg_4894 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_9_reg_4899 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_9_reg_4904 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_9_reg_4909 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_9_reg_4914 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_9_reg_4919 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_9_reg_4924 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_9_reg_4929 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_9_reg_4934 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_9_reg_4939 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_9_reg_4944 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_9_reg_4949 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_9_reg_4954 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_9_reg_4959 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_9_reg_4964 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_9_reg_4969 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_9_reg_4974 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_9_reg_4979 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_9_reg_4984 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_9_reg_4989 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_9_reg_4994 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_9_reg_4999 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_9_reg_5004 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_9_reg_5009 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_9_reg_5014 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_9_reg_5019 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_9_reg_5024 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_9_reg_5029 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_10_fu_1527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_10_reg_5034 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_5_reg_5039 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_5_reg_5044 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_5_reg_5049 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_5_reg_5054 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_5_reg_5059 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_5_reg_5064 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_5_reg_5069 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_5_reg_5074 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_5_reg_5079 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_5_reg_5084 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_5_reg_5089 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_5_reg_5094 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_5_reg_5099 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_5_reg_5104 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_5_reg_5109 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_5_reg_5114 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_5_reg_5119 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_5_reg_5124 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_5_reg_5129 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_5_reg_5134 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_5_reg_5139 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_5_reg_5144 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_5_reg_5149 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_5_reg_5154 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_5_reg_5159 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_5_reg_5164 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_5_reg_5169 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_5_reg_5174 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_5_reg_5179 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_5_reg_5184 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_5_reg_5189 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_11_fu_1841_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_11_reg_5194 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_1_reg_5199 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_1_reg_5204 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_1_reg_5209 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_1_reg_5214 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_1_reg_5219 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_1_reg_5224 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_1_reg_5229 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_1_reg_5234 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_1_reg_5239 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_1_reg_5244 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_1_reg_5249 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_1_reg_5254 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_1_reg_5259 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_1_reg_5264 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_1_reg_5269 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_1_reg_5274 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_1_reg_5279 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_1_reg_5284 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_1_reg_5289 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_1_reg_5294 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_1_reg_5299 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_1_reg_5304 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_1_reg_5309 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_1_reg_5314 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_1_reg_5319 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_1_reg_5324 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_1_reg_5329 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_1_reg_5334 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_1_reg_5339 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_1_reg_5344 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_1_reg_5349 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_12_fu_2155_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_12_reg_5354 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_2_reg_5359 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_2_reg_5364 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_2_reg_5369 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_2_reg_5374 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_2_reg_5379 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_2_reg_5384 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_2_reg_5389 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_2_reg_5394 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_2_reg_5399 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_2_reg_5404 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_2_reg_5409 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_2_reg_5414 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_2_reg_5419 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_2_reg_5424 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_2_reg_5429 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_2_reg_5434 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_2_reg_5439 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_2_reg_5444 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_2_reg_5449 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_2_reg_5454 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_2_reg_5459 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_2_reg_5464 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_2_reg_5469 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_2_reg_5474 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_2_reg_5479 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_2_reg_5484 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_2_reg_5489 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_2_reg_5494 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_2_reg_5499 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_2_reg_5504 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_2_reg_5509 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_13_fu_2469_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_13_reg_5514 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_1_V_w_3_reg_5519 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_2_V_w_3_reg_5524 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_3_V_w_3_reg_5529 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_4_V_w_3_reg_5534 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_5_V_w_3_reg_5539 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_6_V_w_3_reg_5544 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_7_V_w_3_reg_5549 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_8_V_w_3_reg_5554 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_9_V_w_3_reg_5559 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_10_V_3_reg_5564 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_11_V_3_reg_5569 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_12_V_3_reg_5574 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_13_V_3_reg_5579 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_14_V_3_reg_5584 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_15_V_3_reg_5589 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_16_V_3_reg_5594 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_17_V_3_reg_5599 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_18_V_3_reg_5604 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_19_V_3_reg_5609 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_20_V_3_reg_5614 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_21_V_3_reg_5619 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_22_V_3_reg_5624 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_23_V_3_reg_5629 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_24_V_3_reg_5634 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_25_V_3_reg_5639 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_26_V_3_reg_5644 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_27_V_3_reg_5649 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_28_V_3_reg_5654 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_29_V_3_reg_5659 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_30_V_3_reg_5664 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_buffer_31_V_3_reg_5669 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln30_18_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_20_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_22_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_24_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_26_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_28_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_30_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_32_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_channels_after_s_fu_304_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln130_fu_326_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln130_fu_336_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln130_1_fu_340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln130_1_fu_346_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln130_fu_330_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_fu_356_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal pw_channels_after_ti_fu_370_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights_all_ptr_10_fu_398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_19_fu_403_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln121_fu_380_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln144_fu_418_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln144_2_fu_427_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln144_fu_423_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_21_fu_448_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_23_fu_466_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln30_25_fu_488_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_14_fu_510_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_27_fu_514_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln156_fu_523_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal factor_cast_fu_497_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_29_fu_544_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal weights_all_ptr_16_fu_552_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_31_fu_556_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln647_14_fu_2783_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln30_10_reg_4488 <= add_ln30_10_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln30_11_reg_4504 <= add_ln30_11_fu_492_p2;
                weights_all_ptr_13_reg_4499 <= weights_all_ptr_13_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln30_12_reg_4515 <= add_ln30_12_fu_518_p2;
                weights_all_ptr_15_reg_4520 <= weights_all_ptr_15_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln30_13_reg_4532 <= add_ln30_13_fu_547_p2;
                add_ln30_14_reg_4537 <= add_ln30_14_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln30_8_reg_4455 <= add_ln30_8_fu_407_p2;
                weights_all_ptr_11_reg_4460 <= weights_all_ptr_11_fu_412_p2;
                weights_all_ptr_12_reg_4465 <= weights_all_ptr_12_fu_432_p2;
                    zext_ln121_1_reg_4441(5 downto 0) <= zext_ln121_1_fu_384_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln30_9_reg_4477 <= add_ln30_9_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln30_reg_4436 <= add_ln30_fu_364_p2;
                    factor_reg_4414(6 downto 1) <= factor_fu_318_p3(6 downto 1);
                weights_all_ptr_reg_4420 <= weights_all_ptr_fu_350_p2;
                    zext_ln120_reg_4409(5 downto 0) <= zext_ln120_fu_314_p1(5 downto 0);
                    zext_ln30_17_reg_4425(25 downto 0) <= zext_ln30_17_fu_360_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                trunc_ln647_10_reg_5034 <= trunc_ln647_10_fu_1527_p1;
                weight_buffer_10_V_5_reg_5084 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_5_reg_5089 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_5_reg_5094 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_5_reg_5099 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_5_reg_5104 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_5_reg_5109 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_5_reg_5114 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_5_reg_5119 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_5_reg_5124 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_5_reg_5129 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_5_reg_5039 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_5_reg_5134 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_5_reg_5139 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_5_reg_5144 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_5_reg_5149 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_5_reg_5154 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_5_reg_5159 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_5_reg_5164 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_5_reg_5169 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_5_reg_5174 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_5_reg_5179 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_5_reg_5044 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_5_reg_5184 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_5_reg_5189 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_5_reg_5049 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_5_reg_5054 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_5_reg_5059 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_5_reg_5064 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_5_reg_5069 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_5_reg_5074 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_5_reg_5079 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                trunc_ln647_11_reg_5194 <= trunc_ln647_11_fu_1841_p1;
                weight_buffer_10_V_1_reg_5244 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_1_reg_5249 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_1_reg_5254 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_1_reg_5259 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_1_reg_5264 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_1_reg_5269 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_1_reg_5274 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_1_reg_5279 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_1_reg_5284 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_1_reg_5289 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_1_reg_5199 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_1_reg_5294 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_1_reg_5299 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_1_reg_5304 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_1_reg_5309 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_1_reg_5314 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_1_reg_5319 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_1_reg_5324 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_1_reg_5329 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_1_reg_5334 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_1_reg_5339 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_1_reg_5204 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_1_reg_5344 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_1_reg_5349 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_1_reg_5209 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_1_reg_5214 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_1_reg_5219 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_1_reg_5224 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_1_reg_5229 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_1_reg_5234 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_1_reg_5239 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                trunc_ln647_12_reg_5354 <= trunc_ln647_12_fu_2155_p1;
                weight_buffer_10_V_2_reg_5404 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_2_reg_5409 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_2_reg_5414 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_2_reg_5419 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_2_reg_5424 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_2_reg_5429 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_2_reg_5434 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_2_reg_5439 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_2_reg_5444 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_2_reg_5449 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_2_reg_5359 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_2_reg_5454 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_2_reg_5459 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_2_reg_5464 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_2_reg_5469 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_2_reg_5474 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_2_reg_5479 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_2_reg_5484 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_2_reg_5489 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_2_reg_5494 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_2_reg_5499 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_2_reg_5364 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_2_reg_5504 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_2_reg_5509 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_2_reg_5369 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_2_reg_5374 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_2_reg_5379 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_2_reg_5384 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_2_reg_5389 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_2_reg_5394 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_2_reg_5399 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                trunc_ln647_13_reg_5514 <= trunc_ln647_13_fu_2469_p1;
                weight_buffer_10_V_3_reg_5564 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_3_reg_5569 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_3_reg_5574 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_3_reg_5579 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_3_reg_5584 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_3_reg_5589 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_3_reg_5594 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_3_reg_5599 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_3_reg_5604 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_3_reg_5609 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_3_reg_5519 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_3_reg_5614 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_3_reg_5619 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_3_reg_5624 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_3_reg_5629 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_3_reg_5634 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_3_reg_5639 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_3_reg_5644 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_3_reg_5649 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_3_reg_5654 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_3_reg_5659 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_3_reg_5524 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_3_reg_5664 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_3_reg_5669 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_3_reg_5529 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_3_reg_5534 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_3_reg_5539 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_3_reg_5544 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_3_reg_5549 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_3_reg_5554 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_3_reg_5559 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                trunc_ln647_8_reg_4714 <= trunc_ln647_8_fu_899_p1;
                weight_buffer_10_V_8_reg_4764 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_8_reg_4769 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_8_reg_4774 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_8_reg_4779 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_8_reg_4784 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_8_reg_4789 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_8_reg_4794 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_8_reg_4799 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_8_reg_4804 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_8_reg_4809 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_8_reg_4719 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_8_reg_4814 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_8_reg_4819 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_8_reg_4824 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_8_reg_4829 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_8_reg_4834 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_8_reg_4839 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_8_reg_4844 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_8_reg_4849 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_8_reg_4854 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_8_reg_4859 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_8_reg_4724 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_8_reg_4864 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_8_reg_4869 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_8_reg_4729 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_8_reg_4734 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_8_reg_4739 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_8_reg_4744 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_8_reg_4749 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_8_reg_4754 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_8_reg_4759 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                trunc_ln647_9_reg_4874 <= trunc_ln647_9_fu_1213_p1;
                weight_buffer_10_V_9_reg_4924 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_9_reg_4929 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_9_reg_4934 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_9_reg_4939 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_9_reg_4944 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_9_reg_4949 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_9_reg_4954 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_9_reg_4959 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_9_reg_4964 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_9_reg_4969 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_9_reg_4879 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_9_reg_4974 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_9_reg_4979 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_9_reg_4984 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_9_reg_4989 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_9_reg_4994 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_9_reg_4999 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_9_reg_5004 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_9_reg_5009 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_9_reg_5014 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_9_reg_5019 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_9_reg_4884 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_9_reg_5024 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_9_reg_5029 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_9_reg_4889 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_9_reg_4894 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_9_reg_4899 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_9_reg_4904 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_9_reg_4909 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_9_reg_4914 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_9_reg_4919 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                trunc_ln647_reg_4548 <= trunc_ln647_fu_575_p1;
                weight_buffer_10_V_s_reg_4598 <= m_axi_weights_all_V_RDATA(175 downto 160);
                weight_buffer_11_V_s_reg_4603 <= m_axi_weights_all_V_RDATA(191 downto 176);
                weight_buffer_12_V_s_reg_4608 <= m_axi_weights_all_V_RDATA(207 downto 192);
                weight_buffer_13_V_s_reg_4613 <= m_axi_weights_all_V_RDATA(223 downto 208);
                weight_buffer_14_V_s_reg_4618 <= m_axi_weights_all_V_RDATA(239 downto 224);
                weight_buffer_15_V_s_reg_4623 <= m_axi_weights_all_V_RDATA(255 downto 240);
                weight_buffer_16_V_s_reg_4628 <= m_axi_weights_all_V_RDATA(271 downto 256);
                weight_buffer_17_V_s_reg_4633 <= m_axi_weights_all_V_RDATA(287 downto 272);
                weight_buffer_18_V_s_reg_4638 <= m_axi_weights_all_V_RDATA(303 downto 288);
                weight_buffer_19_V_s_reg_4643 <= m_axi_weights_all_V_RDATA(319 downto 304);
                weight_buffer_1_V_w_reg_4553 <= m_axi_weights_all_V_RDATA(31 downto 16);
                weight_buffer_20_V_s_reg_4648 <= m_axi_weights_all_V_RDATA(335 downto 320);
                weight_buffer_21_V_s_reg_4653 <= m_axi_weights_all_V_RDATA(351 downto 336);
                weight_buffer_22_V_s_reg_4658 <= m_axi_weights_all_V_RDATA(367 downto 352);
                weight_buffer_23_V_s_reg_4663 <= m_axi_weights_all_V_RDATA(383 downto 368);
                weight_buffer_24_V_s_reg_4668 <= m_axi_weights_all_V_RDATA(399 downto 384);
                weight_buffer_25_V_s_reg_4673 <= m_axi_weights_all_V_RDATA(415 downto 400);
                weight_buffer_26_V_s_reg_4678 <= m_axi_weights_all_V_RDATA(431 downto 416);
                weight_buffer_27_V_s_reg_4683 <= m_axi_weights_all_V_RDATA(447 downto 432);
                weight_buffer_28_V_s_reg_4688 <= m_axi_weights_all_V_RDATA(463 downto 448);
                weight_buffer_29_V_s_reg_4693 <= m_axi_weights_all_V_RDATA(479 downto 464);
                weight_buffer_2_V_w_reg_4558 <= m_axi_weights_all_V_RDATA(47 downto 32);
                weight_buffer_30_V_s_reg_4698 <= m_axi_weights_all_V_RDATA(495 downto 480);
                weight_buffer_31_V_s_reg_4703 <= m_axi_weights_all_V_RDATA(511 downto 496);
                weight_buffer_3_V_w_reg_4563 <= m_axi_weights_all_V_RDATA(63 downto 48);
                weight_buffer_4_V_w_reg_4568 <= m_axi_weights_all_V_RDATA(79 downto 64);
                weight_buffer_5_V_w_reg_4573 <= m_axi_weights_all_V_RDATA(95 downto 80);
                weight_buffer_6_V_w_reg_4578 <= m_axi_weights_all_V_RDATA(111 downto 96);
                weight_buffer_7_V_w_reg_4583 <= m_axi_weights_all_V_RDATA(127 downto 112);
                weight_buffer_8_V_w_reg_4588 <= m_axi_weights_all_V_RDATA(143 downto 128);
                weight_buffer_9_V_w_reg_4593 <= m_axi_weights_all_V_RDATA(159 downto 144);
            end if;
        end if;
    end process;
    zext_ln120_reg_4409(11 downto 6) <= "000000";
    factor_reg_4414(0) <= '0';
    zext_ln30_17_reg_4425(26) <= '0';
    zext_ln121_1_reg_4441(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln130_1_fu_340_p2 <= std_logic_vector(unsigned(factor_fu_318_p3) + unsigned(zext_ln130_fu_336_p1));
    add_ln130_fu_330_p2 <= std_logic_vector(unsigned(zext_ln120_fu_314_p1) + unsigned(trunc_ln130_fu_326_p1));
    add_ln144_2_fu_427_p2 <= std_logic_vector(unsigned(zext_ln120_reg_4409) + unsigned(weights_all_ptr_11_fu_412_p2));
    add_ln144_fu_418_p2 <= std_logic_vector(unsigned(factor_reg_4414) + unsigned(zext_ln121_fu_380_p1));
    add_ln156_fu_523_p2 <= std_logic_vector(unsigned(zext_ln121_1_reg_4441) + unsigned(weights_all_ptr_14_fu_510_p2));
    add_ln30_10_fu_469_p2 <= std_logic_vector(unsigned(zext_ln30_23_fu_466_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_11_fu_492_p2 <= std_logic_vector(unsigned(zext_ln30_25_fu_488_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_12_fu_518_p2 <= std_logic_vector(unsigned(zext_ln30_27_fu_514_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_13_fu_547_p2 <= std_logic_vector(unsigned(zext_ln30_29_fu_544_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_14_fu_560_p2 <= std_logic_vector(unsigned(zext_ln30_31_fu_556_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_8_fu_407_p2 <= std_logic_vector(unsigned(zext_ln30_19_fu_403_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_9_fu_451_p2 <= std_logic_vector(unsigned(zext_ln30_21_fu_448_p1) + unsigned(zext_ln30_17_reg_4425));
    add_ln30_fu_364_p2 <= std_logic_vector(unsigned(zext_ln30_fu_356_p1) + unsigned(zext_ln30_17_fu_360_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_weights_all_V_RVALID, ap_CS_fsm_state16)
    begin
        if ((((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_weights_all_V_RVALID, ap_CS_fsm_state16)
    begin
        if (((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= trunc_ln647_reg_4548;
    ap_return_1 <= weight_buffer_1_V_w_reg_4553;
    ap_return_10 <= weight_buffer_10_V_s_reg_4598;
    ap_return_100 <= weight_buffer_4_V_w_5_reg_5054;
    ap_return_101 <= weight_buffer_5_V_w_5_reg_5059;
    ap_return_102 <= weight_buffer_6_V_w_5_reg_5064;
    ap_return_103 <= weight_buffer_7_V_w_5_reg_5069;
    ap_return_104 <= weight_buffer_8_V_w_5_reg_5074;
    ap_return_105 <= weight_buffer_9_V_w_5_reg_5079;
    ap_return_106 <= weight_buffer_10_V_5_reg_5084;
    ap_return_107 <= weight_buffer_11_V_5_reg_5089;
    ap_return_108 <= weight_buffer_12_V_5_reg_5094;
    ap_return_109 <= weight_buffer_13_V_5_reg_5099;
    ap_return_11 <= weight_buffer_11_V_s_reg_4603;
    ap_return_110 <= weight_buffer_14_V_5_reg_5104;
    ap_return_111 <= weight_buffer_15_V_5_reg_5109;
    ap_return_112 <= weight_buffer_16_V_5_reg_5114;
    ap_return_113 <= weight_buffer_17_V_5_reg_5119;
    ap_return_114 <= weight_buffer_18_V_5_reg_5124;
    ap_return_115 <= weight_buffer_19_V_5_reg_5129;
    ap_return_116 <= weight_buffer_20_V_5_reg_5134;
    ap_return_117 <= weight_buffer_21_V_5_reg_5139;
    ap_return_118 <= weight_buffer_22_V_5_reg_5144;
    ap_return_119 <= weight_buffer_23_V_5_reg_5149;
    ap_return_12 <= weight_buffer_12_V_s_reg_4608;
    ap_return_120 <= weight_buffer_24_V_5_reg_5154;
    ap_return_121 <= weight_buffer_25_V_5_reg_5159;
    ap_return_122 <= weight_buffer_26_V_5_reg_5164;
    ap_return_123 <= weight_buffer_27_V_5_reg_5169;
    ap_return_124 <= weight_buffer_28_V_5_reg_5174;
    ap_return_125 <= weight_buffer_29_V_5_reg_5179;
    ap_return_126 <= weight_buffer_30_V_5_reg_5184;
    ap_return_127 <= weight_buffer_31_V_5_reg_5189;
    ap_return_128 <= trunc_ln647_11_reg_5194;
    ap_return_129 <= weight_buffer_1_V_w_1_reg_5199;
    ap_return_13 <= weight_buffer_13_V_s_reg_4613;
    ap_return_130 <= weight_buffer_2_V_w_1_reg_5204;
    ap_return_131 <= weight_buffer_3_V_w_1_reg_5209;
    ap_return_132 <= weight_buffer_4_V_w_1_reg_5214;
    ap_return_133 <= weight_buffer_5_V_w_1_reg_5219;
    ap_return_134 <= weight_buffer_6_V_w_1_reg_5224;
    ap_return_135 <= weight_buffer_7_V_w_1_reg_5229;
    ap_return_136 <= weight_buffer_8_V_w_1_reg_5234;
    ap_return_137 <= weight_buffer_9_V_w_1_reg_5239;
    ap_return_138 <= weight_buffer_10_V_1_reg_5244;
    ap_return_139 <= weight_buffer_11_V_1_reg_5249;
    ap_return_14 <= weight_buffer_14_V_s_reg_4618;
    ap_return_140 <= weight_buffer_12_V_1_reg_5254;
    ap_return_141 <= weight_buffer_13_V_1_reg_5259;
    ap_return_142 <= weight_buffer_14_V_1_reg_5264;
    ap_return_143 <= weight_buffer_15_V_1_reg_5269;
    ap_return_144 <= weight_buffer_16_V_1_reg_5274;
    ap_return_145 <= weight_buffer_17_V_1_reg_5279;
    ap_return_146 <= weight_buffer_18_V_1_reg_5284;
    ap_return_147 <= weight_buffer_19_V_1_reg_5289;
    ap_return_148 <= weight_buffer_20_V_1_reg_5294;
    ap_return_149 <= weight_buffer_21_V_1_reg_5299;
    ap_return_15 <= weight_buffer_15_V_s_reg_4623;
    ap_return_150 <= weight_buffer_22_V_1_reg_5304;
    ap_return_151 <= weight_buffer_23_V_1_reg_5309;
    ap_return_152 <= weight_buffer_24_V_1_reg_5314;
    ap_return_153 <= weight_buffer_25_V_1_reg_5319;
    ap_return_154 <= weight_buffer_26_V_1_reg_5324;
    ap_return_155 <= weight_buffer_27_V_1_reg_5329;
    ap_return_156 <= weight_buffer_28_V_1_reg_5334;
    ap_return_157 <= weight_buffer_29_V_1_reg_5339;
    ap_return_158 <= weight_buffer_30_V_1_reg_5344;
    ap_return_159 <= weight_buffer_31_V_1_reg_5349;
    ap_return_16 <= weight_buffer_16_V_s_reg_4628;
    ap_return_160 <= trunc_ln647_12_reg_5354;
    ap_return_161 <= weight_buffer_1_V_w_2_reg_5359;
    ap_return_162 <= weight_buffer_2_V_w_2_reg_5364;
    ap_return_163 <= weight_buffer_3_V_w_2_reg_5369;
    ap_return_164 <= weight_buffer_4_V_w_2_reg_5374;
    ap_return_165 <= weight_buffer_5_V_w_2_reg_5379;
    ap_return_166 <= weight_buffer_6_V_w_2_reg_5384;
    ap_return_167 <= weight_buffer_7_V_w_2_reg_5389;
    ap_return_168 <= weight_buffer_8_V_w_2_reg_5394;
    ap_return_169 <= weight_buffer_9_V_w_2_reg_5399;
    ap_return_17 <= weight_buffer_17_V_s_reg_4633;
    ap_return_170 <= weight_buffer_10_V_2_reg_5404;
    ap_return_171 <= weight_buffer_11_V_2_reg_5409;
    ap_return_172 <= weight_buffer_12_V_2_reg_5414;
    ap_return_173 <= weight_buffer_13_V_2_reg_5419;
    ap_return_174 <= weight_buffer_14_V_2_reg_5424;
    ap_return_175 <= weight_buffer_15_V_2_reg_5429;
    ap_return_176 <= weight_buffer_16_V_2_reg_5434;
    ap_return_177 <= weight_buffer_17_V_2_reg_5439;
    ap_return_178 <= weight_buffer_18_V_2_reg_5444;
    ap_return_179 <= weight_buffer_19_V_2_reg_5449;
    ap_return_18 <= weight_buffer_18_V_s_reg_4638;
    ap_return_180 <= weight_buffer_20_V_2_reg_5454;
    ap_return_181 <= weight_buffer_21_V_2_reg_5459;
    ap_return_182 <= weight_buffer_22_V_2_reg_5464;
    ap_return_183 <= weight_buffer_23_V_2_reg_5469;
    ap_return_184 <= weight_buffer_24_V_2_reg_5474;
    ap_return_185 <= weight_buffer_25_V_2_reg_5479;
    ap_return_186 <= weight_buffer_26_V_2_reg_5484;
    ap_return_187 <= weight_buffer_27_V_2_reg_5489;
    ap_return_188 <= weight_buffer_28_V_2_reg_5494;
    ap_return_189 <= weight_buffer_29_V_2_reg_5499;
    ap_return_19 <= weight_buffer_19_V_s_reg_4643;
    ap_return_190 <= weight_buffer_30_V_2_reg_5504;
    ap_return_191 <= weight_buffer_31_V_2_reg_5509;
    ap_return_192 <= trunc_ln647_13_reg_5514;
    ap_return_193 <= weight_buffer_1_V_w_3_reg_5519;
    ap_return_194 <= weight_buffer_2_V_w_3_reg_5524;
    ap_return_195 <= weight_buffer_3_V_w_3_reg_5529;
    ap_return_196 <= weight_buffer_4_V_w_3_reg_5534;
    ap_return_197 <= weight_buffer_5_V_w_3_reg_5539;
    ap_return_198 <= weight_buffer_6_V_w_3_reg_5544;
    ap_return_199 <= weight_buffer_7_V_w_3_reg_5549;
    ap_return_2 <= weight_buffer_2_V_w_reg_4558;
    ap_return_20 <= weight_buffer_20_V_s_reg_4648;
    ap_return_200 <= weight_buffer_8_V_w_3_reg_5554;
    ap_return_201 <= weight_buffer_9_V_w_3_reg_5559;
    ap_return_202 <= weight_buffer_10_V_3_reg_5564;
    ap_return_203 <= weight_buffer_11_V_3_reg_5569;
    ap_return_204 <= weight_buffer_12_V_3_reg_5574;
    ap_return_205 <= weight_buffer_13_V_3_reg_5579;
    ap_return_206 <= weight_buffer_14_V_3_reg_5584;
    ap_return_207 <= weight_buffer_15_V_3_reg_5589;
    ap_return_208 <= weight_buffer_16_V_3_reg_5594;
    ap_return_209 <= weight_buffer_17_V_3_reg_5599;
    ap_return_21 <= weight_buffer_21_V_s_reg_4653;
    ap_return_210 <= weight_buffer_18_V_3_reg_5604;
    ap_return_211 <= weight_buffer_19_V_3_reg_5609;
    ap_return_212 <= weight_buffer_20_V_3_reg_5614;
    ap_return_213 <= weight_buffer_21_V_3_reg_5619;
    ap_return_214 <= weight_buffer_22_V_3_reg_5624;
    ap_return_215 <= weight_buffer_23_V_3_reg_5629;
    ap_return_216 <= weight_buffer_24_V_3_reg_5634;
    ap_return_217 <= weight_buffer_25_V_3_reg_5639;
    ap_return_218 <= weight_buffer_26_V_3_reg_5644;
    ap_return_219 <= weight_buffer_27_V_3_reg_5649;
    ap_return_22 <= weight_buffer_22_V_s_reg_4658;
    ap_return_220 <= weight_buffer_28_V_3_reg_5654;
    ap_return_221 <= weight_buffer_29_V_3_reg_5659;
    ap_return_222 <= weight_buffer_30_V_3_reg_5664;
    ap_return_223 <= weight_buffer_31_V_3_reg_5669;
    ap_return_224 <= trunc_ln647_14_fu_2783_p1;
    ap_return_225 <= m_axi_weights_all_V_RDATA(31 downto 16);
    ap_return_226 <= m_axi_weights_all_V_RDATA(47 downto 32);
    ap_return_227 <= m_axi_weights_all_V_RDATA(63 downto 48);
    ap_return_228 <= m_axi_weights_all_V_RDATA(79 downto 64);
    ap_return_229 <= m_axi_weights_all_V_RDATA(95 downto 80);
    ap_return_23 <= weight_buffer_23_V_s_reg_4663;
    ap_return_230 <= m_axi_weights_all_V_RDATA(111 downto 96);
    ap_return_231 <= m_axi_weights_all_V_RDATA(127 downto 112);
    ap_return_232 <= m_axi_weights_all_V_RDATA(143 downto 128);
    ap_return_233 <= m_axi_weights_all_V_RDATA(159 downto 144);
    ap_return_234 <= m_axi_weights_all_V_RDATA(175 downto 160);
    ap_return_235 <= m_axi_weights_all_V_RDATA(191 downto 176);
    ap_return_236 <= m_axi_weights_all_V_RDATA(207 downto 192);
    ap_return_237 <= m_axi_weights_all_V_RDATA(223 downto 208);
    ap_return_238 <= m_axi_weights_all_V_RDATA(239 downto 224);
    ap_return_239 <= m_axi_weights_all_V_RDATA(255 downto 240);
    ap_return_24 <= weight_buffer_24_V_s_reg_4668;
    ap_return_240 <= m_axi_weights_all_V_RDATA(271 downto 256);
    ap_return_241 <= m_axi_weights_all_V_RDATA(287 downto 272);
    ap_return_242 <= m_axi_weights_all_V_RDATA(303 downto 288);
    ap_return_243 <= m_axi_weights_all_V_RDATA(319 downto 304);
    ap_return_244 <= m_axi_weights_all_V_RDATA(335 downto 320);
    ap_return_245 <= m_axi_weights_all_V_RDATA(351 downto 336);
    ap_return_246 <= m_axi_weights_all_V_RDATA(367 downto 352);
    ap_return_247 <= m_axi_weights_all_V_RDATA(383 downto 368);
    ap_return_248 <= m_axi_weights_all_V_RDATA(399 downto 384);
    ap_return_249 <= m_axi_weights_all_V_RDATA(415 downto 400);
    ap_return_25 <= weight_buffer_25_V_s_reg_4673;
    ap_return_250 <= m_axi_weights_all_V_RDATA(431 downto 416);
    ap_return_251 <= m_axi_weights_all_V_RDATA(447 downto 432);
    ap_return_252 <= m_axi_weights_all_V_RDATA(463 downto 448);
    ap_return_253 <= m_axi_weights_all_V_RDATA(479 downto 464);
    ap_return_254 <= m_axi_weights_all_V_RDATA(495 downto 480);
    ap_return_255 <= m_axi_weights_all_V_RDATA(511 downto 496);
    ap_return_26 <= weight_buffer_26_V_s_reg_4678;
    ap_return_27 <= weight_buffer_27_V_s_reg_4683;
    ap_return_28 <= weight_buffer_28_V_s_reg_4688;
    ap_return_29 <= weight_buffer_29_V_s_reg_4693;
    ap_return_3 <= weight_buffer_3_V_w_reg_4563;
    ap_return_30 <= weight_buffer_30_V_s_reg_4698;
    ap_return_31 <= weight_buffer_31_V_s_reg_4703;
    ap_return_32 <= trunc_ln647_8_reg_4714;
    ap_return_33 <= weight_buffer_1_V_w_8_reg_4719;
    ap_return_34 <= weight_buffer_2_V_w_8_reg_4724;
    ap_return_35 <= weight_buffer_3_V_w_8_reg_4729;
    ap_return_36 <= weight_buffer_4_V_w_8_reg_4734;
    ap_return_37 <= weight_buffer_5_V_w_8_reg_4739;
    ap_return_38 <= weight_buffer_6_V_w_8_reg_4744;
    ap_return_39 <= weight_buffer_7_V_w_8_reg_4749;
    ap_return_4 <= weight_buffer_4_V_w_reg_4568;
    ap_return_40 <= weight_buffer_8_V_w_8_reg_4754;
    ap_return_41 <= weight_buffer_9_V_w_8_reg_4759;
    ap_return_42 <= weight_buffer_10_V_8_reg_4764;
    ap_return_43 <= weight_buffer_11_V_8_reg_4769;
    ap_return_44 <= weight_buffer_12_V_8_reg_4774;
    ap_return_45 <= weight_buffer_13_V_8_reg_4779;
    ap_return_46 <= weight_buffer_14_V_8_reg_4784;
    ap_return_47 <= weight_buffer_15_V_8_reg_4789;
    ap_return_48 <= weight_buffer_16_V_8_reg_4794;
    ap_return_49 <= weight_buffer_17_V_8_reg_4799;
    ap_return_5 <= weight_buffer_5_V_w_reg_4573;
    ap_return_50 <= weight_buffer_18_V_8_reg_4804;
    ap_return_51 <= weight_buffer_19_V_8_reg_4809;
    ap_return_52 <= weight_buffer_20_V_8_reg_4814;
    ap_return_53 <= weight_buffer_21_V_8_reg_4819;
    ap_return_54 <= weight_buffer_22_V_8_reg_4824;
    ap_return_55 <= weight_buffer_23_V_8_reg_4829;
    ap_return_56 <= weight_buffer_24_V_8_reg_4834;
    ap_return_57 <= weight_buffer_25_V_8_reg_4839;
    ap_return_58 <= weight_buffer_26_V_8_reg_4844;
    ap_return_59 <= weight_buffer_27_V_8_reg_4849;
    ap_return_6 <= weight_buffer_6_V_w_reg_4578;
    ap_return_60 <= weight_buffer_28_V_8_reg_4854;
    ap_return_61 <= weight_buffer_29_V_8_reg_4859;
    ap_return_62 <= weight_buffer_30_V_8_reg_4864;
    ap_return_63 <= weight_buffer_31_V_8_reg_4869;
    ap_return_64 <= trunc_ln647_9_reg_4874;
    ap_return_65 <= weight_buffer_1_V_w_9_reg_4879;
    ap_return_66 <= weight_buffer_2_V_w_9_reg_4884;
    ap_return_67 <= weight_buffer_3_V_w_9_reg_4889;
    ap_return_68 <= weight_buffer_4_V_w_9_reg_4894;
    ap_return_69 <= weight_buffer_5_V_w_9_reg_4899;
    ap_return_7 <= weight_buffer_7_V_w_reg_4583;
    ap_return_70 <= weight_buffer_6_V_w_9_reg_4904;
    ap_return_71 <= weight_buffer_7_V_w_9_reg_4909;
    ap_return_72 <= weight_buffer_8_V_w_9_reg_4914;
    ap_return_73 <= weight_buffer_9_V_w_9_reg_4919;
    ap_return_74 <= weight_buffer_10_V_9_reg_4924;
    ap_return_75 <= weight_buffer_11_V_9_reg_4929;
    ap_return_76 <= weight_buffer_12_V_9_reg_4934;
    ap_return_77 <= weight_buffer_13_V_9_reg_4939;
    ap_return_78 <= weight_buffer_14_V_9_reg_4944;
    ap_return_79 <= weight_buffer_15_V_9_reg_4949;
    ap_return_8 <= weight_buffer_8_V_w_reg_4588;
    ap_return_80 <= weight_buffer_16_V_9_reg_4954;
    ap_return_81 <= weight_buffer_17_V_9_reg_4959;
    ap_return_82 <= weight_buffer_18_V_9_reg_4964;
    ap_return_83 <= weight_buffer_19_V_9_reg_4969;
    ap_return_84 <= weight_buffer_20_V_9_reg_4974;
    ap_return_85 <= weight_buffer_21_V_9_reg_4979;
    ap_return_86 <= weight_buffer_22_V_9_reg_4984;
    ap_return_87 <= weight_buffer_23_V_9_reg_4989;
    ap_return_88 <= weight_buffer_24_V_9_reg_4994;
    ap_return_89 <= weight_buffer_25_V_9_reg_4999;
    ap_return_9 <= weight_buffer_9_V_w_reg_4593;
    ap_return_90 <= weight_buffer_26_V_9_reg_5004;
    ap_return_91 <= weight_buffer_27_V_9_reg_5009;
    ap_return_92 <= weight_buffer_28_V_9_reg_5014;
    ap_return_93 <= weight_buffer_29_V_9_reg_5019;
    ap_return_94 <= weight_buffer_30_V_9_reg_5024;
    ap_return_95 <= weight_buffer_31_V_9_reg_5029;
    ap_return_96 <= trunc_ln647_10_reg_5034;
    ap_return_97 <= weight_buffer_1_V_w_5_reg_5039;
    ap_return_98 <= weight_buffer_2_V_w_5_reg_5044;
    ap_return_99 <= weight_buffer_3_V_w_5_reg_5049;
    conv_channels_after_s_fu_304_p4 <= conv_out_channels_offset(10 downto 5);
    factor_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(factor_reg_4414),12));
    factor_fu_318_p3 <= (conv_channels_after_s_fu_304_p4 & ap_const_lv1_0);

    m_axi_weights_all_V_ARADDR_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln30_18_fu_388_p1, zext_ln30_20_fu_438_p1, zext_ln30_22_fu_456_p1, zext_ln30_24_fu_474_p1, zext_ln30_26_fu_500_p1, zext_ln30_28_fu_534_p1, zext_ln30_30_fu_565_p1, zext_ln30_32_fu_889_p1)
    begin
        if ((not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_32_fu_889_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_30_fu_565_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_28_fu_534_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_26_fu_500_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_24_fu_474_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_22_fu_456_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_20_fu_438_p1(32 - 1 downto 0);
        elsif (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_weights_all_V_ARADDR <= zext_ln30_18_fu_388_p1(32 - 1 downto 0);
        else 
            m_axi_weights_all_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_weights_all_V_ARBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_ARID <= ap_const_lv1_0;
    m_axi_weights_all_V_ARLEN <= ap_const_lv32_1;
    m_axi_weights_all_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_ARPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_ARQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_ARREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_ARUSER <= ap_const_lv1_0;

    m_axi_weights_all_V_ARVALID_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_AWADDR <= ap_const_lv32_0;
    m_axi_weights_all_V_AWBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_AWID <= ap_const_lv1_0;
    m_axi_weights_all_V_AWLEN <= ap_const_lv32_0;
    m_axi_weights_all_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_AWPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_AWQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_AWREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_AWUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_AWVALID <= ap_const_logic_0;
    m_axi_weights_all_V_BREADY <= ap_const_logic_0;

    m_axi_weights_all_V_RREADY_assign_proc : process(m_axi_weights_all_V_ARREADY, m_axi_weights_all_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_weights_all_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((m_axi_weights_all_V_RVALID = ap_const_logic_0) or (m_axi_weights_all_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            m_axi_weights_all_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_weights_all_V_WID <= ap_const_lv1_0;
    m_axi_weights_all_V_WLAST <= ap_const_logic_0;
    m_axi_weights_all_V_WSTRB <= ap_const_lv64_0;
    m_axi_weights_all_V_WUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_WVALID <= ap_const_logic_0;
    pw_channels_after_ti_fu_370_p4 <= pw_out_channels_offset(10 downto 5);
    trunc_ln130_fu_326_p1 <= weights_all_ptr_start_offset(12 - 1 downto 0);
    trunc_ln647_10_fu_1527_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_11_fu_1841_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_12_fu_2155_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_13_fu_2469_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_14_fu_2783_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_8_fu_899_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_9_fu_1213_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);
    trunc_ln647_fu_575_p1 <= m_axi_weights_all_V_RDATA(16 - 1 downto 0);

    weights_all_V_blk_n_AR_assign_proc : process(m_axi_weights_all_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            weights_all_V_blk_n_AR <= m_axi_weights_all_V_ARREADY;
        else 
            weights_all_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_all_V_blk_n_R_assign_proc : process(m_axi_weights_all_V_RVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            weights_all_V_blk_n_R <= m_axi_weights_all_V_RVALID;
        else 
            weights_all_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    weights_all_ptr_10_fu_398_p2 <= std_logic_vector(unsigned(zext_ln121_1_fu_384_p1) + unsigned(weights_all_ptr_reg_4420));
    weights_all_ptr_11_fu_412_p2 <= std_logic_vector(unsigned(zext_ln121_1_fu_384_p1) + unsigned(weights_all_ptr_10_fu_398_p2));
    weights_all_ptr_12_fu_432_p2 <= std_logic_vector(unsigned(add_ln144_2_fu_427_p2) + unsigned(zext_ln144_fu_423_p1));
    weights_all_ptr_13_fu_484_p2 <= std_logic_vector(unsigned(zext_ln121_1_reg_4441) + unsigned(weights_all_ptr_12_reg_4465));
    weights_all_ptr_14_fu_510_p2 <= std_logic_vector(unsigned(zext_ln121_1_reg_4441) + unsigned(weights_all_ptr_13_reg_4499));
    weights_all_ptr_15_fu_528_p2 <= std_logic_vector(unsigned(add_ln156_fu_523_p2) + unsigned(factor_cast_fu_497_p1));
    weights_all_ptr_16_fu_552_p2 <= std_logic_vector(unsigned(zext_ln121_1_reg_4441) + unsigned(weights_all_ptr_15_reg_4520));
    weights_all_ptr_fu_350_p2 <= std_logic_vector(unsigned(zext_ln130_1_fu_346_p1) + unsigned(add_ln130_fu_330_p2));
    zext_ln120_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_channels_after_s_fu_304_p4),12));
    zext_ln121_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pw_channels_after_ti_fu_370_p4),12));
    zext_ln121_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pw_channels_after_ti_fu_370_p4),7));
    zext_ln130_1_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_1_fu_340_p2),12));
    zext_ln130_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out),7));
    zext_ln144_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_418_p2),12));
    zext_ln30_17_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_V_offset),27));
    zext_ln30_18_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_reg_4436),64));
    zext_ln30_19_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_10_fu_398_p2),27));
    zext_ln30_20_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_8_reg_4455),64));
    zext_ln30_21_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_11_reg_4460),27));
    zext_ln30_22_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_9_reg_4477),64));
    zext_ln30_23_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_12_reg_4465),27));
    zext_ln30_24_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_10_reg_4488),64));
    zext_ln30_25_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_13_fu_484_p2),27));
    zext_ln30_26_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_11_reg_4504),64));
    zext_ln30_27_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_14_fu_510_p2),27));
    zext_ln30_28_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_12_reg_4515),64));
    zext_ln30_29_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_15_reg_4520),27));
    zext_ln30_30_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_13_reg_4532),64));
    zext_ln30_31_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_16_fu_552_p2),27));
    zext_ln30_32_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_14_reg_4537),64));
    zext_ln30_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_ptr_fu_350_p2),27));
end behav;
