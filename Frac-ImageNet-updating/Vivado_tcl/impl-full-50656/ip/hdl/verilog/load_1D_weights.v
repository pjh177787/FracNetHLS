// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_1D_weights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_all_V_AWVALID,
        m_axi_weights_all_V_AWREADY,
        m_axi_weights_all_V_AWADDR,
        m_axi_weights_all_V_AWID,
        m_axi_weights_all_V_AWLEN,
        m_axi_weights_all_V_AWSIZE,
        m_axi_weights_all_V_AWBURST,
        m_axi_weights_all_V_AWLOCK,
        m_axi_weights_all_V_AWCACHE,
        m_axi_weights_all_V_AWPROT,
        m_axi_weights_all_V_AWQOS,
        m_axi_weights_all_V_AWREGION,
        m_axi_weights_all_V_AWUSER,
        m_axi_weights_all_V_WVALID,
        m_axi_weights_all_V_WREADY,
        m_axi_weights_all_V_WDATA,
        m_axi_weights_all_V_WSTRB,
        m_axi_weights_all_V_WLAST,
        m_axi_weights_all_V_WID,
        m_axi_weights_all_V_WUSER,
        m_axi_weights_all_V_ARVALID,
        m_axi_weights_all_V_ARREADY,
        m_axi_weights_all_V_ARADDR,
        m_axi_weights_all_V_ARID,
        m_axi_weights_all_V_ARLEN,
        m_axi_weights_all_V_ARSIZE,
        m_axi_weights_all_V_ARBURST,
        m_axi_weights_all_V_ARLOCK,
        m_axi_weights_all_V_ARCACHE,
        m_axi_weights_all_V_ARPROT,
        m_axi_weights_all_V_ARQOS,
        m_axi_weights_all_V_ARREGION,
        m_axi_weights_all_V_ARUSER,
        m_axi_weights_all_V_RVALID,
        m_axi_weights_all_V_RREADY,
        m_axi_weights_all_V_RDATA,
        m_axi_weights_all_V_RLAST,
        m_axi_weights_all_V_RID,
        m_axi_weights_all_V_RUSER,
        m_axi_weights_all_V_RRESP,
        m_axi_weights_all_V_BVALID,
        m_axi_weights_all_V_BREADY,
        m_axi_weights_all_V_BRESP,
        m_axi_weights_all_V_BID,
        m_axi_weights_all_V_BUSER,
        weights_all_V_offset,
        weights_all_ptr,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_all_V_AWVALID;
input   m_axi_weights_all_V_AWREADY;
output  [31:0] m_axi_weights_all_V_AWADDR;
output  [0:0] m_axi_weights_all_V_AWID;
output  [31:0] m_axi_weights_all_V_AWLEN;
output  [2:0] m_axi_weights_all_V_AWSIZE;
output  [1:0] m_axi_weights_all_V_AWBURST;
output  [1:0] m_axi_weights_all_V_AWLOCK;
output  [3:0] m_axi_weights_all_V_AWCACHE;
output  [2:0] m_axi_weights_all_V_AWPROT;
output  [3:0] m_axi_weights_all_V_AWQOS;
output  [3:0] m_axi_weights_all_V_AWREGION;
output  [0:0] m_axi_weights_all_V_AWUSER;
output   m_axi_weights_all_V_WVALID;
input   m_axi_weights_all_V_WREADY;
output  [511:0] m_axi_weights_all_V_WDATA;
output  [63:0] m_axi_weights_all_V_WSTRB;
output   m_axi_weights_all_V_WLAST;
output  [0:0] m_axi_weights_all_V_WID;
output  [0:0] m_axi_weights_all_V_WUSER;
output   m_axi_weights_all_V_ARVALID;
input   m_axi_weights_all_V_ARREADY;
output  [31:0] m_axi_weights_all_V_ARADDR;
output  [0:0] m_axi_weights_all_V_ARID;
output  [31:0] m_axi_weights_all_V_ARLEN;
output  [2:0] m_axi_weights_all_V_ARSIZE;
output  [1:0] m_axi_weights_all_V_ARBURST;
output  [1:0] m_axi_weights_all_V_ARLOCK;
output  [3:0] m_axi_weights_all_V_ARCACHE;
output  [2:0] m_axi_weights_all_V_ARPROT;
output  [3:0] m_axi_weights_all_V_ARQOS;
output  [3:0] m_axi_weights_all_V_ARREGION;
output  [0:0] m_axi_weights_all_V_ARUSER;
input   m_axi_weights_all_V_RVALID;
output   m_axi_weights_all_V_RREADY;
input  [511:0] m_axi_weights_all_V_RDATA;
input   m_axi_weights_all_V_RLAST;
input  [0:0] m_axi_weights_all_V_RID;
input  [0:0] m_axi_weights_all_V_RUSER;
input  [1:0] m_axi_weights_all_V_RRESP;
input   m_axi_weights_all_V_BVALID;
output   m_axi_weights_all_V_BREADY;
input  [1:0] m_axi_weights_all_V_BRESP;
input  [0:0] m_axi_weights_all_V_BID;
input  [0:0] m_axi_weights_all_V_BUSER;
input  [25:0] weights_all_V_offset;
input  [12:0] weights_all_ptr;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;
output  [15:0] ap_return_6;
output  [15:0] ap_return_7;
output  [15:0] ap_return_8;
output  [15:0] ap_return_9;
output  [15:0] ap_return_10;
output  [15:0] ap_return_11;
output  [15:0] ap_return_12;
output  [15:0] ap_return_13;
output  [15:0] ap_return_14;
output  [15:0] ap_return_15;
output  [15:0] ap_return_16;
output  [15:0] ap_return_17;
output  [15:0] ap_return_18;
output  [15:0] ap_return_19;
output  [15:0] ap_return_20;
output  [15:0] ap_return_21;
output  [15:0] ap_return_22;
output  [15:0] ap_return_23;
output  [15:0] ap_return_24;
output  [15:0] ap_return_25;
output  [15:0] ap_return_26;
output  [15:0] ap_return_27;
output  [15:0] ap_return_28;
output  [15:0] ap_return_29;
output  [15:0] ap_return_30;
output  [15:0] ap_return_31;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_all_V_ARVALID;
reg m_axi_weights_all_V_RREADY;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_all_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    weights_all_V_blk_n_R;
wire    ap_CS_fsm_state9;
wire   [26:0] add_ln29_fu_190_p2;
reg   [26:0] add_ln29_reg_712;
wire   [63:0] zext_ln29_2_fu_196_p1;
wire   [26:0] zext_ln29_1_fu_186_p1;
wire   [26:0] zext_ln29_fu_182_p1;
wire   [15:0] trunc_ln647_fu_206_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln29_reg_712 <= add_ln29_fu_190_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_weights_all_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_all_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_weights_all_V_ARVALID = 1'b1;
    end else begin
        m_axi_weights_all_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_weights_all_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_weights_all_V_RREADY = 1'b1;
    end else begin
        m_axi_weights_all_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_all_V_blk_n_AR = m_axi_weights_all_V_ARREADY;
    end else begin
        weights_all_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        weights_all_V_blk_n_R = m_axi_weights_all_V_RVALID;
    end else begin
        weights_all_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_weights_all_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_190_p2 = (zext_ln29_1_fu_186_p1 + zext_ln29_fu_182_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = trunc_ln647_fu_206_p1;

assign ap_return_1 = {{m_axi_weights_all_V_RDATA[31:16]}};

assign ap_return_10 = {{m_axi_weights_all_V_RDATA[175:160]}};

assign ap_return_11 = {{m_axi_weights_all_V_RDATA[191:176]}};

assign ap_return_12 = {{m_axi_weights_all_V_RDATA[207:192]}};

assign ap_return_13 = {{m_axi_weights_all_V_RDATA[223:208]}};

assign ap_return_14 = {{m_axi_weights_all_V_RDATA[239:224]}};

assign ap_return_15 = {{m_axi_weights_all_V_RDATA[255:240]}};

assign ap_return_16 = {{m_axi_weights_all_V_RDATA[271:256]}};

assign ap_return_17 = {{m_axi_weights_all_V_RDATA[287:272]}};

assign ap_return_18 = {{m_axi_weights_all_V_RDATA[303:288]}};

assign ap_return_19 = {{m_axi_weights_all_V_RDATA[319:304]}};

assign ap_return_2 = {{m_axi_weights_all_V_RDATA[47:32]}};

assign ap_return_20 = {{m_axi_weights_all_V_RDATA[335:320]}};

assign ap_return_21 = {{m_axi_weights_all_V_RDATA[351:336]}};

assign ap_return_22 = {{m_axi_weights_all_V_RDATA[367:352]}};

assign ap_return_23 = {{m_axi_weights_all_V_RDATA[383:368]}};

assign ap_return_24 = {{m_axi_weights_all_V_RDATA[399:384]}};

assign ap_return_25 = {{m_axi_weights_all_V_RDATA[415:400]}};

assign ap_return_26 = {{m_axi_weights_all_V_RDATA[431:416]}};

assign ap_return_27 = {{m_axi_weights_all_V_RDATA[447:432]}};

assign ap_return_28 = {{m_axi_weights_all_V_RDATA[463:448]}};

assign ap_return_29 = {{m_axi_weights_all_V_RDATA[479:464]}};

assign ap_return_3 = {{m_axi_weights_all_V_RDATA[63:48]}};

assign ap_return_30 = {{m_axi_weights_all_V_RDATA[495:480]}};

assign ap_return_31 = {{m_axi_weights_all_V_RDATA[511:496]}};

assign ap_return_4 = {{m_axi_weights_all_V_RDATA[79:64]}};

assign ap_return_5 = {{m_axi_weights_all_V_RDATA[95:80]}};

assign ap_return_6 = {{m_axi_weights_all_V_RDATA[111:96]}};

assign ap_return_7 = {{m_axi_weights_all_V_RDATA[127:112]}};

assign ap_return_8 = {{m_axi_weights_all_V_RDATA[143:128]}};

assign ap_return_9 = {{m_axi_weights_all_V_RDATA[159:144]}};

assign m_axi_weights_all_V_ARADDR = zext_ln29_2_fu_196_p1;

assign m_axi_weights_all_V_ARBURST = 2'd0;

assign m_axi_weights_all_V_ARCACHE = 4'd0;

assign m_axi_weights_all_V_ARID = 1'd0;

assign m_axi_weights_all_V_ARLEN = 32'd1;

assign m_axi_weights_all_V_ARLOCK = 2'd0;

assign m_axi_weights_all_V_ARPROT = 3'd0;

assign m_axi_weights_all_V_ARQOS = 4'd0;

assign m_axi_weights_all_V_ARREGION = 4'd0;

assign m_axi_weights_all_V_ARSIZE = 3'd0;

assign m_axi_weights_all_V_ARUSER = 1'd0;

assign m_axi_weights_all_V_AWADDR = 32'd0;

assign m_axi_weights_all_V_AWBURST = 2'd0;

assign m_axi_weights_all_V_AWCACHE = 4'd0;

assign m_axi_weights_all_V_AWID = 1'd0;

assign m_axi_weights_all_V_AWLEN = 32'd0;

assign m_axi_weights_all_V_AWLOCK = 2'd0;

assign m_axi_weights_all_V_AWPROT = 3'd0;

assign m_axi_weights_all_V_AWQOS = 4'd0;

assign m_axi_weights_all_V_AWREGION = 4'd0;

assign m_axi_weights_all_V_AWSIZE = 3'd0;

assign m_axi_weights_all_V_AWUSER = 1'd0;

assign m_axi_weights_all_V_AWVALID = 1'b0;

assign m_axi_weights_all_V_BREADY = 1'b0;

assign m_axi_weights_all_V_WDATA = 512'd0;

assign m_axi_weights_all_V_WID = 1'd0;

assign m_axi_weights_all_V_WLAST = 1'b0;

assign m_axi_weights_all_V_WSTRB = 64'd0;

assign m_axi_weights_all_V_WUSER = 1'd0;

assign m_axi_weights_all_V_WVALID = 1'b0;

assign trunc_ln647_fu_206_p1 = m_axi_weights_all_V_RDATA[15:0];

assign zext_ln29_1_fu_186_p1 = weights_all_V_offset;

assign zext_ln29_2_fu_196_p1 = add_ln29_reg_712;

assign zext_ln29_fu_182_p1 = weights_all_ptr;

endmodule //load_1D_weights
