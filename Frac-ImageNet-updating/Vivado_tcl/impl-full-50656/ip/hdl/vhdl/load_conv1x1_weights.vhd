-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_conv1x1_weights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_AWVALID : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_AWREADY : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_conv_weight_1x1_all_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_conv_weight_1x1_all_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_conv_weight_1x1_all_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_conv_weight_1x1_all_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_WVALID : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_WREADY : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_conv_weight_1x1_all_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_conv_weight_1x1_all_V_WLAST : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_ARVALID : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_ARREADY : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_conv_weight_1x1_all_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_conv_weight_1x1_all_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_conv_weight_1x1_all_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_conv_weight_1x1_all_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_conv_weight_1x1_all_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_RVALID : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_RREADY : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_conv_weight_1x1_all_V_RLAST : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_BVALID : IN STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_BREADY : OUT STD_LOGIC;
    m_axi_conv_weight_1x1_all_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_conv_weight_1x1_all_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_conv_weight_1x1_all_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_weight_1x1_all_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    conv1x1_weight_ptr : IN STD_LOGIC_VECTOR (12 downto 0);
    c_out : IN STD_LOGIC_VECTOR (5 downto 0);
    c_in : IN STD_LOGIC_VECTOR (5 downto 0);
    in_channels_after_pa : IN STD_LOGIC_VECTOR (6 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of load_conv1x1_weights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weight_1x1_all_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal conv_weight_1x1_all_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln229_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight1x1_tile_buffe_32_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_33_reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_34_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_35_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_36_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_37_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_38_reg_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_39_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_40_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_41_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_42_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_43_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_44_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_45_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_46_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_47_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_48_reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_49_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_50_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_51_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_52_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_53_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_54_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_55_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_56_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_57_reg_512 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_58_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_59_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_60_reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_61_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_62_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_63_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_596 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1447_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_reg_1455 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln231_1_fu_652_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln231_1_reg_1460 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln229_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln229_reg_1471_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_674_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln414_fu_680_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_reg_1480_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln647_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_64_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_65_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_66_reg_1503 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_67_reg_1509 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_68_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_69_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_70_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_71_reg_1533 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_72_reg_1539 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_73_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_74_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_75_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_76_reg_1563 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_77_reg_1569 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight1x1_tile_buffe_78_reg_1575 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_fu_851_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal select_ln414_1_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_2_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_3_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_4_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_5_fu_910_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_6_fu_929_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_7_fu_936_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_8_fu_955_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_9_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_10_fu_981_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_11_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_12_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_13_fu_1014_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_14_fu_1033_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_15_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_16_fu_1059_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_17_fu_1066_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_18_fu_1085_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_19_fu_1092_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_20_fu_1111_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_21_fu_1118_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_22_fu_1137_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_23_fu_1144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_24_fu_1163_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_25_fu_1170_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_26_fu_1189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_27_fu_1196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_28_fu_1215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_29_fu_1222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_30_fu_1241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln414_31_fu_1248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal zext_ln231_3_fu_658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_fu_619_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln231_fu_630_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp38_cast_fu_626_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln231_fu_634_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln231_fu_638_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln231_2_fu_648_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln231_1_fu_644_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal shl_ln_fu_838_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_fu_865_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_16_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_15_fu_891_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_17_fu_897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_16_fu_917_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_18_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_17_fu_943_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_19_fu_949_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_18_fu_969_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_20_fu_975_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_19_fu_995_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_21_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_20_fu_1021_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_22_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_21_fu_1047_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_23_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_22_fu_1073_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_24_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_23_fu_1099_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_25_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_24_fu_1125_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_26_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_25_fu_1151_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_27_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_26_fu_1177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_28_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_27_fu_1203_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_29_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln414_28_fu_1229_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln414_30_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_1447_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1447_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1447_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1447_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1447_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1447_p20 : STD_LOGIC_VECTOR (10 downto 0);

    component FracNet_mac_muladcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    FracNet_mac_muladcud_U1332 : component FracNet_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1447_p0,
        din1 => grp_fu_1447_p1,
        din2 => grp_fu_1447_p2,
        dout => grp_fu_1447_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_596_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_668_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_596 <= i_fu_674_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_596 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln231_1_reg_1460 <= add_ln231_1_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln229_reg_1471 <= icmp_ln229_fu_668_p2;
                icmp_ln229_reg_1471_pp0_iter1_reg <= icmp_ln229_reg_1471;
                trunc_ln414_reg_1480_pp0_iter1_reg <= trunc_ln414_reg_1480;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_1455 <= grp_fu_1447_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_fu_668_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln414_reg_1480 <= trunc_ln414_fu_680_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_reg_1471 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln647_reg_1485 <= trunc_ln647_fu_684_p1;
                weight1x1_tile_buffe_64_reg_1491 <= m_axi_conv_weight_1x1_all_V_RDATA(63 downto 32);
                weight1x1_tile_buffe_65_reg_1497 <= m_axi_conv_weight_1x1_all_V_RDATA(95 downto 64);
                weight1x1_tile_buffe_66_reg_1503 <= m_axi_conv_weight_1x1_all_V_RDATA(127 downto 96);
                weight1x1_tile_buffe_67_reg_1509 <= m_axi_conv_weight_1x1_all_V_RDATA(159 downto 128);
                weight1x1_tile_buffe_68_reg_1515 <= m_axi_conv_weight_1x1_all_V_RDATA(191 downto 160);
                weight1x1_tile_buffe_69_reg_1521 <= m_axi_conv_weight_1x1_all_V_RDATA(223 downto 192);
                weight1x1_tile_buffe_70_reg_1527 <= m_axi_conv_weight_1x1_all_V_RDATA(255 downto 224);
                weight1x1_tile_buffe_71_reg_1533 <= m_axi_conv_weight_1x1_all_V_RDATA(287 downto 256);
                weight1x1_tile_buffe_72_reg_1539 <= m_axi_conv_weight_1x1_all_V_RDATA(319 downto 288);
                weight1x1_tile_buffe_73_reg_1545 <= m_axi_conv_weight_1x1_all_V_RDATA(351 downto 320);
                weight1x1_tile_buffe_74_reg_1551 <= m_axi_conv_weight_1x1_all_V_RDATA(383 downto 352);
                weight1x1_tile_buffe_75_reg_1557 <= m_axi_conv_weight_1x1_all_V_RDATA(415 downto 384);
                weight1x1_tile_buffe_76_reg_1563 <= m_axi_conv_weight_1x1_all_V_RDATA(447 downto 416);
                weight1x1_tile_buffe_77_reg_1569 <= m_axi_conv_weight_1x1_all_V_RDATA(479 downto 448);
                weight1x1_tile_buffe_78_reg_1575 <= m_axi_conv_weight_1x1_all_V_RDATA(511 downto 480);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln229_reg_1471_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                weight1x1_tile_buffe_32_reg_212 <= select_ln414_20_fu_1111_p3;
                weight1x1_tile_buffe_33_reg_224 <= select_ln414_22_fu_1137_p3;
                weight1x1_tile_buffe_34_reg_236 <= select_ln414_18_fu_1085_p3;
                weight1x1_tile_buffe_35_reg_248 <= select_ln414_24_fu_1163_p3;
                weight1x1_tile_buffe_36_reg_260 <= select_ln414_26_fu_1189_p3;
                weight1x1_tile_buffe_37_reg_272 <= select_ln414_16_fu_1059_p3;
                weight1x1_tile_buffe_38_reg_284 <= select_ln414_28_fu_1215_p3;
                weight1x1_tile_buffe_39_reg_296 <= select_ln414_30_fu_1241_p3;
                weight1x1_tile_buffe_40_reg_308 <= select_ln414_14_fu_1033_p3;
                weight1x1_tile_buffe_41_reg_320 <= select_ln414_fu_851_p3;
                weight1x1_tile_buffe_42_reg_332 <= select_ln414_2_fu_877_p3;
                weight1x1_tile_buffe_43_reg_344 <= select_ln414_12_fu_1007_p3;
                weight1x1_tile_buffe_44_reg_356 <= select_ln414_4_fu_903_p3;
                weight1x1_tile_buffe_45_reg_368 <= select_ln414_6_fu_929_p3;
                weight1x1_tile_buffe_46_reg_380 <= select_ln414_10_fu_981_p3;
                weight1x1_tile_buffe_47_reg_392 <= select_ln414_8_fu_955_p3;
                weight1x1_tile_buffe_48_reg_404 <= select_ln414_11_fu_988_p3;
                weight1x1_tile_buffe_49_reg_416 <= select_ln414_9_fu_962_p3;
                weight1x1_tile_buffe_50_reg_428 <= select_ln414_13_fu_1014_p3;
                weight1x1_tile_buffe_51_reg_440 <= select_ln414_15_fu_1040_p3;
                weight1x1_tile_buffe_52_reg_452 <= select_ln414_7_fu_936_p3;
                weight1x1_tile_buffe_53_reg_464 <= select_ln414_17_fu_1066_p3;
                weight1x1_tile_buffe_54_reg_476 <= select_ln414_19_fu_1092_p3;
                weight1x1_tile_buffe_55_reg_488 <= select_ln414_5_fu_910_p3;
                weight1x1_tile_buffe_56_reg_500 <= select_ln414_21_fu_1118_p3;
                weight1x1_tile_buffe_57_reg_512 <= select_ln414_23_fu_1144_p3;
                weight1x1_tile_buffe_58_reg_524 <= select_ln414_3_fu_884_p3;
                weight1x1_tile_buffe_59_reg_536 <= select_ln414_25_fu_1170_p3;
                weight1x1_tile_buffe_60_reg_548 <= select_ln414_27_fu_1196_p3;
                weight1x1_tile_buffe_61_reg_560 <= select_ln414_1_fu_858_p3;
                weight1x1_tile_buffe_62_reg_572 <= select_ln414_29_fu_1222_p3;
                weight1x1_tile_buffe_63_reg_584 <= select_ln414_31_fu_1248_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_conv_weight_1x1_all_V_ARREADY, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, icmp_ln229_fu_668_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((m_axi_conv_weight_1x1_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln229_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln229_fu_668_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln231_1_fu_652_p2 <= std_logic_vector(unsigned(zext_ln231_2_fu_648_p1) + unsigned(zext_ln231_1_fu_644_p1));
    add_ln231_fu_638_p2 <= std_logic_vector(unsigned(tmp38_cast_fu_626_p1) + unsigned(zext_ln231_fu_634_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_conv_weight_1x1_all_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln229_reg_1471)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln229_reg_1471 = ap_const_lv1_0) and (m_axi_conv_weight_1x1_all_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_conv_weight_1x1_all_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln229_reg_1471)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln229_reg_1471 = ap_const_lv1_0) and (m_axi_conv_weight_1x1_all_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_conv_weight_1x1_all_V_RVALID, icmp_ln229_reg_1471)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((icmp_ln229_reg_1471 = ap_const_lv1_0) and (m_axi_conv_weight_1x1_all_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln229_fu_668_p2)
    begin
        if ((icmp_ln229_fu_668_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= weight1x1_tile_buffe_61_reg_560;
    ap_return_1 <= weight1x1_tile_buffe_58_reg_524;
    ap_return_10 <= weight1x1_tile_buffe_32_reg_212;
    ap_return_11 <= weight1x1_tile_buffe_33_reg_224;
    ap_return_12 <= weight1x1_tile_buffe_35_reg_248;
    ap_return_13 <= weight1x1_tile_buffe_36_reg_260;
    ap_return_14 <= weight1x1_tile_buffe_38_reg_284;
    ap_return_15 <= weight1x1_tile_buffe_39_reg_296;
    ap_return_16 <= weight1x1_tile_buffe_41_reg_320;
    ap_return_17 <= weight1x1_tile_buffe_42_reg_332;
    ap_return_18 <= weight1x1_tile_buffe_44_reg_356;
    ap_return_19 <= weight1x1_tile_buffe_45_reg_368;
    ap_return_2 <= weight1x1_tile_buffe_55_reg_488;
    ap_return_20 <= weight1x1_tile_buffe_47_reg_392;
    ap_return_21 <= weight1x1_tile_buffe_48_reg_404;
    ap_return_22 <= weight1x1_tile_buffe_50_reg_428;
    ap_return_23 <= weight1x1_tile_buffe_51_reg_440;
    ap_return_24 <= weight1x1_tile_buffe_53_reg_464;
    ap_return_25 <= weight1x1_tile_buffe_54_reg_476;
    ap_return_26 <= weight1x1_tile_buffe_56_reg_500;
    ap_return_27 <= weight1x1_tile_buffe_57_reg_512;
    ap_return_28 <= weight1x1_tile_buffe_59_reg_536;
    ap_return_29 <= weight1x1_tile_buffe_60_reg_548;
    ap_return_3 <= weight1x1_tile_buffe_52_reg_452;
    ap_return_30 <= weight1x1_tile_buffe_62_reg_572;
    ap_return_31 <= weight1x1_tile_buffe_63_reg_584;
    ap_return_4 <= weight1x1_tile_buffe_49_reg_416;
    ap_return_5 <= weight1x1_tile_buffe_46_reg_380;
    ap_return_6 <= weight1x1_tile_buffe_43_reg_344;
    ap_return_7 <= weight1x1_tile_buffe_40_reg_308;
    ap_return_8 <= weight1x1_tile_buffe_37_reg_272;
    ap_return_9 <= weight1x1_tile_buffe_34_reg_236;

    conv_weight_1x1_all_V_blk_n_AR_assign_proc : process(m_axi_conv_weight_1x1_all_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_weight_1x1_all_V_blk_n_AR <= m_axi_conv_weight_1x1_all_V_ARREADY;
        else 
            conv_weight_1x1_all_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    conv_weight_1x1_all_V_blk_n_R_assign_proc : process(m_axi_conv_weight_1x1_all_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln229_reg_1471)
    begin
        if (((icmp_ln229_reg_1471 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_weight_1x1_all_V_blk_n_R <= m_axi_conv_weight_1x1_all_V_RVALID;
        else 
            conv_weight_1x1_all_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1447_p0 <= grp_fu_1447_p00(6 - 1 downto 0);
    grp_fu_1447_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_out),11));
    grp_fu_1447_p1 <= grp_fu_1447_p10(7 - 1 downto 0);
    grp_fu_1447_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_channels_after_pa),11));
    grp_fu_1447_p2 <= grp_fu_1447_p20(6 - 1 downto 0);
    grp_fu_1447_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_in),11));
    i_fu_674_p2 <= std_logic_vector(unsigned(i_0_reg_596) + unsigned(ap_const_lv2_1));
    icmp_ln229_fu_668_p2 <= "1" when (i_0_reg_596 = ap_const_lv2_2) else "0";
    icmp_ln414_16_fu_871_p2 <= "1" when (or_ln414_fu_865_p2 = ap_const_lv5_1) else "0";
    icmp_ln414_17_fu_897_p2 <= "1" when (or_ln414_15_fu_891_p2 = ap_const_lv5_2) else "0";
    icmp_ln414_18_fu_923_p2 <= "1" when (or_ln414_16_fu_917_p2 = ap_const_lv5_3) else "0";
    icmp_ln414_19_fu_949_p2 <= "1" when (or_ln414_17_fu_943_p2 = ap_const_lv5_4) else "0";
    icmp_ln414_20_fu_975_p2 <= "1" when (or_ln414_18_fu_969_p2 = ap_const_lv5_5) else "0";
    icmp_ln414_21_fu_1001_p2 <= "1" when (or_ln414_19_fu_995_p2 = ap_const_lv5_6) else "0";
    icmp_ln414_22_fu_1027_p2 <= "1" when (or_ln414_20_fu_1021_p2 = ap_const_lv5_7) else "0";
    icmp_ln414_23_fu_1053_p2 <= "1" when (or_ln414_21_fu_1047_p2 = ap_const_lv5_8) else "0";
    icmp_ln414_24_fu_1079_p2 <= "1" when (or_ln414_22_fu_1073_p2 = ap_const_lv5_9) else "0";
    icmp_ln414_25_fu_1105_p2 <= "1" when (or_ln414_23_fu_1099_p2 = ap_const_lv5_A) else "0";
    icmp_ln414_26_fu_1131_p2 <= "1" when (or_ln414_24_fu_1125_p2 = ap_const_lv5_B) else "0";
    icmp_ln414_27_fu_1157_p2 <= "1" when (or_ln414_25_fu_1151_p2 = ap_const_lv5_C) else "0";
    icmp_ln414_28_fu_1183_p2 <= "1" when (or_ln414_26_fu_1177_p2 = ap_const_lv5_D) else "0";
    icmp_ln414_29_fu_1209_p2 <= "1" when (or_ln414_27_fu_1203_p2 = ap_const_lv5_E) else "0";
    icmp_ln414_30_fu_1235_p2 <= "1" when (or_ln414_28_fu_1229_p2 = ap_const_lv5_F) else "0";
    icmp_ln414_fu_845_p2 <= "1" when (shl_ln_fu_838_p3 = ap_const_lv5_0) else "0";
    m_axi_conv_weight_1x1_all_V_ARADDR <= zext_ln231_3_fu_658_p1(32 - 1 downto 0);
    m_axi_conv_weight_1x1_all_V_ARBURST <= ap_const_lv2_0;
    m_axi_conv_weight_1x1_all_V_ARCACHE <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_ARID <= ap_const_lv1_0;
    m_axi_conv_weight_1x1_all_V_ARLEN <= ap_const_lv32_2;
    m_axi_conv_weight_1x1_all_V_ARLOCK <= ap_const_lv2_0;
    m_axi_conv_weight_1x1_all_V_ARPROT <= ap_const_lv3_0;
    m_axi_conv_weight_1x1_all_V_ARQOS <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_ARREGION <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_ARSIZE <= ap_const_lv3_0;
    m_axi_conv_weight_1x1_all_V_ARUSER <= ap_const_lv1_0;

    m_axi_conv_weight_1x1_all_V_ARVALID_assign_proc : process(m_axi_conv_weight_1x1_all_V_ARREADY, ap_CS_fsm_state3)
    begin
        if (((m_axi_conv_weight_1x1_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_conv_weight_1x1_all_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_conv_weight_1x1_all_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_conv_weight_1x1_all_V_AWADDR <= ap_const_lv32_0;
    m_axi_conv_weight_1x1_all_V_AWBURST <= ap_const_lv2_0;
    m_axi_conv_weight_1x1_all_V_AWCACHE <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_AWID <= ap_const_lv1_0;
    m_axi_conv_weight_1x1_all_V_AWLEN <= ap_const_lv32_0;
    m_axi_conv_weight_1x1_all_V_AWLOCK <= ap_const_lv2_0;
    m_axi_conv_weight_1x1_all_V_AWPROT <= ap_const_lv3_0;
    m_axi_conv_weight_1x1_all_V_AWQOS <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_AWREGION <= ap_const_lv4_0;
    m_axi_conv_weight_1x1_all_V_AWSIZE <= ap_const_lv3_0;
    m_axi_conv_weight_1x1_all_V_AWUSER <= ap_const_lv1_0;
    m_axi_conv_weight_1x1_all_V_AWVALID <= ap_const_logic_0;
    m_axi_conv_weight_1x1_all_V_BREADY <= ap_const_logic_0;

    m_axi_conv_weight_1x1_all_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln229_reg_1471, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln229_reg_1471 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_conv_weight_1x1_all_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_conv_weight_1x1_all_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_conv_weight_1x1_all_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_conv_weight_1x1_all_V_WID <= ap_const_lv1_0;
    m_axi_conv_weight_1x1_all_V_WLAST <= ap_const_logic_0;
    m_axi_conv_weight_1x1_all_V_WSTRB <= ap_const_lv64_0;
    m_axi_conv_weight_1x1_all_V_WUSER <= ap_const_lv1_0;
    m_axi_conv_weight_1x1_all_V_WVALID <= ap_const_logic_0;
    or_ln414_15_fu_891_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_2);
    or_ln414_16_fu_917_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_3);
    or_ln414_17_fu_943_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_4);
    or_ln414_18_fu_969_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_5);
    or_ln414_19_fu_995_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_6);
    or_ln414_20_fu_1021_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_7);
    or_ln414_21_fu_1047_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_8);
    or_ln414_22_fu_1073_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_9);
    or_ln414_23_fu_1099_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_A);
    or_ln414_24_fu_1125_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_B);
    or_ln414_25_fu_1151_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_C);
    or_ln414_26_fu_1177_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_D);
    or_ln414_27_fu_1203_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_E);
    or_ln414_28_fu_1229_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_F);
    or_ln414_fu_865_p2 <= (shl_ln_fu_838_p3 or ap_const_lv5_1);
    select_ln414_10_fu_981_p3 <= 
        weight1x1_tile_buffe_68_reg_1515 when (icmp_ln414_20_fu_975_p2(0) = '1') else 
        weight1x1_tile_buffe_46_reg_380;
    select_ln414_11_fu_988_p3 <= 
        weight1x1_tile_buffe_48_reg_404 when (icmp_ln414_20_fu_975_p2(0) = '1') else 
        weight1x1_tile_buffe_68_reg_1515;
    select_ln414_12_fu_1007_p3 <= 
        weight1x1_tile_buffe_69_reg_1521 when (icmp_ln414_21_fu_1001_p2(0) = '1') else 
        weight1x1_tile_buffe_43_reg_344;
    select_ln414_13_fu_1014_p3 <= 
        weight1x1_tile_buffe_50_reg_428 when (icmp_ln414_21_fu_1001_p2(0) = '1') else 
        weight1x1_tile_buffe_69_reg_1521;
    select_ln414_14_fu_1033_p3 <= 
        weight1x1_tile_buffe_70_reg_1527 when (icmp_ln414_22_fu_1027_p2(0) = '1') else 
        weight1x1_tile_buffe_40_reg_308;
    select_ln414_15_fu_1040_p3 <= 
        weight1x1_tile_buffe_51_reg_440 when (icmp_ln414_22_fu_1027_p2(0) = '1') else 
        weight1x1_tile_buffe_70_reg_1527;
    select_ln414_16_fu_1059_p3 <= 
        weight1x1_tile_buffe_71_reg_1533 when (icmp_ln414_23_fu_1053_p2(0) = '1') else 
        weight1x1_tile_buffe_37_reg_272;
    select_ln414_17_fu_1066_p3 <= 
        weight1x1_tile_buffe_53_reg_464 when (icmp_ln414_23_fu_1053_p2(0) = '1') else 
        weight1x1_tile_buffe_71_reg_1533;
    select_ln414_18_fu_1085_p3 <= 
        weight1x1_tile_buffe_72_reg_1539 when (icmp_ln414_24_fu_1079_p2(0) = '1') else 
        weight1x1_tile_buffe_34_reg_236;
    select_ln414_19_fu_1092_p3 <= 
        weight1x1_tile_buffe_54_reg_476 when (icmp_ln414_24_fu_1079_p2(0) = '1') else 
        weight1x1_tile_buffe_72_reg_1539;
    select_ln414_1_fu_858_p3 <= 
        trunc_ln647_reg_1485 when (icmp_ln414_fu_845_p2(0) = '1') else 
        weight1x1_tile_buffe_61_reg_560;
    select_ln414_20_fu_1111_p3 <= 
        weight1x1_tile_buffe_73_reg_1545 when (icmp_ln414_25_fu_1105_p2(0) = '1') else 
        weight1x1_tile_buffe_32_reg_212;
    select_ln414_21_fu_1118_p3 <= 
        weight1x1_tile_buffe_56_reg_500 when (icmp_ln414_25_fu_1105_p2(0) = '1') else 
        weight1x1_tile_buffe_73_reg_1545;
    select_ln414_22_fu_1137_p3 <= 
        weight1x1_tile_buffe_74_reg_1551 when (icmp_ln414_26_fu_1131_p2(0) = '1') else 
        weight1x1_tile_buffe_33_reg_224;
    select_ln414_23_fu_1144_p3 <= 
        weight1x1_tile_buffe_57_reg_512 when (icmp_ln414_26_fu_1131_p2(0) = '1') else 
        weight1x1_tile_buffe_74_reg_1551;
    select_ln414_24_fu_1163_p3 <= 
        weight1x1_tile_buffe_75_reg_1557 when (icmp_ln414_27_fu_1157_p2(0) = '1') else 
        weight1x1_tile_buffe_35_reg_248;
    select_ln414_25_fu_1170_p3 <= 
        weight1x1_tile_buffe_59_reg_536 when (icmp_ln414_27_fu_1157_p2(0) = '1') else 
        weight1x1_tile_buffe_75_reg_1557;
    select_ln414_26_fu_1189_p3 <= 
        weight1x1_tile_buffe_76_reg_1563 when (icmp_ln414_28_fu_1183_p2(0) = '1') else 
        weight1x1_tile_buffe_36_reg_260;
    select_ln414_27_fu_1196_p3 <= 
        weight1x1_tile_buffe_60_reg_548 when (icmp_ln414_28_fu_1183_p2(0) = '1') else 
        weight1x1_tile_buffe_76_reg_1563;
    select_ln414_28_fu_1215_p3 <= 
        weight1x1_tile_buffe_77_reg_1569 when (icmp_ln414_29_fu_1209_p2(0) = '1') else 
        weight1x1_tile_buffe_38_reg_284;
    select_ln414_29_fu_1222_p3 <= 
        weight1x1_tile_buffe_62_reg_572 when (icmp_ln414_29_fu_1209_p2(0) = '1') else 
        weight1x1_tile_buffe_77_reg_1569;
    select_ln414_2_fu_877_p3 <= 
        weight1x1_tile_buffe_42_reg_332 when (icmp_ln414_16_fu_871_p2(0) = '1') else 
        weight1x1_tile_buffe_64_reg_1491;
    select_ln414_30_fu_1241_p3 <= 
        weight1x1_tile_buffe_78_reg_1575 when (icmp_ln414_30_fu_1235_p2(0) = '1') else 
        weight1x1_tile_buffe_39_reg_296;
    select_ln414_31_fu_1248_p3 <= 
        weight1x1_tile_buffe_63_reg_584 when (icmp_ln414_30_fu_1235_p2(0) = '1') else 
        weight1x1_tile_buffe_78_reg_1575;
    select_ln414_3_fu_884_p3 <= 
        weight1x1_tile_buffe_64_reg_1491 when (icmp_ln414_16_fu_871_p2(0) = '1') else 
        weight1x1_tile_buffe_58_reg_524;
    select_ln414_4_fu_903_p3 <= 
        weight1x1_tile_buffe_44_reg_356 when (icmp_ln414_17_fu_897_p2(0) = '1') else 
        weight1x1_tile_buffe_65_reg_1497;
    select_ln414_5_fu_910_p3 <= 
        weight1x1_tile_buffe_65_reg_1497 when (icmp_ln414_17_fu_897_p2(0) = '1') else 
        weight1x1_tile_buffe_55_reg_488;
    select_ln414_6_fu_929_p3 <= 
        weight1x1_tile_buffe_45_reg_368 when (icmp_ln414_18_fu_923_p2(0) = '1') else 
        weight1x1_tile_buffe_66_reg_1503;
    select_ln414_7_fu_936_p3 <= 
        weight1x1_tile_buffe_66_reg_1503 when (icmp_ln414_18_fu_923_p2(0) = '1') else 
        weight1x1_tile_buffe_52_reg_452;
    select_ln414_8_fu_955_p3 <= 
        weight1x1_tile_buffe_47_reg_392 when (icmp_ln414_19_fu_949_p2(0) = '1') else 
        weight1x1_tile_buffe_67_reg_1509;
    select_ln414_9_fu_962_p3 <= 
        weight1x1_tile_buffe_67_reg_1509 when (icmp_ln414_19_fu_949_p2(0) = '1') else 
        weight1x1_tile_buffe_49_reg_416;
    select_ln414_fu_851_p3 <= 
        weight1x1_tile_buffe_41_reg_320 when (icmp_ln414_fu_845_p2(0) = '1') else 
        trunc_ln647_reg_1485;
    shl_ln_fu_838_p3 <= (trunc_ln414_reg_1480_pp0_iter1_reg & ap_const_lv4_0);
    tmp38_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_619_p3),13));
    tmp5_fu_619_p3 <= (tmp_reg_1455 & ap_const_lv1_0);
    trunc_ln231_fu_630_p1 <= conv1x1_weight_ptr(12 - 1 downto 0);
    trunc_ln414_fu_680_p1 <= i_0_reg_596(1 - 1 downto 0);
    trunc_ln647_fu_684_p1 <= m_axi_conv_weight_1x1_all_V_RDATA(32 - 1 downto 0);
    zext_ln231_1_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_638_p2),27));
    zext_ln231_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_weight_1x1_all_V_offset),27));
    zext_ln231_3_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_1_reg_1460),64));
    zext_ln231_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln231_fu_630_p1),13));
end behav;
