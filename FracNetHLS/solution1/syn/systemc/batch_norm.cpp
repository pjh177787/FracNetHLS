// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "batch_norm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic batch_norm::ap_const_logic_1 = sc_dt::Log_1;
const bool batch_norm::ap_const_boolean_1 = true;
const sc_lv<32> batch_norm::ap_const_lv32_12 = "10010";
const sc_lv<1> batch_norm::ap_const_lv1_0 = "0";
const sc_lv<32> batch_norm::ap_const_lv32_C = "1100";
const sc_lv<32> batch_norm::ap_const_lv32_D = "1101";
const sc_lv<6> batch_norm::ap_const_lv6_0 = "000000";
const sc_lv<1> batch_norm::ap_const_lv1_1 = "1";
const sc_lv<6> batch_norm::ap_const_lv6_3F = "111111";
const sc_lv<14> batch_norm::ap_const_lv14_1FFF = "1111111111111";
const sc_lv<14> batch_norm::ap_const_lv14_2000 = "10000000000000";
const sc_logic batch_norm::ap_const_logic_0 = sc_dt::Log_0;

batch_norm::batch_norm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pgconv32_2bit_mulcud_U13 = new pgconv32_2bit_mulcud<1,1,8,11,19>("pgconv32_2bit_mulcud_U13");
    pgconv32_2bit_mulcud_U13->din0(r_V_4_fu_208_p0);
    pgconv32_2bit_mulcud_U13->din1(weight_V);
    pgconv32_2bit_mulcud_U13->dout(r_V_4_fu_208_p2);

    SC_METHOD(thread_add_ln731_fu_86_p2);
    sensitive << ( sext_ln731_fu_79_p1 );
    sensitive << ( trunc_ln731_fu_83_p1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( or_ln340_5_fu_178_p2 );
    sensitive << ( select_ln340_fu_184_p3 );
    sensitive << ( select_ln388_fu_192_p3 );

    SC_METHOD(thread_icmp_ln785_fu_118_p2);
    sensitive << ( tmp_fu_108_p4 );

    SC_METHOD(thread_icmp_ln786_fu_148_p2);
    sensitive << ( tmp_fu_108_p4 );

    SC_METHOD(thread_or_ln340_5_fu_178_p2);
    sensitive << ( overflow_fu_136_p2 );
    sensitive << ( xor_ln340_fu_172_p2 );

    SC_METHOD(thread_or_ln340_fu_166_p2);
    sensitive << ( underflow_fu_160_p2 );
    sensitive << ( overflow_fu_136_p2 );

    SC_METHOD(thread_or_ln785_fu_124_p2);
    sensitive << ( p_Result_7_fu_100_p3 );
    sensitive << ( icmp_ln785_fu_118_p2 );

    SC_METHOD(thread_or_ln786_fu_154_p2);
    sensitive << ( icmp_ln786_fu_148_p2 );
    sensitive << ( xor_ln786_fu_142_p2 );

    SC_METHOD(thread_overflow_fu_136_p2);
    sensitive << ( or_ln785_fu_124_p2 );
    sensitive << ( xor_ln785_fu_130_p2 );

    SC_METHOD(thread_p_Result_7_fu_100_p3);
    sensitive << ( add_ln731_fu_86_p2 );

    SC_METHOD(thread_p_Result_s_fu_71_p3);
    sensitive << ( ret_V_fu_66_p2 );

    SC_METHOD(thread_p_Val2_10_fu_92_p3);
    sensitive << ( add_ln731_fu_86_p2 );

    SC_METHOD(thread_r_V_4_fu_208_p0);
    sensitive << ( r_V_4_fu_208_p00 );

    SC_METHOD(thread_r_V_4_fu_208_p00);
    sensitive << ( sum_V );

    SC_METHOD(thread_ret_V_fu_66_p2);
    sensitive << ( sext_ln703_fu_62_p1 );
    sensitive << ( r_V_4_fu_208_p2 );

    SC_METHOD(thread_select_ln340_fu_184_p3);
    sensitive << ( or_ln340_fu_166_p2 );
    sensitive << ( p_Val2_10_fu_92_p3 );

    SC_METHOD(thread_select_ln388_fu_192_p3);
    sensitive << ( underflow_fu_160_p2 );
    sensitive << ( p_Val2_10_fu_92_p3 );

    SC_METHOD(thread_sext_ln703_fu_62_p0);
    sensitive << ( bias_V );

    SC_METHOD(thread_sext_ln703_fu_62_p1);
    sensitive << ( sext_ln703_fu_62_p0 );

    SC_METHOD(thread_sext_ln731_fu_79_p0);
    sensitive << ( bias_V );

    SC_METHOD(thread_sext_ln731_fu_79_p1);
    sensitive << ( sext_ln731_fu_79_p0 );

    SC_METHOD(thread_tmp_fu_108_p4);
    sensitive << ( ret_V_fu_66_p2 );

    SC_METHOD(thread_trunc_ln731_fu_83_p1);
    sensitive << ( r_V_4_fu_208_p2 );

    SC_METHOD(thread_underflow_fu_160_p2);
    sensitive << ( p_Result_s_fu_71_p3 );
    sensitive << ( or_ln786_fu_154_p2 );

    SC_METHOD(thread_xor_ln340_fu_172_p2);
    sensitive << ( underflow_fu_160_p2 );

    SC_METHOD(thread_xor_ln785_fu_130_p2);
    sensitive << ( p_Result_s_fu_71_p3 );

    SC_METHOD(thread_xor_ln786_fu_142_p2);
    sensitive << ( p_Result_7_fu_100_p3 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "batch_norm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sum_V, "(port)sum_V");
    sc_trace(mVcdFile, weight_V, "(port)weight_V");
    sc_trace(mVcdFile, bias_V, "(port)bias_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sext_ln703_fu_62_p0, "sext_ln703_fu_62_p0");
    sc_trace(mVcdFile, sext_ln703_fu_62_p1, "sext_ln703_fu_62_p1");
    sc_trace(mVcdFile, r_V_4_fu_208_p2, "r_V_4_fu_208_p2");
    sc_trace(mVcdFile, ret_V_fu_66_p2, "ret_V_fu_66_p2");
    sc_trace(mVcdFile, sext_ln731_fu_79_p0, "sext_ln731_fu_79_p0");
    sc_trace(mVcdFile, sext_ln731_fu_79_p1, "sext_ln731_fu_79_p1");
    sc_trace(mVcdFile, trunc_ln731_fu_83_p1, "trunc_ln731_fu_83_p1");
    sc_trace(mVcdFile, add_ln731_fu_86_p2, "add_ln731_fu_86_p2");
    sc_trace(mVcdFile, tmp_fu_108_p4, "tmp_fu_108_p4");
    sc_trace(mVcdFile, p_Result_7_fu_100_p3, "p_Result_7_fu_100_p3");
    sc_trace(mVcdFile, icmp_ln785_fu_118_p2, "icmp_ln785_fu_118_p2");
    sc_trace(mVcdFile, p_Result_s_fu_71_p3, "p_Result_s_fu_71_p3");
    sc_trace(mVcdFile, or_ln785_fu_124_p2, "or_ln785_fu_124_p2");
    sc_trace(mVcdFile, xor_ln785_fu_130_p2, "xor_ln785_fu_130_p2");
    sc_trace(mVcdFile, icmp_ln786_fu_148_p2, "icmp_ln786_fu_148_p2");
    sc_trace(mVcdFile, xor_ln786_fu_142_p2, "xor_ln786_fu_142_p2");
    sc_trace(mVcdFile, or_ln786_fu_154_p2, "or_ln786_fu_154_p2");
    sc_trace(mVcdFile, underflow_fu_160_p2, "underflow_fu_160_p2");
    sc_trace(mVcdFile, overflow_fu_136_p2, "overflow_fu_136_p2");
    sc_trace(mVcdFile, xor_ln340_fu_172_p2, "xor_ln340_fu_172_p2");
    sc_trace(mVcdFile, or_ln340_fu_166_p2, "or_ln340_fu_166_p2");
    sc_trace(mVcdFile, p_Val2_10_fu_92_p3, "p_Val2_10_fu_92_p3");
    sc_trace(mVcdFile, or_ln340_5_fu_178_p2, "or_ln340_5_fu_178_p2");
    sc_trace(mVcdFile, select_ln340_fu_184_p3, "select_ln340_fu_184_p3");
    sc_trace(mVcdFile, select_ln388_fu_192_p3, "select_ln388_fu_192_p3");
    sc_trace(mVcdFile, r_V_4_fu_208_p0, "r_V_4_fu_208_p0");
    sc_trace(mVcdFile, r_V_4_fu_208_p00, "r_V_4_fu_208_p00");
#endif

    }
}

batch_norm::~batch_norm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete pgconv32_2bit_mulcud_U13;
}

void batch_norm::thread_add_ln731_fu_86_p2() {
    add_ln731_fu_86_p2 = (!sext_ln731_fu_79_p1.read().is_01() || !trunc_ln731_fu_83_p1.read().is_01())? sc_lv<13>(): (sc_bigint<13>(sext_ln731_fu_79_p1.read()) + sc_biguint<13>(trunc_ln731_fu_83_p1.read()));
}

void batch_norm::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void batch_norm::thread_ap_return() {
    ap_return = (!or_ln340_5_fu_178_p2.read()[0].is_01())? sc_lv<14>(): ((or_ln340_5_fu_178_p2.read()[0].to_bool())? select_ln340_fu_184_p3.read(): select_ln388_fu_192_p3.read());
}

void batch_norm::thread_icmp_ln785_fu_118_p2() {
    icmp_ln785_fu_118_p2 = (!tmp_fu_108_p4.read().is_01() || !ap_const_lv6_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_108_p4.read() != ap_const_lv6_0);
}

void batch_norm::thread_icmp_ln786_fu_148_p2() {
    icmp_ln786_fu_148_p2 = (!tmp_fu_108_p4.read().is_01() || !ap_const_lv6_3F.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_108_p4.read() != ap_const_lv6_3F);
}

void batch_norm::thread_or_ln340_5_fu_178_p2() {
    or_ln340_5_fu_178_p2 = (overflow_fu_136_p2.read() | xor_ln340_fu_172_p2.read());
}

void batch_norm::thread_or_ln340_fu_166_p2() {
    or_ln340_fu_166_p2 = (underflow_fu_160_p2.read() | overflow_fu_136_p2.read());
}

void batch_norm::thread_or_ln785_fu_124_p2() {
    or_ln785_fu_124_p2 = (p_Result_7_fu_100_p3.read() | icmp_ln785_fu_118_p2.read());
}

void batch_norm::thread_or_ln786_fu_154_p2() {
    or_ln786_fu_154_p2 = (icmp_ln786_fu_148_p2.read() | xor_ln786_fu_142_p2.read());
}

void batch_norm::thread_overflow_fu_136_p2() {
    overflow_fu_136_p2 = (or_ln785_fu_124_p2.read() & xor_ln785_fu_130_p2.read());
}

void batch_norm::thread_p_Result_7_fu_100_p3() {
    p_Result_7_fu_100_p3 = add_ln731_fu_86_p2.read().range(12, 12);
}

void batch_norm::thread_p_Result_s_fu_71_p3() {
    p_Result_s_fu_71_p3 = ret_V_fu_66_p2.read().range(18, 18);
}

void batch_norm::thread_p_Val2_10_fu_92_p3() {
    p_Val2_10_fu_92_p3 = esl_concat<13,1>(add_ln731_fu_86_p2.read(), ap_const_lv1_0);
}

void batch_norm::thread_r_V_4_fu_208_p0() {
    r_V_4_fu_208_p0 =  (sc_lv<8>) (r_V_4_fu_208_p00.read());
}

void batch_norm::thread_r_V_4_fu_208_p00() {
    r_V_4_fu_208_p00 = esl_zext<19,8>(sum_V.read());
}

void batch_norm::thread_ret_V_fu_66_p2() {
    ret_V_fu_66_p2 = (!sext_ln703_fu_62_p1.read().is_01() || !r_V_4_fu_208_p2.read().is_01())? sc_lv<19>(): (sc_bigint<19>(sext_ln703_fu_62_p1.read()) + sc_bigint<19>(r_V_4_fu_208_p2.read()));
}

void batch_norm::thread_select_ln340_fu_184_p3() {
    select_ln340_fu_184_p3 = (!or_ln340_fu_166_p2.read()[0].is_01())? sc_lv<14>(): ((or_ln340_fu_166_p2.read()[0].to_bool())? ap_const_lv14_1FFF: p_Val2_10_fu_92_p3.read());
}

void batch_norm::thread_select_ln388_fu_192_p3() {
    select_ln388_fu_192_p3 = (!underflow_fu_160_p2.read()[0].is_01())? sc_lv<14>(): ((underflow_fu_160_p2.read()[0].to_bool())? ap_const_lv14_2000: p_Val2_10_fu_92_p3.read());
}

void batch_norm::thread_sext_ln703_fu_62_p0() {
    sext_ln703_fu_62_p0 = bias_V.read();
}

void batch_norm::thread_sext_ln703_fu_62_p1() {
    sext_ln703_fu_62_p1 = esl_sext<19,11>(sext_ln703_fu_62_p0.read());
}

void batch_norm::thread_sext_ln731_fu_79_p0() {
    sext_ln731_fu_79_p0 = bias_V.read();
}

void batch_norm::thread_sext_ln731_fu_79_p1() {
    sext_ln731_fu_79_p1 = esl_sext<13,11>(sext_ln731_fu_79_p0.read());
}

void batch_norm::thread_tmp_fu_108_p4() {
    tmp_fu_108_p4 = ret_V_fu_66_p2.read().range(18, 13);
}

void batch_norm::thread_trunc_ln731_fu_83_p1() {
    trunc_ln731_fu_83_p1 = r_V_4_fu_208_p2.read().range(13-1, 0);
}

void batch_norm::thread_underflow_fu_160_p2() {
    underflow_fu_160_p2 = (or_ln786_fu_154_p2.read() & p_Result_s_fu_71_p3.read());
}

void batch_norm::thread_xor_ln340_fu_172_p2() {
    xor_ln340_fu_172_p2 = (underflow_fu_160_p2.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln785_fu_130_p2() {
    xor_ln785_fu_130_p2 = (p_Result_s_fu_71_p3.read() ^ ap_const_lv1_1);
}

void batch_norm::thread_xor_ln786_fu_142_p2() {
    xor_ln786_fu_142_p2 = (p_Result_7_fu_100_p3.read() ^ ap_const_lv1_1);
}

}

