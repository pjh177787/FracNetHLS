// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_conv1x1_weights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_conv_weight_1x1_all_V_AWVALID,
        m_axi_conv_weight_1x1_all_V_AWREADY,
        m_axi_conv_weight_1x1_all_V_AWADDR,
        m_axi_conv_weight_1x1_all_V_AWID,
        m_axi_conv_weight_1x1_all_V_AWLEN,
        m_axi_conv_weight_1x1_all_V_AWSIZE,
        m_axi_conv_weight_1x1_all_V_AWBURST,
        m_axi_conv_weight_1x1_all_V_AWLOCK,
        m_axi_conv_weight_1x1_all_V_AWCACHE,
        m_axi_conv_weight_1x1_all_V_AWPROT,
        m_axi_conv_weight_1x1_all_V_AWQOS,
        m_axi_conv_weight_1x1_all_V_AWREGION,
        m_axi_conv_weight_1x1_all_V_AWUSER,
        m_axi_conv_weight_1x1_all_V_WVALID,
        m_axi_conv_weight_1x1_all_V_WREADY,
        m_axi_conv_weight_1x1_all_V_WDATA,
        m_axi_conv_weight_1x1_all_V_WSTRB,
        m_axi_conv_weight_1x1_all_V_WLAST,
        m_axi_conv_weight_1x1_all_V_WID,
        m_axi_conv_weight_1x1_all_V_WUSER,
        m_axi_conv_weight_1x1_all_V_ARVALID,
        m_axi_conv_weight_1x1_all_V_ARREADY,
        m_axi_conv_weight_1x1_all_V_ARADDR,
        m_axi_conv_weight_1x1_all_V_ARID,
        m_axi_conv_weight_1x1_all_V_ARLEN,
        m_axi_conv_weight_1x1_all_V_ARSIZE,
        m_axi_conv_weight_1x1_all_V_ARBURST,
        m_axi_conv_weight_1x1_all_V_ARLOCK,
        m_axi_conv_weight_1x1_all_V_ARCACHE,
        m_axi_conv_weight_1x1_all_V_ARPROT,
        m_axi_conv_weight_1x1_all_V_ARQOS,
        m_axi_conv_weight_1x1_all_V_ARREGION,
        m_axi_conv_weight_1x1_all_V_ARUSER,
        m_axi_conv_weight_1x1_all_V_RVALID,
        m_axi_conv_weight_1x1_all_V_RREADY,
        m_axi_conv_weight_1x1_all_V_RDATA,
        m_axi_conv_weight_1x1_all_V_RLAST,
        m_axi_conv_weight_1x1_all_V_RID,
        m_axi_conv_weight_1x1_all_V_RUSER,
        m_axi_conv_weight_1x1_all_V_RRESP,
        m_axi_conv_weight_1x1_all_V_BVALID,
        m_axi_conv_weight_1x1_all_V_BREADY,
        m_axi_conv_weight_1x1_all_V_BRESP,
        m_axi_conv_weight_1x1_all_V_BID,
        m_axi_conv_weight_1x1_all_V_BUSER,
        conv_weight_1x1_all_V_offset,
        conv1x1_weight_ptr,
        c_out,
        c_in,
        in_channels_after_pa,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_pp0_stage0 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_conv_weight_1x1_all_V_AWVALID;
input   m_axi_conv_weight_1x1_all_V_AWREADY;
output  [31:0] m_axi_conv_weight_1x1_all_V_AWADDR;
output  [0:0] m_axi_conv_weight_1x1_all_V_AWID;
output  [31:0] m_axi_conv_weight_1x1_all_V_AWLEN;
output  [2:0] m_axi_conv_weight_1x1_all_V_AWSIZE;
output  [1:0] m_axi_conv_weight_1x1_all_V_AWBURST;
output  [1:0] m_axi_conv_weight_1x1_all_V_AWLOCK;
output  [3:0] m_axi_conv_weight_1x1_all_V_AWCACHE;
output  [2:0] m_axi_conv_weight_1x1_all_V_AWPROT;
output  [3:0] m_axi_conv_weight_1x1_all_V_AWQOS;
output  [3:0] m_axi_conv_weight_1x1_all_V_AWREGION;
output  [0:0] m_axi_conv_weight_1x1_all_V_AWUSER;
output   m_axi_conv_weight_1x1_all_V_WVALID;
input   m_axi_conv_weight_1x1_all_V_WREADY;
output  [511:0] m_axi_conv_weight_1x1_all_V_WDATA;
output  [63:0] m_axi_conv_weight_1x1_all_V_WSTRB;
output   m_axi_conv_weight_1x1_all_V_WLAST;
output  [0:0] m_axi_conv_weight_1x1_all_V_WID;
output  [0:0] m_axi_conv_weight_1x1_all_V_WUSER;
output   m_axi_conv_weight_1x1_all_V_ARVALID;
input   m_axi_conv_weight_1x1_all_V_ARREADY;
output  [31:0] m_axi_conv_weight_1x1_all_V_ARADDR;
output  [0:0] m_axi_conv_weight_1x1_all_V_ARID;
output  [31:0] m_axi_conv_weight_1x1_all_V_ARLEN;
output  [2:0] m_axi_conv_weight_1x1_all_V_ARSIZE;
output  [1:0] m_axi_conv_weight_1x1_all_V_ARBURST;
output  [1:0] m_axi_conv_weight_1x1_all_V_ARLOCK;
output  [3:0] m_axi_conv_weight_1x1_all_V_ARCACHE;
output  [2:0] m_axi_conv_weight_1x1_all_V_ARPROT;
output  [3:0] m_axi_conv_weight_1x1_all_V_ARQOS;
output  [3:0] m_axi_conv_weight_1x1_all_V_ARREGION;
output  [0:0] m_axi_conv_weight_1x1_all_V_ARUSER;
input   m_axi_conv_weight_1x1_all_V_RVALID;
output   m_axi_conv_weight_1x1_all_V_RREADY;
input  [511:0] m_axi_conv_weight_1x1_all_V_RDATA;
input   m_axi_conv_weight_1x1_all_V_RLAST;
input  [0:0] m_axi_conv_weight_1x1_all_V_RID;
input  [0:0] m_axi_conv_weight_1x1_all_V_RUSER;
input  [1:0] m_axi_conv_weight_1x1_all_V_RRESP;
input   m_axi_conv_weight_1x1_all_V_BVALID;
output   m_axi_conv_weight_1x1_all_V_BREADY;
input  [1:0] m_axi_conv_weight_1x1_all_V_BRESP;
input  [0:0] m_axi_conv_weight_1x1_all_V_BID;
input  [0:0] m_axi_conv_weight_1x1_all_V_BUSER;
input  [25:0] conv_weight_1x1_all_V_offset;
input  [12:0] conv1x1_weight_ptr;
input  [5:0] c_out;
input  [5:0] c_in;
input  [6:0] in_channels_after_pa;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;
output  [31:0] ap_return_13;
output  [31:0] ap_return_14;
output  [31:0] ap_return_15;
output  [31:0] ap_return_16;
output  [31:0] ap_return_17;
output  [31:0] ap_return_18;
output  [31:0] ap_return_19;
output  [31:0] ap_return_20;
output  [31:0] ap_return_21;
output  [31:0] ap_return_22;
output  [31:0] ap_return_23;
output  [31:0] ap_return_24;
output  [31:0] ap_return_25;
output  [31:0] ap_return_26;
output  [31:0] ap_return_27;
output  [31:0] ap_return_28;
output  [31:0] ap_return_29;
output  [31:0] ap_return_30;
output  [31:0] ap_return_31;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_conv_weight_1x1_all_V_ARVALID;
reg m_axi_conv_weight_1x1_all_V_RREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    conv_weight_1x1_all_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    conv_weight_1x1_all_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln240_reg_1471;
reg   [31:0] weight1x1_tile_buffe_32_reg_212;
reg   [31:0] weight1x1_tile_buffe_33_reg_224;
reg   [31:0] weight1x1_tile_buffe_34_reg_236;
reg   [31:0] weight1x1_tile_buffe_35_reg_248;
reg   [31:0] weight1x1_tile_buffe_36_reg_260;
reg   [31:0] weight1x1_tile_buffe_37_reg_272;
reg   [31:0] weight1x1_tile_buffe_38_reg_284;
reg   [31:0] weight1x1_tile_buffe_39_reg_296;
reg   [31:0] weight1x1_tile_buffe_40_reg_308;
reg   [31:0] weight1x1_tile_buffe_41_reg_320;
reg   [31:0] weight1x1_tile_buffe_42_reg_332;
reg   [31:0] weight1x1_tile_buffe_43_reg_344;
reg   [31:0] weight1x1_tile_buffe_44_reg_356;
reg   [31:0] weight1x1_tile_buffe_45_reg_368;
reg   [31:0] weight1x1_tile_buffe_46_reg_380;
reg   [31:0] weight1x1_tile_buffe_47_reg_392;
reg   [31:0] weight1x1_tile_buffe_48_reg_404;
reg   [31:0] weight1x1_tile_buffe_49_reg_416;
reg   [31:0] weight1x1_tile_buffe_50_reg_428;
reg   [31:0] weight1x1_tile_buffe_51_reg_440;
reg   [31:0] weight1x1_tile_buffe_52_reg_452;
reg   [31:0] weight1x1_tile_buffe_53_reg_464;
reg   [31:0] weight1x1_tile_buffe_54_reg_476;
reg   [31:0] weight1x1_tile_buffe_55_reg_488;
reg   [31:0] weight1x1_tile_buffe_56_reg_500;
reg   [31:0] weight1x1_tile_buffe_57_reg_512;
reg   [31:0] weight1x1_tile_buffe_58_reg_524;
reg   [31:0] weight1x1_tile_buffe_59_reg_536;
reg   [31:0] weight1x1_tile_buffe_60_reg_548;
reg   [31:0] weight1x1_tile_buffe_61_reg_560;
reg   [31:0] weight1x1_tile_buffe_62_reg_572;
reg   [31:0] weight1x1_tile_buffe_63_reg_584;
reg   [1:0] i_0_reg_596;
wire   [10:0] grp_fu_1447_p3;
reg   [10:0] tmp_reg_1455;
wire   [26:0] add_ln242_1_fu_652_p2;
reg   [26:0] add_ln242_1_reg_1460;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln240_fu_668_p2;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln240_reg_1471_pp0_iter1_reg;
wire   [1:0] i_fu_674_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] trunc_ln414_fu_680_p1;
reg   [0:0] trunc_ln414_reg_1480;
reg   [0:0] trunc_ln414_reg_1480_pp0_iter1_reg;
wire   [31:0] trunc_ln647_fu_684_p1;
reg   [31:0] trunc_ln647_reg_1485;
reg   [31:0] weight1x1_tile_buffe_64_reg_1491;
reg   [31:0] weight1x1_tile_buffe_65_reg_1497;
reg   [31:0] weight1x1_tile_buffe_66_reg_1503;
reg   [31:0] weight1x1_tile_buffe_67_reg_1509;
reg   [31:0] weight1x1_tile_buffe_68_reg_1515;
reg   [31:0] weight1x1_tile_buffe_69_reg_1521;
reg   [31:0] weight1x1_tile_buffe_70_reg_1527;
reg   [31:0] weight1x1_tile_buffe_71_reg_1533;
reg   [31:0] weight1x1_tile_buffe_72_reg_1539;
reg   [31:0] weight1x1_tile_buffe_73_reg_1545;
reg   [31:0] weight1x1_tile_buffe_74_reg_1551;
reg   [31:0] weight1x1_tile_buffe_75_reg_1557;
reg   [31:0] weight1x1_tile_buffe_76_reg_1563;
reg   [31:0] weight1x1_tile_buffe_77_reg_1569;
reg   [31:0] weight1x1_tile_buffe_78_reg_1575;
wire   [31:0] select_ln414_fu_851_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] select_ln414_1_fu_858_p3;
wire   [31:0] select_ln414_2_fu_877_p3;
wire   [31:0] select_ln414_3_fu_884_p3;
wire   [31:0] select_ln414_4_fu_903_p3;
wire   [31:0] select_ln414_5_fu_910_p3;
wire   [31:0] select_ln414_6_fu_929_p3;
wire   [31:0] select_ln414_7_fu_936_p3;
wire   [31:0] select_ln414_8_fu_955_p3;
wire   [31:0] select_ln414_9_fu_962_p3;
wire   [31:0] select_ln414_10_fu_981_p3;
wire   [31:0] select_ln414_11_fu_988_p3;
wire   [31:0] select_ln414_12_fu_1007_p3;
wire   [31:0] select_ln414_13_fu_1014_p3;
wire   [31:0] select_ln414_14_fu_1033_p3;
wire   [31:0] select_ln414_15_fu_1040_p3;
wire   [31:0] select_ln414_16_fu_1059_p3;
wire   [31:0] select_ln414_17_fu_1066_p3;
wire   [31:0] select_ln414_18_fu_1085_p3;
wire   [31:0] select_ln414_19_fu_1092_p3;
wire   [31:0] select_ln414_20_fu_1111_p3;
wire   [31:0] select_ln414_21_fu_1118_p3;
wire   [31:0] select_ln414_22_fu_1137_p3;
wire   [31:0] select_ln414_23_fu_1144_p3;
wire   [31:0] select_ln414_24_fu_1163_p3;
wire   [31:0] select_ln414_25_fu_1170_p3;
wire   [31:0] select_ln414_26_fu_1189_p3;
wire   [31:0] select_ln414_27_fu_1196_p3;
wire   [31:0] select_ln414_28_fu_1215_p3;
wire   [31:0] select_ln414_29_fu_1222_p3;
wire   [31:0] select_ln414_30_fu_1241_p3;
wire   [31:0] select_ln414_31_fu_1248_p3;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
wire   [63:0] zext_ln242_3_fu_658_p1;
wire   [11:0] tmp10_fu_619_p3;
wire   [11:0] trunc_ln242_fu_630_p1;
wire   [12:0] tmp38_cast_fu_626_p1;
wire   [12:0] zext_ln242_fu_634_p1;
wire   [12:0] add_ln242_fu_638_p2;
wire   [26:0] zext_ln242_2_fu_648_p1;
wire   [26:0] zext_ln242_1_fu_644_p1;
wire   [4:0] shl_ln_fu_838_p3;
wire   [0:0] icmp_ln414_fu_845_p2;
wire   [4:0] or_ln414_fu_865_p2;
wire   [0:0] icmp_ln414_16_fu_871_p2;
wire   [4:0] or_ln414_15_fu_891_p2;
wire   [0:0] icmp_ln414_17_fu_897_p2;
wire   [4:0] or_ln414_16_fu_917_p2;
wire   [0:0] icmp_ln414_18_fu_923_p2;
wire   [4:0] or_ln414_17_fu_943_p2;
wire   [0:0] icmp_ln414_19_fu_949_p2;
wire   [4:0] or_ln414_18_fu_969_p2;
wire   [0:0] icmp_ln414_20_fu_975_p2;
wire   [4:0] or_ln414_19_fu_995_p2;
wire   [0:0] icmp_ln414_21_fu_1001_p2;
wire   [4:0] or_ln414_20_fu_1021_p2;
wire   [0:0] icmp_ln414_22_fu_1027_p2;
wire   [4:0] or_ln414_21_fu_1047_p2;
wire   [0:0] icmp_ln414_23_fu_1053_p2;
wire   [4:0] or_ln414_22_fu_1073_p2;
wire   [0:0] icmp_ln414_24_fu_1079_p2;
wire   [4:0] or_ln414_23_fu_1099_p2;
wire   [0:0] icmp_ln414_25_fu_1105_p2;
wire   [4:0] or_ln414_24_fu_1125_p2;
wire   [0:0] icmp_ln414_26_fu_1131_p2;
wire   [4:0] or_ln414_25_fu_1151_p2;
wire   [0:0] icmp_ln414_27_fu_1157_p2;
wire   [4:0] or_ln414_26_fu_1177_p2;
wire   [0:0] icmp_ln414_28_fu_1183_p2;
wire   [4:0] or_ln414_27_fu_1203_p2;
wire   [0:0] icmp_ln414_29_fu_1209_p2;
wire   [4:0] or_ln414_28_fu_1229_p2;
wire   [0:0] icmp_ln414_30_fu_1235_p2;
wire    ap_CS_fsm_state13;
wire   [5:0] grp_fu_1447_p0;
wire   [6:0] grp_fu_1447_p1;
wire   [5:0] grp_fu_1447_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_1447_p00;
wire   [10:0] grp_fu_1447_p10;
wire   [10:0] grp_fu_1447_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

FracNet_mac_muladbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
FracNet_mac_muladbkb_U1364(
    .din0(grp_fu_1447_p0),
    .din1(grp_fu_1447_p1),
    .din2(grp_fu_1447_p2),
    .dout(grp_fu_1447_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state10)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_668_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_596 <= i_fu_674_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_596 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln242_1_reg_1460 <= add_ln242_1_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln240_reg_1471 <= icmp_ln240_fu_668_p2;
        icmp_ln240_reg_1471_pp0_iter1_reg <= icmp_ln240_reg_1471;
        trunc_ln414_reg_1480_pp0_iter1_reg <= trunc_ln414_reg_1480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_1455 <= grp_fu_1447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_fu_668_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln414_reg_1480 <= trunc_ln414_fu_680_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_reg_1471 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln647_reg_1485 <= trunc_ln647_fu_684_p1;
        weight1x1_tile_buffe_64_reg_1491 <= {{m_axi_conv_weight_1x1_all_V_RDATA[63:32]}};
        weight1x1_tile_buffe_65_reg_1497 <= {{m_axi_conv_weight_1x1_all_V_RDATA[95:64]}};
        weight1x1_tile_buffe_66_reg_1503 <= {{m_axi_conv_weight_1x1_all_V_RDATA[127:96]}};
        weight1x1_tile_buffe_67_reg_1509 <= {{m_axi_conv_weight_1x1_all_V_RDATA[159:128]}};
        weight1x1_tile_buffe_68_reg_1515 <= {{m_axi_conv_weight_1x1_all_V_RDATA[191:160]}};
        weight1x1_tile_buffe_69_reg_1521 <= {{m_axi_conv_weight_1x1_all_V_RDATA[223:192]}};
        weight1x1_tile_buffe_70_reg_1527 <= {{m_axi_conv_weight_1x1_all_V_RDATA[255:224]}};
        weight1x1_tile_buffe_71_reg_1533 <= {{m_axi_conv_weight_1x1_all_V_RDATA[287:256]}};
        weight1x1_tile_buffe_72_reg_1539 <= {{m_axi_conv_weight_1x1_all_V_RDATA[319:288]}};
        weight1x1_tile_buffe_73_reg_1545 <= {{m_axi_conv_weight_1x1_all_V_RDATA[351:320]}};
        weight1x1_tile_buffe_74_reg_1551 <= {{m_axi_conv_weight_1x1_all_V_RDATA[383:352]}};
        weight1x1_tile_buffe_75_reg_1557 <= {{m_axi_conv_weight_1x1_all_V_RDATA[415:384]}};
        weight1x1_tile_buffe_76_reg_1563 <= {{m_axi_conv_weight_1x1_all_V_RDATA[447:416]}};
        weight1x1_tile_buffe_77_reg_1569 <= {{m_axi_conv_weight_1x1_all_V_RDATA[479:448]}};
        weight1x1_tile_buffe_78_reg_1575 <= {{m_axi_conv_weight_1x1_all_V_RDATA[511:480]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln240_reg_1471_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        weight1x1_tile_buffe_32_reg_212 <= select_ln414_20_fu_1111_p3;
        weight1x1_tile_buffe_33_reg_224 <= select_ln414_22_fu_1137_p3;
        weight1x1_tile_buffe_34_reg_236 <= select_ln414_18_fu_1085_p3;
        weight1x1_tile_buffe_35_reg_248 <= select_ln414_24_fu_1163_p3;
        weight1x1_tile_buffe_36_reg_260 <= select_ln414_26_fu_1189_p3;
        weight1x1_tile_buffe_37_reg_272 <= select_ln414_16_fu_1059_p3;
        weight1x1_tile_buffe_38_reg_284 <= select_ln414_28_fu_1215_p3;
        weight1x1_tile_buffe_39_reg_296 <= select_ln414_30_fu_1241_p3;
        weight1x1_tile_buffe_40_reg_308 <= select_ln414_14_fu_1033_p3;
        weight1x1_tile_buffe_41_reg_320 <= select_ln414_fu_851_p3;
        weight1x1_tile_buffe_42_reg_332 <= select_ln414_2_fu_877_p3;
        weight1x1_tile_buffe_43_reg_344 <= select_ln414_12_fu_1007_p3;
        weight1x1_tile_buffe_44_reg_356 <= select_ln414_4_fu_903_p3;
        weight1x1_tile_buffe_45_reg_368 <= select_ln414_6_fu_929_p3;
        weight1x1_tile_buffe_46_reg_380 <= select_ln414_10_fu_981_p3;
        weight1x1_tile_buffe_47_reg_392 <= select_ln414_8_fu_955_p3;
        weight1x1_tile_buffe_48_reg_404 <= select_ln414_11_fu_988_p3;
        weight1x1_tile_buffe_49_reg_416 <= select_ln414_9_fu_962_p3;
        weight1x1_tile_buffe_50_reg_428 <= select_ln414_13_fu_1014_p3;
        weight1x1_tile_buffe_51_reg_440 <= select_ln414_15_fu_1040_p3;
        weight1x1_tile_buffe_52_reg_452 <= select_ln414_7_fu_936_p3;
        weight1x1_tile_buffe_53_reg_464 <= select_ln414_17_fu_1066_p3;
        weight1x1_tile_buffe_54_reg_476 <= select_ln414_19_fu_1092_p3;
        weight1x1_tile_buffe_55_reg_488 <= select_ln414_5_fu_910_p3;
        weight1x1_tile_buffe_56_reg_500 <= select_ln414_21_fu_1118_p3;
        weight1x1_tile_buffe_57_reg_512 <= select_ln414_23_fu_1144_p3;
        weight1x1_tile_buffe_58_reg_524 <= select_ln414_3_fu_884_p3;
        weight1x1_tile_buffe_59_reg_536 <= select_ln414_25_fu_1170_p3;
        weight1x1_tile_buffe_60_reg_548 <= select_ln414_27_fu_1196_p3;
        weight1x1_tile_buffe_61_reg_560 <= select_ln414_1_fu_858_p3;
        weight1x1_tile_buffe_62_reg_572 <= select_ln414_29_fu_1222_p3;
        weight1x1_tile_buffe_63_reg_584 <= select_ln414_31_fu_1248_p3;
    end
end

always @ (*) begin
    if ((icmp_ln240_fu_668_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_weight_1x1_all_V_blk_n_AR = m_axi_conv_weight_1x1_all_V_ARREADY;
    end else begin
        conv_weight_1x1_all_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln240_reg_1471 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_weight_1x1_all_V_blk_n_R = m_axi_conv_weight_1x1_all_V_RVALID;
    end else begin
        conv_weight_1x1_all_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_conv_weight_1x1_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_conv_weight_1x1_all_V_ARVALID = 1'b1;
    end else begin
        m_axi_conv_weight_1x1_all_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln240_reg_1471 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_conv_weight_1x1_all_V_RREADY = 1'b1;
    end else begin
        m_axi_conv_weight_1x1_all_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_conv_weight_1x1_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln240_fu_668_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln240_fu_668_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln242_1_fu_652_p2 = (zext_ln242_2_fu_648_p1 + zext_ln242_1_fu_644_p1);

assign add_ln242_fu_638_p2 = (tmp38_cast_fu_626_p1 + zext_ln242_fu_634_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln240_reg_1471 == 1'd0) & (m_axi_conv_weight_1x1_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln240_reg_1471 == 1'd0) & (m_axi_conv_weight_1x1_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = ((icmp_ln240_reg_1471 == 1'd0) & (m_axi_conv_weight_1x1_all_V_RVALID == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = weight1x1_tile_buffe_61_reg_560;

assign ap_return_1 = weight1x1_tile_buffe_58_reg_524;

assign ap_return_10 = weight1x1_tile_buffe_32_reg_212;

assign ap_return_11 = weight1x1_tile_buffe_33_reg_224;

assign ap_return_12 = weight1x1_tile_buffe_35_reg_248;

assign ap_return_13 = weight1x1_tile_buffe_36_reg_260;

assign ap_return_14 = weight1x1_tile_buffe_38_reg_284;

assign ap_return_15 = weight1x1_tile_buffe_39_reg_296;

assign ap_return_16 = weight1x1_tile_buffe_41_reg_320;

assign ap_return_17 = weight1x1_tile_buffe_42_reg_332;

assign ap_return_18 = weight1x1_tile_buffe_44_reg_356;

assign ap_return_19 = weight1x1_tile_buffe_45_reg_368;

assign ap_return_2 = weight1x1_tile_buffe_55_reg_488;

assign ap_return_20 = weight1x1_tile_buffe_47_reg_392;

assign ap_return_21 = weight1x1_tile_buffe_48_reg_404;

assign ap_return_22 = weight1x1_tile_buffe_50_reg_428;

assign ap_return_23 = weight1x1_tile_buffe_51_reg_440;

assign ap_return_24 = weight1x1_tile_buffe_53_reg_464;

assign ap_return_25 = weight1x1_tile_buffe_54_reg_476;

assign ap_return_26 = weight1x1_tile_buffe_56_reg_500;

assign ap_return_27 = weight1x1_tile_buffe_57_reg_512;

assign ap_return_28 = weight1x1_tile_buffe_59_reg_536;

assign ap_return_29 = weight1x1_tile_buffe_60_reg_548;

assign ap_return_3 = weight1x1_tile_buffe_52_reg_452;

assign ap_return_30 = weight1x1_tile_buffe_62_reg_572;

assign ap_return_31 = weight1x1_tile_buffe_63_reg_584;

assign ap_return_4 = weight1x1_tile_buffe_49_reg_416;

assign ap_return_5 = weight1x1_tile_buffe_46_reg_380;

assign ap_return_6 = weight1x1_tile_buffe_43_reg_344;

assign ap_return_7 = weight1x1_tile_buffe_40_reg_308;

assign ap_return_8 = weight1x1_tile_buffe_37_reg_272;

assign ap_return_9 = weight1x1_tile_buffe_34_reg_236;

assign grp_fu_1447_p0 = grp_fu_1447_p00;

assign grp_fu_1447_p00 = c_out;

assign grp_fu_1447_p1 = grp_fu_1447_p10;

assign grp_fu_1447_p10 = in_channels_after_pa;

assign grp_fu_1447_p2 = grp_fu_1447_p20;

assign grp_fu_1447_p20 = c_in;

assign i_fu_674_p2 = (i_0_reg_596 + 2'd1);

assign icmp_ln240_fu_668_p2 = ((i_0_reg_596 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln414_16_fu_871_p2 = ((or_ln414_fu_865_p2 == 5'd1) ? 1'b1 : 1'b0);

assign icmp_ln414_17_fu_897_p2 = ((or_ln414_15_fu_891_p2 == 5'd2) ? 1'b1 : 1'b0);

assign icmp_ln414_18_fu_923_p2 = ((or_ln414_16_fu_917_p2 == 5'd3) ? 1'b1 : 1'b0);

assign icmp_ln414_19_fu_949_p2 = ((or_ln414_17_fu_943_p2 == 5'd4) ? 1'b1 : 1'b0);

assign icmp_ln414_20_fu_975_p2 = ((or_ln414_18_fu_969_p2 == 5'd5) ? 1'b1 : 1'b0);

assign icmp_ln414_21_fu_1001_p2 = ((or_ln414_19_fu_995_p2 == 5'd6) ? 1'b1 : 1'b0);

assign icmp_ln414_22_fu_1027_p2 = ((or_ln414_20_fu_1021_p2 == 5'd7) ? 1'b1 : 1'b0);

assign icmp_ln414_23_fu_1053_p2 = ((or_ln414_21_fu_1047_p2 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln414_24_fu_1079_p2 = ((or_ln414_22_fu_1073_p2 == 5'd9) ? 1'b1 : 1'b0);

assign icmp_ln414_25_fu_1105_p2 = ((or_ln414_23_fu_1099_p2 == 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln414_26_fu_1131_p2 = ((or_ln414_24_fu_1125_p2 == 5'd11) ? 1'b1 : 1'b0);

assign icmp_ln414_27_fu_1157_p2 = ((or_ln414_25_fu_1151_p2 == 5'd12) ? 1'b1 : 1'b0);

assign icmp_ln414_28_fu_1183_p2 = ((or_ln414_26_fu_1177_p2 == 5'd13) ? 1'b1 : 1'b0);

assign icmp_ln414_29_fu_1209_p2 = ((or_ln414_27_fu_1203_p2 == 5'd14) ? 1'b1 : 1'b0);

assign icmp_ln414_30_fu_1235_p2 = ((or_ln414_28_fu_1229_p2 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_845_p2 = ((shl_ln_fu_838_p3 == 5'd0) ? 1'b1 : 1'b0);

assign m_axi_conv_weight_1x1_all_V_ARADDR = zext_ln242_3_fu_658_p1;

assign m_axi_conv_weight_1x1_all_V_ARBURST = 2'd0;

assign m_axi_conv_weight_1x1_all_V_ARCACHE = 4'd0;

assign m_axi_conv_weight_1x1_all_V_ARID = 1'd0;

assign m_axi_conv_weight_1x1_all_V_ARLEN = 32'd2;

assign m_axi_conv_weight_1x1_all_V_ARLOCK = 2'd0;

assign m_axi_conv_weight_1x1_all_V_ARPROT = 3'd0;

assign m_axi_conv_weight_1x1_all_V_ARQOS = 4'd0;

assign m_axi_conv_weight_1x1_all_V_ARREGION = 4'd0;

assign m_axi_conv_weight_1x1_all_V_ARSIZE = 3'd0;

assign m_axi_conv_weight_1x1_all_V_ARUSER = 1'd0;

assign m_axi_conv_weight_1x1_all_V_AWADDR = 32'd0;

assign m_axi_conv_weight_1x1_all_V_AWBURST = 2'd0;

assign m_axi_conv_weight_1x1_all_V_AWCACHE = 4'd0;

assign m_axi_conv_weight_1x1_all_V_AWID = 1'd0;

assign m_axi_conv_weight_1x1_all_V_AWLEN = 32'd0;

assign m_axi_conv_weight_1x1_all_V_AWLOCK = 2'd0;

assign m_axi_conv_weight_1x1_all_V_AWPROT = 3'd0;

assign m_axi_conv_weight_1x1_all_V_AWQOS = 4'd0;

assign m_axi_conv_weight_1x1_all_V_AWREGION = 4'd0;

assign m_axi_conv_weight_1x1_all_V_AWSIZE = 3'd0;

assign m_axi_conv_weight_1x1_all_V_AWUSER = 1'd0;

assign m_axi_conv_weight_1x1_all_V_AWVALID = 1'b0;

assign m_axi_conv_weight_1x1_all_V_BREADY = 1'b0;

assign m_axi_conv_weight_1x1_all_V_WDATA = 512'd0;

assign m_axi_conv_weight_1x1_all_V_WID = 1'd0;

assign m_axi_conv_weight_1x1_all_V_WLAST = 1'b0;

assign m_axi_conv_weight_1x1_all_V_WSTRB = 64'd0;

assign m_axi_conv_weight_1x1_all_V_WUSER = 1'd0;

assign m_axi_conv_weight_1x1_all_V_WVALID = 1'b0;

assign or_ln414_15_fu_891_p2 = (shl_ln_fu_838_p3 | 5'd2);

assign or_ln414_16_fu_917_p2 = (shl_ln_fu_838_p3 | 5'd3);

assign or_ln414_17_fu_943_p2 = (shl_ln_fu_838_p3 | 5'd4);

assign or_ln414_18_fu_969_p2 = (shl_ln_fu_838_p3 | 5'd5);

assign or_ln414_19_fu_995_p2 = (shl_ln_fu_838_p3 | 5'd6);

assign or_ln414_20_fu_1021_p2 = (shl_ln_fu_838_p3 | 5'd7);

assign or_ln414_21_fu_1047_p2 = (shl_ln_fu_838_p3 | 5'd8);

assign or_ln414_22_fu_1073_p2 = (shl_ln_fu_838_p3 | 5'd9);

assign or_ln414_23_fu_1099_p2 = (shl_ln_fu_838_p3 | 5'd10);

assign or_ln414_24_fu_1125_p2 = (shl_ln_fu_838_p3 | 5'd11);

assign or_ln414_25_fu_1151_p2 = (shl_ln_fu_838_p3 | 5'd12);

assign or_ln414_26_fu_1177_p2 = (shl_ln_fu_838_p3 | 5'd13);

assign or_ln414_27_fu_1203_p2 = (shl_ln_fu_838_p3 | 5'd14);

assign or_ln414_28_fu_1229_p2 = (shl_ln_fu_838_p3 | 5'd15);

assign or_ln414_fu_865_p2 = (shl_ln_fu_838_p3 | 5'd1);

assign select_ln414_10_fu_981_p3 = ((icmp_ln414_20_fu_975_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_68_reg_1515 : weight1x1_tile_buffe_46_reg_380);

assign select_ln414_11_fu_988_p3 = ((icmp_ln414_20_fu_975_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_48_reg_404 : weight1x1_tile_buffe_68_reg_1515);

assign select_ln414_12_fu_1007_p3 = ((icmp_ln414_21_fu_1001_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_69_reg_1521 : weight1x1_tile_buffe_43_reg_344);

assign select_ln414_13_fu_1014_p3 = ((icmp_ln414_21_fu_1001_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_50_reg_428 : weight1x1_tile_buffe_69_reg_1521);

assign select_ln414_14_fu_1033_p3 = ((icmp_ln414_22_fu_1027_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_70_reg_1527 : weight1x1_tile_buffe_40_reg_308);

assign select_ln414_15_fu_1040_p3 = ((icmp_ln414_22_fu_1027_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_51_reg_440 : weight1x1_tile_buffe_70_reg_1527);

assign select_ln414_16_fu_1059_p3 = ((icmp_ln414_23_fu_1053_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_71_reg_1533 : weight1x1_tile_buffe_37_reg_272);

assign select_ln414_17_fu_1066_p3 = ((icmp_ln414_23_fu_1053_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_53_reg_464 : weight1x1_tile_buffe_71_reg_1533);

assign select_ln414_18_fu_1085_p3 = ((icmp_ln414_24_fu_1079_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_72_reg_1539 : weight1x1_tile_buffe_34_reg_236);

assign select_ln414_19_fu_1092_p3 = ((icmp_ln414_24_fu_1079_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_54_reg_476 : weight1x1_tile_buffe_72_reg_1539);

assign select_ln414_1_fu_858_p3 = ((icmp_ln414_fu_845_p2[0:0] === 1'b1) ? trunc_ln647_reg_1485 : weight1x1_tile_buffe_61_reg_560);

assign select_ln414_20_fu_1111_p3 = ((icmp_ln414_25_fu_1105_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_73_reg_1545 : weight1x1_tile_buffe_32_reg_212);

assign select_ln414_21_fu_1118_p3 = ((icmp_ln414_25_fu_1105_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_56_reg_500 : weight1x1_tile_buffe_73_reg_1545);

assign select_ln414_22_fu_1137_p3 = ((icmp_ln414_26_fu_1131_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_74_reg_1551 : weight1x1_tile_buffe_33_reg_224);

assign select_ln414_23_fu_1144_p3 = ((icmp_ln414_26_fu_1131_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_57_reg_512 : weight1x1_tile_buffe_74_reg_1551);

assign select_ln414_24_fu_1163_p3 = ((icmp_ln414_27_fu_1157_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_75_reg_1557 : weight1x1_tile_buffe_35_reg_248);

assign select_ln414_25_fu_1170_p3 = ((icmp_ln414_27_fu_1157_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_59_reg_536 : weight1x1_tile_buffe_75_reg_1557);

assign select_ln414_26_fu_1189_p3 = ((icmp_ln414_28_fu_1183_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_76_reg_1563 : weight1x1_tile_buffe_36_reg_260);

assign select_ln414_27_fu_1196_p3 = ((icmp_ln414_28_fu_1183_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_60_reg_548 : weight1x1_tile_buffe_76_reg_1563);

assign select_ln414_28_fu_1215_p3 = ((icmp_ln414_29_fu_1209_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_77_reg_1569 : weight1x1_tile_buffe_38_reg_284);

assign select_ln414_29_fu_1222_p3 = ((icmp_ln414_29_fu_1209_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_62_reg_572 : weight1x1_tile_buffe_77_reg_1569);

assign select_ln414_2_fu_877_p3 = ((icmp_ln414_16_fu_871_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_42_reg_332 : weight1x1_tile_buffe_64_reg_1491);

assign select_ln414_30_fu_1241_p3 = ((icmp_ln414_30_fu_1235_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_78_reg_1575 : weight1x1_tile_buffe_39_reg_296);

assign select_ln414_31_fu_1248_p3 = ((icmp_ln414_30_fu_1235_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_63_reg_584 : weight1x1_tile_buffe_78_reg_1575);

assign select_ln414_3_fu_884_p3 = ((icmp_ln414_16_fu_871_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_64_reg_1491 : weight1x1_tile_buffe_58_reg_524);

assign select_ln414_4_fu_903_p3 = ((icmp_ln414_17_fu_897_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_44_reg_356 : weight1x1_tile_buffe_65_reg_1497);

assign select_ln414_5_fu_910_p3 = ((icmp_ln414_17_fu_897_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_65_reg_1497 : weight1x1_tile_buffe_55_reg_488);

assign select_ln414_6_fu_929_p3 = ((icmp_ln414_18_fu_923_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_45_reg_368 : weight1x1_tile_buffe_66_reg_1503);

assign select_ln414_7_fu_936_p3 = ((icmp_ln414_18_fu_923_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_66_reg_1503 : weight1x1_tile_buffe_52_reg_452);

assign select_ln414_8_fu_955_p3 = ((icmp_ln414_19_fu_949_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_47_reg_392 : weight1x1_tile_buffe_67_reg_1509);

assign select_ln414_9_fu_962_p3 = ((icmp_ln414_19_fu_949_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_67_reg_1509 : weight1x1_tile_buffe_49_reg_416);

assign select_ln414_fu_851_p3 = ((icmp_ln414_fu_845_p2[0:0] === 1'b1) ? weight1x1_tile_buffe_41_reg_320 : trunc_ln647_reg_1485);

assign shl_ln_fu_838_p3 = {{trunc_ln414_reg_1480_pp0_iter1_reg}, {4'd0}};

assign tmp10_fu_619_p3 = {{tmp_reg_1455}, {1'd0}};

assign tmp38_cast_fu_626_p1 = tmp10_fu_619_p3;

assign trunc_ln242_fu_630_p1 = conv1x1_weight_ptr[11:0];

assign trunc_ln414_fu_680_p1 = i_0_reg_596[0:0];

assign trunc_ln647_fu_684_p1 = m_axi_conv_weight_1x1_all_V_RDATA[31:0];

assign zext_ln242_1_fu_644_p1 = add_ln242_fu_638_p2;

assign zext_ln242_2_fu_648_p1 = conv_weight_1x1_all_V_offset;

assign zext_ln242_3_fu_658_p1 = add_ln242_1_reg_1460;

assign zext_ln242_fu_634_p1 = trunc_ln242_fu_630_p1;

endmodule //load_conv1x1_weights
