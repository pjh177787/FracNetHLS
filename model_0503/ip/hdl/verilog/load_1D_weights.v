// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_1D_weights (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_weights_all_V_AWVALID,
        m_axi_weights_all_V_AWREADY,
        m_axi_weights_all_V_AWADDR,
        m_axi_weights_all_V_AWID,
        m_axi_weights_all_V_AWLEN,
        m_axi_weights_all_V_AWSIZE,
        m_axi_weights_all_V_AWBURST,
        m_axi_weights_all_V_AWLOCK,
        m_axi_weights_all_V_AWCACHE,
        m_axi_weights_all_V_AWPROT,
        m_axi_weights_all_V_AWQOS,
        m_axi_weights_all_V_AWREGION,
        m_axi_weights_all_V_AWUSER,
        m_axi_weights_all_V_WVALID,
        m_axi_weights_all_V_WREADY,
        m_axi_weights_all_V_WDATA,
        m_axi_weights_all_V_WSTRB,
        m_axi_weights_all_V_WLAST,
        m_axi_weights_all_V_WID,
        m_axi_weights_all_V_WUSER,
        m_axi_weights_all_V_ARVALID,
        m_axi_weights_all_V_ARREADY,
        m_axi_weights_all_V_ARADDR,
        m_axi_weights_all_V_ARID,
        m_axi_weights_all_V_ARLEN,
        m_axi_weights_all_V_ARSIZE,
        m_axi_weights_all_V_ARBURST,
        m_axi_weights_all_V_ARLOCK,
        m_axi_weights_all_V_ARCACHE,
        m_axi_weights_all_V_ARPROT,
        m_axi_weights_all_V_ARQOS,
        m_axi_weights_all_V_ARREGION,
        m_axi_weights_all_V_ARUSER,
        m_axi_weights_all_V_RVALID,
        m_axi_weights_all_V_RREADY,
        m_axi_weights_all_V_RDATA,
        m_axi_weights_all_V_RLAST,
        m_axi_weights_all_V_RID,
        m_axi_weights_all_V_RUSER,
        m_axi_weights_all_V_RRESP,
        m_axi_weights_all_V_BVALID,
        m_axi_weights_all_V_BREADY,
        m_axi_weights_all_V_BRESP,
        m_axi_weights_all_V_BID,
        m_axi_weights_all_V_BUSER,
        weights_all_V_offset,
        weights_all_ptr,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_pp0_stage0 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_weights_all_V_AWVALID;
input   m_axi_weights_all_V_AWREADY;
output  [31:0] m_axi_weights_all_V_AWADDR;
output  [0:0] m_axi_weights_all_V_AWID;
output  [31:0] m_axi_weights_all_V_AWLEN;
output  [2:0] m_axi_weights_all_V_AWSIZE;
output  [1:0] m_axi_weights_all_V_AWBURST;
output  [1:0] m_axi_weights_all_V_AWLOCK;
output  [3:0] m_axi_weights_all_V_AWCACHE;
output  [2:0] m_axi_weights_all_V_AWPROT;
output  [3:0] m_axi_weights_all_V_AWQOS;
output  [3:0] m_axi_weights_all_V_AWREGION;
output  [0:0] m_axi_weights_all_V_AWUSER;
output   m_axi_weights_all_V_WVALID;
input   m_axi_weights_all_V_WREADY;
output  [511:0] m_axi_weights_all_V_WDATA;
output  [63:0] m_axi_weights_all_V_WSTRB;
output   m_axi_weights_all_V_WLAST;
output  [0:0] m_axi_weights_all_V_WID;
output  [0:0] m_axi_weights_all_V_WUSER;
output   m_axi_weights_all_V_ARVALID;
input   m_axi_weights_all_V_ARREADY;
output  [31:0] m_axi_weights_all_V_ARADDR;
output  [0:0] m_axi_weights_all_V_ARID;
output  [31:0] m_axi_weights_all_V_ARLEN;
output  [2:0] m_axi_weights_all_V_ARSIZE;
output  [1:0] m_axi_weights_all_V_ARBURST;
output  [1:0] m_axi_weights_all_V_ARLOCK;
output  [3:0] m_axi_weights_all_V_ARCACHE;
output  [2:0] m_axi_weights_all_V_ARPROT;
output  [3:0] m_axi_weights_all_V_ARQOS;
output  [3:0] m_axi_weights_all_V_ARREGION;
output  [0:0] m_axi_weights_all_V_ARUSER;
input   m_axi_weights_all_V_RVALID;
output   m_axi_weights_all_V_RREADY;
input  [511:0] m_axi_weights_all_V_RDATA;
input   m_axi_weights_all_V_RLAST;
input  [0:0] m_axi_weights_all_V_RID;
input  [0:0] m_axi_weights_all_V_RUSER;
input  [1:0] m_axi_weights_all_V_RRESP;
input   m_axi_weights_all_V_BVALID;
output   m_axi_weights_all_V_BREADY;
input  [1:0] m_axi_weights_all_V_BRESP;
input  [0:0] m_axi_weights_all_V_BID;
input  [0:0] m_axi_weights_all_V_BUSER;
input  [25:0] weights_all_V_offset;
input  [13:0] weights_all_ptr;
output  [13:0] ap_return_0;
output  [13:0] ap_return_1;
output  [13:0] ap_return_2;
output  [13:0] ap_return_3;
output  [13:0] ap_return_4;
output  [13:0] ap_return_5;
output  [13:0] ap_return_6;
output  [13:0] ap_return_7;
output  [13:0] ap_return_8;
output  [13:0] ap_return_9;
output  [13:0] ap_return_10;
output  [13:0] ap_return_11;
output  [13:0] ap_return_12;
output  [13:0] ap_return_13;
output  [13:0] ap_return_14;
output  [13:0] ap_return_15;
output  [13:0] ap_return_16;
output  [13:0] ap_return_17;
output  [13:0] ap_return_18;
output  [13:0] ap_return_19;
output  [13:0] ap_return_20;
output  [13:0] ap_return_21;
output  [13:0] ap_return_22;
output  [13:0] ap_return_23;
output  [13:0] ap_return_24;
output  [13:0] ap_return_25;
output  [13:0] ap_return_26;
output  [13:0] ap_return_27;
output  [13:0] ap_return_28;
output  [13:0] ap_return_29;
output  [13:0] ap_return_30;
output  [13:0] ap_return_31;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_all_V_ARVALID;
reg m_axi_weights_all_V_RREADY;
reg[13:0] ap_return_0;
reg[13:0] ap_return_1;
reg[13:0] ap_return_2;
reg[13:0] ap_return_3;
reg[13:0] ap_return_4;
reg[13:0] ap_return_5;
reg[13:0] ap_return_6;
reg[13:0] ap_return_7;
reg[13:0] ap_return_8;
reg[13:0] ap_return_9;
reg[13:0] ap_return_10;
reg[13:0] ap_return_11;
reg[13:0] ap_return_12;
reg[13:0] ap_return_13;
reg[13:0] ap_return_14;
reg[13:0] ap_return_15;
reg[13:0] ap_return_16;
reg[13:0] ap_return_17;
reg[13:0] ap_return_18;
reg[13:0] ap_return_19;
reg[13:0] ap_return_20;
reg[13:0] ap_return_21;
reg[13:0] ap_return_22;
reg[13:0] ap_return_23;
reg[13:0] ap_return_24;
reg[13:0] ap_return_25;
reg[13:0] ap_return_26;
reg[13:0] ap_return_27;
reg[13:0] ap_return_28;
reg[13:0] ap_return_29;
reg[13:0] ap_return_30;
reg[13:0] ap_return_31;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_all_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    weights_all_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln56_reg_2317;
reg   [511:0] data_pack_V_0_035_reg_226;
reg   [511:0] data_pack_V_1_033_reg_238;
reg   [1:0] i_0_reg_250;
wire   [26:0] add_ln321_fu_636_p2;
reg   [26:0] add_ln321_reg_2306;
wire   [0:0] icmp_ln56_fu_652_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln56_reg_2317_pp0_iter1_reg;
wire   [1:0] i_fu_658_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] trunc_ln321_1_fu_664_p1;
reg   [0:0] trunc_ln321_1_reg_2326;
reg   [0:0] trunc_ln321_1_reg_2326_pp0_iter1_reg;
reg   [511:0] data_pack_0_V_reg_2332;
wire   [511:0] data_pack_1_V_1_fu_668_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [511:0] data_pack_1_V_2_fu_674_p3;
wire   [1:0] i_3_fu_686_p2;
wire    ap_CS_fsm_state13;
wire   [13:0] select_ln203_fu_778_p3;
wire   [0:0] icmp_ln60_fu_680_p2;
wire   [13:0] select_ln203_1_fu_786_p3;
wire   [13:0] select_ln203_2_fu_866_p3;
wire   [13:0] select_ln203_3_fu_874_p3;
wire   [13:0] select_ln203_4_fu_954_p3;
wire   [13:0] select_ln203_5_fu_962_p3;
wire   [13:0] select_ln203_6_fu_1042_p3;
wire   [13:0] select_ln203_7_fu_1050_p3;
wire   [13:0] select_ln203_8_fu_1130_p3;
wire   [13:0] select_ln203_9_fu_1138_p3;
wire   [13:0] select_ln203_10_fu_1218_p3;
wire   [13:0] select_ln203_11_fu_1226_p3;
wire   [13:0] select_ln203_12_fu_1306_p3;
wire   [13:0] select_ln203_13_fu_1314_p3;
wire   [13:0] select_ln203_14_fu_1394_p3;
wire   [13:0] select_ln203_15_fu_1402_p3;
wire   [13:0] select_ln203_16_fu_1482_p3;
wire   [13:0] select_ln203_17_fu_1490_p3;
wire   [13:0] select_ln203_18_fu_1570_p3;
wire   [13:0] select_ln203_19_fu_1578_p3;
wire   [13:0] select_ln203_20_fu_1658_p3;
wire   [13:0] select_ln203_21_fu_1666_p3;
wire   [13:0] select_ln203_22_fu_1746_p3;
wire   [13:0] select_ln203_23_fu_1754_p3;
wire   [13:0] select_ln203_24_fu_1834_p3;
wire   [13:0] select_ln203_25_fu_1842_p3;
wire   [13:0] select_ln203_26_fu_1922_p3;
wire   [13:0] select_ln203_27_fu_1930_p3;
wire   [13:0] select_ln203_28_fu_2010_p3;
wire   [13:0] select_ln203_29_fu_2018_p3;
wire   [13:0] select_ln203_30_fu_2098_p3;
wire   [13:0] select_ln203_31_fu_2106_p3;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg   [13:0] weight_buffer_9_V_w_reg_261;
reg   [13:0] weight_buffer_10_V_s_reg_272;
reg   [13:0] weight_buffer_11_V_s_reg_283;
reg   [13:0] weight_buffer_8_V_w_reg_294;
reg   [13:0] weight_buffer_12_V_s_reg_305;
reg   [13:0] weight_buffer_13_V_s_reg_316;
reg   [13:0] weight_buffer_7_V_w_reg_327;
reg   [13:0] weight_buffer_14_V_s_reg_338;
reg   [13:0] weight_buffer_15_V_s_reg_349;
reg   [13:0] weight_buffer_6_V_w_reg_360;
reg   [13:0] weight_buffer_16_V_s_reg_371;
reg   [13:0] weight_buffer_17_V_s_reg_382;
reg   [13:0] weight_buffer_5_V_w_reg_393;
reg   [13:0] weight_buffer_18_V_s_reg_404;
reg   [13:0] weight_buffer_19_V_s_reg_415;
reg   [13:0] weight_buffer_4_V_w_reg_426;
reg   [13:0] weight_buffer_20_V_s_reg_437;
reg   [13:0] weight_buffer_21_V_s_reg_448;
reg   [13:0] weight_buffer_3_V_w_reg_459;
reg   [13:0] weight_buffer_22_V_s_reg_470;
reg   [13:0] weight_buffer_23_V_s_reg_481;
reg   [13:0] weight_buffer_2_V_w_reg_492;
reg   [13:0] weight_buffer_24_V_s_reg_503;
reg   [13:0] weight_buffer_25_V_s_reg_514;
reg   [13:0] weight_buffer_1_V_w_reg_525;
reg   [13:0] weight_buffer_26_V_s_reg_536;
reg   [13:0] weight_buffer_27_V_s_reg_547;
reg   [13:0] weight_buffer_0_V_w_reg_558;
reg   [13:0] weight_buffer_28_V_s_reg_569;
reg   [13:0] weight_buffer_29_V_s_reg_580;
reg   [13:0] weight_buffer_30_V_s_reg_591;
reg   [13:0] weight_buffer_31_V_s_reg_602;
reg   [1:0] i1_0_reg_613;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln321_4_fu_642_p1;
wire   [12:0] trunc_ln321_fu_624_p1;
wire   [26:0] zext_ln321_3_fu_632_p1;
wire   [26:0] zext_ln321_fu_628_p1;
wire   [0:0] trunc_ln647_fu_692_p1;
wire   [511:0] p_Val2_s_fu_696_p3;
wire   [0:0] tmp_12_fu_722_p3;
wire   [13:0] trunc_ln6_fu_712_p4;
wire   [13:0] zext_ln415_fu_730_p1;
wire   [13:0] add_ln415_fu_734_p2;
wire   [0:0] tmp_11_fu_704_p3;
wire   [0:0] tmp_13_fu_740_p3;
wire   [13:0] phitmp_0_fu_748_p3;
wire   [4:0] shl_ln_fu_764_p3;
wire   [0:0] icmp_ln203_fu_772_p2;
wire   [13:0] select_ln746_fu_756_p3;
wire   [0:0] tmp_15_fu_812_p3;
wire   [13:0] trunc_ln708_1_fu_802_p4;
wire   [13:0] zext_ln415_1_fu_820_p1;
wire   [13:0] add_ln415_1_fu_824_p2;
wire   [0:0] tmp_14_fu_794_p3;
wire   [0:0] tmp_16_fu_830_p3;
wire   [13:0] phitmp_1_fu_838_p3;
wire   [4:0] or_ln203_fu_854_p2;
wire   [0:0] icmp_ln203_1_fu_860_p2;
wire   [13:0] select_ln746_1_fu_846_p3;
wire   [0:0] tmp_18_fu_900_p3;
wire   [13:0] trunc_ln708_2_fu_890_p4;
wire   [13:0] zext_ln415_2_fu_908_p1;
wire   [13:0] add_ln415_2_fu_912_p2;
wire   [0:0] tmp_17_fu_882_p3;
wire   [0:0] tmp_19_fu_918_p3;
wire   [13:0] phitmp_2_fu_926_p3;
wire   [4:0] or_ln203_1_fu_942_p2;
wire   [0:0] icmp_ln203_2_fu_948_p2;
wire   [13:0] select_ln746_2_fu_934_p3;
wire   [0:0] tmp_21_fu_988_p3;
wire   [13:0] trunc_ln708_3_fu_978_p4;
wire   [13:0] zext_ln415_3_fu_996_p1;
wire   [13:0] add_ln415_3_fu_1000_p2;
wire   [0:0] tmp_20_fu_970_p3;
wire   [0:0] tmp_22_fu_1006_p3;
wire   [13:0] phitmp_3_fu_1014_p3;
wire   [4:0] or_ln203_2_fu_1030_p2;
wire   [0:0] icmp_ln203_3_fu_1036_p2;
wire   [13:0] select_ln746_3_fu_1022_p3;
wire   [0:0] tmp_24_fu_1076_p3;
wire   [13:0] trunc_ln708_4_fu_1066_p4;
wire   [13:0] zext_ln415_4_fu_1084_p1;
wire   [13:0] add_ln415_4_fu_1088_p2;
wire   [0:0] tmp_23_fu_1058_p3;
wire   [0:0] tmp_25_fu_1094_p3;
wire   [13:0] phitmp_4_fu_1102_p3;
wire   [4:0] or_ln203_3_fu_1118_p2;
wire   [0:0] icmp_ln203_4_fu_1124_p2;
wire   [13:0] select_ln746_4_fu_1110_p3;
wire   [0:0] tmp_27_fu_1164_p3;
wire   [13:0] trunc_ln708_5_fu_1154_p4;
wire   [13:0] zext_ln415_5_fu_1172_p1;
wire   [13:0] add_ln415_5_fu_1176_p2;
wire   [0:0] tmp_26_fu_1146_p3;
wire   [0:0] tmp_28_fu_1182_p3;
wire   [13:0] phitmp_5_fu_1190_p3;
wire   [4:0] or_ln203_4_fu_1206_p2;
wire   [0:0] icmp_ln203_5_fu_1212_p2;
wire   [13:0] select_ln746_5_fu_1198_p3;
wire   [0:0] tmp_30_fu_1252_p3;
wire   [13:0] trunc_ln708_6_fu_1242_p4;
wire   [13:0] zext_ln415_6_fu_1260_p1;
wire   [13:0] add_ln415_6_fu_1264_p2;
wire   [0:0] tmp_29_fu_1234_p3;
wire   [0:0] tmp_31_fu_1270_p3;
wire   [13:0] phitmp_6_fu_1278_p3;
wire   [4:0] or_ln203_5_fu_1294_p2;
wire   [0:0] icmp_ln203_6_fu_1300_p2;
wire   [13:0] select_ln746_6_fu_1286_p3;
wire   [0:0] tmp_33_fu_1340_p3;
wire   [13:0] trunc_ln708_7_fu_1330_p4;
wire   [13:0] zext_ln415_7_fu_1348_p1;
wire   [13:0] add_ln415_7_fu_1352_p2;
wire   [0:0] tmp_32_fu_1322_p3;
wire   [0:0] tmp_34_fu_1358_p3;
wire   [13:0] phitmp_7_fu_1366_p3;
wire   [4:0] or_ln203_6_fu_1382_p2;
wire   [0:0] icmp_ln203_7_fu_1388_p2;
wire   [13:0] select_ln746_7_fu_1374_p3;
wire   [0:0] tmp_36_fu_1428_p3;
wire   [13:0] trunc_ln708_8_fu_1418_p4;
wire   [13:0] zext_ln415_8_fu_1436_p1;
wire   [13:0] add_ln415_8_fu_1440_p2;
wire   [0:0] tmp_35_fu_1410_p3;
wire   [0:0] tmp_37_fu_1446_p3;
wire   [13:0] phitmp_8_fu_1454_p3;
wire   [4:0] or_ln203_7_fu_1470_p2;
wire   [0:0] icmp_ln203_8_fu_1476_p2;
wire   [13:0] select_ln746_8_fu_1462_p3;
wire   [0:0] tmp_39_fu_1516_p3;
wire   [13:0] trunc_ln708_9_fu_1506_p4;
wire   [13:0] zext_ln415_9_fu_1524_p1;
wire   [13:0] add_ln415_9_fu_1528_p2;
wire   [0:0] tmp_38_fu_1498_p3;
wire   [0:0] tmp_40_fu_1534_p3;
wire   [13:0] phitmp_9_fu_1542_p3;
wire   [4:0] or_ln203_8_fu_1558_p2;
wire   [0:0] icmp_ln203_9_fu_1564_p2;
wire   [13:0] select_ln746_9_fu_1550_p3;
wire   [0:0] tmp_42_fu_1604_p3;
wire   [13:0] trunc_ln708_s_fu_1594_p4;
wire   [13:0] zext_ln415_10_fu_1612_p1;
wire   [13:0] add_ln415_10_fu_1616_p2;
wire   [0:0] tmp_41_fu_1586_p3;
wire   [0:0] tmp_43_fu_1622_p3;
wire   [13:0] phitmp_10_fu_1630_p3;
wire   [4:0] or_ln203_9_fu_1646_p2;
wire   [0:0] icmp_ln203_10_fu_1652_p2;
wire   [13:0] select_ln746_10_fu_1638_p3;
wire   [0:0] tmp_45_fu_1692_p3;
wire   [13:0] trunc_ln708_10_fu_1682_p4;
wire   [13:0] zext_ln415_11_fu_1700_p1;
wire   [13:0] add_ln415_11_fu_1704_p2;
wire   [0:0] tmp_44_fu_1674_p3;
wire   [0:0] tmp_46_fu_1710_p3;
wire   [13:0] phitmp_11_fu_1718_p3;
wire   [4:0] or_ln203_10_fu_1734_p2;
wire   [0:0] icmp_ln203_11_fu_1740_p2;
wire   [13:0] select_ln746_11_fu_1726_p3;
wire   [0:0] tmp_48_fu_1780_p3;
wire   [13:0] trunc_ln708_11_fu_1770_p4;
wire   [13:0] zext_ln415_12_fu_1788_p1;
wire   [13:0] add_ln415_12_fu_1792_p2;
wire   [0:0] tmp_47_fu_1762_p3;
wire   [0:0] tmp_49_fu_1798_p3;
wire   [13:0] phitmp_12_fu_1806_p3;
wire   [4:0] or_ln203_11_fu_1822_p2;
wire   [0:0] icmp_ln203_12_fu_1828_p2;
wire   [13:0] select_ln746_12_fu_1814_p3;
wire   [0:0] tmp_51_fu_1868_p3;
wire   [13:0] trunc_ln708_12_fu_1858_p4;
wire   [13:0] zext_ln415_13_fu_1876_p1;
wire   [13:0] add_ln415_13_fu_1880_p2;
wire   [0:0] tmp_50_fu_1850_p3;
wire   [0:0] tmp_52_fu_1886_p3;
wire   [13:0] phitmp_13_fu_1894_p3;
wire   [4:0] or_ln203_12_fu_1910_p2;
wire   [0:0] icmp_ln203_13_fu_1916_p2;
wire   [13:0] select_ln746_13_fu_1902_p3;
wire   [0:0] tmp_54_fu_1956_p3;
wire   [13:0] trunc_ln708_13_fu_1946_p4;
wire   [13:0] zext_ln415_14_fu_1964_p1;
wire   [13:0] add_ln415_14_fu_1968_p2;
wire   [0:0] tmp_53_fu_1938_p3;
wire   [0:0] tmp_55_fu_1974_p3;
wire   [13:0] phitmp_14_fu_1982_p3;
wire   [4:0] or_ln203_13_fu_1998_p2;
wire   [0:0] icmp_ln203_14_fu_2004_p2;
wire   [13:0] select_ln746_14_fu_1990_p3;
wire   [0:0] tmp_57_fu_2044_p3;
wire   [13:0] trunc_ln708_14_fu_2034_p4;
wire   [13:0] zext_ln415_15_fu_2052_p1;
wire   [13:0] add_ln415_15_fu_2056_p2;
wire   [0:0] tmp_56_fu_2026_p3;
wire   [0:0] tmp_58_fu_2062_p3;
wire   [13:0] phitmp_15_fu_2070_p3;
wire   [4:0] or_ln203_14_fu_2086_p2;
wire   [0:0] icmp_ln203_15_fu_2092_p2;
wire   [13:0] select_ln746_15_fu_2078_p3;
reg   [13:0] ap_return_0_preg;
reg   [13:0] ap_return_1_preg;
reg   [13:0] ap_return_2_preg;
reg   [13:0] ap_return_3_preg;
reg   [13:0] ap_return_4_preg;
reg   [13:0] ap_return_5_preg;
reg   [13:0] ap_return_6_preg;
reg   [13:0] ap_return_7_preg;
reg   [13:0] ap_return_8_preg;
reg   [13:0] ap_return_9_preg;
reg   [13:0] ap_return_10_preg;
reg   [13:0] ap_return_11_preg;
reg   [13:0] ap_return_12_preg;
reg   [13:0] ap_return_13_preg;
reg   [13:0] ap_return_14_preg;
reg   [13:0] ap_return_15_preg;
reg   [13:0] ap_return_16_preg;
reg   [13:0] ap_return_17_preg;
reg   [13:0] ap_return_18_preg;
reg   [13:0] ap_return_19_preg;
reg   [13:0] ap_return_20_preg;
reg   [13:0] ap_return_21_preg;
reg   [13:0] ap_return_22_preg;
reg   [13:0] ap_return_23_preg;
reg   [13:0] ap_return_24_preg;
reg   [13:0] ap_return_25_preg;
reg   [13:0] ap_return_26_preg;
reg   [13:0] ap_return_27_preg;
reg   [13:0] ap_return_28_preg;
reg   [13:0] ap_return_29_preg;
reg   [13:0] ap_return_30_preg;
reg   [13:0] ap_return_31_preg;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_return_0_preg = 14'd0;
#0 ap_return_1_preg = 14'd0;
#0 ap_return_2_preg = 14'd0;
#0 ap_return_3_preg = 14'd0;
#0 ap_return_4_preg = 14'd0;
#0 ap_return_5_preg = 14'd0;
#0 ap_return_6_preg = 14'd0;
#0 ap_return_7_preg = 14'd0;
#0 ap_return_8_preg = 14'd0;
#0 ap_return_9_preg = 14'd0;
#0 ap_return_10_preg = 14'd0;
#0 ap_return_11_preg = 14'd0;
#0 ap_return_12_preg = 14'd0;
#0 ap_return_13_preg = 14'd0;
#0 ap_return_14_preg = 14'd0;
#0 ap_return_15_preg = 14'd0;
#0 ap_return_16_preg = 14'd0;
#0 ap_return_17_preg = 14'd0;
#0 ap_return_18_preg = 14'd0;
#0 ap_return_19_preg = 14'd0;
#0 ap_return_20_preg = 14'd0;
#0 ap_return_21_preg = 14'd0;
#0 ap_return_22_preg = 14'd0;
#0 ap_return_23_preg = 14'd0;
#0 ap_return_24_preg = 14'd0;
#0 ap_return_25_preg = 14'd0;
#0 ap_return_26_preg = 14'd0;
#0 ap_return_27_preg = 14'd0;
#0 ap_return_28_preg = 14'd0;
#0 ap_return_29_preg = 14'd0;
#0 ap_return_30_preg = 14'd0;
#0 ap_return_31_preg = 14'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_0_preg <= weight_buffer_0_V_w_reg_558;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_10_preg <= weight_buffer_10_V_s_reg_272;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_11_preg <= weight_buffer_11_V_s_reg_283;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_12_preg <= weight_buffer_12_V_s_reg_305;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_13_preg <= weight_buffer_13_V_s_reg_316;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_14_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_14_preg <= weight_buffer_14_V_s_reg_338;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_15_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_15_preg <= weight_buffer_15_V_s_reg_349;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_16_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_16_preg <= weight_buffer_16_V_s_reg_371;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_17_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_17_preg <= weight_buffer_17_V_s_reg_382;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_18_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_18_preg <= weight_buffer_18_V_s_reg_404;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_19_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_19_preg <= weight_buffer_19_V_s_reg_415;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_1_preg <= weight_buffer_1_V_w_reg_525;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_20_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_20_preg <= weight_buffer_20_V_s_reg_437;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_21_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_21_preg <= weight_buffer_21_V_s_reg_448;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_22_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_22_preg <= weight_buffer_22_V_s_reg_470;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_23_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_23_preg <= weight_buffer_23_V_s_reg_481;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_24_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_24_preg <= weight_buffer_24_V_s_reg_503;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_25_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_25_preg <= weight_buffer_25_V_s_reg_514;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_26_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_26_preg <= weight_buffer_26_V_s_reg_536;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_27_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_27_preg <= weight_buffer_27_V_s_reg_547;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_28_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_28_preg <= weight_buffer_28_V_s_reg_569;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_29_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_29_preg <= weight_buffer_29_V_s_reg_580;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_2_preg <= weight_buffer_2_V_w_reg_492;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_30_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_30_preg <= weight_buffer_30_V_s_reg_591;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_31_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_31_preg <= weight_buffer_31_V_s_reg_602;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_3_preg <= weight_buffer_3_V_w_reg_459;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_4_preg <= weight_buffer_4_V_w_reg_426;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_5_preg <= weight_buffer_5_V_w_reg_393;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_6_preg <= weight_buffer_6_V_w_reg_360;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_7_preg <= weight_buffer_7_V_w_reg_327;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_8_preg <= weight_buffer_8_V_w_reg_294;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 14'd0;
    end else begin
        if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_return_9_preg <= weight_buffer_9_V_w_reg_261;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i1_0_reg_613 <= 2'd0;
    end else if (((icmp_ln60_fu_680_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        i1_0_reg_613 <= i_3_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_652_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_250 <= i_fu_658_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_0_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln321_reg_2306 <= add_ln321_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_2317 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_pack_0_V_reg_2332 <= m_axi_weights_all_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_reg_2317_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_pack_V_0_035_reg_226 <= data_pack_1_V_1_fu_668_p3;
        data_pack_V_1_033_reg_238 <= data_pack_1_V_2_fu_674_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln56_reg_2317 <= icmp_ln56_fu_652_p2;
        icmp_ln56_reg_2317_pp0_iter1_reg <= icmp_ln56_reg_2317;
        trunc_ln321_1_reg_2326_pp0_iter1_reg <= trunc_ln321_1_reg_2326;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_652_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln321_1_reg_2326 <= trunc_ln321_1_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_680_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        weight_buffer_0_V_w_reg_558 <= select_ln203_1_fu_786_p3;
        weight_buffer_10_V_s_reg_272 <= select_ln203_20_fu_1658_p3;
        weight_buffer_11_V_s_reg_283 <= select_ln203_22_fu_1746_p3;
        weight_buffer_12_V_s_reg_305 <= select_ln203_24_fu_1834_p3;
        weight_buffer_13_V_s_reg_316 <= select_ln203_26_fu_1922_p3;
        weight_buffer_14_V_s_reg_338 <= select_ln203_28_fu_2010_p3;
        weight_buffer_15_V_s_reg_349 <= select_ln203_30_fu_2098_p3;
        weight_buffer_16_V_s_reg_371 <= select_ln203_fu_778_p3;
        weight_buffer_17_V_s_reg_382 <= select_ln203_2_fu_866_p3;
        weight_buffer_18_V_s_reg_404 <= select_ln203_4_fu_954_p3;
        weight_buffer_19_V_s_reg_415 <= select_ln203_6_fu_1042_p3;
        weight_buffer_1_V_w_reg_525 <= select_ln203_3_fu_874_p3;
        weight_buffer_20_V_s_reg_437 <= select_ln203_9_fu_1138_p3;
        weight_buffer_21_V_s_reg_448 <= select_ln203_11_fu_1226_p3;
        weight_buffer_22_V_s_reg_470 <= select_ln203_13_fu_1314_p3;
        weight_buffer_23_V_s_reg_481 <= select_ln203_15_fu_1402_p3;
        weight_buffer_24_V_s_reg_503 <= select_ln203_17_fu_1490_p3;
        weight_buffer_25_V_s_reg_514 <= select_ln203_19_fu_1578_p3;
        weight_buffer_26_V_s_reg_536 <= select_ln203_21_fu_1666_p3;
        weight_buffer_27_V_s_reg_547 <= select_ln203_23_fu_1754_p3;
        weight_buffer_28_V_s_reg_569 <= select_ln203_25_fu_1842_p3;
        weight_buffer_29_V_s_reg_580 <= select_ln203_27_fu_1930_p3;
        weight_buffer_2_V_w_reg_492 <= select_ln203_5_fu_962_p3;
        weight_buffer_30_V_s_reg_591 <= select_ln203_29_fu_2018_p3;
        weight_buffer_31_V_s_reg_602 <= select_ln203_31_fu_2106_p3;
        weight_buffer_3_V_w_reg_459 <= select_ln203_7_fu_1050_p3;
        weight_buffer_4_V_w_reg_426 <= select_ln203_8_fu_1130_p3;
        weight_buffer_5_V_w_reg_393 <= select_ln203_10_fu_1218_p3;
        weight_buffer_6_V_w_reg_360 <= select_ln203_12_fu_1306_p3;
        weight_buffer_7_V_w_reg_327 <= select_ln203_14_fu_1394_p3;
        weight_buffer_8_V_w_reg_294 <= select_ln203_16_fu_1482_p3;
        weight_buffer_9_V_w_reg_261 <= select_ln203_18_fu_1570_p3;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_652_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_0 = weight_buffer_0_V_w_reg_558;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_1 = weight_buffer_1_V_w_reg_525;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_10 = weight_buffer_10_V_s_reg_272;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_11 = weight_buffer_11_V_s_reg_283;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_12 = weight_buffer_12_V_s_reg_305;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_13 = weight_buffer_13_V_s_reg_316;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_14 = weight_buffer_14_V_s_reg_338;
    end else begin
        ap_return_14 = ap_return_14_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_15 = weight_buffer_15_V_s_reg_349;
    end else begin
        ap_return_15 = ap_return_15_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_16 = weight_buffer_16_V_s_reg_371;
    end else begin
        ap_return_16 = ap_return_16_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_17 = weight_buffer_17_V_s_reg_382;
    end else begin
        ap_return_17 = ap_return_17_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_18 = weight_buffer_18_V_s_reg_404;
    end else begin
        ap_return_18 = ap_return_18_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_19 = weight_buffer_19_V_s_reg_415;
    end else begin
        ap_return_19 = ap_return_19_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_2 = weight_buffer_2_V_w_reg_492;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_20 = weight_buffer_20_V_s_reg_437;
    end else begin
        ap_return_20 = ap_return_20_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_21 = weight_buffer_21_V_s_reg_448;
    end else begin
        ap_return_21 = ap_return_21_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_22 = weight_buffer_22_V_s_reg_470;
    end else begin
        ap_return_22 = ap_return_22_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_23 = weight_buffer_23_V_s_reg_481;
    end else begin
        ap_return_23 = ap_return_23_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_24 = weight_buffer_24_V_s_reg_503;
    end else begin
        ap_return_24 = ap_return_24_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_25 = weight_buffer_25_V_s_reg_514;
    end else begin
        ap_return_25 = ap_return_25_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_26 = weight_buffer_26_V_s_reg_536;
    end else begin
        ap_return_26 = ap_return_26_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_27 = weight_buffer_27_V_s_reg_547;
    end else begin
        ap_return_27 = ap_return_27_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_28 = weight_buffer_28_V_s_reg_569;
    end else begin
        ap_return_28 = ap_return_28_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_29 = weight_buffer_29_V_s_reg_580;
    end else begin
        ap_return_29 = ap_return_29_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_3 = weight_buffer_3_V_w_reg_459;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_30 = weight_buffer_30_V_s_reg_591;
    end else begin
        ap_return_30 = ap_return_30_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_31 = weight_buffer_31_V_s_reg_602;
    end else begin
        ap_return_31 = ap_return_31_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_4 = weight_buffer_4_V_w_reg_426;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_5 = weight_buffer_5_V_w_reg_393;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_6 = weight_buffer_6_V_w_reg_360;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_7 = weight_buffer_7_V_w_reg_327;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_8 = weight_buffer_8_V_w_reg_294;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_return_9 = weight_buffer_9_V_w_reg_261;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_weights_all_V_ARVALID = 1'b1;
    end else begin
        m_axi_weights_all_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_2317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_weights_all_V_RREADY = 1'b1;
    end else begin
        m_axi_weights_all_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        weights_all_V_blk_n_AR = m_axi_weights_all_V_ARREADY;
    end else begin
        weights_all_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln56_reg_2317 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        weights_all_V_blk_n_R = m_axi_weights_all_V_RVALID;
    end else begin
        weights_all_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_weights_all_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln56_fu_652_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln56_fu_652_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln60_fu_680_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_636_p2 = (zext_ln321_3_fu_632_p1 + zext_ln321_fu_628_p1);

assign add_ln415_10_fu_1616_p2 = (trunc_ln708_s_fu_1594_p4 + zext_ln415_10_fu_1612_p1);

assign add_ln415_11_fu_1704_p2 = (trunc_ln708_10_fu_1682_p4 + zext_ln415_11_fu_1700_p1);

assign add_ln415_12_fu_1792_p2 = (trunc_ln708_11_fu_1770_p4 + zext_ln415_12_fu_1788_p1);

assign add_ln415_13_fu_1880_p2 = (trunc_ln708_12_fu_1858_p4 + zext_ln415_13_fu_1876_p1);

assign add_ln415_14_fu_1968_p2 = (trunc_ln708_13_fu_1946_p4 + zext_ln415_14_fu_1964_p1);

assign add_ln415_15_fu_2056_p2 = (trunc_ln708_14_fu_2034_p4 + zext_ln415_15_fu_2052_p1);

assign add_ln415_1_fu_824_p2 = (trunc_ln708_1_fu_802_p4 + zext_ln415_1_fu_820_p1);

assign add_ln415_2_fu_912_p2 = (trunc_ln708_2_fu_890_p4 + zext_ln415_2_fu_908_p1);

assign add_ln415_3_fu_1000_p2 = (trunc_ln708_3_fu_978_p4 + zext_ln415_3_fu_996_p1);

assign add_ln415_4_fu_1088_p2 = (trunc_ln708_4_fu_1066_p4 + zext_ln415_4_fu_1084_p1);

assign add_ln415_5_fu_1176_p2 = (trunc_ln708_5_fu_1154_p4 + zext_ln415_5_fu_1172_p1);

assign add_ln415_6_fu_1264_p2 = (trunc_ln708_6_fu_1242_p4 + zext_ln415_6_fu_1260_p1);

assign add_ln415_7_fu_1352_p2 = (trunc_ln708_7_fu_1330_p4 + zext_ln415_7_fu_1348_p1);

assign add_ln415_8_fu_1440_p2 = (trunc_ln708_8_fu_1418_p4 + zext_ln415_8_fu_1436_p1);

assign add_ln415_9_fu_1528_p2 = (trunc_ln708_9_fu_1506_p4 + zext_ln415_9_fu_1524_p1);

assign add_ln415_fu_734_p2 = (trunc_ln6_fu_712_p4 + zext_ln415_fu_730_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln56_reg_2317 == 1'd0) & (m_axi_weights_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln56_reg_2317 == 1'd0) & (m_axi_weights_all_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((icmp_ln56_reg_2317 == 1'd0) & (m_axi_weights_all_V_RVALID == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_pack_1_V_1_fu_668_p3 = ((trunc_ln321_1_reg_2326_pp0_iter1_reg[0:0] === 1'b1) ? data_pack_V_0_035_reg_226 : data_pack_0_V_reg_2332);

assign data_pack_1_V_2_fu_674_p3 = ((trunc_ln321_1_reg_2326_pp0_iter1_reg[0:0] === 1'b1) ? data_pack_0_V_reg_2332 : data_pack_V_1_033_reg_238);

assign i_3_fu_686_p2 = (i1_0_reg_613 + 2'd1);

assign i_fu_658_p2 = (i_0_reg_250 + 2'd1);

assign icmp_ln203_10_fu_1652_p2 = ((or_ln203_9_fu_1646_p2 == 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln203_11_fu_1740_p2 = ((or_ln203_10_fu_1734_p2 == 5'd11) ? 1'b1 : 1'b0);

assign icmp_ln203_12_fu_1828_p2 = ((or_ln203_11_fu_1822_p2 == 5'd12) ? 1'b1 : 1'b0);

assign icmp_ln203_13_fu_1916_p2 = ((or_ln203_12_fu_1910_p2 == 5'd13) ? 1'b1 : 1'b0);

assign icmp_ln203_14_fu_2004_p2 = ((or_ln203_13_fu_1998_p2 == 5'd14) ? 1'b1 : 1'b0);

assign icmp_ln203_15_fu_2092_p2 = ((or_ln203_14_fu_2086_p2 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln203_1_fu_860_p2 = ((or_ln203_fu_854_p2 == 5'd1) ? 1'b1 : 1'b0);

assign icmp_ln203_2_fu_948_p2 = ((or_ln203_1_fu_942_p2 == 5'd2) ? 1'b1 : 1'b0);

assign icmp_ln203_3_fu_1036_p2 = ((or_ln203_2_fu_1030_p2 == 5'd3) ? 1'b1 : 1'b0);

assign icmp_ln203_4_fu_1124_p2 = ((or_ln203_3_fu_1118_p2 == 5'd4) ? 1'b1 : 1'b0);

assign icmp_ln203_5_fu_1212_p2 = ((or_ln203_4_fu_1206_p2 == 5'd5) ? 1'b1 : 1'b0);

assign icmp_ln203_6_fu_1300_p2 = ((or_ln203_5_fu_1294_p2 == 5'd6) ? 1'b1 : 1'b0);

assign icmp_ln203_7_fu_1388_p2 = ((or_ln203_6_fu_1382_p2 == 5'd7) ? 1'b1 : 1'b0);

assign icmp_ln203_8_fu_1476_p2 = ((or_ln203_7_fu_1470_p2 == 5'd8) ? 1'b1 : 1'b0);

assign icmp_ln203_9_fu_1564_p2 = ((or_ln203_8_fu_1558_p2 == 5'd9) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_772_p2 = ((shl_ln_fu_764_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_652_p2 = ((i_0_reg_250 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_680_p2 = ((i1_0_reg_613 == 2'd2) ? 1'b1 : 1'b0);

assign m_axi_weights_all_V_ARADDR = zext_ln321_4_fu_642_p1;

assign m_axi_weights_all_V_ARBURST = 2'd0;

assign m_axi_weights_all_V_ARCACHE = 4'd0;

assign m_axi_weights_all_V_ARID = 1'd0;

assign m_axi_weights_all_V_ARLEN = 32'd2;

assign m_axi_weights_all_V_ARLOCK = 2'd0;

assign m_axi_weights_all_V_ARPROT = 3'd0;

assign m_axi_weights_all_V_ARQOS = 4'd0;

assign m_axi_weights_all_V_ARREGION = 4'd0;

assign m_axi_weights_all_V_ARSIZE = 3'd0;

assign m_axi_weights_all_V_ARUSER = 1'd0;

assign m_axi_weights_all_V_AWADDR = 32'd0;

assign m_axi_weights_all_V_AWBURST = 2'd0;

assign m_axi_weights_all_V_AWCACHE = 4'd0;

assign m_axi_weights_all_V_AWID = 1'd0;

assign m_axi_weights_all_V_AWLEN = 32'd0;

assign m_axi_weights_all_V_AWLOCK = 2'd0;

assign m_axi_weights_all_V_AWPROT = 3'd0;

assign m_axi_weights_all_V_AWQOS = 4'd0;

assign m_axi_weights_all_V_AWREGION = 4'd0;

assign m_axi_weights_all_V_AWSIZE = 3'd0;

assign m_axi_weights_all_V_AWUSER = 1'd0;

assign m_axi_weights_all_V_AWVALID = 1'b0;

assign m_axi_weights_all_V_BREADY = 1'b0;

assign m_axi_weights_all_V_WDATA = 512'd0;

assign m_axi_weights_all_V_WID = 1'd0;

assign m_axi_weights_all_V_WLAST = 1'b0;

assign m_axi_weights_all_V_WSTRB = 64'd0;

assign m_axi_weights_all_V_WUSER = 1'd0;

assign m_axi_weights_all_V_WVALID = 1'b0;

assign or_ln203_10_fu_1734_p2 = (shl_ln_fu_764_p3 | 5'd11);

assign or_ln203_11_fu_1822_p2 = (shl_ln_fu_764_p3 | 5'd12);

assign or_ln203_12_fu_1910_p2 = (shl_ln_fu_764_p3 | 5'd13);

assign or_ln203_13_fu_1998_p2 = (shl_ln_fu_764_p3 | 5'd14);

assign or_ln203_14_fu_2086_p2 = (shl_ln_fu_764_p3 | 5'd15);

assign or_ln203_1_fu_942_p2 = (shl_ln_fu_764_p3 | 5'd2);

assign or_ln203_2_fu_1030_p2 = (shl_ln_fu_764_p3 | 5'd3);

assign or_ln203_3_fu_1118_p2 = (shl_ln_fu_764_p3 | 5'd4);

assign or_ln203_4_fu_1206_p2 = (shl_ln_fu_764_p3 | 5'd5);

assign or_ln203_5_fu_1294_p2 = (shl_ln_fu_764_p3 | 5'd6);

assign or_ln203_6_fu_1382_p2 = (shl_ln_fu_764_p3 | 5'd7);

assign or_ln203_7_fu_1470_p2 = (shl_ln_fu_764_p3 | 5'd8);

assign or_ln203_8_fu_1558_p2 = (shl_ln_fu_764_p3 | 5'd9);

assign or_ln203_9_fu_1646_p2 = (shl_ln_fu_764_p3 | 5'd10);

assign or_ln203_fu_854_p2 = (shl_ln_fu_764_p3 | 5'd1);

assign p_Val2_s_fu_696_p3 = ((trunc_ln647_fu_692_p1[0:0] === 1'b1) ? data_pack_V_1_033_reg_238 : data_pack_V_0_035_reg_226);

assign phitmp_0_fu_748_p3 = ((tmp_11_fu_704_p3[0:0] === 1'b1) ? add_ln415_fu_734_p2 : 14'd8191);

assign phitmp_10_fu_1630_p3 = ((tmp_41_fu_1586_p3[0:0] === 1'b1) ? add_ln415_10_fu_1616_p2 : 14'd8191);

assign phitmp_11_fu_1718_p3 = ((tmp_44_fu_1674_p3[0:0] === 1'b1) ? add_ln415_11_fu_1704_p2 : 14'd8191);

assign phitmp_12_fu_1806_p3 = ((tmp_47_fu_1762_p3[0:0] === 1'b1) ? add_ln415_12_fu_1792_p2 : 14'd8191);

assign phitmp_13_fu_1894_p3 = ((tmp_50_fu_1850_p3[0:0] === 1'b1) ? add_ln415_13_fu_1880_p2 : 14'd8191);

assign phitmp_14_fu_1982_p3 = ((tmp_53_fu_1938_p3[0:0] === 1'b1) ? add_ln415_14_fu_1968_p2 : 14'd8191);

assign phitmp_15_fu_2070_p3 = ((tmp_56_fu_2026_p3[0:0] === 1'b1) ? add_ln415_15_fu_2056_p2 : 14'd8191);

assign phitmp_1_fu_838_p3 = ((tmp_14_fu_794_p3[0:0] === 1'b1) ? add_ln415_1_fu_824_p2 : 14'd8191);

assign phitmp_2_fu_926_p3 = ((tmp_17_fu_882_p3[0:0] === 1'b1) ? add_ln415_2_fu_912_p2 : 14'd8191);

assign phitmp_3_fu_1014_p3 = ((tmp_20_fu_970_p3[0:0] === 1'b1) ? add_ln415_3_fu_1000_p2 : 14'd8191);

assign phitmp_4_fu_1102_p3 = ((tmp_23_fu_1058_p3[0:0] === 1'b1) ? add_ln415_4_fu_1088_p2 : 14'd8191);

assign phitmp_5_fu_1190_p3 = ((tmp_26_fu_1146_p3[0:0] === 1'b1) ? add_ln415_5_fu_1176_p2 : 14'd8191);

assign phitmp_6_fu_1278_p3 = ((tmp_29_fu_1234_p3[0:0] === 1'b1) ? add_ln415_6_fu_1264_p2 : 14'd8191);

assign phitmp_7_fu_1366_p3 = ((tmp_32_fu_1322_p3[0:0] === 1'b1) ? add_ln415_7_fu_1352_p2 : 14'd8191);

assign phitmp_8_fu_1454_p3 = ((tmp_35_fu_1410_p3[0:0] === 1'b1) ? add_ln415_8_fu_1440_p2 : 14'd8191);

assign phitmp_9_fu_1542_p3 = ((tmp_38_fu_1498_p3[0:0] === 1'b1) ? add_ln415_9_fu_1528_p2 : 14'd8191);

assign select_ln203_10_fu_1218_p3 = ((icmp_ln203_5_fu_1212_p2[0:0] === 1'b1) ? select_ln746_5_fu_1198_p3 : weight_buffer_5_V_w_reg_393);

assign select_ln203_11_fu_1226_p3 = ((icmp_ln203_5_fu_1212_p2[0:0] === 1'b1) ? weight_buffer_21_V_s_reg_448 : select_ln746_5_fu_1198_p3);

assign select_ln203_12_fu_1306_p3 = ((icmp_ln203_6_fu_1300_p2[0:0] === 1'b1) ? select_ln746_6_fu_1286_p3 : weight_buffer_6_V_w_reg_360);

assign select_ln203_13_fu_1314_p3 = ((icmp_ln203_6_fu_1300_p2[0:0] === 1'b1) ? weight_buffer_22_V_s_reg_470 : select_ln746_6_fu_1286_p3);

assign select_ln203_14_fu_1394_p3 = ((icmp_ln203_7_fu_1388_p2[0:0] === 1'b1) ? select_ln746_7_fu_1374_p3 : weight_buffer_7_V_w_reg_327);

assign select_ln203_15_fu_1402_p3 = ((icmp_ln203_7_fu_1388_p2[0:0] === 1'b1) ? weight_buffer_23_V_s_reg_481 : select_ln746_7_fu_1374_p3);

assign select_ln203_16_fu_1482_p3 = ((icmp_ln203_8_fu_1476_p2[0:0] === 1'b1) ? select_ln746_8_fu_1462_p3 : weight_buffer_8_V_w_reg_294);

assign select_ln203_17_fu_1490_p3 = ((icmp_ln203_8_fu_1476_p2[0:0] === 1'b1) ? weight_buffer_24_V_s_reg_503 : select_ln746_8_fu_1462_p3);

assign select_ln203_18_fu_1570_p3 = ((icmp_ln203_9_fu_1564_p2[0:0] === 1'b1) ? select_ln746_9_fu_1550_p3 : weight_buffer_9_V_w_reg_261);

assign select_ln203_19_fu_1578_p3 = ((icmp_ln203_9_fu_1564_p2[0:0] === 1'b1) ? weight_buffer_25_V_s_reg_514 : select_ln746_9_fu_1550_p3);

assign select_ln203_1_fu_786_p3 = ((icmp_ln203_fu_772_p2[0:0] === 1'b1) ? select_ln746_fu_756_p3 : weight_buffer_0_V_w_reg_558);

assign select_ln203_20_fu_1658_p3 = ((icmp_ln203_10_fu_1652_p2[0:0] === 1'b1) ? select_ln746_10_fu_1638_p3 : weight_buffer_10_V_s_reg_272);

assign select_ln203_21_fu_1666_p3 = ((icmp_ln203_10_fu_1652_p2[0:0] === 1'b1) ? weight_buffer_26_V_s_reg_536 : select_ln746_10_fu_1638_p3);

assign select_ln203_22_fu_1746_p3 = ((icmp_ln203_11_fu_1740_p2[0:0] === 1'b1) ? select_ln746_11_fu_1726_p3 : weight_buffer_11_V_s_reg_283);

assign select_ln203_23_fu_1754_p3 = ((icmp_ln203_11_fu_1740_p2[0:0] === 1'b1) ? weight_buffer_27_V_s_reg_547 : select_ln746_11_fu_1726_p3);

assign select_ln203_24_fu_1834_p3 = ((icmp_ln203_12_fu_1828_p2[0:0] === 1'b1) ? select_ln746_12_fu_1814_p3 : weight_buffer_12_V_s_reg_305);

assign select_ln203_25_fu_1842_p3 = ((icmp_ln203_12_fu_1828_p2[0:0] === 1'b1) ? weight_buffer_28_V_s_reg_569 : select_ln746_12_fu_1814_p3);

assign select_ln203_26_fu_1922_p3 = ((icmp_ln203_13_fu_1916_p2[0:0] === 1'b1) ? select_ln746_13_fu_1902_p3 : weight_buffer_13_V_s_reg_316);

assign select_ln203_27_fu_1930_p3 = ((icmp_ln203_13_fu_1916_p2[0:0] === 1'b1) ? weight_buffer_29_V_s_reg_580 : select_ln746_13_fu_1902_p3);

assign select_ln203_28_fu_2010_p3 = ((icmp_ln203_14_fu_2004_p2[0:0] === 1'b1) ? select_ln746_14_fu_1990_p3 : weight_buffer_14_V_s_reg_338);

assign select_ln203_29_fu_2018_p3 = ((icmp_ln203_14_fu_2004_p2[0:0] === 1'b1) ? weight_buffer_30_V_s_reg_591 : select_ln746_14_fu_1990_p3);

assign select_ln203_2_fu_866_p3 = ((icmp_ln203_1_fu_860_p2[0:0] === 1'b1) ? weight_buffer_17_V_s_reg_382 : select_ln746_1_fu_846_p3);

assign select_ln203_30_fu_2098_p3 = ((icmp_ln203_15_fu_2092_p2[0:0] === 1'b1) ? select_ln746_15_fu_2078_p3 : weight_buffer_15_V_s_reg_349);

assign select_ln203_31_fu_2106_p3 = ((icmp_ln203_15_fu_2092_p2[0:0] === 1'b1) ? weight_buffer_31_V_s_reg_602 : select_ln746_15_fu_2078_p3);

assign select_ln203_3_fu_874_p3 = ((icmp_ln203_1_fu_860_p2[0:0] === 1'b1) ? select_ln746_1_fu_846_p3 : weight_buffer_1_V_w_reg_525);

assign select_ln203_4_fu_954_p3 = ((icmp_ln203_2_fu_948_p2[0:0] === 1'b1) ? weight_buffer_18_V_s_reg_404 : select_ln746_2_fu_934_p3);

assign select_ln203_5_fu_962_p3 = ((icmp_ln203_2_fu_948_p2[0:0] === 1'b1) ? select_ln746_2_fu_934_p3 : weight_buffer_2_V_w_reg_492);

assign select_ln203_6_fu_1042_p3 = ((icmp_ln203_3_fu_1036_p2[0:0] === 1'b1) ? weight_buffer_19_V_s_reg_415 : select_ln746_3_fu_1022_p3);

assign select_ln203_7_fu_1050_p3 = ((icmp_ln203_3_fu_1036_p2[0:0] === 1'b1) ? select_ln746_3_fu_1022_p3 : weight_buffer_3_V_w_reg_459);

assign select_ln203_8_fu_1130_p3 = ((icmp_ln203_4_fu_1124_p2[0:0] === 1'b1) ? select_ln746_4_fu_1110_p3 : weight_buffer_4_V_w_reg_426);

assign select_ln203_9_fu_1138_p3 = ((icmp_ln203_4_fu_1124_p2[0:0] === 1'b1) ? weight_buffer_20_V_s_reg_437 : select_ln746_4_fu_1110_p3);

assign select_ln203_fu_778_p3 = ((icmp_ln203_fu_772_p2[0:0] === 1'b1) ? weight_buffer_16_V_s_reg_371 : select_ln746_fu_756_p3);

assign select_ln746_10_fu_1638_p3 = ((tmp_43_fu_1622_p3[0:0] === 1'b1) ? phitmp_10_fu_1630_p3 : add_ln415_10_fu_1616_p2);

assign select_ln746_11_fu_1726_p3 = ((tmp_46_fu_1710_p3[0:0] === 1'b1) ? phitmp_11_fu_1718_p3 : add_ln415_11_fu_1704_p2);

assign select_ln746_12_fu_1814_p3 = ((tmp_49_fu_1798_p3[0:0] === 1'b1) ? phitmp_12_fu_1806_p3 : add_ln415_12_fu_1792_p2);

assign select_ln746_13_fu_1902_p3 = ((tmp_52_fu_1886_p3[0:0] === 1'b1) ? phitmp_13_fu_1894_p3 : add_ln415_13_fu_1880_p2);

assign select_ln746_14_fu_1990_p3 = ((tmp_55_fu_1974_p3[0:0] === 1'b1) ? phitmp_14_fu_1982_p3 : add_ln415_14_fu_1968_p2);

assign select_ln746_15_fu_2078_p3 = ((tmp_58_fu_2062_p3[0:0] === 1'b1) ? phitmp_15_fu_2070_p3 : add_ln415_15_fu_2056_p2);

assign select_ln746_1_fu_846_p3 = ((tmp_16_fu_830_p3[0:0] === 1'b1) ? phitmp_1_fu_838_p3 : add_ln415_1_fu_824_p2);

assign select_ln746_2_fu_934_p3 = ((tmp_19_fu_918_p3[0:0] === 1'b1) ? phitmp_2_fu_926_p3 : add_ln415_2_fu_912_p2);

assign select_ln746_3_fu_1022_p3 = ((tmp_22_fu_1006_p3[0:0] === 1'b1) ? phitmp_3_fu_1014_p3 : add_ln415_3_fu_1000_p2);

assign select_ln746_4_fu_1110_p3 = ((tmp_25_fu_1094_p3[0:0] === 1'b1) ? phitmp_4_fu_1102_p3 : add_ln415_4_fu_1088_p2);

assign select_ln746_5_fu_1198_p3 = ((tmp_28_fu_1182_p3[0:0] === 1'b1) ? phitmp_5_fu_1190_p3 : add_ln415_5_fu_1176_p2);

assign select_ln746_6_fu_1286_p3 = ((tmp_31_fu_1270_p3[0:0] === 1'b1) ? phitmp_6_fu_1278_p3 : add_ln415_6_fu_1264_p2);

assign select_ln746_7_fu_1374_p3 = ((tmp_34_fu_1358_p3[0:0] === 1'b1) ? phitmp_7_fu_1366_p3 : add_ln415_7_fu_1352_p2);

assign select_ln746_8_fu_1462_p3 = ((tmp_37_fu_1446_p3[0:0] === 1'b1) ? phitmp_8_fu_1454_p3 : add_ln415_8_fu_1440_p2);

assign select_ln746_9_fu_1550_p3 = ((tmp_40_fu_1534_p3[0:0] === 1'b1) ? phitmp_9_fu_1542_p3 : add_ln415_9_fu_1528_p2);

assign select_ln746_fu_756_p3 = ((tmp_13_fu_740_p3[0:0] === 1'b1) ? phitmp_0_fu_748_p3 : add_ln415_fu_734_p2);

assign shl_ln_fu_764_p3 = {{trunc_ln647_fu_692_p1}, {4'd0}};

assign tmp_11_fu_704_p3 = p_Val2_s_fu_696_p3[32'd31];

assign tmp_12_fu_722_p3 = p_Val2_s_fu_696_p3[32'd17];

assign tmp_13_fu_740_p3 = add_ln415_fu_734_p2[32'd13];

assign tmp_14_fu_794_p3 = p_Val2_s_fu_696_p3[32'd63];

assign tmp_15_fu_812_p3 = p_Val2_s_fu_696_p3[32'd49];

assign tmp_16_fu_830_p3 = add_ln415_1_fu_824_p2[32'd13];

assign tmp_17_fu_882_p3 = p_Val2_s_fu_696_p3[32'd95];

assign tmp_18_fu_900_p3 = p_Val2_s_fu_696_p3[32'd81];

assign tmp_19_fu_918_p3 = add_ln415_2_fu_912_p2[32'd13];

assign tmp_20_fu_970_p3 = p_Val2_s_fu_696_p3[32'd127];

assign tmp_21_fu_988_p3 = p_Val2_s_fu_696_p3[32'd113];

assign tmp_22_fu_1006_p3 = add_ln415_3_fu_1000_p2[32'd13];

assign tmp_23_fu_1058_p3 = p_Val2_s_fu_696_p3[32'd159];

assign tmp_24_fu_1076_p3 = p_Val2_s_fu_696_p3[32'd145];

assign tmp_25_fu_1094_p3 = add_ln415_4_fu_1088_p2[32'd13];

assign tmp_26_fu_1146_p3 = p_Val2_s_fu_696_p3[32'd191];

assign tmp_27_fu_1164_p3 = p_Val2_s_fu_696_p3[32'd177];

assign tmp_28_fu_1182_p3 = add_ln415_5_fu_1176_p2[32'd13];

assign tmp_29_fu_1234_p3 = p_Val2_s_fu_696_p3[32'd223];

assign tmp_30_fu_1252_p3 = p_Val2_s_fu_696_p3[32'd209];

assign tmp_31_fu_1270_p3 = add_ln415_6_fu_1264_p2[32'd13];

assign tmp_32_fu_1322_p3 = p_Val2_s_fu_696_p3[32'd255];

assign tmp_33_fu_1340_p3 = p_Val2_s_fu_696_p3[32'd241];

assign tmp_34_fu_1358_p3 = add_ln415_7_fu_1352_p2[32'd13];

assign tmp_35_fu_1410_p3 = p_Val2_s_fu_696_p3[32'd287];

assign tmp_36_fu_1428_p3 = p_Val2_s_fu_696_p3[32'd273];

assign tmp_37_fu_1446_p3 = add_ln415_8_fu_1440_p2[32'd13];

assign tmp_38_fu_1498_p3 = p_Val2_s_fu_696_p3[32'd319];

assign tmp_39_fu_1516_p3 = p_Val2_s_fu_696_p3[32'd305];

assign tmp_40_fu_1534_p3 = add_ln415_9_fu_1528_p2[32'd13];

assign tmp_41_fu_1586_p3 = p_Val2_s_fu_696_p3[32'd351];

assign tmp_42_fu_1604_p3 = p_Val2_s_fu_696_p3[32'd337];

assign tmp_43_fu_1622_p3 = add_ln415_10_fu_1616_p2[32'd13];

assign tmp_44_fu_1674_p3 = p_Val2_s_fu_696_p3[32'd383];

assign tmp_45_fu_1692_p3 = p_Val2_s_fu_696_p3[32'd369];

assign tmp_46_fu_1710_p3 = add_ln415_11_fu_1704_p2[32'd13];

assign tmp_47_fu_1762_p3 = p_Val2_s_fu_696_p3[32'd415];

assign tmp_48_fu_1780_p3 = p_Val2_s_fu_696_p3[32'd401];

assign tmp_49_fu_1798_p3 = add_ln415_12_fu_1792_p2[32'd13];

assign tmp_50_fu_1850_p3 = p_Val2_s_fu_696_p3[32'd447];

assign tmp_51_fu_1868_p3 = p_Val2_s_fu_696_p3[32'd433];

assign tmp_52_fu_1886_p3 = add_ln415_13_fu_1880_p2[32'd13];

assign tmp_53_fu_1938_p3 = p_Val2_s_fu_696_p3[32'd479];

assign tmp_54_fu_1956_p3 = p_Val2_s_fu_696_p3[32'd465];

assign tmp_55_fu_1974_p3 = add_ln415_14_fu_1968_p2[32'd13];

assign tmp_56_fu_2026_p3 = p_Val2_s_fu_696_p3[32'd511];

assign tmp_57_fu_2044_p3 = p_Val2_s_fu_696_p3[32'd497];

assign tmp_58_fu_2062_p3 = add_ln415_15_fu_2056_p2[32'd13];

assign trunc_ln321_1_fu_664_p1 = i_0_reg_250[0:0];

assign trunc_ln321_fu_624_p1 = weights_all_ptr[12:0];

assign trunc_ln647_fu_692_p1 = i1_0_reg_613[0:0];

assign trunc_ln6_fu_712_p4 = {{p_Val2_s_fu_696_p3[31:18]}};

assign trunc_ln708_10_fu_1682_p4 = {{p_Val2_s_fu_696_p3[383:370]}};

assign trunc_ln708_11_fu_1770_p4 = {{p_Val2_s_fu_696_p3[415:402]}};

assign trunc_ln708_12_fu_1858_p4 = {{p_Val2_s_fu_696_p3[447:434]}};

assign trunc_ln708_13_fu_1946_p4 = {{p_Val2_s_fu_696_p3[479:466]}};

assign trunc_ln708_14_fu_2034_p4 = {{p_Val2_s_fu_696_p3[511:498]}};

assign trunc_ln708_1_fu_802_p4 = {{p_Val2_s_fu_696_p3[63:50]}};

assign trunc_ln708_2_fu_890_p4 = {{p_Val2_s_fu_696_p3[95:82]}};

assign trunc_ln708_3_fu_978_p4 = {{p_Val2_s_fu_696_p3[127:114]}};

assign trunc_ln708_4_fu_1066_p4 = {{p_Val2_s_fu_696_p3[159:146]}};

assign trunc_ln708_5_fu_1154_p4 = {{p_Val2_s_fu_696_p3[191:178]}};

assign trunc_ln708_6_fu_1242_p4 = {{p_Val2_s_fu_696_p3[223:210]}};

assign trunc_ln708_7_fu_1330_p4 = {{p_Val2_s_fu_696_p3[255:242]}};

assign trunc_ln708_8_fu_1418_p4 = {{p_Val2_s_fu_696_p3[287:274]}};

assign trunc_ln708_9_fu_1506_p4 = {{p_Val2_s_fu_696_p3[319:306]}};

assign trunc_ln708_s_fu_1594_p4 = {{p_Val2_s_fu_696_p3[351:338]}};

assign zext_ln321_3_fu_632_p1 = weights_all_V_offset;

assign zext_ln321_4_fu_642_p1 = add_ln321_reg_2306;

assign zext_ln321_fu_628_p1 = trunc_ln321_fu_624_p1;

assign zext_ln415_10_fu_1612_p1 = tmp_42_fu_1604_p3;

assign zext_ln415_11_fu_1700_p1 = tmp_45_fu_1692_p3;

assign zext_ln415_12_fu_1788_p1 = tmp_48_fu_1780_p3;

assign zext_ln415_13_fu_1876_p1 = tmp_51_fu_1868_p3;

assign zext_ln415_14_fu_1964_p1 = tmp_54_fu_1956_p3;

assign zext_ln415_15_fu_2052_p1 = tmp_57_fu_2044_p3;

assign zext_ln415_1_fu_820_p1 = tmp_15_fu_812_p3;

assign zext_ln415_2_fu_908_p1 = tmp_18_fu_900_p3;

assign zext_ln415_3_fu_996_p1 = tmp_21_fu_988_p3;

assign zext_ln415_4_fu_1084_p1 = tmp_24_fu_1076_p3;

assign zext_ln415_5_fu_1172_p1 = tmp_27_fu_1164_p3;

assign zext_ln415_6_fu_1260_p1 = tmp_30_fu_1252_p3;

assign zext_ln415_7_fu_1348_p1 = tmp_33_fu_1340_p3;

assign zext_ln415_8_fu_1436_p1 = tmp_36_fu_1428_p3;

assign zext_ln415_9_fu_1524_p1 = tmp_39_fu_1516_p3;

assign zext_ln415_fu_730_p1 = tmp_12_fu_722_p3;

endmodule //load_1D_weights
