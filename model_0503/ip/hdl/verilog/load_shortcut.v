// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_shortcut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_buf_sc_0_V_address0,
        out_buf_sc_0_V_ce0,
        out_buf_sc_0_V_we0,
        out_buf_sc_0_V_d0,
        out_buf_sc_1_V_address0,
        out_buf_sc_1_V_ce0,
        out_buf_sc_1_V_we0,
        out_buf_sc_1_V_d0,
        out_buf_sc_2_V_address0,
        out_buf_sc_2_V_ce0,
        out_buf_sc_2_V_we0,
        out_buf_sc_2_V_d0,
        out_buf_sc_3_V_address0,
        out_buf_sc_3_V_ce0,
        out_buf_sc_3_V_we0,
        out_buf_sc_3_V_d0,
        out_buf_sc_4_V_address0,
        out_buf_sc_4_V_ce0,
        out_buf_sc_4_V_we0,
        out_buf_sc_4_V_d0,
        out_buf_sc_5_V_address0,
        out_buf_sc_5_V_ce0,
        out_buf_sc_5_V_we0,
        out_buf_sc_5_V_d0,
        out_buf_sc_6_V_address0,
        out_buf_sc_6_V_ce0,
        out_buf_sc_6_V_we0,
        out_buf_sc_6_V_d0,
        out_buf_sc_7_V_address0,
        out_buf_sc_7_V_ce0,
        out_buf_sc_7_V_we0,
        out_buf_sc_7_V_d0,
        out_buf_sc_8_V_address0,
        out_buf_sc_8_V_ce0,
        out_buf_sc_8_V_we0,
        out_buf_sc_8_V_d0,
        out_buf_sc_9_V_address0,
        out_buf_sc_9_V_ce0,
        out_buf_sc_9_V_we0,
        out_buf_sc_9_V_d0,
        out_buf_sc_10_V_address0,
        out_buf_sc_10_V_ce0,
        out_buf_sc_10_V_we0,
        out_buf_sc_10_V_d0,
        out_buf_sc_11_V_address0,
        out_buf_sc_11_V_ce0,
        out_buf_sc_11_V_we0,
        out_buf_sc_11_V_d0,
        out_buf_sc_12_V_address0,
        out_buf_sc_12_V_ce0,
        out_buf_sc_12_V_we0,
        out_buf_sc_12_V_d0,
        out_buf_sc_13_V_address0,
        out_buf_sc_13_V_ce0,
        out_buf_sc_13_V_we0,
        out_buf_sc_13_V_d0,
        out_buf_sc_14_V_address0,
        out_buf_sc_14_V_ce0,
        out_buf_sc_14_V_we0,
        out_buf_sc_14_V_d0,
        out_buf_sc_15_V_address0,
        out_buf_sc_15_V_ce0,
        out_buf_sc_15_V_we0,
        out_buf_sc_15_V_d0,
        out_buf_sc_16_V_address0,
        out_buf_sc_16_V_ce0,
        out_buf_sc_16_V_we0,
        out_buf_sc_16_V_d0,
        out_buf_sc_17_V_address0,
        out_buf_sc_17_V_ce0,
        out_buf_sc_17_V_we0,
        out_buf_sc_17_V_d0,
        out_buf_sc_18_V_address0,
        out_buf_sc_18_V_ce0,
        out_buf_sc_18_V_we0,
        out_buf_sc_18_V_d0,
        out_buf_sc_19_V_address0,
        out_buf_sc_19_V_ce0,
        out_buf_sc_19_V_we0,
        out_buf_sc_19_V_d0,
        out_buf_sc_20_V_address0,
        out_buf_sc_20_V_ce0,
        out_buf_sc_20_V_we0,
        out_buf_sc_20_V_d0,
        out_buf_sc_21_V_address0,
        out_buf_sc_21_V_ce0,
        out_buf_sc_21_V_we0,
        out_buf_sc_21_V_d0,
        out_buf_sc_22_V_address0,
        out_buf_sc_22_V_ce0,
        out_buf_sc_22_V_we0,
        out_buf_sc_22_V_d0,
        out_buf_sc_23_V_address0,
        out_buf_sc_23_V_ce0,
        out_buf_sc_23_V_we0,
        out_buf_sc_23_V_d0,
        out_buf_sc_24_V_address0,
        out_buf_sc_24_V_ce0,
        out_buf_sc_24_V_we0,
        out_buf_sc_24_V_d0,
        out_buf_sc_25_V_address0,
        out_buf_sc_25_V_ce0,
        out_buf_sc_25_V_we0,
        out_buf_sc_25_V_d0,
        out_buf_sc_26_V_address0,
        out_buf_sc_26_V_ce0,
        out_buf_sc_26_V_we0,
        out_buf_sc_26_V_d0,
        out_buf_sc_27_V_address0,
        out_buf_sc_27_V_ce0,
        out_buf_sc_27_V_we0,
        out_buf_sc_27_V_d0,
        out_buf_sc_28_V_address0,
        out_buf_sc_28_V_ce0,
        out_buf_sc_28_V_we0,
        out_buf_sc_28_V_d0,
        out_buf_sc_29_V_address0,
        out_buf_sc_29_V_ce0,
        out_buf_sc_29_V_we0,
        out_buf_sc_29_V_d0,
        out_buf_sc_30_V_address0,
        out_buf_sc_30_V_ce0,
        out_buf_sc_30_V_we0,
        out_buf_sc_30_V_d0,
        out_buf_sc_31_V_address0,
        out_buf_sc_31_V_ce0,
        out_buf_sc_31_V_we0,
        out_buf_sc_31_V_d0,
        m_axi_DDR_buf_V_AWVALID,
        m_axi_DDR_buf_V_AWREADY,
        m_axi_DDR_buf_V_AWADDR,
        m_axi_DDR_buf_V_AWID,
        m_axi_DDR_buf_V_AWLEN,
        m_axi_DDR_buf_V_AWSIZE,
        m_axi_DDR_buf_V_AWBURST,
        m_axi_DDR_buf_V_AWLOCK,
        m_axi_DDR_buf_V_AWCACHE,
        m_axi_DDR_buf_V_AWPROT,
        m_axi_DDR_buf_V_AWQOS,
        m_axi_DDR_buf_V_AWREGION,
        m_axi_DDR_buf_V_AWUSER,
        m_axi_DDR_buf_V_WVALID,
        m_axi_DDR_buf_V_WREADY,
        m_axi_DDR_buf_V_WDATA,
        m_axi_DDR_buf_V_WSTRB,
        m_axi_DDR_buf_V_WLAST,
        m_axi_DDR_buf_V_WID,
        m_axi_DDR_buf_V_WUSER,
        m_axi_DDR_buf_V_ARVALID,
        m_axi_DDR_buf_V_ARREADY,
        m_axi_DDR_buf_V_ARADDR,
        m_axi_DDR_buf_V_ARID,
        m_axi_DDR_buf_V_ARLEN,
        m_axi_DDR_buf_V_ARSIZE,
        m_axi_DDR_buf_V_ARBURST,
        m_axi_DDR_buf_V_ARLOCK,
        m_axi_DDR_buf_V_ARCACHE,
        m_axi_DDR_buf_V_ARPROT,
        m_axi_DDR_buf_V_ARQOS,
        m_axi_DDR_buf_V_ARREGION,
        m_axi_DDR_buf_V_ARUSER,
        m_axi_DDR_buf_V_RVALID,
        m_axi_DDR_buf_V_RREADY,
        m_axi_DDR_buf_V_RDATA,
        m_axi_DDR_buf_V_RLAST,
        m_axi_DDR_buf_V_RID,
        m_axi_DDR_buf_V_RUSER,
        m_axi_DDR_buf_V_RRESP,
        m_axi_DDR_buf_V_BVALID,
        m_axi_DDR_buf_V_BREADY,
        m_axi_DDR_buf_V_BRESP,
        m_axi_DDR_buf_V_BID,
        m_axi_DDR_buf_V_BUSER,
        DDR_buf_V_offset,
        H_fmap_out,
        in_channels,
        out_channel_start,
        row_tile_start,
        switch_bank,
        ddr_stage_V_address0,
        ddr_stage_V_ce0,
        ddr_stage_V_we0,
        ddr_stage_V_d0,
        ddr_stage_V_q0,
        ddr_tmp_V_0_address0,
        ddr_tmp_V_0_ce0,
        ddr_tmp_V_0_we0,
        ddr_tmp_V_0_d0,
        ddr_tmp_V_0_q0,
        ddr_tmp_V_1_address0,
        ddr_tmp_V_1_ce0,
        ddr_tmp_V_1_we0,
        ddr_tmp_V_1_d0,
        ddr_tmp_V_1_q0,
        ddr_tmp_V_2_address0,
        ddr_tmp_V_2_ce0,
        ddr_tmp_V_2_we0,
        ddr_tmp_V_2_d0,
        ddr_tmp_V_2_q0,
        ddr_tmp_V_3_address0,
        ddr_tmp_V_3_ce0,
        ddr_tmp_V_3_we0,
        ddr_tmp_V_3_d0,
        ddr_tmp_V_3_q0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_pp0_stage0 = 21'd32768;
parameter    ap_ST_fsm_state19 = 21'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 21'd131072;
parameter    ap_ST_fsm_state24 = 21'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 21'd524288;
parameter    ap_ST_fsm_state30 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] out_buf_sc_0_V_address0;
output   out_buf_sc_0_V_ce0;
output   out_buf_sc_0_V_we0;
output  [3:0] out_buf_sc_0_V_d0;
output  [9:0] out_buf_sc_1_V_address0;
output   out_buf_sc_1_V_ce0;
output   out_buf_sc_1_V_we0;
output  [3:0] out_buf_sc_1_V_d0;
output  [9:0] out_buf_sc_2_V_address0;
output   out_buf_sc_2_V_ce0;
output   out_buf_sc_2_V_we0;
output  [3:0] out_buf_sc_2_V_d0;
output  [9:0] out_buf_sc_3_V_address0;
output   out_buf_sc_3_V_ce0;
output   out_buf_sc_3_V_we0;
output  [3:0] out_buf_sc_3_V_d0;
output  [9:0] out_buf_sc_4_V_address0;
output   out_buf_sc_4_V_ce0;
output   out_buf_sc_4_V_we0;
output  [3:0] out_buf_sc_4_V_d0;
output  [9:0] out_buf_sc_5_V_address0;
output   out_buf_sc_5_V_ce0;
output   out_buf_sc_5_V_we0;
output  [3:0] out_buf_sc_5_V_d0;
output  [9:0] out_buf_sc_6_V_address0;
output   out_buf_sc_6_V_ce0;
output   out_buf_sc_6_V_we0;
output  [3:0] out_buf_sc_6_V_d0;
output  [9:0] out_buf_sc_7_V_address0;
output   out_buf_sc_7_V_ce0;
output   out_buf_sc_7_V_we0;
output  [3:0] out_buf_sc_7_V_d0;
output  [9:0] out_buf_sc_8_V_address0;
output   out_buf_sc_8_V_ce0;
output   out_buf_sc_8_V_we0;
output  [3:0] out_buf_sc_8_V_d0;
output  [9:0] out_buf_sc_9_V_address0;
output   out_buf_sc_9_V_ce0;
output   out_buf_sc_9_V_we0;
output  [3:0] out_buf_sc_9_V_d0;
output  [9:0] out_buf_sc_10_V_address0;
output   out_buf_sc_10_V_ce0;
output   out_buf_sc_10_V_we0;
output  [3:0] out_buf_sc_10_V_d0;
output  [9:0] out_buf_sc_11_V_address0;
output   out_buf_sc_11_V_ce0;
output   out_buf_sc_11_V_we0;
output  [3:0] out_buf_sc_11_V_d0;
output  [9:0] out_buf_sc_12_V_address0;
output   out_buf_sc_12_V_ce0;
output   out_buf_sc_12_V_we0;
output  [3:0] out_buf_sc_12_V_d0;
output  [9:0] out_buf_sc_13_V_address0;
output   out_buf_sc_13_V_ce0;
output   out_buf_sc_13_V_we0;
output  [3:0] out_buf_sc_13_V_d0;
output  [9:0] out_buf_sc_14_V_address0;
output   out_buf_sc_14_V_ce0;
output   out_buf_sc_14_V_we0;
output  [3:0] out_buf_sc_14_V_d0;
output  [9:0] out_buf_sc_15_V_address0;
output   out_buf_sc_15_V_ce0;
output   out_buf_sc_15_V_we0;
output  [3:0] out_buf_sc_15_V_d0;
output  [9:0] out_buf_sc_16_V_address0;
output   out_buf_sc_16_V_ce0;
output   out_buf_sc_16_V_we0;
output  [3:0] out_buf_sc_16_V_d0;
output  [9:0] out_buf_sc_17_V_address0;
output   out_buf_sc_17_V_ce0;
output   out_buf_sc_17_V_we0;
output  [3:0] out_buf_sc_17_V_d0;
output  [9:0] out_buf_sc_18_V_address0;
output   out_buf_sc_18_V_ce0;
output   out_buf_sc_18_V_we0;
output  [3:0] out_buf_sc_18_V_d0;
output  [9:0] out_buf_sc_19_V_address0;
output   out_buf_sc_19_V_ce0;
output   out_buf_sc_19_V_we0;
output  [3:0] out_buf_sc_19_V_d0;
output  [9:0] out_buf_sc_20_V_address0;
output   out_buf_sc_20_V_ce0;
output   out_buf_sc_20_V_we0;
output  [3:0] out_buf_sc_20_V_d0;
output  [9:0] out_buf_sc_21_V_address0;
output   out_buf_sc_21_V_ce0;
output   out_buf_sc_21_V_we0;
output  [3:0] out_buf_sc_21_V_d0;
output  [9:0] out_buf_sc_22_V_address0;
output   out_buf_sc_22_V_ce0;
output   out_buf_sc_22_V_we0;
output  [3:0] out_buf_sc_22_V_d0;
output  [9:0] out_buf_sc_23_V_address0;
output   out_buf_sc_23_V_ce0;
output   out_buf_sc_23_V_we0;
output  [3:0] out_buf_sc_23_V_d0;
output  [9:0] out_buf_sc_24_V_address0;
output   out_buf_sc_24_V_ce0;
output   out_buf_sc_24_V_we0;
output  [3:0] out_buf_sc_24_V_d0;
output  [9:0] out_buf_sc_25_V_address0;
output   out_buf_sc_25_V_ce0;
output   out_buf_sc_25_V_we0;
output  [3:0] out_buf_sc_25_V_d0;
output  [9:0] out_buf_sc_26_V_address0;
output   out_buf_sc_26_V_ce0;
output   out_buf_sc_26_V_we0;
output  [3:0] out_buf_sc_26_V_d0;
output  [9:0] out_buf_sc_27_V_address0;
output   out_buf_sc_27_V_ce0;
output   out_buf_sc_27_V_we0;
output  [3:0] out_buf_sc_27_V_d0;
output  [9:0] out_buf_sc_28_V_address0;
output   out_buf_sc_28_V_ce0;
output   out_buf_sc_28_V_we0;
output  [3:0] out_buf_sc_28_V_d0;
output  [9:0] out_buf_sc_29_V_address0;
output   out_buf_sc_29_V_ce0;
output   out_buf_sc_29_V_we0;
output  [3:0] out_buf_sc_29_V_d0;
output  [9:0] out_buf_sc_30_V_address0;
output   out_buf_sc_30_V_ce0;
output   out_buf_sc_30_V_we0;
output  [3:0] out_buf_sc_30_V_d0;
output  [9:0] out_buf_sc_31_V_address0;
output   out_buf_sc_31_V_ce0;
output   out_buf_sc_31_V_we0;
output  [3:0] out_buf_sc_31_V_d0;
output   m_axi_DDR_buf_V_AWVALID;
input   m_axi_DDR_buf_V_AWREADY;
output  [31:0] m_axi_DDR_buf_V_AWADDR;
output  [0:0] m_axi_DDR_buf_V_AWID;
output  [31:0] m_axi_DDR_buf_V_AWLEN;
output  [2:0] m_axi_DDR_buf_V_AWSIZE;
output  [1:0] m_axi_DDR_buf_V_AWBURST;
output  [1:0] m_axi_DDR_buf_V_AWLOCK;
output  [3:0] m_axi_DDR_buf_V_AWCACHE;
output  [2:0] m_axi_DDR_buf_V_AWPROT;
output  [3:0] m_axi_DDR_buf_V_AWQOS;
output  [3:0] m_axi_DDR_buf_V_AWREGION;
output  [0:0] m_axi_DDR_buf_V_AWUSER;
output   m_axi_DDR_buf_V_WVALID;
input   m_axi_DDR_buf_V_WREADY;
output  [511:0] m_axi_DDR_buf_V_WDATA;
output  [63:0] m_axi_DDR_buf_V_WSTRB;
output   m_axi_DDR_buf_V_WLAST;
output  [0:0] m_axi_DDR_buf_V_WID;
output  [0:0] m_axi_DDR_buf_V_WUSER;
output   m_axi_DDR_buf_V_ARVALID;
input   m_axi_DDR_buf_V_ARREADY;
output  [31:0] m_axi_DDR_buf_V_ARADDR;
output  [0:0] m_axi_DDR_buf_V_ARID;
output  [31:0] m_axi_DDR_buf_V_ARLEN;
output  [2:0] m_axi_DDR_buf_V_ARSIZE;
output  [1:0] m_axi_DDR_buf_V_ARBURST;
output  [1:0] m_axi_DDR_buf_V_ARLOCK;
output  [3:0] m_axi_DDR_buf_V_ARCACHE;
output  [2:0] m_axi_DDR_buf_V_ARPROT;
output  [3:0] m_axi_DDR_buf_V_ARQOS;
output  [3:0] m_axi_DDR_buf_V_ARREGION;
output  [0:0] m_axi_DDR_buf_V_ARUSER;
input   m_axi_DDR_buf_V_RVALID;
output   m_axi_DDR_buf_V_RREADY;
input  [511:0] m_axi_DDR_buf_V_RDATA;
input   m_axi_DDR_buf_V_RLAST;
input  [0:0] m_axi_DDR_buf_V_RID;
input  [0:0] m_axi_DDR_buf_V_RUSER;
input  [1:0] m_axi_DDR_buf_V_RRESP;
input   m_axi_DDR_buf_V_BVALID;
output   m_axi_DDR_buf_V_BREADY;
input  [1:0] m_axi_DDR_buf_V_BRESP;
input  [0:0] m_axi_DDR_buf_V_BID;
input  [0:0] m_axi_DDR_buf_V_BUSER;
input  [25:0] DDR_buf_V_offset;
input  [7:0] H_fmap_out;
input  [11:0] in_channels;
input  [31:0] out_channel_start;
input  [31:0] row_tile_start;
input  [0:0] switch_bank;
output  [7:0] ddr_stage_V_address0;
output   ddr_stage_V_ce0;
output   ddr_stage_V_we0;
output  [511:0] ddr_stage_V_d0;
input  [511:0] ddr_stage_V_q0;
output  [7:0] ddr_tmp_V_0_address0;
output   ddr_tmp_V_0_ce0;
output   ddr_tmp_V_0_we0;
output  [127:0] ddr_tmp_V_0_d0;
input  [127:0] ddr_tmp_V_0_q0;
output  [7:0] ddr_tmp_V_1_address0;
output   ddr_tmp_V_1_ce0;
output   ddr_tmp_V_1_we0;
output  [127:0] ddr_tmp_V_1_d0;
input  [127:0] ddr_tmp_V_1_q0;
output  [7:0] ddr_tmp_V_2_address0;
output   ddr_tmp_V_2_ce0;
output   ddr_tmp_V_2_we0;
output  [127:0] ddr_tmp_V_2_d0;
input  [127:0] ddr_tmp_V_2_q0;
output  [7:0] ddr_tmp_V_3_address0;
output   ddr_tmp_V_3_ce0;
output   ddr_tmp_V_3_we0;
output  [127:0] ddr_tmp_V_3_d0;
input  [127:0] ddr_tmp_V_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_buf_sc_0_V_ce0;
reg out_buf_sc_0_V_we0;
reg out_buf_sc_1_V_ce0;
reg out_buf_sc_1_V_we0;
reg out_buf_sc_2_V_ce0;
reg out_buf_sc_2_V_we0;
reg out_buf_sc_3_V_ce0;
reg out_buf_sc_3_V_we0;
reg out_buf_sc_4_V_ce0;
reg out_buf_sc_4_V_we0;
reg out_buf_sc_5_V_ce0;
reg out_buf_sc_5_V_we0;
reg out_buf_sc_6_V_ce0;
reg out_buf_sc_6_V_we0;
reg out_buf_sc_7_V_ce0;
reg out_buf_sc_7_V_we0;
reg out_buf_sc_8_V_ce0;
reg out_buf_sc_8_V_we0;
reg out_buf_sc_9_V_ce0;
reg out_buf_sc_9_V_we0;
reg out_buf_sc_10_V_ce0;
reg out_buf_sc_10_V_we0;
reg out_buf_sc_11_V_ce0;
reg out_buf_sc_11_V_we0;
reg out_buf_sc_12_V_ce0;
reg out_buf_sc_12_V_we0;
reg out_buf_sc_13_V_ce0;
reg out_buf_sc_13_V_we0;
reg out_buf_sc_14_V_ce0;
reg out_buf_sc_14_V_we0;
reg out_buf_sc_15_V_ce0;
reg out_buf_sc_15_V_we0;
reg out_buf_sc_16_V_ce0;
reg out_buf_sc_16_V_we0;
reg out_buf_sc_17_V_ce0;
reg out_buf_sc_17_V_we0;
reg out_buf_sc_18_V_ce0;
reg out_buf_sc_18_V_we0;
reg out_buf_sc_19_V_ce0;
reg out_buf_sc_19_V_we0;
reg out_buf_sc_20_V_ce0;
reg out_buf_sc_20_V_we0;
reg out_buf_sc_21_V_ce0;
reg out_buf_sc_21_V_we0;
reg out_buf_sc_22_V_ce0;
reg out_buf_sc_22_V_we0;
reg out_buf_sc_23_V_ce0;
reg out_buf_sc_23_V_we0;
reg out_buf_sc_24_V_ce0;
reg out_buf_sc_24_V_we0;
reg out_buf_sc_25_V_ce0;
reg out_buf_sc_25_V_we0;
reg out_buf_sc_26_V_ce0;
reg out_buf_sc_26_V_we0;
reg out_buf_sc_27_V_ce0;
reg out_buf_sc_27_V_we0;
reg out_buf_sc_28_V_ce0;
reg out_buf_sc_28_V_we0;
reg out_buf_sc_29_V_ce0;
reg out_buf_sc_29_V_we0;
reg out_buf_sc_30_V_ce0;
reg out_buf_sc_30_V_we0;
reg out_buf_sc_31_V_ce0;
reg out_buf_sc_31_V_we0;
reg m_axi_DDR_buf_V_ARVALID;
reg m_axi_DDR_buf_V_RREADY;
reg[7:0] ddr_stage_V_address0;
reg ddr_stage_V_ce0;
reg ddr_stage_V_we0;
reg[7:0] ddr_tmp_V_0_address0;
reg ddr_tmp_V_0_ce0;
reg ddr_tmp_V_0_we0;
reg[7:0] ddr_tmp_V_1_address0;
reg ddr_tmp_V_1_ce0;
reg ddr_tmp_V_1_we0;
reg[7:0] ddr_tmp_V_2_address0;
reg ddr_tmp_V_2_ce0;
reg ddr_tmp_V_2_we0;
reg[7:0] ddr_tmp_V_3_address0;
reg ddr_tmp_V_3_ce0;
reg ddr_tmp_V_3_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    DDR_buf_V_blk_n_AR;
wire    ap_CS_fsm_state9;
reg    DDR_buf_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln272_reg_1988;
reg   [7:0] i_0_reg_919;
reg   [7:0] i_0_reg_919_pp0_iter1_reg;
wire    ap_block_state16_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] indvar_flatten_reg_931;
reg   [3:0] row_0_reg_942;
reg   [4:0] col_0_reg_953;
reg   [10:0] indvar_flatten8_reg_964;
reg   [3:0] row1_0_reg_975;
reg   [6:0] col2_0_reg_986;
wire  signed [27:0] ddr_channel_ptr_fu_1058_p3;
reg  signed [27:0] ddr_channel_ptr_reg_1904;
wire   [28:0] ddr_channel_ptr_3_fu_1110_p3;
reg  signed [28:0] ddr_channel_ptr_3_reg_1912;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [4:0] col_lim_fu_1151_p3;
reg   [4:0] col_lim_reg_1933;
wire   [31:0] grp_fu_1159_p2;
reg   [31:0] mul_ln274_reg_1941;
wire    ap_CS_fsm_state4;
wire  signed [31:0] add_ln274_fu_1165_p2;
reg  signed [31:0] add_ln274_reg_1946;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_1173_p2;
reg   [31:0] mul_ln274_1_reg_1956;
wire    ap_CS_fsm_state7;
wire   [32:0] add_ln321_fu_1185_p2;
reg   [32:0] add_ln321_reg_1961;
wire    ap_CS_fsm_state8;
wire   [7:0] shl_ln_fu_1191_p3;
reg   [7:0] shl_ln_reg_1966;
wire   [7:0] zext_ln281_1_fu_1213_p1;
reg   [7:0] zext_ln281_1_reg_1983;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln272_fu_1216_p2;
reg   [0:0] icmp_ln272_reg_1988_pp0_iter1_reg;
wire   [7:0] i_fu_1221_p2;
reg   [7:0] i_reg_1992;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] DDR_buf_V_addr_read_reg_1997;
wire   [0:0] icmp_ln278_fu_1232_p2;
reg   [0:0] icmp_ln278_reg_2002;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state20_pp1_stage0_iter0;
wire    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
wire    ap_block_state23_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln278_reg_2002_pp1_iter1_reg;
reg   [0:0] icmp_ln278_reg_2002_pp1_iter2_reg;
wire   [7:0] add_ln278_fu_1237_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] select_ln281_fu_1254_p3;
reg   [4:0] select_ln281_reg_2011;
reg   [4:0] select_ln281_reg_2011_pp1_iter1_reg;
wire   [3:0] select_ln281_1_fu_1262_p3;
reg   [3:0] select_ln281_1_reg_2017;
reg   [3:0] select_ln281_1_reg_2017_pp1_iter1_reg;
wire   [4:0] col_fu_1270_p2;
wire   [7:0] grp_fu_1872_p3;
reg   [7:0] add_ln281_reg_2031;
reg    ap_enable_reg_pp1_iter1;
wire   [8:0] grp_fu_1879_p3;
reg   [8:0] add_ln414_reg_2041;
reg    ap_enable_reg_pp1_iter2;
wire   [8:0] add_ln414_1_fu_1316_p2;
reg   [8:0] add_ln414_1_reg_2046;
wire   [10:0] bound5_fu_1370_p3;
reg   [10:0] bound5_reg_2051;
wire    ap_CS_fsm_state24;
wire   [0:0] icmp_ln289_fu_1386_p2;
reg   [0:0] icmp_ln289_reg_2056;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state25_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_state27_pp2_stage0_iter2;
wire    ap_block_state28_pp2_stage0_iter3;
wire    ap_block_state29_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln289_reg_2056_pp2_iter1_reg;
reg   [0:0] icmp_ln289_reg_2056_pp2_iter2_reg;
reg   [0:0] icmp_ln289_reg_2056_pp2_iter3_reg;
wire   [10:0] add_ln289_fu_1391_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [6:0] select_ln292_fu_1403_p3;
reg   [6:0] select_ln292_reg_2065;
reg   [6:0] select_ln292_reg_2065_pp2_iter1_reg;
wire   [3:0] select_ln292_1_fu_1411_p3;
reg   [3:0] select_ln292_1_reg_2070;
reg   [3:0] select_ln292_1_reg_2070_pp2_iter1_reg;
wire   [1:0] trunc_ln292_fu_1419_p1;
reg   [1:0] trunc_ln292_reg_2079;
reg   [1:0] trunc_ln292_reg_2079_pp2_iter1_reg;
reg   [1:0] trunc_ln292_reg_2079_pp2_iter2_reg;
reg   [4:0] tmp_9_reg_2083;
wire   [6:0] col_1_fu_1433_p2;
wire   [8:0] zext_ln292_3_fu_1442_p1;
reg   [8:0] zext_ln292_3_reg_2093;
reg   [7:0] ddr_tmp_V_0_addr_1_reg_2098;
wire   [10:0] grp_fu_1896_p3;
reg   [10:0] add_ln414_2_reg_2103;
reg    ap_enable_reg_pp2_iter2;
reg   [10:0] add_ln414_2_reg_2103_pp2_iter3_reg;
reg    ap_enable_reg_pp2_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state16;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter4;
reg   [7:0] ap_phi_mux_i_0_phi_fu_923_p4;
reg   [3:0] ap_phi_mux_row_0_phi_fu_946_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_row1_0_phi_fu_979_p4;
wire    ap_block_pp2_stage0;
wire   [127:0] ap_phi_reg_pp2_iter0_ddr_tt_V_reg_997;
reg   [127:0] ap_phi_reg_pp2_iter1_ddr_tt_V_reg_997;
reg   [127:0] ap_phi_reg_pp2_iter2_ddr_tt_V_reg_997;
reg   [127:0] ap_phi_reg_pp2_iter3_ddr_tt_V_reg_997;
reg   [127:0] ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997;
wire   [63:0] zext_ln274_fu_1227_p1;
wire   [63:0] zext_ln281_fu_1309_p1;
wire  signed [63:0] sext_ln414_fu_1327_p1;
wire  signed [63:0] sext_ln414_1_fu_1331_p1;
wire  signed [63:0] sext_ln292_fu_1445_p1;
wire  signed [63:0] sext_ln292_1_fu_1484_p1;
wire  signed [63:0] sext_ln414_2_fu_1491_p1;
wire  signed [63:0] sext_ln321_1_fu_1198_p1;
wire   [31:0] sub_ln264_fu_1018_p2;
wire   [26:0] tmp_s_fu_1024_p4;
wire   [27:0] zext_ln264_fu_1034_p1;
wire   [26:0] tmp_1_fu_1044_p4;
wire   [0:0] tmp_4_fu_1010_p3;
wire   [27:0] sub_ln264_1_fu_1038_p2;
wire   [27:0] zext_ln264_1_fu_1054_p1;
wire   [5:0] trunc_ln266_4_fu_1069_p4;
wire   [27:0] zext_ln266_fu_1079_p1;
wire   [0:0] icmp_ln266_fu_1083_p2;
wire   [27:0] sub_ln266_fu_1088_p2;
wire   [27:0] ddr_channel_ptr_1_fu_1093_p3;
wire  signed [28:0] sext_ln266_fu_1100_p1;
wire   [28:0] ddr_channel_ptr_2_fu_1104_p2;
wire  signed [28:0] sext_ln264_fu_1066_p1;
wire   [1:0] ret_mask_V_fu_1125_p1;
wire   [4:0] trunc_ln2_fu_1135_p4;
wire   [0:0] icmp_ln879_fu_1129_p2;
wire   [4:0] add_ln42_fu_1145_p2;
wire   [7:0] grp_fu_1159_p1;
wire   [4:0] grp_fu_1173_p0;
wire  signed [32:0] sext_ln321_fu_1178_p1;
wire   [32:0] zext_ln321_fu_1181_p1;
wire   [0:0] icmp_ln279_fu_1249_p2;
wire   [3:0] row_fu_1243_p2;
wire   [5:0] tmp_6_fu_1292_p3;
wire   [8:0] tmp_5_fu_1285_p3;
wire   [8:0] zext_ln414_1_fu_1299_p1;
wire   [8:0] zext_ln414_2_fu_1313_p1;
wire   [8:0] sub_ln414_fu_1303_p2;
wire   [7:0] zext_ln290_fu_1377_p1;
wire   [0:0] icmp_ln290_fu_1381_p2;
wire   [3:0] row_2_fu_1397_p2;
wire   [8:0] grp_fu_1887_p3;
wire   [5:0] tmp_8_fu_1459_p3;
wire   [8:0] tmp_7_fu_1452_p3;
wire   [8:0] zext_ln292_2_fu_1466_p1;
wire   [8:0] sub_ln292_fu_1470_p2;
wire   [8:0] add_ln292_1_fu_1479_p2;
wire   [4:0] grp_fu_1872_p0;
wire   [3:0] grp_fu_1872_p1;
wire   [4:0] grp_fu_1872_p2;
wire   [5:0] grp_fu_1879_p0;
wire   [3:0] grp_fu_1879_p1;
wire   [4:0] grp_fu_1879_p2;
wire   [5:0] grp_fu_1887_p0;
wire   [3:0] grp_fu_1887_p1;
wire   [4:0] grp_fu_1887_p2;
wire   [7:0] grp_fu_1896_p0;
wire   [3:0] grp_fu_1896_p1;
wire   [6:0] grp_fu_1896_p2;
wire    ap_CS_fsm_state30;
reg   [20:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [31:0] grp_fu_1159_p10;
wire   [31:0] grp_fu_1173_p00;
wire   [7:0] grp_fu_1872_p10;
wire   [7:0] grp_fu_1872_p20;
wire   [8:0] grp_fu_1879_p10;
wire   [8:0] grp_fu_1887_p10;
wire   [8:0] grp_fu_1887_p20;
wire   [10:0] grp_fu_1896_p10;
wire   [10:0] grp_fu_1896_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
end

FracNet_mul_29s_8lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
FracNet_mul_29s_8lbW_U780(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ddr_channel_ptr_3_reg_1912),
    .din1(grp_fu_1159_p1),
    .ce(1'b1),
    .dout(grp_fu_1159_p2)
);

FracNet_mul_5ns_3mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FracNet_mul_5ns_3mb6_U781(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1173_p0),
    .din1(add_ln274_reg_1946),
    .ce(1'b1),
    .dout(grp_fu_1173_p2)
);

FracNet_mac_muladncg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
FracNet_mac_muladncg_U782(
    .din0(grp_fu_1872_p0),
    .din1(grp_fu_1872_p1),
    .din2(grp_fu_1872_p2),
    .dout(grp_fu_1872_p3)
);

FracNet_mac_muladocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 9 ))
FracNet_mac_muladocq_U783(
    .din0(grp_fu_1879_p0),
    .din1(grp_fu_1879_p1),
    .din2(grp_fu_1879_p2),
    .dout(grp_fu_1879_p3)
);

FracNet_mac_muladocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 9 ))
FracNet_mac_muladocq_U784(
    .din0(grp_fu_1887_p0),
    .din1(grp_fu_1887_p1),
    .din2(grp_fu_1887_p2),
    .dout(grp_fu_1887_p3)
);

FracNet_mac_muladpcA #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
FracNet_mac_muladpcA_U785(
    .din0(grp_fu_1896_p0),
    .din1(grp_fu_1896_p1),
    .din2(grp_fu_1896_p2),
    .dout(grp_fu_1896_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state16)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state25)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        if (((trunc_ln292_reg_2079_pp2_iter2_reg == 2'd3) & (icmp_ln289_reg_2056_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997 <= ddr_tmp_V_3_q0;
        end else if (((trunc_ln292_reg_2079_pp2_iter2_reg == 2'd2) & (icmp_ln289_reg_2056_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997 <= ddr_tmp_V_2_q0;
        end else if (((trunc_ln292_reg_2079_pp2_iter2_reg == 2'd1) & (icmp_ln289_reg_2056_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997 <= ddr_tmp_V_1_q0;
        end else if (((trunc_ln292_reg_2079_pp2_iter2_reg == 2'd0) & (icmp_ln289_reg_2056_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997 <= ddr_tmp_V_0_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997 <= ap_phi_reg_pp2_iter3_ddr_tt_V_reg_997;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_fu_1386_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        col2_0_reg_986 <= col_1_fu_1433_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        col2_0_reg_986 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        col_0_reg_953 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        col_0_reg_953 <= col_fu_1270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln272_reg_1988 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_919 <= i_reg_1992;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_919 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_fu_1386_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten8_reg_964 <= add_ln289_fu_1391_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten8_reg_964 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        indvar_flatten_reg_931 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_931 <= add_ln278_fu_1237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        row1_0_reg_975 <= select_ln292_1_reg_2070;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        row1_0_reg_975 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        row_0_reg_942 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_0_reg_942 <= select_ln281_1_reg_2017;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln272_reg_1988 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DDR_buf_V_addr_read_reg_1997 <= m_axi_DDR_buf_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln274_reg_1946 <= add_ln274_fu_1165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln281_reg_2031 <= grp_fu_1872_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln321_reg_1961 <= add_ln321_fu_1185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter1_reg == 1'd0))) begin
        add_ln414_1_reg_2046 <= add_ln414_1_fu_1316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        add_ln414_2_reg_2103 <= grp_fu_1896_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln414_2_reg_2103_pp2_iter3_reg <= add_ln414_2_reg_2103;
        icmp_ln289_reg_2056_pp2_iter2_reg <= icmp_ln289_reg_2056_pp2_iter1_reg;
        icmp_ln289_reg_2056_pp2_iter3_reg <= icmp_ln289_reg_2056_pp2_iter2_reg;
        trunc_ln292_reg_2079_pp2_iter2_reg <= trunc_ln292_reg_2079_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        add_ln414_reg_2041 <= grp_fu_1879_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_reg_pp2_iter1_ddr_tt_V_reg_997 <= ap_phi_reg_pp2_iter0_ddr_tt_V_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_reg_pp2_iter2_ddr_tt_V_reg_997 <= ap_phi_reg_pp2_iter1_ddr_tt_V_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ap_phi_reg_pp2_iter3_ddr_tt_V_reg_997 <= ap_phi_reg_pp2_iter2_ddr_tt_V_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bound5_reg_2051[10 : 3] <= bound5_fu_1370_p3[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_lim_reg_1933 <= col_lim_fu_1151_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ddr_channel_ptr_3_reg_1912 <= ddr_channel_ptr_3_fu_1110_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ddr_channel_ptr_reg_1904 <= ddr_channel_ptr_fu_1058_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ddr_tmp_V_0_addr_1_reg_2098 <= sext_ln292_fu_1445_p1;
        zext_ln292_3_reg_2093[4 : 0] <= zext_ln292_3_fu_1442_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_919_pp0_iter1_reg <= i_0_reg_919;
        icmp_ln272_reg_1988 <= icmp_ln272_fu_1216_p2;
        icmp_ln272_reg_1988_pp0_iter1_reg <= icmp_ln272_reg_1988;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1992 <= i_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln278_reg_2002 <= icmp_ln278_fu_1232_p2;
        icmp_ln278_reg_2002_pp1_iter1_reg <= icmp_ln278_reg_2002;
        select_ln281_1_reg_2017_pp1_iter1_reg <= select_ln281_1_reg_2017;
        select_ln281_reg_2011_pp1_iter1_reg <= select_ln281_reg_2011;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln278_reg_2002_pp1_iter2_reg <= icmp_ln278_reg_2002_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln289_reg_2056 <= icmp_ln289_fu_1386_p2;
        icmp_ln289_reg_2056_pp2_iter1_reg <= icmp_ln289_reg_2056;
        select_ln292_1_reg_2070_pp2_iter1_reg <= select_ln292_1_reg_2070;
        select_ln292_reg_2065_pp2_iter1_reg <= select_ln292_reg_2065;
        trunc_ln292_reg_2079_pp2_iter1_reg <= trunc_ln292_reg_2079;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln274_1_reg_1956 <= grp_fu_1173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln274_reg_1941 <= grp_fu_1159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_fu_1232_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln281_1_reg_2017 <= select_ln281_1_fu_1262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_fu_1232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln281_reg_2011 <= select_ln281_fu_1254_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_fu_1386_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln292_1_reg_2070 <= select_ln292_1_fu_1411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_fu_1386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln292_reg_2065 <= select_ln292_fu_1403_p3;
        tmp_9_reg_2083 <= {{select_ln292_fu_1403_p3[6:2]}};
        trunc_ln292_reg_2079 <= trunc_ln292_fu_1419_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        shl_ln_reg_1966[7 : 3] <= shl_ln_fu_1191_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        zext_ln281_1_reg_1983[4 : 0] <= zext_ln281_1_fu_1213_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        DDR_buf_V_blk_n_AR = m_axi_DDR_buf_V_ARREADY;
    end else begin
        DDR_buf_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln272_reg_1988 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DDR_buf_V_blk_n_R = m_axi_DDR_buf_V_RVALID;
    end else begin
        DDR_buf_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln272_fu_1216_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln278_fu_1232_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln289_fu_1386_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln272_reg_1988 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_923_p4 = i_reg_1992;
    end else begin
        ap_phi_mux_i_0_phi_fu_923_p4 = i_0_reg_919;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln289_reg_2056 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_row1_0_phi_fu_979_p4 = select_ln292_1_reg_2070;
    end else begin
        ap_phi_mux_row1_0_phi_fu_979_p4 = row1_0_reg_975;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln278_reg_2002 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_row_0_phi_fu_946_p4 = select_ln281_1_reg_2017;
    end else begin
        ap_phi_mux_row_0_phi_fu_946_p4 = row_0_reg_942;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        ddr_stage_V_address0 = zext_ln281_fu_1309_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ddr_stage_V_address0 = zext_ln274_fu_1227_p1;
    end else begin
        ddr_stage_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ddr_stage_V_ce0 = 1'b1;
    end else begin
        ddr_stage_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln272_reg_1988_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ddr_stage_V_we0 = 1'b1;
    end else begin
        ddr_stage_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_0_address0 = ddr_tmp_V_0_addr_1_reg_2098;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_0_address0 = sext_ln414_fu_1327_p1;
    end else begin
        ddr_tmp_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        ddr_tmp_V_0_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_0_we0 = 1'b1;
    end else begin
        ddr_tmp_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_1_address0 = sext_ln292_1_fu_1484_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_1_address0 = sext_ln414_1_fu_1331_p1;
    end else begin
        ddr_tmp_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        ddr_tmp_V_1_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_1_we0 = 1'b1;
    end else begin
        ddr_tmp_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_2_address0 = sext_ln292_1_fu_1484_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_2_address0 = sext_ln414_1_fu_1331_p1;
    end else begin
        ddr_tmp_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        ddr_tmp_V_2_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_2_we0 = 1'b1;
    end else begin
        ddr_tmp_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_3_address0 = sext_ln292_1_fu_1484_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_3_address0 = sext_ln414_1_fu_1331_p1;
    end else begin
        ddr_tmp_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        ddr_tmp_V_3_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln278_reg_2002_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_tmp_V_3_we0 = 1'b1;
    end else begin
        ddr_tmp_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_DDR_buf_V_ARVALID = 1'b1;
    end else begin
        m_axi_DDR_buf_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln272_reg_1988 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_DDR_buf_V_RREADY = 1'b1;
    end else begin
        m_axi_DDR_buf_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_0_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_0_V_we0 = 1'b1;
    end else begin
        out_buf_sc_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_10_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_10_V_we0 = 1'b1;
    end else begin
        out_buf_sc_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_11_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_11_V_we0 = 1'b1;
    end else begin
        out_buf_sc_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_12_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_12_V_we0 = 1'b1;
    end else begin
        out_buf_sc_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_13_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_13_V_we0 = 1'b1;
    end else begin
        out_buf_sc_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_14_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_14_V_we0 = 1'b1;
    end else begin
        out_buf_sc_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_15_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_15_V_we0 = 1'b1;
    end else begin
        out_buf_sc_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_16_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_16_V_we0 = 1'b1;
    end else begin
        out_buf_sc_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_17_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_17_V_we0 = 1'b1;
    end else begin
        out_buf_sc_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_18_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_18_V_we0 = 1'b1;
    end else begin
        out_buf_sc_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_19_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_19_V_we0 = 1'b1;
    end else begin
        out_buf_sc_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_1_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_1_V_we0 = 1'b1;
    end else begin
        out_buf_sc_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_20_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_20_V_we0 = 1'b1;
    end else begin
        out_buf_sc_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_21_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_21_V_we0 = 1'b1;
    end else begin
        out_buf_sc_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_22_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_22_V_we0 = 1'b1;
    end else begin
        out_buf_sc_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_23_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_23_V_we0 = 1'b1;
    end else begin
        out_buf_sc_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_24_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_24_V_we0 = 1'b1;
    end else begin
        out_buf_sc_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_25_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_25_V_we0 = 1'b1;
    end else begin
        out_buf_sc_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_26_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_26_V_we0 = 1'b1;
    end else begin
        out_buf_sc_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_27_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_27_V_we0 = 1'b1;
    end else begin
        out_buf_sc_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_28_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_28_V_we0 = 1'b1;
    end else begin
        out_buf_sc_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_29_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_29_V_we0 = 1'b1;
    end else begin
        out_buf_sc_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_2_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_2_V_we0 = 1'b1;
    end else begin
        out_buf_sc_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_30_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_30_V_we0 = 1'b1;
    end else begin
        out_buf_sc_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_31_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_31_V_we0 = 1'b1;
    end else begin
        out_buf_sc_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_3_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_3_V_we0 = 1'b1;
    end else begin
        out_buf_sc_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_4_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_4_V_we0 = 1'b1;
    end else begin
        out_buf_sc_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_5_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_5_V_we0 = 1'b1;
    end else begin
        out_buf_sc_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_6_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_6_V_we0 = 1'b1;
    end else begin
        out_buf_sc_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_7_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_7_V_we0 = 1'b1;
    end else begin
        out_buf_sc_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_8_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_8_V_we0 = 1'b1;
    end else begin
        out_buf_sc_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_9_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln289_reg_2056_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_9_V_we0 = 1'b1;
    end else begin
        out_buf_sc_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln272_fu_1216_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln272_fu_1216_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln278_fu_1232_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln278_fu_1232_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln289_fu_1386_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln289_fu_1386_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln274_fu_1165_p2 = (mul_ln274_reg_1941 + row_tile_start);

assign add_ln278_fu_1237_p2 = (indvar_flatten_reg_931 + 8'd1);

assign add_ln289_fu_1391_p2 = (indvar_flatten8_reg_964 + 11'd1);

assign add_ln292_1_fu_1479_p2 = (zext_ln292_3_reg_2093 + sub_ln292_fu_1470_p2);

assign add_ln321_fu_1185_p2 = ($signed(sext_ln321_fu_1178_p1) + $signed(zext_ln321_fu_1181_p1));

assign add_ln414_1_fu_1316_p2 = (zext_ln414_2_fu_1313_p1 + sub_ln414_fu_1303_p2);

assign add_ln42_fu_1145_p2 = (5'd1 + trunc_ln2_fu_1135_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln272_reg_1988 == 1'd0) & (m_axi_DDR_buf_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln272_reg_1988 == 1'd0) & (m_axi_DDR_buf_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((icmp_ln272_reg_1988 == 1'd0) & (m_axi_DDR_buf_V_RVALID == 1'b0));
end

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp2_iter0_ddr_tt_V_reg_997 = 'bx;

assign bound5_fu_1370_p3 = {{H_fmap_out}, {3'd0}};

assign col_1_fu_1433_p2 = (7'd1 + select_ln292_fu_1403_p3);

assign col_fu_1270_p2 = (5'd1 + select_ln281_fu_1254_p3);

assign col_lim_fu_1151_p3 = ((icmp_ln879_fu_1129_p2[0:0] === 1'b1) ? trunc_ln2_fu_1135_p4 : add_ln42_fu_1145_p2);

assign ddr_channel_ptr_1_fu_1093_p3 = ((icmp_ln266_fu_1083_p2[0:0] === 1'b1) ? ddr_channel_ptr_reg_1904 : sub_ln266_fu_1088_p2);

assign ddr_channel_ptr_2_fu_1104_p2 = ($signed(29'd32) + $signed(sext_ln266_fu_1100_p1));

assign ddr_channel_ptr_3_fu_1110_p3 = ((switch_bank[0:0] === 1'b1) ? ddr_channel_ptr_2_fu_1104_p2 : sext_ln264_fu_1066_p1);

assign ddr_channel_ptr_fu_1058_p3 = ((tmp_4_fu_1010_p3[0:0] === 1'b1) ? sub_ln264_1_fu_1038_p2 : zext_ln264_1_fu_1054_p1);

assign ddr_stage_V_d0 = DDR_buf_V_addr_read_reg_1997;

assign ddr_tmp_V_0_d0 = ddr_stage_V_q0[127:0];

assign ddr_tmp_V_1_d0 = {{ddr_stage_V_q0[255:128]}};

assign ddr_tmp_V_2_d0 = {{ddr_stage_V_q0[383:256]}};

assign ddr_tmp_V_3_d0 = {{ddr_stage_V_q0[511:384]}};

assign grp_fu_1159_p1 = grp_fu_1159_p10;

assign grp_fu_1159_p10 = H_fmap_out;

assign grp_fu_1173_p0 = grp_fu_1173_p00;

assign grp_fu_1173_p00 = col_lim_reg_1933;

assign grp_fu_1872_p0 = zext_ln281_1_reg_1983;

assign grp_fu_1872_p1 = grp_fu_1872_p10;

assign grp_fu_1872_p10 = select_ln281_1_reg_2017;

assign grp_fu_1872_p2 = grp_fu_1872_p20;

assign grp_fu_1872_p20 = select_ln281_reg_2011;

assign grp_fu_1879_p0 = 9'd29;

assign grp_fu_1879_p1 = grp_fu_1879_p10;

assign grp_fu_1879_p10 = select_ln281_1_reg_2017_pp1_iter1_reg;

assign grp_fu_1879_p2 = zext_ln414_2_fu_1313_p1;

assign grp_fu_1887_p0 = 9'd29;

assign grp_fu_1887_p1 = grp_fu_1887_p10;

assign grp_fu_1887_p10 = select_ln292_1_reg_2070;

assign grp_fu_1887_p2 = grp_fu_1887_p20;

assign grp_fu_1887_p20 = tmp_9_reg_2083;

assign grp_fu_1896_p0 = 11'd113;

assign grp_fu_1896_p1 = grp_fu_1896_p10;

assign grp_fu_1896_p10 = select_ln292_1_reg_2070_pp2_iter1_reg;

assign grp_fu_1896_p2 = grp_fu_1896_p20;

assign grp_fu_1896_p20 = select_ln292_reg_2065_pp2_iter1_reg;

assign i_fu_1221_p2 = (ap_phi_mux_i_0_phi_fu_923_p4 + 8'd1);

assign icmp_ln266_fu_1083_p2 = (($signed(ddr_channel_ptr_reg_1904) < $signed(zext_ln266_fu_1079_p1)) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_1216_p2 = ((ap_phi_mux_i_0_phi_fu_923_p4 == shl_ln_reg_1966) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_1232_p2 = ((indvar_flatten_reg_931 == shl_ln_reg_1966) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_1249_p2 = ((col_0_reg_953 != col_lim_reg_1933) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_1386_p2 = ((indvar_flatten8_reg_964 == bound5_reg_2051) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_1381_p2 = (($signed(zext_ln290_fu_1377_p1) < $signed(H_fmap_out)) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_1129_p2 = ((ret_mask_V_fu_1125_p1 == 2'd0) ? 1'b1 : 1'b0);

assign m_axi_DDR_buf_V_ARADDR = sext_ln321_1_fu_1198_p1;

assign m_axi_DDR_buf_V_ARBURST = 2'd0;

assign m_axi_DDR_buf_V_ARCACHE = 4'd0;

assign m_axi_DDR_buf_V_ARID = 1'd0;

assign m_axi_DDR_buf_V_ARLEN = shl_ln_fu_1191_p3;

assign m_axi_DDR_buf_V_ARLOCK = 2'd0;

assign m_axi_DDR_buf_V_ARPROT = 3'd0;

assign m_axi_DDR_buf_V_ARQOS = 4'd0;

assign m_axi_DDR_buf_V_ARREGION = 4'd0;

assign m_axi_DDR_buf_V_ARSIZE = 3'd0;

assign m_axi_DDR_buf_V_ARUSER = 1'd0;

assign m_axi_DDR_buf_V_AWADDR = 32'd0;

assign m_axi_DDR_buf_V_AWBURST = 2'd0;

assign m_axi_DDR_buf_V_AWCACHE = 4'd0;

assign m_axi_DDR_buf_V_AWID = 1'd0;

assign m_axi_DDR_buf_V_AWLEN = 32'd0;

assign m_axi_DDR_buf_V_AWLOCK = 2'd0;

assign m_axi_DDR_buf_V_AWPROT = 3'd0;

assign m_axi_DDR_buf_V_AWQOS = 4'd0;

assign m_axi_DDR_buf_V_AWREGION = 4'd0;

assign m_axi_DDR_buf_V_AWSIZE = 3'd0;

assign m_axi_DDR_buf_V_AWUSER = 1'd0;

assign m_axi_DDR_buf_V_AWVALID = 1'b0;

assign m_axi_DDR_buf_V_BREADY = 1'b0;

assign m_axi_DDR_buf_V_WDATA = 512'd0;

assign m_axi_DDR_buf_V_WID = 1'd0;

assign m_axi_DDR_buf_V_WLAST = 1'b0;

assign m_axi_DDR_buf_V_WSTRB = 64'd0;

assign m_axi_DDR_buf_V_WUSER = 1'd0;

assign m_axi_DDR_buf_V_WVALID = 1'b0;

assign out_buf_sc_0_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_0_V_d0 = ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[3:0];

assign out_buf_sc_10_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_10_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[43:40]}};

assign out_buf_sc_11_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_11_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[47:44]}};

assign out_buf_sc_12_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_12_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[51:48]}};

assign out_buf_sc_13_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_13_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[55:52]}};

assign out_buf_sc_14_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_14_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[59:56]}};

assign out_buf_sc_15_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_15_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[63:60]}};

assign out_buf_sc_16_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_16_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[67:64]}};

assign out_buf_sc_17_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_17_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[71:68]}};

assign out_buf_sc_18_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_18_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[75:72]}};

assign out_buf_sc_19_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_19_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[79:76]}};

assign out_buf_sc_1_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_1_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[7:4]}};

assign out_buf_sc_20_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_20_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[83:80]}};

assign out_buf_sc_21_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_21_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[87:84]}};

assign out_buf_sc_22_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_22_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[91:88]}};

assign out_buf_sc_23_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_23_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[95:92]}};

assign out_buf_sc_24_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_24_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[99:96]}};

assign out_buf_sc_25_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_25_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[103:100]}};

assign out_buf_sc_26_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_26_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[107:104]}};

assign out_buf_sc_27_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_27_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[111:108]}};

assign out_buf_sc_28_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_28_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[115:112]}};

assign out_buf_sc_29_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_29_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[119:116]}};

assign out_buf_sc_2_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_2_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[11:8]}};

assign out_buf_sc_30_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_30_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[123:120]}};

assign out_buf_sc_31_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_31_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[127:124]}};

assign out_buf_sc_3_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_3_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[15:12]}};

assign out_buf_sc_4_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_4_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[19:16]}};

assign out_buf_sc_5_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_5_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[23:20]}};

assign out_buf_sc_6_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_6_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[27:24]}};

assign out_buf_sc_7_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_7_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[31:28]}};

assign out_buf_sc_8_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_8_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[35:32]}};

assign out_buf_sc_9_V_address0 = sext_ln414_2_fu_1491_p1;

assign out_buf_sc_9_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_997[39:36]}};

assign ret_mask_V_fu_1125_p1 = H_fmap_out[1:0];

assign row_2_fu_1397_p2 = (4'd1 + ap_phi_mux_row1_0_phi_fu_979_p4);

assign row_fu_1243_p2 = (4'd1 + ap_phi_mux_row_0_phi_fu_946_p4);

assign select_ln281_1_fu_1262_p3 = ((icmp_ln279_fu_1249_p2[0:0] === 1'b1) ? ap_phi_mux_row_0_phi_fu_946_p4 : row_fu_1243_p2);

assign select_ln281_fu_1254_p3 = ((icmp_ln279_fu_1249_p2[0:0] === 1'b1) ? col_0_reg_953 : 5'd0);

assign select_ln292_1_fu_1411_p3 = ((icmp_ln290_fu_1381_p2[0:0] === 1'b1) ? ap_phi_mux_row1_0_phi_fu_979_p4 : row_2_fu_1397_p2);

assign select_ln292_fu_1403_p3 = ((icmp_ln290_fu_1381_p2[0:0] === 1'b1) ? col2_0_reg_986 : 7'd0);

assign sext_ln264_fu_1066_p1 = ddr_channel_ptr_reg_1904;

assign sext_ln266_fu_1100_p1 = $signed(ddr_channel_ptr_1_fu_1093_p3);

assign sext_ln292_1_fu_1484_p1 = $signed(add_ln292_1_fu_1479_p2);

assign sext_ln292_fu_1445_p1 = $signed(grp_fu_1887_p3);

assign sext_ln321_1_fu_1198_p1 = $signed(add_ln321_reg_1961);

assign sext_ln321_fu_1178_p1 = $signed(mul_ln274_1_reg_1956);

assign sext_ln414_1_fu_1331_p1 = $signed(add_ln414_1_reg_2046);

assign sext_ln414_2_fu_1491_p1 = $signed(add_ln414_2_reg_2103_pp2_iter3_reg);

assign sext_ln414_fu_1327_p1 = $signed(add_ln414_reg_2041);

assign shl_ln_fu_1191_p3 = {{col_lim_reg_1933}, {3'd0}};

assign sub_ln264_1_fu_1038_p2 = (28'd0 - zext_ln264_fu_1034_p1);

assign sub_ln264_fu_1018_p2 = (32'd0 - out_channel_start);

assign sub_ln266_fu_1088_p2 = ($signed(ddr_channel_ptr_reg_1904) - $signed(zext_ln266_fu_1079_p1));

assign sub_ln292_fu_1470_p2 = (tmp_7_fu_1452_p3 - zext_ln292_2_fu_1466_p1);

assign sub_ln414_fu_1303_p2 = (tmp_5_fu_1285_p3 - zext_ln414_1_fu_1299_p1);

assign tmp_1_fu_1044_p4 = {{out_channel_start[31:5]}};

assign tmp_4_fu_1010_p3 = out_channel_start[32'd31];

assign tmp_5_fu_1285_p3 = {{select_ln281_1_reg_2017_pp1_iter1_reg}, {5'd0}};

assign tmp_6_fu_1292_p3 = {{select_ln281_1_reg_2017_pp1_iter1_reg}, {2'd0}};

assign tmp_7_fu_1452_p3 = {{select_ln292_1_reg_2070_pp2_iter1_reg}, {5'd0}};

assign tmp_8_fu_1459_p3 = {{select_ln292_1_reg_2070_pp2_iter1_reg}, {2'd0}};

assign tmp_s_fu_1024_p4 = {{sub_ln264_fu_1018_p2[31:5]}};

assign trunc_ln266_4_fu_1069_p4 = {{in_channels[10:5]}};

assign trunc_ln292_fu_1419_p1 = select_ln292_fu_1403_p3[1:0];

assign trunc_ln2_fu_1135_p4 = {{H_fmap_out[6:2]}};

assign zext_ln264_1_fu_1054_p1 = tmp_1_fu_1044_p4;

assign zext_ln264_fu_1034_p1 = tmp_s_fu_1024_p4;

assign zext_ln266_fu_1079_p1 = trunc_ln266_4_fu_1069_p4;

assign zext_ln274_fu_1227_p1 = i_0_reg_919_pp0_iter1_reg;

assign zext_ln281_1_fu_1213_p1 = col_lim_reg_1933;

assign zext_ln281_fu_1309_p1 = add_ln281_reg_2031;

assign zext_ln290_fu_1377_p1 = col2_0_reg_986;

assign zext_ln292_2_fu_1466_p1 = tmp_8_fu_1459_p3;

assign zext_ln292_3_fu_1442_p1 = tmp_9_reg_2083;

assign zext_ln321_fu_1181_p1 = DDR_buf_V_offset;

assign zext_ln414_1_fu_1299_p1 = tmp_6_fu_1292_p3;

assign zext_ln414_2_fu_1313_p1 = select_ln281_reg_2011_pp1_iter1_reg;

always @ (posedge ap_clk) begin
    shl_ln_reg_1966[2:0] <= 3'b000;
    zext_ln281_1_reg_1983[7:5] <= 3'b000;
    bound5_reg_2051[2:0] <= 3'b000;
    zext_ln292_3_reg_2093[8:5] <= 4'b0000;
end

endmodule //load_shortcut
