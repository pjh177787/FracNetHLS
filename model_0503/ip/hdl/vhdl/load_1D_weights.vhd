-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_1D_weights is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_weights_all_V_AWVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_AWREADY : IN STD_LOGIC;
    m_axi_weights_all_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_WREADY : IN STD_LOGIC;
    m_axi_weights_all_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_weights_all_V_WLAST : OUT STD_LOGIC;
    m_axi_weights_all_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARVALID : OUT STD_LOGIC;
    m_axi_weights_all_V_ARREADY : IN STD_LOGIC;
    m_axi_weights_all_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_all_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_all_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_all_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RVALID : IN STD_LOGIC;
    m_axi_weights_all_V_RREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_weights_all_V_RLAST : IN STD_LOGIC;
    m_axi_weights_all_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BVALID : IN STD_LOGIC;
    m_axi_weights_all_V_BREADY : OUT STD_LOGIC;
    m_axi_weights_all_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_all_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_all_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weights_all_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    weights_all_ptr : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of load_1D_weights is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_1FFF : STD_LOGIC_VECTOR (13 downto 0) := "01111111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110010";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_112 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010010";
    constant ap_const_lv32_111 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_132 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110010";
    constant ap_const_lv32_131 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110001";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_152 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010010";
    constant ap_const_lv32_151 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_172 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110010";
    constant ap_const_lv32_171 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110001";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_192 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010010";
    constant ap_const_lv32_191 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010001";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110010";
    constant ap_const_lv32_1B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110001";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010010";
    constant ap_const_lv32_1D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010001";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_1F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110010";
    constant ap_const_lv32_1F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_all_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal weights_all_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln56_reg_2317 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_pack_V_0_035_reg_226 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_pack_V_1_033_reg_238 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln321_fu_636_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln321_reg_2306 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln56_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln56_reg_2317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_658_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln321_1_fu_664_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_1_reg_2326 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_1_reg_2326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_pack_0_V_reg_2332 : STD_LOGIC_VECTOR (511 downto 0);
    signal data_pack_1_V_1_fu_668_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal data_pack_1_V_2_fu_674_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_3_fu_686_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln203_fu_778_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln60_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_1_fu_786_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_2_fu_866_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_3_fu_874_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_4_fu_954_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_5_fu_962_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_6_fu_1042_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_7_fu_1050_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_8_fu_1130_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_9_fu_1138_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_10_fu_1218_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_11_fu_1226_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_12_fu_1306_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_13_fu_1314_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_14_fu_1394_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_15_fu_1402_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_16_fu_1482_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_17_fu_1490_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_18_fu_1570_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_19_fu_1578_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_20_fu_1658_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_21_fu_1666_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_22_fu_1746_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_23_fu_1754_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_24_fu_1834_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_25_fu_1842_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_26_fu_1922_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_27_fu_1930_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_28_fu_2010_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_29_fu_2018_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_30_fu_2098_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_31_fu_2106_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal weight_buffer_9_V_w_reg_261 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_10_V_s_reg_272 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_11_V_s_reg_283 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_8_V_w_reg_294 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_12_V_s_reg_305 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_13_V_s_reg_316 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_7_V_w_reg_327 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_14_V_s_reg_338 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_15_V_s_reg_349 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_6_V_w_reg_360 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_16_V_s_reg_371 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_17_V_s_reg_382 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_5_V_w_reg_393 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_18_V_s_reg_404 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_19_V_s_reg_415 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_4_V_w_reg_426 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_20_V_s_reg_437 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_21_V_s_reg_448 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_3_V_w_reg_459 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_22_V_s_reg_470 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_23_V_s_reg_481 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_2_V_w_reg_492 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_24_V_s_reg_503 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_25_V_s_reg_514 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_1_V_w_reg_525 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_26_V_s_reg_536 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_27_V_s_reg_547 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_0_V_w_reg_558 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_28_V_s_reg_569 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_29_V_s_reg_580 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_30_V_s_reg_591 : STD_LOGIC_VECTOR (13 downto 0);
    signal weight_buffer_31_V_s_reg_602 : STD_LOGIC_VECTOR (13 downto 0);
    signal i1_0_reg_613 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln321_4_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln321_fu_624_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln321_3_fu_632_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln321_fu_628_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln647_fu_692_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_696_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_12_fu_722_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_712_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_fu_730_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_fu_734_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_740_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_0_fu_748_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_764_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_fu_756_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_812_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_1_fu_802_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_1_fu_820_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_1_fu_824_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_fu_794_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_830_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_1_fu_838_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_fu_854_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_1_fu_846_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_900_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2_fu_890_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_2_fu_908_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_2_fu_912_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_fu_882_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_918_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_2_fu_926_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_1_fu_942_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_2_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_2_fu_934_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_fu_988_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_3_fu_978_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_3_fu_996_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_3_fu_1000_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_970_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1006_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_3_fu_1014_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_2_fu_1030_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_3_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_3_fu_1022_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_fu_1076_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_4_fu_1066_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_4_fu_1084_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_4_fu_1088_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_fu_1058_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1094_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_4_fu_1102_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_3_fu_1118_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_4_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_4_fu_1110_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_1164_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_5_fu_1154_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_5_fu_1172_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_5_fu_1176_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_1146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_5_fu_1190_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_4_fu_1206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_5_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_5_fu_1198_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_1252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_6_fu_1242_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_6_fu_1260_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_6_fu_1264_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_1234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_1270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_6_fu_1278_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_5_fu_1294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_6_fu_1300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_6_fu_1286_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_1340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_7_fu_1330_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_7_fu_1348_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_7_fu_1352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_fu_1322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_7_fu_1366_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_6_fu_1382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_7_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_7_fu_1374_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_36_fu_1428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_8_fu_1418_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_8_fu_1436_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_8_fu_1440_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_1410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_1446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_8_fu_1454_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_7_fu_1470_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_8_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_8_fu_1462_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_1516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_9_fu_1506_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_9_fu_1524_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_9_fu_1528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_38_fu_1498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_9_fu_1542_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_8_fu_1558_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_9_fu_1564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_9_fu_1550_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_42_fu_1604_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_s_fu_1594_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_10_fu_1612_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_10_fu_1616_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_fu_1586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1622_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_10_fu_1630_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_9_fu_1646_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_10_fu_1652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_10_fu_1638_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_fu_1692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_10_fu_1682_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_11_fu_1700_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_11_fu_1704_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_1674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_1710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_11_fu_1718_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_10_fu_1734_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_11_fu_1740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_11_fu_1726_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_48_fu_1780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_11_fu_1770_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_12_fu_1788_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_12_fu_1792_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_fu_1762_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1798_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_12_fu_1806_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_11_fu_1822_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_12_fu_1828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_12_fu_1814_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_51_fu_1868_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_12_fu_1858_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_13_fu_1876_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_13_fu_1880_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_50_fu_1850_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_13_fu_1894_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_12_fu_1910_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_13_fu_1916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_13_fu_1902_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_54_fu_1956_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_13_fu_1946_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_14_fu_1964_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_14_fu_1968_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_53_fu_1938_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1974_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_14_fu_1982_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_13_fu_1998_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_14_fu_2004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_14_fu_1990_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_57_fu_2044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_14_fu_2034_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_15_fu_2052_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln415_15_fu_2056_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_fu_2026_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_2062_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_15_fu_2070_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln203_14_fu_2086_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln203_15_fu_2092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln746_15_fu_2078_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_19_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_20_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_21_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_22_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_23_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_24_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_25_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_26_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_27_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_28_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_29_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_30_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_return_31_preg : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_0_preg <= weight_buffer_0_V_w_reg_558;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_10_preg <= weight_buffer_10_V_s_reg_272;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_11_preg <= weight_buffer_11_V_s_reg_283;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_12_preg <= weight_buffer_12_V_s_reg_305;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_13_preg <= weight_buffer_13_V_s_reg_316;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_14_preg <= weight_buffer_14_V_s_reg_338;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_15_preg <= weight_buffer_15_V_s_reg_349;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_16_preg <= weight_buffer_16_V_s_reg_371;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_17_preg <= weight_buffer_17_V_s_reg_382;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_18_preg <= weight_buffer_18_V_s_reg_404;
                end if; 
            end if;
        end if;
    end process;


    ap_return_19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_19_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_19_preg <= weight_buffer_19_V_s_reg_415;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_1_preg <= weight_buffer_1_V_w_reg_525;
                end if; 
            end if;
        end if;
    end process;


    ap_return_20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_20_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_20_preg <= weight_buffer_20_V_s_reg_437;
                end if; 
            end if;
        end if;
    end process;


    ap_return_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_21_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_21_preg <= weight_buffer_21_V_s_reg_448;
                end if; 
            end if;
        end if;
    end process;


    ap_return_22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_22_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_22_preg <= weight_buffer_22_V_s_reg_470;
                end if; 
            end if;
        end if;
    end process;


    ap_return_23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_23_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_23_preg <= weight_buffer_23_V_s_reg_481;
                end if; 
            end if;
        end if;
    end process;


    ap_return_24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_24_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_24_preg <= weight_buffer_24_V_s_reg_503;
                end if; 
            end if;
        end if;
    end process;


    ap_return_25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_25_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_25_preg <= weight_buffer_25_V_s_reg_514;
                end if; 
            end if;
        end if;
    end process;


    ap_return_26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_26_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_26_preg <= weight_buffer_26_V_s_reg_536;
                end if; 
            end if;
        end if;
    end process;


    ap_return_27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_27_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_27_preg <= weight_buffer_27_V_s_reg_547;
                end if; 
            end if;
        end if;
    end process;


    ap_return_28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_28_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_28_preg <= weight_buffer_28_V_s_reg_569;
                end if; 
            end if;
        end if;
    end process;


    ap_return_29_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_29_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_29_preg <= weight_buffer_29_V_s_reg_580;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_2_preg <= weight_buffer_2_V_w_reg_492;
                end if; 
            end if;
        end if;
    end process;


    ap_return_30_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_30_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_30_preg <= weight_buffer_30_V_s_reg_591;
                end if; 
            end if;
        end if;
    end process;


    ap_return_31_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_31_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_31_preg <= weight_buffer_31_V_s_reg_602;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_3_preg <= weight_buffer_3_V_w_reg_459;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_4_preg <= weight_buffer_4_V_w_reg_426;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_5_preg <= weight_buffer_5_V_w_reg_393;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_6_preg <= weight_buffer_6_V_w_reg_360;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_7_preg <= weight_buffer_7_V_w_reg_327;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_8_preg <= weight_buffer_8_V_w_reg_294;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv14_0;
            else
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_return_9_preg <= weight_buffer_9_V_w_reg_261;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_0_reg_613 <= ap_const_lv2_0;
            elsif (((icmp_ln60_fu_680_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i1_0_reg_613 <= i_3_fu_686_p2;
            end if; 
        end if;
    end process;

    i_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_652_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_250 <= i_fu_658_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln321_reg_2306 <= add_ln321_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_2317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_pack_0_V_reg_2332 <= m_axi_weights_all_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_reg_2317_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_pack_V_0_035_reg_226 <= data_pack_1_V_1_fu_668_p3;
                data_pack_V_1_033_reg_238 <= data_pack_1_V_2_fu_674_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln56_reg_2317 <= icmp_ln56_fu_652_p2;
                icmp_ln56_reg_2317_pp0_iter1_reg <= icmp_ln56_reg_2317;
                trunc_ln321_1_reg_2326_pp0_iter1_reg <= trunc_ln321_1_reg_2326;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_652_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln321_1_reg_2326 <= trunc_ln321_1_fu_664_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_680_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                weight_buffer_0_V_w_reg_558 <= select_ln203_1_fu_786_p3;
                weight_buffer_10_V_s_reg_272 <= select_ln203_20_fu_1658_p3;
                weight_buffer_11_V_s_reg_283 <= select_ln203_22_fu_1746_p3;
                weight_buffer_12_V_s_reg_305 <= select_ln203_24_fu_1834_p3;
                weight_buffer_13_V_s_reg_316 <= select_ln203_26_fu_1922_p3;
                weight_buffer_14_V_s_reg_338 <= select_ln203_28_fu_2010_p3;
                weight_buffer_15_V_s_reg_349 <= select_ln203_30_fu_2098_p3;
                weight_buffer_16_V_s_reg_371 <= select_ln203_fu_778_p3;
                weight_buffer_17_V_s_reg_382 <= select_ln203_2_fu_866_p3;
                weight_buffer_18_V_s_reg_404 <= select_ln203_4_fu_954_p3;
                weight_buffer_19_V_s_reg_415 <= select_ln203_6_fu_1042_p3;
                weight_buffer_1_V_w_reg_525 <= select_ln203_3_fu_874_p3;
                weight_buffer_20_V_s_reg_437 <= select_ln203_9_fu_1138_p3;
                weight_buffer_21_V_s_reg_448 <= select_ln203_11_fu_1226_p3;
                weight_buffer_22_V_s_reg_470 <= select_ln203_13_fu_1314_p3;
                weight_buffer_23_V_s_reg_481 <= select_ln203_15_fu_1402_p3;
                weight_buffer_24_V_s_reg_503 <= select_ln203_17_fu_1490_p3;
                weight_buffer_25_V_s_reg_514 <= select_ln203_19_fu_1578_p3;
                weight_buffer_26_V_s_reg_536 <= select_ln203_21_fu_1666_p3;
                weight_buffer_27_V_s_reg_547 <= select_ln203_23_fu_1754_p3;
                weight_buffer_28_V_s_reg_569 <= select_ln203_25_fu_1842_p3;
                weight_buffer_29_V_s_reg_580 <= select_ln203_27_fu_1930_p3;
                weight_buffer_2_V_w_reg_492 <= select_ln203_5_fu_962_p3;
                weight_buffer_30_V_s_reg_591 <= select_ln203_29_fu_2018_p3;
                weight_buffer_31_V_s_reg_602 <= select_ln203_31_fu_2106_p3;
                weight_buffer_3_V_w_reg_459 <= select_ln203_7_fu_1050_p3;
                weight_buffer_4_V_w_reg_426 <= select_ln203_8_fu_1130_p3;
                weight_buffer_5_V_w_reg_393 <= select_ln203_10_fu_1218_p3;
                weight_buffer_6_V_w_reg_360 <= select_ln203_12_fu_1306_p3;
                weight_buffer_7_V_w_reg_327 <= select_ln203_14_fu_1394_p3;
                weight_buffer_8_V_w_reg_294 <= select_ln203_16_fu_1482_p3;
                weight_buffer_9_V_w_reg_261 <= select_ln203_18_fu_1570_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_weights_all_V_ARREADY, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, icmp_ln56_fu_652_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, icmp_ln60_fu_680_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln56_fu_652_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln56_fu_652_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln321_fu_636_p2 <= std_logic_vector(unsigned(zext_ln321_3_fu_632_p1) + unsigned(zext_ln321_fu_628_p1));
    add_ln415_10_fu_1616_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_1594_p4) + unsigned(zext_ln415_10_fu_1612_p1));
    add_ln415_11_fu_1704_p2 <= std_logic_vector(unsigned(trunc_ln708_10_fu_1682_p4) + unsigned(zext_ln415_11_fu_1700_p1));
    add_ln415_12_fu_1792_p2 <= std_logic_vector(unsigned(trunc_ln708_11_fu_1770_p4) + unsigned(zext_ln415_12_fu_1788_p1));
    add_ln415_13_fu_1880_p2 <= std_logic_vector(unsigned(trunc_ln708_12_fu_1858_p4) + unsigned(zext_ln415_13_fu_1876_p1));
    add_ln415_14_fu_1968_p2 <= std_logic_vector(unsigned(trunc_ln708_13_fu_1946_p4) + unsigned(zext_ln415_14_fu_1964_p1));
    add_ln415_15_fu_2056_p2 <= std_logic_vector(unsigned(trunc_ln708_14_fu_2034_p4) + unsigned(zext_ln415_15_fu_2052_p1));
    add_ln415_1_fu_824_p2 <= std_logic_vector(unsigned(trunc_ln708_1_fu_802_p4) + unsigned(zext_ln415_1_fu_820_p1));
    add_ln415_2_fu_912_p2 <= std_logic_vector(unsigned(trunc_ln708_2_fu_890_p4) + unsigned(zext_ln415_2_fu_908_p1));
    add_ln415_3_fu_1000_p2 <= std_logic_vector(unsigned(trunc_ln708_3_fu_978_p4) + unsigned(zext_ln415_3_fu_996_p1));
    add_ln415_4_fu_1088_p2 <= std_logic_vector(unsigned(trunc_ln708_4_fu_1066_p4) + unsigned(zext_ln415_4_fu_1084_p1));
    add_ln415_5_fu_1176_p2 <= std_logic_vector(unsigned(trunc_ln708_5_fu_1154_p4) + unsigned(zext_ln415_5_fu_1172_p1));
    add_ln415_6_fu_1264_p2 <= std_logic_vector(unsigned(trunc_ln708_6_fu_1242_p4) + unsigned(zext_ln415_6_fu_1260_p1));
    add_ln415_7_fu_1352_p2 <= std_logic_vector(unsigned(trunc_ln708_7_fu_1330_p4) + unsigned(zext_ln415_7_fu_1348_p1));
    add_ln415_8_fu_1440_p2 <= std_logic_vector(unsigned(trunc_ln708_8_fu_1418_p4) + unsigned(zext_ln415_8_fu_1436_p1));
    add_ln415_9_fu_1528_p2 <= std_logic_vector(unsigned(trunc_ln708_9_fu_1506_p4) + unsigned(zext_ln415_9_fu_1524_p1));
    add_ln415_fu_734_p2 <= std_logic_vector(unsigned(trunc_ln6_fu_712_p4) + unsigned(zext_ln415_fu_730_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_weights_all_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln56_reg_2317)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln56_reg_2317 = ap_const_lv1_0) and (m_axi_weights_all_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_weights_all_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln56_reg_2317)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln56_reg_2317 = ap_const_lv1_0) and (m_axi_weights_all_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_weights_all_V_RVALID, icmp_ln56_reg_2317)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((icmp_ln56_reg_2317 = ap_const_lv1_0) and (m_axi_weights_all_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln56_fu_652_p2)
    begin
        if ((icmp_ln56_fu_652_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13, icmp_ln60_fu_680_p2)
    begin
        if ((((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_0_V_w_reg_558, ap_return_0_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_0 <= weight_buffer_0_V_w_reg_558;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_1_V_w_reg_525, ap_return_1_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_1 <= weight_buffer_1_V_w_reg_525;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_10_V_s_reg_272, ap_return_10_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_10 <= weight_buffer_10_V_s_reg_272;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_11_V_s_reg_283, ap_return_11_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_11 <= weight_buffer_11_V_s_reg_283;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_12_V_s_reg_305, ap_return_12_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_12 <= weight_buffer_12_V_s_reg_305;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_13_V_s_reg_316, ap_return_13_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_13 <= weight_buffer_13_V_s_reg_316;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_14_V_s_reg_338, ap_return_14_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_14 <= weight_buffer_14_V_s_reg_338;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_15_V_s_reg_349, ap_return_15_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_15 <= weight_buffer_15_V_s_reg_349;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_16_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_16_V_s_reg_371, ap_return_16_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_16 <= weight_buffer_16_V_s_reg_371;
        else 
            ap_return_16 <= ap_return_16_preg;
        end if; 
    end process;


    ap_return_17_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_17_V_s_reg_382, ap_return_17_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_17 <= weight_buffer_17_V_s_reg_382;
        else 
            ap_return_17 <= ap_return_17_preg;
        end if; 
    end process;


    ap_return_18_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_18_V_s_reg_404, ap_return_18_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_18 <= weight_buffer_18_V_s_reg_404;
        else 
            ap_return_18 <= ap_return_18_preg;
        end if; 
    end process;


    ap_return_19_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_19_V_s_reg_415, ap_return_19_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_19 <= weight_buffer_19_V_s_reg_415;
        else 
            ap_return_19 <= ap_return_19_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_2_V_w_reg_492, ap_return_2_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_2 <= weight_buffer_2_V_w_reg_492;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_20_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_20_V_s_reg_437, ap_return_20_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_20 <= weight_buffer_20_V_s_reg_437;
        else 
            ap_return_20 <= ap_return_20_preg;
        end if; 
    end process;


    ap_return_21_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_21_V_s_reg_448, ap_return_21_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_21 <= weight_buffer_21_V_s_reg_448;
        else 
            ap_return_21 <= ap_return_21_preg;
        end if; 
    end process;


    ap_return_22_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_22_V_s_reg_470, ap_return_22_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_22 <= weight_buffer_22_V_s_reg_470;
        else 
            ap_return_22 <= ap_return_22_preg;
        end if; 
    end process;


    ap_return_23_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_23_V_s_reg_481, ap_return_23_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_23 <= weight_buffer_23_V_s_reg_481;
        else 
            ap_return_23 <= ap_return_23_preg;
        end if; 
    end process;


    ap_return_24_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_24_V_s_reg_503, ap_return_24_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_24 <= weight_buffer_24_V_s_reg_503;
        else 
            ap_return_24 <= ap_return_24_preg;
        end if; 
    end process;


    ap_return_25_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_25_V_s_reg_514, ap_return_25_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_25 <= weight_buffer_25_V_s_reg_514;
        else 
            ap_return_25 <= ap_return_25_preg;
        end if; 
    end process;


    ap_return_26_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_26_V_s_reg_536, ap_return_26_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_26 <= weight_buffer_26_V_s_reg_536;
        else 
            ap_return_26 <= ap_return_26_preg;
        end if; 
    end process;


    ap_return_27_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_27_V_s_reg_547, ap_return_27_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_27 <= weight_buffer_27_V_s_reg_547;
        else 
            ap_return_27 <= ap_return_27_preg;
        end if; 
    end process;


    ap_return_28_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_28_V_s_reg_569, ap_return_28_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_28 <= weight_buffer_28_V_s_reg_569;
        else 
            ap_return_28 <= ap_return_28_preg;
        end if; 
    end process;


    ap_return_29_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_29_V_s_reg_580, ap_return_29_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_29 <= weight_buffer_29_V_s_reg_580;
        else 
            ap_return_29 <= ap_return_29_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_3_V_w_reg_459, ap_return_3_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_3 <= weight_buffer_3_V_w_reg_459;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_30_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_30_V_s_reg_591, ap_return_30_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_30 <= weight_buffer_30_V_s_reg_591;
        else 
            ap_return_30 <= ap_return_30_preg;
        end if; 
    end process;


    ap_return_31_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_31_V_s_reg_602, ap_return_31_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_31 <= weight_buffer_31_V_s_reg_602;
        else 
            ap_return_31 <= ap_return_31_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_4_V_w_reg_426, ap_return_4_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_4 <= weight_buffer_4_V_w_reg_426;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_5_V_w_reg_393, ap_return_5_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_5 <= weight_buffer_5_V_w_reg_393;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_6_V_w_reg_360, ap_return_6_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_6 <= weight_buffer_6_V_w_reg_360;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_7_V_w_reg_327, ap_return_7_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_7 <= weight_buffer_7_V_w_reg_327;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_8_V_w_reg_294, ap_return_8_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_8 <= weight_buffer_8_V_w_reg_294;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_CS_fsm_state13, icmp_ln60_fu_680_p2, weight_buffer_9_V_w_reg_261, ap_return_9_preg)
    begin
        if (((icmp_ln60_fu_680_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_return_9 <= weight_buffer_9_V_w_reg_261;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    data_pack_1_V_1_fu_668_p3 <= 
        data_pack_V_0_035_reg_226 when (trunc_ln321_1_reg_2326_pp0_iter1_reg(0) = '1') else 
        data_pack_0_V_reg_2332;
    data_pack_1_V_2_fu_674_p3 <= 
        data_pack_0_V_reg_2332 when (trunc_ln321_1_reg_2326_pp0_iter1_reg(0) = '1') else 
        data_pack_V_1_033_reg_238;
    i_3_fu_686_p2 <= std_logic_vector(unsigned(i1_0_reg_613) + unsigned(ap_const_lv2_1));
    i_fu_658_p2 <= std_logic_vector(unsigned(i_0_reg_250) + unsigned(ap_const_lv2_1));
    icmp_ln203_10_fu_1652_p2 <= "1" when (or_ln203_9_fu_1646_p2 = ap_const_lv5_A) else "0";
    icmp_ln203_11_fu_1740_p2 <= "1" when (or_ln203_10_fu_1734_p2 = ap_const_lv5_B) else "0";
    icmp_ln203_12_fu_1828_p2 <= "1" when (or_ln203_11_fu_1822_p2 = ap_const_lv5_C) else "0";
    icmp_ln203_13_fu_1916_p2 <= "1" when (or_ln203_12_fu_1910_p2 = ap_const_lv5_D) else "0";
    icmp_ln203_14_fu_2004_p2 <= "1" when (or_ln203_13_fu_1998_p2 = ap_const_lv5_E) else "0";
    icmp_ln203_15_fu_2092_p2 <= "1" when (or_ln203_14_fu_2086_p2 = ap_const_lv5_F) else "0";
    icmp_ln203_1_fu_860_p2 <= "1" when (or_ln203_fu_854_p2 = ap_const_lv5_1) else "0";
    icmp_ln203_2_fu_948_p2 <= "1" when (or_ln203_1_fu_942_p2 = ap_const_lv5_2) else "0";
    icmp_ln203_3_fu_1036_p2 <= "1" when (or_ln203_2_fu_1030_p2 = ap_const_lv5_3) else "0";
    icmp_ln203_4_fu_1124_p2 <= "1" when (or_ln203_3_fu_1118_p2 = ap_const_lv5_4) else "0";
    icmp_ln203_5_fu_1212_p2 <= "1" when (or_ln203_4_fu_1206_p2 = ap_const_lv5_5) else "0";
    icmp_ln203_6_fu_1300_p2 <= "1" when (or_ln203_5_fu_1294_p2 = ap_const_lv5_6) else "0";
    icmp_ln203_7_fu_1388_p2 <= "1" when (or_ln203_6_fu_1382_p2 = ap_const_lv5_7) else "0";
    icmp_ln203_8_fu_1476_p2 <= "1" when (or_ln203_7_fu_1470_p2 = ap_const_lv5_8) else "0";
    icmp_ln203_9_fu_1564_p2 <= "1" when (or_ln203_8_fu_1558_p2 = ap_const_lv5_9) else "0";
    icmp_ln203_fu_772_p2 <= "1" when (shl_ln_fu_764_p3 = ap_const_lv5_0) else "0";
    icmp_ln56_fu_652_p2 <= "1" when (i_0_reg_250 = ap_const_lv2_2) else "0";
    icmp_ln60_fu_680_p2 <= "1" when (i1_0_reg_613 = ap_const_lv2_2) else "0";
    m_axi_weights_all_V_ARADDR <= zext_ln321_4_fu_642_p1(32 - 1 downto 0);
    m_axi_weights_all_V_ARBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_ARID <= ap_const_lv1_0;
    m_axi_weights_all_V_ARLEN <= ap_const_lv32_2;
    m_axi_weights_all_V_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_ARPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_ARQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_ARREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_ARUSER <= ap_const_lv1_0;

    m_axi_weights_all_V_ARVALID_assign_proc : process(m_axi_weights_all_V_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_weights_all_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_AWADDR <= ap_const_lv32_0;
    m_axi_weights_all_V_AWBURST <= ap_const_lv2_0;
    m_axi_weights_all_V_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_all_V_AWID <= ap_const_lv1_0;
    m_axi_weights_all_V_AWLEN <= ap_const_lv32_0;
    m_axi_weights_all_V_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_all_V_AWPROT <= ap_const_lv3_0;
    m_axi_weights_all_V_AWQOS <= ap_const_lv4_0;
    m_axi_weights_all_V_AWREGION <= ap_const_lv4_0;
    m_axi_weights_all_V_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_all_V_AWUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_AWVALID <= ap_const_logic_0;
    m_axi_weights_all_V_BREADY <= ap_const_logic_0;

    m_axi_weights_all_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_2317, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln56_reg_2317 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_weights_all_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_all_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_all_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_weights_all_V_WID <= ap_const_lv1_0;
    m_axi_weights_all_V_WLAST <= ap_const_logic_0;
    m_axi_weights_all_V_WSTRB <= ap_const_lv64_0;
    m_axi_weights_all_V_WUSER <= ap_const_lv1_0;
    m_axi_weights_all_V_WVALID <= ap_const_logic_0;
    or_ln203_10_fu_1734_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_B);
    or_ln203_11_fu_1822_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_C);
    or_ln203_12_fu_1910_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_D);
    or_ln203_13_fu_1998_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_E);
    or_ln203_14_fu_2086_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_F);
    or_ln203_1_fu_942_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_2);
    or_ln203_2_fu_1030_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_3);
    or_ln203_3_fu_1118_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_4);
    or_ln203_4_fu_1206_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_5);
    or_ln203_5_fu_1294_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_6);
    or_ln203_6_fu_1382_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_7);
    or_ln203_7_fu_1470_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_8);
    or_ln203_8_fu_1558_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_9);
    or_ln203_9_fu_1646_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_A);
    or_ln203_fu_854_p2 <= (shl_ln_fu_764_p3 or ap_const_lv5_1);
    p_Val2_s_fu_696_p3 <= 
        data_pack_V_1_033_reg_238 when (trunc_ln647_fu_692_p1(0) = '1') else 
        data_pack_V_0_035_reg_226;
    phitmp_0_fu_748_p3 <= 
        add_ln415_fu_734_p2 when (tmp_11_fu_704_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_10_fu_1630_p3 <= 
        add_ln415_10_fu_1616_p2 when (tmp_41_fu_1586_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_11_fu_1718_p3 <= 
        add_ln415_11_fu_1704_p2 when (tmp_44_fu_1674_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_12_fu_1806_p3 <= 
        add_ln415_12_fu_1792_p2 when (tmp_47_fu_1762_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_13_fu_1894_p3 <= 
        add_ln415_13_fu_1880_p2 when (tmp_50_fu_1850_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_14_fu_1982_p3 <= 
        add_ln415_14_fu_1968_p2 when (tmp_53_fu_1938_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_15_fu_2070_p3 <= 
        add_ln415_15_fu_2056_p2 when (tmp_56_fu_2026_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_1_fu_838_p3 <= 
        add_ln415_1_fu_824_p2 when (tmp_14_fu_794_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_2_fu_926_p3 <= 
        add_ln415_2_fu_912_p2 when (tmp_17_fu_882_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_3_fu_1014_p3 <= 
        add_ln415_3_fu_1000_p2 when (tmp_20_fu_970_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_4_fu_1102_p3 <= 
        add_ln415_4_fu_1088_p2 when (tmp_23_fu_1058_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_5_fu_1190_p3 <= 
        add_ln415_5_fu_1176_p2 when (tmp_26_fu_1146_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_6_fu_1278_p3 <= 
        add_ln415_6_fu_1264_p2 when (tmp_29_fu_1234_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_7_fu_1366_p3 <= 
        add_ln415_7_fu_1352_p2 when (tmp_32_fu_1322_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_8_fu_1454_p3 <= 
        add_ln415_8_fu_1440_p2 when (tmp_35_fu_1410_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    phitmp_9_fu_1542_p3 <= 
        add_ln415_9_fu_1528_p2 when (tmp_38_fu_1498_p3(0) = '1') else 
        ap_const_lv14_1FFF;
    select_ln203_10_fu_1218_p3 <= 
        select_ln746_5_fu_1198_p3 when (icmp_ln203_5_fu_1212_p2(0) = '1') else 
        weight_buffer_5_V_w_reg_393;
    select_ln203_11_fu_1226_p3 <= 
        weight_buffer_21_V_s_reg_448 when (icmp_ln203_5_fu_1212_p2(0) = '1') else 
        select_ln746_5_fu_1198_p3;
    select_ln203_12_fu_1306_p3 <= 
        select_ln746_6_fu_1286_p3 when (icmp_ln203_6_fu_1300_p2(0) = '1') else 
        weight_buffer_6_V_w_reg_360;
    select_ln203_13_fu_1314_p3 <= 
        weight_buffer_22_V_s_reg_470 when (icmp_ln203_6_fu_1300_p2(0) = '1') else 
        select_ln746_6_fu_1286_p3;
    select_ln203_14_fu_1394_p3 <= 
        select_ln746_7_fu_1374_p3 when (icmp_ln203_7_fu_1388_p2(0) = '1') else 
        weight_buffer_7_V_w_reg_327;
    select_ln203_15_fu_1402_p3 <= 
        weight_buffer_23_V_s_reg_481 when (icmp_ln203_7_fu_1388_p2(0) = '1') else 
        select_ln746_7_fu_1374_p3;
    select_ln203_16_fu_1482_p3 <= 
        select_ln746_8_fu_1462_p3 when (icmp_ln203_8_fu_1476_p2(0) = '1') else 
        weight_buffer_8_V_w_reg_294;
    select_ln203_17_fu_1490_p3 <= 
        weight_buffer_24_V_s_reg_503 when (icmp_ln203_8_fu_1476_p2(0) = '1') else 
        select_ln746_8_fu_1462_p3;
    select_ln203_18_fu_1570_p3 <= 
        select_ln746_9_fu_1550_p3 when (icmp_ln203_9_fu_1564_p2(0) = '1') else 
        weight_buffer_9_V_w_reg_261;
    select_ln203_19_fu_1578_p3 <= 
        weight_buffer_25_V_s_reg_514 when (icmp_ln203_9_fu_1564_p2(0) = '1') else 
        select_ln746_9_fu_1550_p3;
    select_ln203_1_fu_786_p3 <= 
        select_ln746_fu_756_p3 when (icmp_ln203_fu_772_p2(0) = '1') else 
        weight_buffer_0_V_w_reg_558;
    select_ln203_20_fu_1658_p3 <= 
        select_ln746_10_fu_1638_p3 when (icmp_ln203_10_fu_1652_p2(0) = '1') else 
        weight_buffer_10_V_s_reg_272;
    select_ln203_21_fu_1666_p3 <= 
        weight_buffer_26_V_s_reg_536 when (icmp_ln203_10_fu_1652_p2(0) = '1') else 
        select_ln746_10_fu_1638_p3;
    select_ln203_22_fu_1746_p3 <= 
        select_ln746_11_fu_1726_p3 when (icmp_ln203_11_fu_1740_p2(0) = '1') else 
        weight_buffer_11_V_s_reg_283;
    select_ln203_23_fu_1754_p3 <= 
        weight_buffer_27_V_s_reg_547 when (icmp_ln203_11_fu_1740_p2(0) = '1') else 
        select_ln746_11_fu_1726_p3;
    select_ln203_24_fu_1834_p3 <= 
        select_ln746_12_fu_1814_p3 when (icmp_ln203_12_fu_1828_p2(0) = '1') else 
        weight_buffer_12_V_s_reg_305;
    select_ln203_25_fu_1842_p3 <= 
        weight_buffer_28_V_s_reg_569 when (icmp_ln203_12_fu_1828_p2(0) = '1') else 
        select_ln746_12_fu_1814_p3;
    select_ln203_26_fu_1922_p3 <= 
        select_ln746_13_fu_1902_p3 when (icmp_ln203_13_fu_1916_p2(0) = '1') else 
        weight_buffer_13_V_s_reg_316;
    select_ln203_27_fu_1930_p3 <= 
        weight_buffer_29_V_s_reg_580 when (icmp_ln203_13_fu_1916_p2(0) = '1') else 
        select_ln746_13_fu_1902_p3;
    select_ln203_28_fu_2010_p3 <= 
        select_ln746_14_fu_1990_p3 when (icmp_ln203_14_fu_2004_p2(0) = '1') else 
        weight_buffer_14_V_s_reg_338;
    select_ln203_29_fu_2018_p3 <= 
        weight_buffer_30_V_s_reg_591 when (icmp_ln203_14_fu_2004_p2(0) = '1') else 
        select_ln746_14_fu_1990_p3;
    select_ln203_2_fu_866_p3 <= 
        weight_buffer_17_V_s_reg_382 when (icmp_ln203_1_fu_860_p2(0) = '1') else 
        select_ln746_1_fu_846_p3;
    select_ln203_30_fu_2098_p3 <= 
        select_ln746_15_fu_2078_p3 when (icmp_ln203_15_fu_2092_p2(0) = '1') else 
        weight_buffer_15_V_s_reg_349;
    select_ln203_31_fu_2106_p3 <= 
        weight_buffer_31_V_s_reg_602 when (icmp_ln203_15_fu_2092_p2(0) = '1') else 
        select_ln746_15_fu_2078_p3;
    select_ln203_3_fu_874_p3 <= 
        select_ln746_1_fu_846_p3 when (icmp_ln203_1_fu_860_p2(0) = '1') else 
        weight_buffer_1_V_w_reg_525;
    select_ln203_4_fu_954_p3 <= 
        weight_buffer_18_V_s_reg_404 when (icmp_ln203_2_fu_948_p2(0) = '1') else 
        select_ln746_2_fu_934_p3;
    select_ln203_5_fu_962_p3 <= 
        select_ln746_2_fu_934_p3 when (icmp_ln203_2_fu_948_p2(0) = '1') else 
        weight_buffer_2_V_w_reg_492;
    select_ln203_6_fu_1042_p3 <= 
        weight_buffer_19_V_s_reg_415 when (icmp_ln203_3_fu_1036_p2(0) = '1') else 
        select_ln746_3_fu_1022_p3;
    select_ln203_7_fu_1050_p3 <= 
        select_ln746_3_fu_1022_p3 when (icmp_ln203_3_fu_1036_p2(0) = '1') else 
        weight_buffer_3_V_w_reg_459;
    select_ln203_8_fu_1130_p3 <= 
        select_ln746_4_fu_1110_p3 when (icmp_ln203_4_fu_1124_p2(0) = '1') else 
        weight_buffer_4_V_w_reg_426;
    select_ln203_9_fu_1138_p3 <= 
        weight_buffer_20_V_s_reg_437 when (icmp_ln203_4_fu_1124_p2(0) = '1') else 
        select_ln746_4_fu_1110_p3;
    select_ln203_fu_778_p3 <= 
        weight_buffer_16_V_s_reg_371 when (icmp_ln203_fu_772_p2(0) = '1') else 
        select_ln746_fu_756_p3;
    select_ln746_10_fu_1638_p3 <= 
        phitmp_10_fu_1630_p3 when (tmp_43_fu_1622_p3(0) = '1') else 
        add_ln415_10_fu_1616_p2;
    select_ln746_11_fu_1726_p3 <= 
        phitmp_11_fu_1718_p3 when (tmp_46_fu_1710_p3(0) = '1') else 
        add_ln415_11_fu_1704_p2;
    select_ln746_12_fu_1814_p3 <= 
        phitmp_12_fu_1806_p3 when (tmp_49_fu_1798_p3(0) = '1') else 
        add_ln415_12_fu_1792_p2;
    select_ln746_13_fu_1902_p3 <= 
        phitmp_13_fu_1894_p3 when (tmp_52_fu_1886_p3(0) = '1') else 
        add_ln415_13_fu_1880_p2;
    select_ln746_14_fu_1990_p3 <= 
        phitmp_14_fu_1982_p3 when (tmp_55_fu_1974_p3(0) = '1') else 
        add_ln415_14_fu_1968_p2;
    select_ln746_15_fu_2078_p3 <= 
        phitmp_15_fu_2070_p3 when (tmp_58_fu_2062_p3(0) = '1') else 
        add_ln415_15_fu_2056_p2;
    select_ln746_1_fu_846_p3 <= 
        phitmp_1_fu_838_p3 when (tmp_16_fu_830_p3(0) = '1') else 
        add_ln415_1_fu_824_p2;
    select_ln746_2_fu_934_p3 <= 
        phitmp_2_fu_926_p3 when (tmp_19_fu_918_p3(0) = '1') else 
        add_ln415_2_fu_912_p2;
    select_ln746_3_fu_1022_p3 <= 
        phitmp_3_fu_1014_p3 when (tmp_22_fu_1006_p3(0) = '1') else 
        add_ln415_3_fu_1000_p2;
    select_ln746_4_fu_1110_p3 <= 
        phitmp_4_fu_1102_p3 when (tmp_25_fu_1094_p3(0) = '1') else 
        add_ln415_4_fu_1088_p2;
    select_ln746_5_fu_1198_p3 <= 
        phitmp_5_fu_1190_p3 when (tmp_28_fu_1182_p3(0) = '1') else 
        add_ln415_5_fu_1176_p2;
    select_ln746_6_fu_1286_p3 <= 
        phitmp_6_fu_1278_p3 when (tmp_31_fu_1270_p3(0) = '1') else 
        add_ln415_6_fu_1264_p2;
    select_ln746_7_fu_1374_p3 <= 
        phitmp_7_fu_1366_p3 when (tmp_34_fu_1358_p3(0) = '1') else 
        add_ln415_7_fu_1352_p2;
    select_ln746_8_fu_1462_p3 <= 
        phitmp_8_fu_1454_p3 when (tmp_37_fu_1446_p3(0) = '1') else 
        add_ln415_8_fu_1440_p2;
    select_ln746_9_fu_1550_p3 <= 
        phitmp_9_fu_1542_p3 when (tmp_40_fu_1534_p3(0) = '1') else 
        add_ln415_9_fu_1528_p2;
    select_ln746_fu_756_p3 <= 
        phitmp_0_fu_748_p3 when (tmp_13_fu_740_p3(0) = '1') else 
        add_ln415_fu_734_p2;
    shl_ln_fu_764_p3 <= (trunc_ln647_fu_692_p1 & ap_const_lv4_0);
    tmp_11_fu_704_p3 <= p_Val2_s_fu_696_p3(31 downto 31);
    tmp_12_fu_722_p3 <= p_Val2_s_fu_696_p3(17 downto 17);
    tmp_13_fu_740_p3 <= add_ln415_fu_734_p2(13 downto 13);
    tmp_14_fu_794_p3 <= p_Val2_s_fu_696_p3(63 downto 63);
    tmp_15_fu_812_p3 <= p_Val2_s_fu_696_p3(49 downto 49);
    tmp_16_fu_830_p3 <= add_ln415_1_fu_824_p2(13 downto 13);
    tmp_17_fu_882_p3 <= p_Val2_s_fu_696_p3(95 downto 95);
    tmp_18_fu_900_p3 <= p_Val2_s_fu_696_p3(81 downto 81);
    tmp_19_fu_918_p3 <= add_ln415_2_fu_912_p2(13 downto 13);
    tmp_20_fu_970_p3 <= p_Val2_s_fu_696_p3(127 downto 127);
    tmp_21_fu_988_p3 <= p_Val2_s_fu_696_p3(113 downto 113);
    tmp_22_fu_1006_p3 <= add_ln415_3_fu_1000_p2(13 downto 13);
    tmp_23_fu_1058_p3 <= p_Val2_s_fu_696_p3(159 downto 159);
    tmp_24_fu_1076_p3 <= p_Val2_s_fu_696_p3(145 downto 145);
    tmp_25_fu_1094_p3 <= add_ln415_4_fu_1088_p2(13 downto 13);
    tmp_26_fu_1146_p3 <= p_Val2_s_fu_696_p3(191 downto 191);
    tmp_27_fu_1164_p3 <= p_Val2_s_fu_696_p3(177 downto 177);
    tmp_28_fu_1182_p3 <= add_ln415_5_fu_1176_p2(13 downto 13);
    tmp_29_fu_1234_p3 <= p_Val2_s_fu_696_p3(223 downto 223);
    tmp_30_fu_1252_p3 <= p_Val2_s_fu_696_p3(209 downto 209);
    tmp_31_fu_1270_p3 <= add_ln415_6_fu_1264_p2(13 downto 13);
    tmp_32_fu_1322_p3 <= p_Val2_s_fu_696_p3(255 downto 255);
    tmp_33_fu_1340_p3 <= p_Val2_s_fu_696_p3(241 downto 241);
    tmp_34_fu_1358_p3 <= add_ln415_7_fu_1352_p2(13 downto 13);
    tmp_35_fu_1410_p3 <= p_Val2_s_fu_696_p3(287 downto 287);
    tmp_36_fu_1428_p3 <= p_Val2_s_fu_696_p3(273 downto 273);
    tmp_37_fu_1446_p3 <= add_ln415_8_fu_1440_p2(13 downto 13);
    tmp_38_fu_1498_p3 <= p_Val2_s_fu_696_p3(319 downto 319);
    tmp_39_fu_1516_p3 <= p_Val2_s_fu_696_p3(305 downto 305);
    tmp_40_fu_1534_p3 <= add_ln415_9_fu_1528_p2(13 downto 13);
    tmp_41_fu_1586_p3 <= p_Val2_s_fu_696_p3(351 downto 351);
    tmp_42_fu_1604_p3 <= p_Val2_s_fu_696_p3(337 downto 337);
    tmp_43_fu_1622_p3 <= add_ln415_10_fu_1616_p2(13 downto 13);
    tmp_44_fu_1674_p3 <= p_Val2_s_fu_696_p3(383 downto 383);
    tmp_45_fu_1692_p3 <= p_Val2_s_fu_696_p3(369 downto 369);
    tmp_46_fu_1710_p3 <= add_ln415_11_fu_1704_p2(13 downto 13);
    tmp_47_fu_1762_p3 <= p_Val2_s_fu_696_p3(415 downto 415);
    tmp_48_fu_1780_p3 <= p_Val2_s_fu_696_p3(401 downto 401);
    tmp_49_fu_1798_p3 <= add_ln415_12_fu_1792_p2(13 downto 13);
    tmp_50_fu_1850_p3 <= p_Val2_s_fu_696_p3(447 downto 447);
    tmp_51_fu_1868_p3 <= p_Val2_s_fu_696_p3(433 downto 433);
    tmp_52_fu_1886_p3 <= add_ln415_13_fu_1880_p2(13 downto 13);
    tmp_53_fu_1938_p3 <= p_Val2_s_fu_696_p3(479 downto 479);
    tmp_54_fu_1956_p3 <= p_Val2_s_fu_696_p3(465 downto 465);
    tmp_55_fu_1974_p3 <= add_ln415_14_fu_1968_p2(13 downto 13);
    tmp_56_fu_2026_p3 <= p_Val2_s_fu_696_p3(511 downto 511);
    tmp_57_fu_2044_p3 <= p_Val2_s_fu_696_p3(497 downto 497);
    tmp_58_fu_2062_p3 <= add_ln415_15_fu_2056_p2(13 downto 13);
    trunc_ln321_1_fu_664_p1 <= i_0_reg_250(1 - 1 downto 0);
    trunc_ln321_fu_624_p1 <= weights_all_ptr(13 - 1 downto 0);
    trunc_ln647_fu_692_p1 <= i1_0_reg_613(1 - 1 downto 0);
    trunc_ln6_fu_712_p4 <= p_Val2_s_fu_696_p3(31 downto 18);
    trunc_ln708_10_fu_1682_p4 <= p_Val2_s_fu_696_p3(383 downto 370);
    trunc_ln708_11_fu_1770_p4 <= p_Val2_s_fu_696_p3(415 downto 402);
    trunc_ln708_12_fu_1858_p4 <= p_Val2_s_fu_696_p3(447 downto 434);
    trunc_ln708_13_fu_1946_p4 <= p_Val2_s_fu_696_p3(479 downto 466);
    trunc_ln708_14_fu_2034_p4 <= p_Val2_s_fu_696_p3(511 downto 498);
    trunc_ln708_1_fu_802_p4 <= p_Val2_s_fu_696_p3(63 downto 50);
    trunc_ln708_2_fu_890_p4 <= p_Val2_s_fu_696_p3(95 downto 82);
    trunc_ln708_3_fu_978_p4 <= p_Val2_s_fu_696_p3(127 downto 114);
    trunc_ln708_4_fu_1066_p4 <= p_Val2_s_fu_696_p3(159 downto 146);
    trunc_ln708_5_fu_1154_p4 <= p_Val2_s_fu_696_p3(191 downto 178);
    trunc_ln708_6_fu_1242_p4 <= p_Val2_s_fu_696_p3(223 downto 210);
    trunc_ln708_7_fu_1330_p4 <= p_Val2_s_fu_696_p3(255 downto 242);
    trunc_ln708_8_fu_1418_p4 <= p_Val2_s_fu_696_p3(287 downto 274);
    trunc_ln708_9_fu_1506_p4 <= p_Val2_s_fu_696_p3(319 downto 306);
    trunc_ln708_s_fu_1594_p4 <= p_Val2_s_fu_696_p3(351 downto 338);

    weights_all_V_blk_n_AR_assign_proc : process(m_axi_weights_all_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            weights_all_V_blk_n_AR <= m_axi_weights_all_V_ARREADY;
        else 
            weights_all_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    weights_all_V_blk_n_R_assign_proc : process(m_axi_weights_all_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln56_reg_2317)
    begin
        if (((icmp_ln56_reg_2317 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            weights_all_V_blk_n_R <= m_axi_weights_all_V_RVALID;
        else 
            weights_all_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    zext_ln321_3_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_all_V_offset),27));
    zext_ln321_4_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_reg_2306),64));
    zext_ln321_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln321_fu_624_p1),27));
    zext_ln415_10_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1604_p3),14));
    zext_ln415_11_fu_1700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1692_p3),14));
    zext_ln415_12_fu_1788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1780_p3),14));
    zext_ln415_13_fu_1876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_1868_p3),14));
    zext_ln415_14_fu_1964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1956_p3),14));
    zext_ln415_15_fu_2052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_2044_p3),14));
    zext_ln415_1_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_812_p3),14));
    zext_ln415_2_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_900_p3),14));
    zext_ln415_3_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_988_p3),14));
    zext_ln415_4_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_1076_p3),14));
    zext_ln415_5_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1164_p3),14));
    zext_ln415_6_fu_1260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_1252_p3),14));
    zext_ln415_7_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1340_p3),14));
    zext_ln415_8_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1428_p3),14));
    zext_ln415_9_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1516_p3),14));
    zext_ln415_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_722_p3),14));
end behav;
