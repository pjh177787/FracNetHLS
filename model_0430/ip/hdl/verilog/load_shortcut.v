// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load_shortcut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_buf_sc_0_V_address0,
        out_buf_sc_0_V_ce0,
        out_buf_sc_0_V_we0,
        out_buf_sc_0_V_d0,
        out_buf_sc_1_V_address0,
        out_buf_sc_1_V_ce0,
        out_buf_sc_1_V_we0,
        out_buf_sc_1_V_d0,
        out_buf_sc_2_V_address0,
        out_buf_sc_2_V_ce0,
        out_buf_sc_2_V_we0,
        out_buf_sc_2_V_d0,
        out_buf_sc_3_V_address0,
        out_buf_sc_3_V_ce0,
        out_buf_sc_3_V_we0,
        out_buf_sc_3_V_d0,
        out_buf_sc_4_V_address0,
        out_buf_sc_4_V_ce0,
        out_buf_sc_4_V_we0,
        out_buf_sc_4_V_d0,
        out_buf_sc_5_V_address0,
        out_buf_sc_5_V_ce0,
        out_buf_sc_5_V_we0,
        out_buf_sc_5_V_d0,
        out_buf_sc_6_V_address0,
        out_buf_sc_6_V_ce0,
        out_buf_sc_6_V_we0,
        out_buf_sc_6_V_d0,
        out_buf_sc_7_V_address0,
        out_buf_sc_7_V_ce0,
        out_buf_sc_7_V_we0,
        out_buf_sc_7_V_d0,
        out_buf_sc_8_V_address0,
        out_buf_sc_8_V_ce0,
        out_buf_sc_8_V_we0,
        out_buf_sc_8_V_d0,
        out_buf_sc_9_V_address0,
        out_buf_sc_9_V_ce0,
        out_buf_sc_9_V_we0,
        out_buf_sc_9_V_d0,
        out_buf_sc_10_V_address0,
        out_buf_sc_10_V_ce0,
        out_buf_sc_10_V_we0,
        out_buf_sc_10_V_d0,
        out_buf_sc_11_V_address0,
        out_buf_sc_11_V_ce0,
        out_buf_sc_11_V_we0,
        out_buf_sc_11_V_d0,
        out_buf_sc_12_V_address0,
        out_buf_sc_12_V_ce0,
        out_buf_sc_12_V_we0,
        out_buf_sc_12_V_d0,
        out_buf_sc_13_V_address0,
        out_buf_sc_13_V_ce0,
        out_buf_sc_13_V_we0,
        out_buf_sc_13_V_d0,
        out_buf_sc_14_V_address0,
        out_buf_sc_14_V_ce0,
        out_buf_sc_14_V_we0,
        out_buf_sc_14_V_d0,
        out_buf_sc_15_V_address0,
        out_buf_sc_15_V_ce0,
        out_buf_sc_15_V_we0,
        out_buf_sc_15_V_d0,
        out_buf_sc_16_V_address0,
        out_buf_sc_16_V_ce0,
        out_buf_sc_16_V_we0,
        out_buf_sc_16_V_d0,
        out_buf_sc_17_V_address0,
        out_buf_sc_17_V_ce0,
        out_buf_sc_17_V_we0,
        out_buf_sc_17_V_d0,
        out_buf_sc_18_V_address0,
        out_buf_sc_18_V_ce0,
        out_buf_sc_18_V_we0,
        out_buf_sc_18_V_d0,
        out_buf_sc_19_V_address0,
        out_buf_sc_19_V_ce0,
        out_buf_sc_19_V_we0,
        out_buf_sc_19_V_d0,
        out_buf_sc_20_V_address0,
        out_buf_sc_20_V_ce0,
        out_buf_sc_20_V_we0,
        out_buf_sc_20_V_d0,
        out_buf_sc_21_V_address0,
        out_buf_sc_21_V_ce0,
        out_buf_sc_21_V_we0,
        out_buf_sc_21_V_d0,
        out_buf_sc_22_V_address0,
        out_buf_sc_22_V_ce0,
        out_buf_sc_22_V_we0,
        out_buf_sc_22_V_d0,
        out_buf_sc_23_V_address0,
        out_buf_sc_23_V_ce0,
        out_buf_sc_23_V_we0,
        out_buf_sc_23_V_d0,
        out_buf_sc_24_V_address0,
        out_buf_sc_24_V_ce0,
        out_buf_sc_24_V_we0,
        out_buf_sc_24_V_d0,
        out_buf_sc_25_V_address0,
        out_buf_sc_25_V_ce0,
        out_buf_sc_25_V_we0,
        out_buf_sc_25_V_d0,
        out_buf_sc_26_V_address0,
        out_buf_sc_26_V_ce0,
        out_buf_sc_26_V_we0,
        out_buf_sc_26_V_d0,
        out_buf_sc_27_V_address0,
        out_buf_sc_27_V_ce0,
        out_buf_sc_27_V_we0,
        out_buf_sc_27_V_d0,
        out_buf_sc_28_V_address0,
        out_buf_sc_28_V_ce0,
        out_buf_sc_28_V_we0,
        out_buf_sc_28_V_d0,
        out_buf_sc_29_V_address0,
        out_buf_sc_29_V_ce0,
        out_buf_sc_29_V_we0,
        out_buf_sc_29_V_d0,
        out_buf_sc_30_V_address0,
        out_buf_sc_30_V_ce0,
        out_buf_sc_30_V_we0,
        out_buf_sc_30_V_d0,
        out_buf_sc_31_V_address0,
        out_buf_sc_31_V_ce0,
        out_buf_sc_31_V_we0,
        out_buf_sc_31_V_d0,
        m_axi_DDR_buf_V_AWVALID,
        m_axi_DDR_buf_V_AWREADY,
        m_axi_DDR_buf_V_AWADDR,
        m_axi_DDR_buf_V_AWID,
        m_axi_DDR_buf_V_AWLEN,
        m_axi_DDR_buf_V_AWSIZE,
        m_axi_DDR_buf_V_AWBURST,
        m_axi_DDR_buf_V_AWLOCK,
        m_axi_DDR_buf_V_AWCACHE,
        m_axi_DDR_buf_V_AWPROT,
        m_axi_DDR_buf_V_AWQOS,
        m_axi_DDR_buf_V_AWREGION,
        m_axi_DDR_buf_V_AWUSER,
        m_axi_DDR_buf_V_WVALID,
        m_axi_DDR_buf_V_WREADY,
        m_axi_DDR_buf_V_WDATA,
        m_axi_DDR_buf_V_WSTRB,
        m_axi_DDR_buf_V_WLAST,
        m_axi_DDR_buf_V_WID,
        m_axi_DDR_buf_V_WUSER,
        m_axi_DDR_buf_V_ARVALID,
        m_axi_DDR_buf_V_ARREADY,
        m_axi_DDR_buf_V_ARADDR,
        m_axi_DDR_buf_V_ARID,
        m_axi_DDR_buf_V_ARLEN,
        m_axi_DDR_buf_V_ARSIZE,
        m_axi_DDR_buf_V_ARBURST,
        m_axi_DDR_buf_V_ARLOCK,
        m_axi_DDR_buf_V_ARCACHE,
        m_axi_DDR_buf_V_ARPROT,
        m_axi_DDR_buf_V_ARQOS,
        m_axi_DDR_buf_V_ARREGION,
        m_axi_DDR_buf_V_ARUSER,
        m_axi_DDR_buf_V_RVALID,
        m_axi_DDR_buf_V_RREADY,
        m_axi_DDR_buf_V_RDATA,
        m_axi_DDR_buf_V_RLAST,
        m_axi_DDR_buf_V_RID,
        m_axi_DDR_buf_V_RUSER,
        m_axi_DDR_buf_V_RRESP,
        m_axi_DDR_buf_V_BVALID,
        m_axi_DDR_buf_V_BREADY,
        m_axi_DDR_buf_V_BRESP,
        m_axi_DDR_buf_V_BID,
        m_axi_DDR_buf_V_BUSER,
        DDR_buf_V_offset,
        H_fmap_out,
        in_channels,
        out_channel_start,
        row_tile_start,
        switch_bank,
        ddr_stage_V_address0,
        ddr_stage_V_ce0,
        ddr_stage_V_we0,
        ddr_stage_V_d0,
        ddr_stage_V_q0,
        ddr_tmp_V_0_address0,
        ddr_tmp_V_0_ce0,
        ddr_tmp_V_0_we0,
        ddr_tmp_V_0_d0,
        ddr_tmp_V_0_q0,
        ddr_tmp_V_1_address0,
        ddr_tmp_V_1_ce0,
        ddr_tmp_V_1_we0,
        ddr_tmp_V_1_d0,
        ddr_tmp_V_1_q0,
        ddr_tmp_V_2_address0,
        ddr_tmp_V_2_ce0,
        ddr_tmp_V_2_we0,
        ddr_tmp_V_2_d0,
        ddr_tmp_V_2_q0,
        ddr_tmp_V_3_address0,
        ddr_tmp_V_3_ce0,
        ddr_tmp_V_3_we0,
        ddr_tmp_V_3_d0,
        ddr_tmp_V_3_q0
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_pp0_stage0 = 52'd70368744177664;
parameter    ap_ST_fsm_state50 = 52'd140737488355328;
parameter    ap_ST_fsm_pp1_stage0 = 52'd281474976710656;
parameter    ap_ST_fsm_state56 = 52'd562949953421312;
parameter    ap_ST_fsm_pp2_stage0 = 52'd1125899906842624;
parameter    ap_ST_fsm_state62 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] out_buf_sc_0_V_address0;
output   out_buf_sc_0_V_ce0;
output   out_buf_sc_0_V_we0;
output  [3:0] out_buf_sc_0_V_d0;
output  [9:0] out_buf_sc_1_V_address0;
output   out_buf_sc_1_V_ce0;
output   out_buf_sc_1_V_we0;
output  [3:0] out_buf_sc_1_V_d0;
output  [9:0] out_buf_sc_2_V_address0;
output   out_buf_sc_2_V_ce0;
output   out_buf_sc_2_V_we0;
output  [3:0] out_buf_sc_2_V_d0;
output  [9:0] out_buf_sc_3_V_address0;
output   out_buf_sc_3_V_ce0;
output   out_buf_sc_3_V_we0;
output  [3:0] out_buf_sc_3_V_d0;
output  [9:0] out_buf_sc_4_V_address0;
output   out_buf_sc_4_V_ce0;
output   out_buf_sc_4_V_we0;
output  [3:0] out_buf_sc_4_V_d0;
output  [9:0] out_buf_sc_5_V_address0;
output   out_buf_sc_5_V_ce0;
output   out_buf_sc_5_V_we0;
output  [3:0] out_buf_sc_5_V_d0;
output  [9:0] out_buf_sc_6_V_address0;
output   out_buf_sc_6_V_ce0;
output   out_buf_sc_6_V_we0;
output  [3:0] out_buf_sc_6_V_d0;
output  [9:0] out_buf_sc_7_V_address0;
output   out_buf_sc_7_V_ce0;
output   out_buf_sc_7_V_we0;
output  [3:0] out_buf_sc_7_V_d0;
output  [9:0] out_buf_sc_8_V_address0;
output   out_buf_sc_8_V_ce0;
output   out_buf_sc_8_V_we0;
output  [3:0] out_buf_sc_8_V_d0;
output  [9:0] out_buf_sc_9_V_address0;
output   out_buf_sc_9_V_ce0;
output   out_buf_sc_9_V_we0;
output  [3:0] out_buf_sc_9_V_d0;
output  [9:0] out_buf_sc_10_V_address0;
output   out_buf_sc_10_V_ce0;
output   out_buf_sc_10_V_we0;
output  [3:0] out_buf_sc_10_V_d0;
output  [9:0] out_buf_sc_11_V_address0;
output   out_buf_sc_11_V_ce0;
output   out_buf_sc_11_V_we0;
output  [3:0] out_buf_sc_11_V_d0;
output  [9:0] out_buf_sc_12_V_address0;
output   out_buf_sc_12_V_ce0;
output   out_buf_sc_12_V_we0;
output  [3:0] out_buf_sc_12_V_d0;
output  [9:0] out_buf_sc_13_V_address0;
output   out_buf_sc_13_V_ce0;
output   out_buf_sc_13_V_we0;
output  [3:0] out_buf_sc_13_V_d0;
output  [9:0] out_buf_sc_14_V_address0;
output   out_buf_sc_14_V_ce0;
output   out_buf_sc_14_V_we0;
output  [3:0] out_buf_sc_14_V_d0;
output  [9:0] out_buf_sc_15_V_address0;
output   out_buf_sc_15_V_ce0;
output   out_buf_sc_15_V_we0;
output  [3:0] out_buf_sc_15_V_d0;
output  [9:0] out_buf_sc_16_V_address0;
output   out_buf_sc_16_V_ce0;
output   out_buf_sc_16_V_we0;
output  [3:0] out_buf_sc_16_V_d0;
output  [9:0] out_buf_sc_17_V_address0;
output   out_buf_sc_17_V_ce0;
output   out_buf_sc_17_V_we0;
output  [3:0] out_buf_sc_17_V_d0;
output  [9:0] out_buf_sc_18_V_address0;
output   out_buf_sc_18_V_ce0;
output   out_buf_sc_18_V_we0;
output  [3:0] out_buf_sc_18_V_d0;
output  [9:0] out_buf_sc_19_V_address0;
output   out_buf_sc_19_V_ce0;
output   out_buf_sc_19_V_we0;
output  [3:0] out_buf_sc_19_V_d0;
output  [9:0] out_buf_sc_20_V_address0;
output   out_buf_sc_20_V_ce0;
output   out_buf_sc_20_V_we0;
output  [3:0] out_buf_sc_20_V_d0;
output  [9:0] out_buf_sc_21_V_address0;
output   out_buf_sc_21_V_ce0;
output   out_buf_sc_21_V_we0;
output  [3:0] out_buf_sc_21_V_d0;
output  [9:0] out_buf_sc_22_V_address0;
output   out_buf_sc_22_V_ce0;
output   out_buf_sc_22_V_we0;
output  [3:0] out_buf_sc_22_V_d0;
output  [9:0] out_buf_sc_23_V_address0;
output   out_buf_sc_23_V_ce0;
output   out_buf_sc_23_V_we0;
output  [3:0] out_buf_sc_23_V_d0;
output  [9:0] out_buf_sc_24_V_address0;
output   out_buf_sc_24_V_ce0;
output   out_buf_sc_24_V_we0;
output  [3:0] out_buf_sc_24_V_d0;
output  [9:0] out_buf_sc_25_V_address0;
output   out_buf_sc_25_V_ce0;
output   out_buf_sc_25_V_we0;
output  [3:0] out_buf_sc_25_V_d0;
output  [9:0] out_buf_sc_26_V_address0;
output   out_buf_sc_26_V_ce0;
output   out_buf_sc_26_V_we0;
output  [3:0] out_buf_sc_26_V_d0;
output  [9:0] out_buf_sc_27_V_address0;
output   out_buf_sc_27_V_ce0;
output   out_buf_sc_27_V_we0;
output  [3:0] out_buf_sc_27_V_d0;
output  [9:0] out_buf_sc_28_V_address0;
output   out_buf_sc_28_V_ce0;
output   out_buf_sc_28_V_we0;
output  [3:0] out_buf_sc_28_V_d0;
output  [9:0] out_buf_sc_29_V_address0;
output   out_buf_sc_29_V_ce0;
output   out_buf_sc_29_V_we0;
output  [3:0] out_buf_sc_29_V_d0;
output  [9:0] out_buf_sc_30_V_address0;
output   out_buf_sc_30_V_ce0;
output   out_buf_sc_30_V_we0;
output  [3:0] out_buf_sc_30_V_d0;
output  [9:0] out_buf_sc_31_V_address0;
output   out_buf_sc_31_V_ce0;
output   out_buf_sc_31_V_we0;
output  [3:0] out_buf_sc_31_V_d0;
output   m_axi_DDR_buf_V_AWVALID;
input   m_axi_DDR_buf_V_AWREADY;
output  [31:0] m_axi_DDR_buf_V_AWADDR;
output  [0:0] m_axi_DDR_buf_V_AWID;
output  [31:0] m_axi_DDR_buf_V_AWLEN;
output  [2:0] m_axi_DDR_buf_V_AWSIZE;
output  [1:0] m_axi_DDR_buf_V_AWBURST;
output  [1:0] m_axi_DDR_buf_V_AWLOCK;
output  [3:0] m_axi_DDR_buf_V_AWCACHE;
output  [2:0] m_axi_DDR_buf_V_AWPROT;
output  [3:0] m_axi_DDR_buf_V_AWQOS;
output  [3:0] m_axi_DDR_buf_V_AWREGION;
output  [0:0] m_axi_DDR_buf_V_AWUSER;
output   m_axi_DDR_buf_V_WVALID;
input   m_axi_DDR_buf_V_WREADY;
output  [511:0] m_axi_DDR_buf_V_WDATA;
output  [63:0] m_axi_DDR_buf_V_WSTRB;
output   m_axi_DDR_buf_V_WLAST;
output  [0:0] m_axi_DDR_buf_V_WID;
output  [0:0] m_axi_DDR_buf_V_WUSER;
output   m_axi_DDR_buf_V_ARVALID;
input   m_axi_DDR_buf_V_ARREADY;
output  [31:0] m_axi_DDR_buf_V_ARADDR;
output  [0:0] m_axi_DDR_buf_V_ARID;
output  [31:0] m_axi_DDR_buf_V_ARLEN;
output  [2:0] m_axi_DDR_buf_V_ARSIZE;
output  [1:0] m_axi_DDR_buf_V_ARBURST;
output  [1:0] m_axi_DDR_buf_V_ARLOCK;
output  [3:0] m_axi_DDR_buf_V_ARCACHE;
output  [2:0] m_axi_DDR_buf_V_ARPROT;
output  [3:0] m_axi_DDR_buf_V_ARQOS;
output  [3:0] m_axi_DDR_buf_V_ARREGION;
output  [0:0] m_axi_DDR_buf_V_ARUSER;
input   m_axi_DDR_buf_V_RVALID;
output   m_axi_DDR_buf_V_RREADY;
input  [511:0] m_axi_DDR_buf_V_RDATA;
input   m_axi_DDR_buf_V_RLAST;
input  [0:0] m_axi_DDR_buf_V_RID;
input  [0:0] m_axi_DDR_buf_V_RUSER;
input  [1:0] m_axi_DDR_buf_V_RRESP;
input   m_axi_DDR_buf_V_BVALID;
output   m_axi_DDR_buf_V_BREADY;
input  [1:0] m_axi_DDR_buf_V_BRESP;
input  [0:0] m_axi_DDR_buf_V_BID;
input  [0:0] m_axi_DDR_buf_V_BUSER;
input  [25:0] DDR_buf_V_offset;
input  [7:0] H_fmap_out;
input  [11:0] in_channels;
input  [31:0] out_channel_start;
input  [31:0] row_tile_start;
input  [0:0] switch_bank;
output  [7:0] ddr_stage_V_address0;
output   ddr_stage_V_ce0;
output   ddr_stage_V_we0;
output  [511:0] ddr_stage_V_d0;
input  [511:0] ddr_stage_V_q0;
output  [7:0] ddr_tmp_V_0_address0;
output   ddr_tmp_V_0_ce0;
output   ddr_tmp_V_0_we0;
output  [127:0] ddr_tmp_V_0_d0;
input  [127:0] ddr_tmp_V_0_q0;
output  [7:0] ddr_tmp_V_1_address0;
output   ddr_tmp_V_1_ce0;
output   ddr_tmp_V_1_we0;
output  [127:0] ddr_tmp_V_1_d0;
input  [127:0] ddr_tmp_V_1_q0;
output  [7:0] ddr_tmp_V_2_address0;
output   ddr_tmp_V_2_ce0;
output   ddr_tmp_V_2_we0;
output  [127:0] ddr_tmp_V_2_d0;
input  [127:0] ddr_tmp_V_2_q0;
output  [7:0] ddr_tmp_V_3_address0;
output   ddr_tmp_V_3_ce0;
output   ddr_tmp_V_3_we0;
output  [127:0] ddr_tmp_V_3_d0;
input  [127:0] ddr_tmp_V_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_buf_sc_0_V_ce0;
reg out_buf_sc_0_V_we0;
reg out_buf_sc_1_V_ce0;
reg out_buf_sc_1_V_we0;
reg out_buf_sc_2_V_ce0;
reg out_buf_sc_2_V_we0;
reg out_buf_sc_3_V_ce0;
reg out_buf_sc_3_V_we0;
reg out_buf_sc_4_V_ce0;
reg out_buf_sc_4_V_we0;
reg out_buf_sc_5_V_ce0;
reg out_buf_sc_5_V_we0;
reg out_buf_sc_6_V_ce0;
reg out_buf_sc_6_V_we0;
reg out_buf_sc_7_V_ce0;
reg out_buf_sc_7_V_we0;
reg out_buf_sc_8_V_ce0;
reg out_buf_sc_8_V_we0;
reg out_buf_sc_9_V_ce0;
reg out_buf_sc_9_V_we0;
reg out_buf_sc_10_V_ce0;
reg out_buf_sc_10_V_we0;
reg out_buf_sc_11_V_ce0;
reg out_buf_sc_11_V_we0;
reg out_buf_sc_12_V_ce0;
reg out_buf_sc_12_V_we0;
reg out_buf_sc_13_V_ce0;
reg out_buf_sc_13_V_we0;
reg out_buf_sc_14_V_ce0;
reg out_buf_sc_14_V_we0;
reg out_buf_sc_15_V_ce0;
reg out_buf_sc_15_V_we0;
reg out_buf_sc_16_V_ce0;
reg out_buf_sc_16_V_we0;
reg out_buf_sc_17_V_ce0;
reg out_buf_sc_17_V_we0;
reg out_buf_sc_18_V_ce0;
reg out_buf_sc_18_V_we0;
reg out_buf_sc_19_V_ce0;
reg out_buf_sc_19_V_we0;
reg out_buf_sc_20_V_ce0;
reg out_buf_sc_20_V_we0;
reg out_buf_sc_21_V_ce0;
reg out_buf_sc_21_V_we0;
reg out_buf_sc_22_V_ce0;
reg out_buf_sc_22_V_we0;
reg out_buf_sc_23_V_ce0;
reg out_buf_sc_23_V_we0;
reg out_buf_sc_24_V_ce0;
reg out_buf_sc_24_V_we0;
reg out_buf_sc_25_V_ce0;
reg out_buf_sc_25_V_we0;
reg out_buf_sc_26_V_ce0;
reg out_buf_sc_26_V_we0;
reg out_buf_sc_27_V_ce0;
reg out_buf_sc_27_V_we0;
reg out_buf_sc_28_V_ce0;
reg out_buf_sc_28_V_we0;
reg out_buf_sc_29_V_ce0;
reg out_buf_sc_29_V_we0;
reg out_buf_sc_30_V_ce0;
reg out_buf_sc_30_V_we0;
reg out_buf_sc_31_V_ce0;
reg out_buf_sc_31_V_we0;
reg m_axi_DDR_buf_V_ARVALID;
reg m_axi_DDR_buf_V_RREADY;
reg[7:0] ddr_stage_V_address0;
reg ddr_stage_V_ce0;
reg ddr_stage_V_we0;
reg[7:0] ddr_tmp_V_0_address0;
reg ddr_tmp_V_0_ce0;
reg ddr_tmp_V_0_we0;
reg[7:0] ddr_tmp_V_1_address0;
reg ddr_tmp_V_1_ce0;
reg ddr_tmp_V_1_we0;
reg[7:0] ddr_tmp_V_2_address0;
reg ddr_tmp_V_2_ce0;
reg ddr_tmp_V_2_we0;
reg[7:0] ddr_tmp_V_3_address0;
reg ddr_tmp_V_3_ce0;
reg ddr_tmp_V_3_we0;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    DDR_buf_V_blk_n_AR;
wire    ap_CS_fsm_state40;
reg    DDR_buf_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln269_reg_2283;
reg   [30:0] i_0_reg_943;
reg   [30:0] i_0_reg_943_pp0_iter1_reg;
wire    ap_block_state47_pp0_stage0_iter0;
reg    ap_block_state48_pp0_stage0_iter1;
wire    ap_block_state49_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [34:0] indvar_flatten_reg_955;
reg   [3:0] row_0_reg_966;
reg   [30:0] col_0_reg_977;
reg   [10:0] indvar_flatten7_reg_988;
reg   [3:0] row1_0_reg_999;
reg   [6:0] col2_0_reg_1010;
wire   [63:0] grp_fu_1049_p1;
reg   [63:0] tmp_reg_2143;
wire    ap_CS_fsm_state8;
wire   [63:0] grp_fu_1044_p2;
reg   [63:0] tmp_1_reg_2148;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_1037_p1;
reg   [31:0] x_assign_reg_2153;
wire    ap_CS_fsm_state25;
reg   [0:0] p_Result_s_reg_2159;
wire    ap_CS_fsm_state26;
wire   [22:0] tmp_V_1_fu_1078_p1;
reg   [22:0] tmp_V_1_reg_2164;
wire   [0:0] isNeg_fu_1092_p3;
reg   [0:0] isNeg_reg_2170;
wire  signed [8:0] ush_fu_1110_p3;
reg  signed [8:0] ush_reg_2175;
wire   [0:0] icmp_ln37_2_fu_1118_p2;
reg   [0:0] icmp_ln37_2_reg_2181;
wire   [31:0] p_Val2_8_fu_1194_p3;
reg   [31:0] p_Val2_8_reg_2186;
wire    ap_CS_fsm_state27;
wire   [0:0] icmp_ln37_3_fu_1201_p2;
reg   [0:0] icmp_ln37_3_reg_2193;
wire  signed [27:0] ddr_channel_ptr_fu_1254_p3;
reg  signed [27:0] ddr_channel_ptr_reg_2198;
wire    ap_CS_fsm_state32;
wire   [28:0] ddr_channel_ptr_3_fu_1306_p3;
reg  signed [28:0] ddr_channel_ptr_3_reg_2206;
wire    ap_CS_fsm_state33;
wire   [31:0] grp_fu_1034_p1;
reg   [31:0] tmp_3_reg_2211;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln37_fu_1337_p2;
reg   [0:0] icmp_ln37_reg_2227;
wire   [0:0] icmp_ln37_1_fu_1343_p2;
reg   [0:0] icmp_ln37_1_reg_2232;
wire   [0:0] grp_fu_1040_p2;
reg   [0:0] tmp_8_reg_2237;
wire    ap_CS_fsm_state35;
wire   [31:0] grp_fu_1349_p2;
reg   [31:0] mul_ln271_reg_2242;
wire  signed [31:0] ret_fu_1379_p3;
reg  signed [31:0] ret_reg_2247;
wire    ap_CS_fsm_state36;
wire  signed [31:0] add_ln271_fu_1386_p2;
reg  signed [31:0] add_ln271_reg_2256;
wire   [31:0] grp_fu_1391_p2;
reg   [31:0] mul_ln271_1_reg_2261;
wire    ap_CS_fsm_state38;
wire   [32:0] add_ln321_fu_1402_p2;
reg   [32:0] add_ln321_reg_2266;
wire    ap_CS_fsm_state39;
wire   [31:0] shl_ln269_fu_1408_p2;
reg   [31:0] shl_ln269_reg_2271;
wire   [0:0] icmp_ln269_fu_1428_p2;
reg   [0:0] icmp_ln269_reg_2283_pp0_iter1_reg;
wire   [30:0] i_fu_1433_p2;
reg   [30:0] i_reg_2287;
reg    ap_enable_reg_pp0_iter0;
reg   [511:0] DDR_buf_V_addr_read_reg_2292;
wire   [34:0] tmp_11_fu_1444_p3;
reg   [34:0] tmp_11_reg_2297;
wire    ap_CS_fsm_state50;
wire   [0:0] icmp_ln275_fu_1460_p2;
reg   [0:0] icmp_ln275_reg_2302;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state51_pp1_stage0_iter0;
wire    ap_block_state52_pp1_stage0_iter1;
wire    ap_block_state53_pp1_stage0_iter2;
wire    ap_block_state54_pp1_stage0_iter3;
wire    ap_block_state55_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln275_reg_2302_pp1_iter1_reg;
reg   [0:0] icmp_ln275_reg_2302_pp1_iter2_reg;
reg   [0:0] icmp_ln275_reg_2302_pp1_iter3_reg;
wire   [34:0] add_ln275_fu_1465_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [30:0] select_ln275_fu_1477_p3;
reg   [30:0] select_ln275_reg_2311;
reg   [30:0] select_ln275_reg_2311_pp1_iter1_reg;
reg   [30:0] select_ln275_reg_2311_pp1_iter2_reg;
wire   [3:0] select_ln275_1_fu_1485_p3;
reg   [3:0] select_ln275_1_reg_2316;
reg   [3:0] select_ln275_1_reg_2316_pp1_iter1_reg;
reg   [3:0] select_ln275_1_reg_2316_pp1_iter2_reg;
reg   [3:0] select_ln275_1_reg_2316_pp1_iter3_reg;
wire   [8:0] trunc_ln414_fu_1493_p1;
reg   [8:0] trunc_ln414_reg_2325;
reg   [8:0] trunc_ln414_reg_2325_pp1_iter1_reg;
reg   [8:0] trunc_ln414_reg_2325_pp1_iter2_reg;
reg   [8:0] trunc_ln414_reg_2325_pp1_iter3_reg;
wire   [30:0] col_fu_1497_p2;
wire   [31:0] grp_fu_1506_p2;
reg   [31:0] mul_ln275_reg_2341;
wire   [8:0] grp_fu_2107_p3;
reg   [8:0] add_ln414_reg_2351;
reg    ap_enable_reg_pp1_iter3;
wire   [10:0] bound4_fu_1605_p3;
reg   [10:0] bound4_reg_2356;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln285_fu_1621_p2;
reg   [0:0] icmp_ln285_reg_2361;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state57_pp2_stage0_iter0;
wire    ap_block_state58_pp2_stage0_iter1;
wire    ap_block_state59_pp2_stage0_iter2;
wire    ap_block_state60_pp2_stage0_iter3;
wire    ap_block_state61_pp2_stage0_iter4;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln285_reg_2361_pp2_iter1_reg;
reg   [0:0] icmp_ln285_reg_2361_pp2_iter2_reg;
reg   [0:0] icmp_ln285_reg_2361_pp2_iter3_reg;
wire   [10:0] add_ln285_fu_1626_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [6:0] select_ln288_fu_1638_p3;
reg   [6:0] select_ln288_reg_2370;
reg   [6:0] select_ln288_reg_2370_pp2_iter1_reg;
wire   [3:0] select_ln288_1_fu_1646_p3;
reg   [3:0] select_ln288_1_reg_2375;
reg   [3:0] select_ln288_1_reg_2375_pp2_iter1_reg;
wire   [1:0] trunc_ln288_fu_1654_p1;
reg   [1:0] trunc_ln288_reg_2384;
reg   [1:0] trunc_ln288_reg_2384_pp2_iter1_reg;
reg   [1:0] trunc_ln288_reg_2384_pp2_iter2_reg;
reg   [4:0] tmp_17_reg_2388;
wire   [6:0] col_1_fu_1668_p2;
wire   [8:0] zext_ln288_3_fu_1677_p1;
reg   [8:0] zext_ln288_3_reg_2398;
reg   [7:0] ddr_tmp_V_0_addr_1_reg_2403;
wire   [10:0] grp_fu_2123_p3;
reg   [10:0] add_ln414_2_reg_2408;
reg    ap_enable_reg_pp2_iter2;
reg   [10:0] add_ln414_2_reg_2408_pp2_iter3_reg;
reg    ap_enable_reg_pp2_iter3;
wire    ap_CS_fsm_state46;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state47;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state51;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state57;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter4;
reg   [30:0] ap_phi_mux_i_0_phi_fu_947_p4;
reg   [3:0] ap_phi_mux_row_0_phi_fu_970_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_row1_0_phi_fu_1003_p4;
wire    ap_block_pp2_stage0;
wire   [127:0] ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021;
reg   [127:0] ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021;
reg   [127:0] ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021;
reg   [127:0] ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021;
reg   [127:0] ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021;
wire   [63:0] zext_ln271_fu_1439_p1;
wire  signed [63:0] sext_ln279_fu_1522_p1;
wire  signed [63:0] sext_ln414_fu_1556_p1;
wire  signed [63:0] sext_ln414_1_fu_1565_p1;
wire  signed [63:0] sext_ln288_fu_1680_p1;
wire  signed [63:0] sext_ln288_1_fu_1719_p1;
wire  signed [63:0] sext_ln414_2_fu_1726_p1;
wire  signed [63:0] sext_ln321_1_fu_1414_p1;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state9;
wire  signed [31:0] grp_fu_1049_p0;
wire  signed [7:0] sext_ln267_fu_1052_p0;
wire   [31:0] p_Val2_1_fu_1057_p1;
wire   [7:0] tmp_V_fu_1068_p4;
wire   [8:0] zext_ln339_fu_1082_p1;
wire   [8:0] add_ln339_fu_1086_p2;
wire   [7:0] sub_ln1311_fu_1100_p2;
wire  signed [8:0] sext_ln1311_fu_1106_p1;
wire   [24:0] mantissa_V_fu_1124_p4;
wire  signed [31:0] sext_ln1311_1_fu_1137_p1;
wire  signed [24:0] sext_ln1311_2_fu_1140_p1;
wire   [78:0] zext_ln682_fu_1133_p1;
wire   [78:0] zext_ln1287_fu_1143_p1;
wire   [24:0] r_V_fu_1147_p2;
wire   [0:0] tmp_12_fu_1159_p3;
wire   [78:0] r_V_1_fu_1153_p2;
wire   [31:0] zext_ln662_fu_1167_p1;
wire   [31:0] tmp_10_fu_1171_p4;
wire   [31:0] p_Val2_7_fu_1181_p3;
wire   [31:0] result_V_1_fu_1188_p2;
wire   [31:0] sub_ln261_fu_1214_p2;
wire   [26:0] tmp_s_fu_1220_p4;
wire   [27:0] zext_ln261_fu_1230_p1;
wire   [26:0] tmp_9_fu_1240_p4;
wire   [0:0] tmp_7_fu_1206_p3;
wire   [27:0] sub_ln261_1_fu_1234_p2;
wire   [27:0] zext_ln261_1_fu_1250_p1;
wire   [5:0] trunc_ln263_4_fu_1265_p4;
wire   [27:0] zext_ln263_fu_1275_p1;
wire   [0:0] icmp_ln263_fu_1279_p2;
wire   [27:0] sub_ln263_fu_1284_p2;
wire   [27:0] ddr_channel_ptr_1_fu_1289_p3;
wire  signed [28:0] sext_ln263_fu_1296_p1;
wire   [28:0] ddr_channel_ptr_2_fu_1300_p2;
wire  signed [28:0] sext_ln261_fu_1262_p1;
wire  signed [7:0] H_fmap_out_cast1_fu_1314_p0;
wire   [31:0] bitcast_ln37_fu_1320_p1;
wire   [7:0] tmp_4_fu_1323_p4;
wire   [22:0] trunc_ln37_fu_1333_p1;
wire   [7:0] grp_fu_1349_p0;
wire   [0:0] or_ln37_fu_1355_p2;
wire   [0:0] or_ln37_1_fu_1359_p2;
wire   [0:0] and_ln37_fu_1363_p2;
wire   [0:0] and_ln37_1_fu_1369_p2;
wire   [31:0] add_ln38_fu_1374_p2;
wire    ap_CS_fsm_state37;
wire   [32:0] zext_ln321_fu_1398_p1;
wire  signed [32:0] sext_ln321_fu_1395_p1;
wire   [31:0] zext_ln269_fu_1424_p1;
wire   [31:0] zext_ln276_fu_1451_p1;
wire   [0:0] icmp_ln276_fu_1455_p2;
wire   [3:0] row_fu_1471_p2;
wire   [3:0] grp_fu_1506_p1;
wire   [31:0] zext_ln275_1_fu_1514_p1;
wire   [31:0] add_ln279_fu_1517_p2;
wire   [5:0] tmp_14_fu_1534_p3;
wire   [8:0] tmp_13_fu_1527_p3;
wire   [8:0] zext_ln414_1_fu_1541_p1;
wire   [8:0] sub_ln414_fu_1545_p2;
wire   [8:0] add_ln414_1_fu_1560_p2;
wire  signed [7:0] bound4_fu_1605_p1;
wire   [7:0] zext_ln286_fu_1612_p1;
wire  signed [7:0] icmp_ln286_fu_1616_p1;
wire   [0:0] icmp_ln286_fu_1616_p2;
wire   [3:0] row_2_fu_1632_p2;
wire   [8:0] grp_fu_2114_p3;
wire   [5:0] tmp_16_fu_1694_p3;
wire   [8:0] tmp_15_fu_1687_p3;
wire   [8:0] zext_ln288_2_fu_1701_p1;
wire   [8:0] sub_ln288_fu_1705_p2;
wire   [8:0] add_ln288_1_fu_1714_p2;
wire   [5:0] grp_fu_2107_p0;
wire   [3:0] grp_fu_2107_p1;
wire   [5:0] grp_fu_2114_p0;
wire   [3:0] grp_fu_2114_p1;
wire   [4:0] grp_fu_2114_p2;
wire   [7:0] grp_fu_2123_p0;
wire   [3:0] grp_fu_2123_p1;
wire   [6:0] grp_fu_2123_p2;
wire    ap_CS_fsm_state62;
reg   [51:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [31:0] grp_fu_1349_p00;
wire   [31:0] grp_fu_1506_p10;
wire   [8:0] grp_fu_2107_p10;
wire   [8:0] grp_fu_2114_p10;
wire   [8:0] grp_fu_2114_p20;
wire   [10:0] grp_fu_2123_p10;
wire   [10:0] grp_fu_2123_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
end

FracNet_sitofp_32lbW #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FracNet_sitofp_32lbW_U780(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_8_reg_2186),
    .ce(1'b1),
    .dout(grp_fu_1034_p1)
);

FracNet_fptrunc_6mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
FracNet_fptrunc_6mb6_U781(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_2148),
    .ce(1'b1),
    .dout(grp_fu_1037_p1)
);

FracNet_fcmp_32nsncg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
FracNet_fcmp_32nsncg_U782(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_2211),
    .din1(x_assign_reg_2153),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_1040_p2)
);

FracNet_dmul_64nsocq #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
FracNet_dmul_64nsocq_U783(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_2143),
    .din1(64'd4598175219545276416),
    .ce(1'b1),
    .dout(grp_fu_1044_p2)
);

FracNet_sitodp_32pcA #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
FracNet_sitodp_32pcA_U784(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1049_p0),
    .ce(1'b1),
    .dout(grp_fu_1049_p1)
);

FracNet_mul_8ns_2qcK #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 32 ))
FracNet_mul_8ns_2qcK_U785(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1349_p0),
    .din1(ddr_channel_ptr_3_reg_2206),
    .ce(1'b1),
    .dout(grp_fu_1349_p2)
);

FracNet_mul_32s_3rcU #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FracNet_mul_32s_3rcU_U786(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln271_reg_2256),
    .din1(ret_reg_2247),
    .ce(1'b1),
    .dout(grp_fu_1391_p2)
);

FracNet_mul_32s_4sc4 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
FracNet_mul_32s_4sc4_U787(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ret_reg_2247),
    .din1(grp_fu_1506_p1),
    .ce(1'b1),
    .dout(grp_fu_1506_p2)
);

FracNet_mac_muladtde #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
FracNet_mac_muladtde_U788(
    .din0(grp_fu_2107_p0),
    .din1(grp_fu_2107_p1),
    .din2(trunc_ln414_reg_2325_pp1_iter2_reg),
    .dout(grp_fu_2107_p3)
);

FracNet_mac_muladudo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 9 ))
FracNet_mac_muladudo_U789(
    .din0(grp_fu_2114_p0),
    .din1(grp_fu_2114_p1),
    .din2(grp_fu_2114_p2),
    .dout(grp_fu_2114_p3)
);

FracNet_mac_muladvdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
FracNet_mac_muladvdy_U790(
    .din0(grp_fu_2123_p0),
    .din1(grp_fu_2123_p1),
    .din2(grp_fu_2123_p2),
    .dout(grp_fu_2123_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state47) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state47)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state47);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state51) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state51)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state51);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state57) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state57)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state57);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state56)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter3 == 1'b1))) begin
        if (((trunc_ln288_reg_2384_pp2_iter2_reg == 2'd3) & (icmp_ln285_reg_2361_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_3_q0;
        end else if (((trunc_ln288_reg_2384_pp2_iter2_reg == 2'd2) & (icmp_ln285_reg_2361_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_2_q0;
        end else if (((trunc_ln288_reg_2384_pp2_iter2_reg == 2'd1) & (icmp_ln285_reg_2361_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_1_q0;
        end else if (((trunc_ln288_reg_2384_pp2_iter2_reg == 2'd0) & (icmp_ln285_reg_2361_pp2_iter2_reg == 1'd0))) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_0_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_fu_1621_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        col2_0_reg_1010 <= col_1_fu_1668_p2;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        col2_0_reg_1010 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_fu_1460_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        col_0_reg_977 <= col_fu_1497_p2;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        col_0_reg_977 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln269_reg_2283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_943 <= i_reg_2287;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        i_0_reg_943 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_fu_1621_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten7_reg_988 <= add_ln285_fu_1626_p2;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        indvar_flatten7_reg_988 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_fu_1460_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_955 <= add_ln275_fu_1465_p2;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        indvar_flatten_reg_955 <= 35'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        row1_0_reg_999 <= select_ln288_1_reg_2375;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        row1_0_reg_999 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_0_reg_966 <= select_ln275_1_reg_2316;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        row_0_reg_966 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln269_reg_2283 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DDR_buf_V_addr_read_reg_2292 <= m_axi_DDR_buf_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln271_reg_2256 <= add_ln271_fu_1386_p2;
        ret_reg_2247 <= ret_fu_1379_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        add_ln321_reg_2266 <= add_ln321_fu_1402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        add_ln414_2_reg_2408 <= grp_fu_2123_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        add_ln414_2_reg_2408_pp2_iter3_reg <= add_ln414_2_reg_2408;
        icmp_ln285_reg_2361_pp2_iter2_reg <= icmp_ln285_reg_2361_pp2_iter1_reg;
        icmp_ln285_reg_2361_pp2_iter3_reg <= icmp_ln285_reg_2361_pp2_iter2_reg;
        trunc_ln288_reg_2384_pp2_iter2_reg <= trunc_ln288_reg_2384_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        add_ln414_reg_2351 <= grp_fu_2107_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        bound4_reg_2356[10 : 3] <= bound4_fu_1605_p3[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        ddr_channel_ptr_3_reg_2206 <= ddr_channel_ptr_3_fu_1306_p3;
        tmp_3_reg_2211 <= grp_fu_1034_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        ddr_channel_ptr_reg_2198 <= ddr_channel_ptr_fu_1254_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ddr_tmp_V_0_addr_1_reg_2403 <= sext_ln288_fu_1680_p1;
        zext_ln288_3_reg_2398[4 : 0] <= zext_ln288_3_fu_1677_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_943_pp0_iter1_reg <= i_0_reg_943;
        icmp_ln269_reg_2283 <= icmp_ln269_fu_1428_p2;
        icmp_ln269_reg_2283_pp0_iter1_reg <= icmp_ln269_reg_2283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_2287 <= i_fu_1433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln275_reg_2302 <= icmp_ln275_fu_1460_p2;
        icmp_ln275_reg_2302_pp1_iter1_reg <= icmp_ln275_reg_2302;
        select_ln275_1_reg_2316_pp1_iter1_reg <= select_ln275_1_reg_2316;
        select_ln275_reg_2311_pp1_iter1_reg <= select_ln275_reg_2311;
        trunc_ln414_reg_2325_pp1_iter1_reg <= trunc_ln414_reg_2325;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln275_reg_2302_pp1_iter2_reg <= icmp_ln275_reg_2302_pp1_iter1_reg;
        icmp_ln275_reg_2302_pp1_iter3_reg <= icmp_ln275_reg_2302_pp1_iter2_reg;
        select_ln275_1_reg_2316_pp1_iter2_reg <= select_ln275_1_reg_2316_pp1_iter1_reg;
        select_ln275_1_reg_2316_pp1_iter3_reg <= select_ln275_1_reg_2316_pp1_iter2_reg;
        select_ln275_reg_2311_pp1_iter2_reg <= select_ln275_reg_2311_pp1_iter1_reg;
        trunc_ln414_reg_2325_pp1_iter2_reg <= trunc_ln414_reg_2325_pp1_iter1_reg;
        trunc_ln414_reg_2325_pp1_iter3_reg <= trunc_ln414_reg_2325_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln285_reg_2361 <= icmp_ln285_fu_1621_p2;
        icmp_ln285_reg_2361_pp2_iter1_reg <= icmp_ln285_reg_2361;
        select_ln288_1_reg_2375_pp2_iter1_reg <= select_ln288_1_reg_2375;
        select_ln288_reg_2370_pp2_iter1_reg <= select_ln288_reg_2370;
        trunc_ln288_reg_2384_pp2_iter1_reg <= trunc_ln288_reg_2384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        icmp_ln37_1_reg_2232 <= icmp_ln37_1_fu_1343_p2;
        icmp_ln37_reg_2227 <= icmp_ln37_fu_1337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        icmp_ln37_2_reg_2181 <= icmp_ln37_2_fu_1118_p2;
        isNeg_reg_2170 <= add_ln339_fu_1086_p2[32'd8];
        p_Result_s_reg_2159 <= p_Val2_1_fu_1057_p1[32'd31];
        tmp_V_1_reg_2164 <= tmp_V_1_fu_1078_p1;
        ush_reg_2175 <= ush_fu_1110_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln37_3_reg_2193 <= icmp_ln37_3_fu_1201_p2;
        p_Val2_8_reg_2186 <= p_Val2_8_fu_1194_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        mul_ln271_1_reg_2261 <= grp_fu_1391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        mul_ln271_reg_2242 <= grp_fu_1349_p2;
        tmp_8_reg_2237 <= grp_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter1_reg == 1'd0))) begin
        mul_ln275_reg_2341 <= grp_fu_1506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_fu_1460_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln275_1_reg_2316 <= select_ln275_1_fu_1485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_fu_1460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln275_reg_2311 <= select_ln275_fu_1477_p3;
        trunc_ln414_reg_2325 <= trunc_ln414_fu_1493_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_fu_1621_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln288_1_reg_2375 <= select_ln288_1_fu_1646_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_fu_1621_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln288_reg_2370 <= select_ln288_fu_1638_p3;
        tmp_17_reg_2388 <= {{select_ln288_fu_1638_p3[6:2]}};
        trunc_ln288_reg_2384 <= trunc_ln288_fu_1654_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        shl_ln269_reg_2271[31 : 3] <= shl_ln269_fu_1408_p2[31 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_11_reg_2297[34 : 3] <= tmp_11_fu_1444_p3[34 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_1_reg_2148 <= grp_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_2143 <= grp_fu_1049_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        x_assign_reg_2153 <= grp_fu_1037_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        DDR_buf_V_blk_n_AR = m_axi_DDR_buf_V_ARREADY;
    end else begin
        DDR_buf_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln269_reg_2283 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        DDR_buf_V_blk_n_R = m_axi_DDR_buf_V_RVALID;
    end else begin
        DDR_buf_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln269_fu_1428_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state47 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state47 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln275_fu_1460_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state51 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state51 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln285_fu_1621_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state57 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state57 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state62) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln269_reg_2283 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_947_p4 = i_reg_2287;
    end else begin
        ap_phi_mux_i_0_phi_fu_947_p4 = i_0_reg_943;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln285_reg_2361 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_row1_0_phi_fu_1003_p4 = select_ln288_1_reg_2375;
    end else begin
        ap_phi_mux_row1_0_phi_fu_1003_p4 = row1_0_reg_999;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln275_reg_2302 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_row_0_phi_fu_970_p4 = select_ln275_1_reg_2316;
    end else begin
        ap_phi_mux_row_0_phi_fu_970_p4 = row_0_reg_966;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ddr_stage_V_address0 = sext_ln279_fu_1522_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ddr_stage_V_address0 = zext_ln271_fu_1439_p1;
    end else begin
        ddr_stage_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ddr_stage_V_ce0 = 1'b1;
    end else begin
        ddr_stage_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln269_reg_2283_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ddr_stage_V_we0 = 1'b1;
    end else begin
        ddr_stage_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_0_address0 = ddr_tmp_V_0_addr_1_reg_2403;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_0_address0 = sext_ln414_fu_1556_p1;
    end else begin
        ddr_tmp_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        ddr_tmp_V_0_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_0_we0 = 1'b1;
    end else begin
        ddr_tmp_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_1_address0 = sext_ln288_1_fu_1719_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_1_address0 = sext_ln414_1_fu_1565_p1;
    end else begin
        ddr_tmp_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        ddr_tmp_V_1_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_1_we0 = 1'b1;
    end else begin
        ddr_tmp_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_2_address0 = sext_ln288_1_fu_1719_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_2_address0 = sext_ln414_1_fu_1565_p1;
    end else begin
        ddr_tmp_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        ddr_tmp_V_2_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_2_we0 = 1'b1;
    end else begin
        ddr_tmp_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        ddr_tmp_V_3_address0 = sext_ln288_1_fu_1719_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_3_address0 = sext_ln414_1_fu_1565_p1;
    end else begin
        ddr_tmp_V_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
        ddr_tmp_V_3_ce0 = 1'b1;
    end else begin
        ddr_tmp_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln275_reg_2302_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        ddr_tmp_V_3_we0 = 1'b1;
    end else begin
        ddr_tmp_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
        m_axi_DDR_buf_V_ARVALID = 1'b1;
    end else begin
        m_axi_DDR_buf_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln269_reg_2283 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_DDR_buf_V_RREADY = 1'b1;
    end else begin
        m_axi_DDR_buf_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_0_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_0_V_we0 = 1'b1;
    end else begin
        out_buf_sc_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_10_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_10_V_we0 = 1'b1;
    end else begin
        out_buf_sc_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_11_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_11_V_we0 = 1'b1;
    end else begin
        out_buf_sc_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_12_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_12_V_we0 = 1'b1;
    end else begin
        out_buf_sc_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_13_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_13_V_we0 = 1'b1;
    end else begin
        out_buf_sc_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_14_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_14_V_we0 = 1'b1;
    end else begin
        out_buf_sc_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_15_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_15_V_we0 = 1'b1;
    end else begin
        out_buf_sc_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_16_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_16_V_we0 = 1'b1;
    end else begin
        out_buf_sc_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_17_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_17_V_we0 = 1'b1;
    end else begin
        out_buf_sc_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_18_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_18_V_we0 = 1'b1;
    end else begin
        out_buf_sc_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_19_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_19_V_we0 = 1'b1;
    end else begin
        out_buf_sc_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_1_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_1_V_we0 = 1'b1;
    end else begin
        out_buf_sc_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_20_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_20_V_we0 = 1'b1;
    end else begin
        out_buf_sc_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_21_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_21_V_we0 = 1'b1;
    end else begin
        out_buf_sc_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_22_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_22_V_we0 = 1'b1;
    end else begin
        out_buf_sc_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_23_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_23_V_we0 = 1'b1;
    end else begin
        out_buf_sc_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_24_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_24_V_we0 = 1'b1;
    end else begin
        out_buf_sc_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_25_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_25_V_we0 = 1'b1;
    end else begin
        out_buf_sc_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_26_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_26_V_we0 = 1'b1;
    end else begin
        out_buf_sc_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_27_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_27_V_we0 = 1'b1;
    end else begin
        out_buf_sc_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_28_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_28_V_we0 = 1'b1;
    end else begin
        out_buf_sc_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_29_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_29_V_we0 = 1'b1;
    end else begin
        out_buf_sc_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_2_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_2_V_we0 = 1'b1;
    end else begin
        out_buf_sc_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_30_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_30_V_we0 = 1'b1;
    end else begin
        out_buf_sc_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_31_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_31_V_we0 = 1'b1;
    end else begin
        out_buf_sc_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_3_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_3_V_we0 = 1'b1;
    end else begin
        out_buf_sc_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_4_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_4_V_we0 = 1'b1;
    end else begin
        out_buf_sc_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_5_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_5_V_we0 = 1'b1;
    end else begin
        out_buf_sc_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_6_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_6_V_we0 = 1'b1;
    end else begin
        out_buf_sc_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_7_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_7_V_we0 = 1'b1;
    end else begin
        out_buf_sc_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_8_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_8_V_we0 = 1'b1;
    end else begin
        out_buf_sc_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_9_V_ce0 = 1'b1;
    end else begin
        out_buf_sc_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln285_reg_2361_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1))) begin
        out_buf_sc_9_V_we0 = 1'b1;
    end else begin
        out_buf_sc_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((m_axi_DDR_buf_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln269_fu_1428_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln269_fu_1428_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln275_fu_1460_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln275_fu_1460_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln285_fu_1621_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln285_fu_1621_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_fmap_out_cast1_fu_1314_p0 = H_fmap_out;

assign add_ln271_fu_1386_p2 = (mul_ln271_reg_2242 + row_tile_start);

assign add_ln275_fu_1465_p2 = (indvar_flatten_reg_955 + 35'd1);

assign add_ln279_fu_1517_p2 = (zext_ln275_1_fu_1514_p1 + mul_ln275_reg_2341);

assign add_ln285_fu_1626_p2 = (indvar_flatten7_reg_988 + 11'd1);

assign add_ln288_1_fu_1714_p2 = (zext_ln288_3_reg_2398 + sub_ln288_fu_1705_p2);

assign add_ln321_fu_1402_p2 = ($signed(zext_ln321_fu_1398_p1) + $signed(sext_ln321_fu_1395_p1));

assign add_ln339_fu_1086_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_1082_p1));

assign add_ln38_fu_1374_p2 = (32'd1 + p_Val2_8_reg_2186);

assign add_ln414_1_fu_1560_p2 = (trunc_ln414_reg_2325_pp1_iter3_reg + sub_ln414_fu_1545_p2);

assign and_ln37_1_fu_1369_p2 = (tmp_8_reg_2237 & and_ln37_fu_1363_p2);

assign and_ln37_fu_1363_p2 = (or_ln37_fu_1355_p2 & or_ln37_1_fu_1359_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln269_reg_2283 == 1'd1) & (m_axi_DDR_buf_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln269_reg_2283 == 1'd1) & (m_axi_DDR_buf_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state48_pp0_stage0_iter1 = ((icmp_ln269_reg_2283 == 1'd1) & (m_axi_DDR_buf_V_RVALID == 1'b0));
end

assign ap_block_state49_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021 = 'bx;

assign bitcast_ln37_fu_1320_p1 = tmp_3_reg_2211;

assign bound4_fu_1605_p1 = H_fmap_out;

assign bound4_fu_1605_p3 = {{bound4_fu_1605_p1}, {3'd0}};

assign col_1_fu_1668_p2 = (7'd1 + select_ln288_fu_1638_p3);

assign col_fu_1497_p2 = (31'd1 + select_ln275_fu_1477_p3);

assign ddr_channel_ptr_1_fu_1289_p3 = ((icmp_ln263_fu_1279_p2[0:0] === 1'b1) ? ddr_channel_ptr_reg_2198 : sub_ln263_fu_1284_p2);

assign ddr_channel_ptr_2_fu_1300_p2 = ($signed(29'd32) + $signed(sext_ln263_fu_1296_p1));

assign ddr_channel_ptr_3_fu_1306_p3 = ((switch_bank[0:0] === 1'b1) ? ddr_channel_ptr_2_fu_1300_p2 : sext_ln261_fu_1262_p1);

assign ddr_channel_ptr_fu_1254_p3 = ((tmp_7_fu_1206_p3[0:0] === 1'b1) ? sub_ln261_1_fu_1234_p2 : zext_ln261_1_fu_1250_p1);

assign ddr_stage_V_d0 = DDR_buf_V_addr_read_reg_2292;

assign ddr_tmp_V_0_d0 = ddr_stage_V_q0[127:0];

assign ddr_tmp_V_1_d0 = {{ddr_stage_V_q0[255:128]}};

assign ddr_tmp_V_2_d0 = {{ddr_stage_V_q0[383:256]}};

assign ddr_tmp_V_3_d0 = {{ddr_stage_V_q0[511:384]}};

assign grp_fu_1049_p0 = sext_ln267_fu_1052_p0;

assign grp_fu_1349_p0 = grp_fu_1349_p00;

assign grp_fu_1349_p00 = $unsigned(H_fmap_out_cast1_fu_1314_p0);

assign grp_fu_1506_p1 = grp_fu_1506_p10;

assign grp_fu_1506_p10 = select_ln275_1_reg_2316;

assign grp_fu_2107_p0 = 9'd29;

assign grp_fu_2107_p1 = grp_fu_2107_p10;

assign grp_fu_2107_p10 = select_ln275_1_reg_2316_pp1_iter2_reg;

assign grp_fu_2114_p0 = 9'd29;

assign grp_fu_2114_p1 = grp_fu_2114_p10;

assign grp_fu_2114_p10 = select_ln288_1_reg_2375;

assign grp_fu_2114_p2 = grp_fu_2114_p20;

assign grp_fu_2114_p20 = tmp_17_reg_2388;

assign grp_fu_2123_p0 = 11'd113;

assign grp_fu_2123_p1 = grp_fu_2123_p10;

assign grp_fu_2123_p10 = select_ln288_1_reg_2375_pp2_iter1_reg;

assign grp_fu_2123_p2 = grp_fu_2123_p20;

assign grp_fu_2123_p20 = select_ln288_reg_2370_pp2_iter1_reg;

assign i_fu_1433_p2 = (ap_phi_mux_i_0_phi_fu_947_p4 + 31'd1);

assign icmp_ln263_fu_1279_p2 = (($signed(ddr_channel_ptr_reg_2198) < $signed(zext_ln263_fu_1275_p1)) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_1428_p2 = (($signed(zext_ln269_fu_1424_p1) < $signed(shl_ln269_reg_2271)) ? 1'b1 : 1'b0);

assign icmp_ln275_fu_1460_p2 = ((indvar_flatten_reg_955 == tmp_11_reg_2297) ? 1'b1 : 1'b0);

assign icmp_ln276_fu_1455_p2 = (($signed(zext_ln276_fu_1451_p1) < $signed(ret_reg_2247)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_1621_p2 = ((indvar_flatten7_reg_988 == bound4_reg_2356) ? 1'b1 : 1'b0);

assign icmp_ln286_fu_1616_p1 = H_fmap_out;

assign icmp_ln286_fu_1616_p2 = (($signed(zext_ln286_fu_1612_p1) < $signed(icmp_ln286_fu_1616_p1)) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_1343_p2 = ((trunc_ln37_fu_1333_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_2_fu_1118_p2 = ((tmp_V_fu_1068_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_3_fu_1201_p2 = ((tmp_V_1_reg_2164 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_1337_p2 = ((tmp_4_fu_1323_p4 != 8'd255) ? 1'b1 : 1'b0);

assign isNeg_fu_1092_p3 = add_ln339_fu_1086_p2[32'd8];

assign m_axi_DDR_buf_V_ARADDR = sext_ln321_1_fu_1414_p1;

assign m_axi_DDR_buf_V_ARBURST = 2'd0;

assign m_axi_DDR_buf_V_ARCACHE = 4'd0;

assign m_axi_DDR_buf_V_ARID = 1'd0;

assign m_axi_DDR_buf_V_ARLEN = ret_reg_2247 << 32'd3;

assign m_axi_DDR_buf_V_ARLOCK = 2'd0;

assign m_axi_DDR_buf_V_ARPROT = 3'd0;

assign m_axi_DDR_buf_V_ARQOS = 4'd0;

assign m_axi_DDR_buf_V_ARREGION = 4'd0;

assign m_axi_DDR_buf_V_ARSIZE = 3'd0;

assign m_axi_DDR_buf_V_ARUSER = 1'd0;

assign m_axi_DDR_buf_V_AWADDR = 32'd0;

assign m_axi_DDR_buf_V_AWBURST = 2'd0;

assign m_axi_DDR_buf_V_AWCACHE = 4'd0;

assign m_axi_DDR_buf_V_AWID = 1'd0;

assign m_axi_DDR_buf_V_AWLEN = 32'd0;

assign m_axi_DDR_buf_V_AWLOCK = 2'd0;

assign m_axi_DDR_buf_V_AWPROT = 3'd0;

assign m_axi_DDR_buf_V_AWQOS = 4'd0;

assign m_axi_DDR_buf_V_AWREGION = 4'd0;

assign m_axi_DDR_buf_V_AWSIZE = 3'd0;

assign m_axi_DDR_buf_V_AWUSER = 1'd0;

assign m_axi_DDR_buf_V_AWVALID = 1'b0;

assign m_axi_DDR_buf_V_BREADY = 1'b0;

assign m_axi_DDR_buf_V_WDATA = 512'd0;

assign m_axi_DDR_buf_V_WID = 1'd0;

assign m_axi_DDR_buf_V_WLAST = 1'b0;

assign m_axi_DDR_buf_V_WSTRB = 64'd0;

assign m_axi_DDR_buf_V_WUSER = 1'd0;

assign m_axi_DDR_buf_V_WVALID = 1'b0;

assign mantissa_V_fu_1124_p4 = {{{{1'd1}, {tmp_V_1_reg_2164}}}, {1'd0}};

assign or_ln37_1_fu_1359_p2 = (icmp_ln37_3_reg_2193 | icmp_ln37_2_reg_2181);

assign or_ln37_fu_1355_p2 = (icmp_ln37_reg_2227 | icmp_ln37_1_reg_2232);

assign out_buf_sc_0_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_0_V_d0 = ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[3:0];

assign out_buf_sc_10_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_10_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[43:40]}};

assign out_buf_sc_11_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_11_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[47:44]}};

assign out_buf_sc_12_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_12_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[51:48]}};

assign out_buf_sc_13_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_13_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[55:52]}};

assign out_buf_sc_14_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_14_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[59:56]}};

assign out_buf_sc_15_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_15_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[63:60]}};

assign out_buf_sc_16_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_16_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[67:64]}};

assign out_buf_sc_17_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_17_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[71:68]}};

assign out_buf_sc_18_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_18_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[75:72]}};

assign out_buf_sc_19_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_19_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[79:76]}};

assign out_buf_sc_1_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_1_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[7:4]}};

assign out_buf_sc_20_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_20_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[83:80]}};

assign out_buf_sc_21_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_21_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[87:84]}};

assign out_buf_sc_22_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_22_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[91:88]}};

assign out_buf_sc_23_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_23_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[95:92]}};

assign out_buf_sc_24_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_24_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[99:96]}};

assign out_buf_sc_25_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_25_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[103:100]}};

assign out_buf_sc_26_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_26_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[107:104]}};

assign out_buf_sc_27_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_27_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[111:108]}};

assign out_buf_sc_28_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_28_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[115:112]}};

assign out_buf_sc_29_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_29_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[119:116]}};

assign out_buf_sc_2_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_2_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[11:8]}};

assign out_buf_sc_30_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_30_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[123:120]}};

assign out_buf_sc_31_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_31_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[127:124]}};

assign out_buf_sc_3_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_3_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[15:12]}};

assign out_buf_sc_4_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_4_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[19:16]}};

assign out_buf_sc_5_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_5_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[23:20]}};

assign out_buf_sc_6_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_6_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[27:24]}};

assign out_buf_sc_7_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_7_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[31:28]}};

assign out_buf_sc_8_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_8_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[35:32]}};

assign out_buf_sc_9_V_address0 = sext_ln414_2_fu_1726_p1;

assign out_buf_sc_9_V_d0 = {{ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021[39:36]}};

assign p_Val2_1_fu_1057_p1 = x_assign_reg_2153;

assign p_Val2_7_fu_1181_p3 = ((isNeg_reg_2170[0:0] === 1'b1) ? zext_ln662_fu_1167_p1 : tmp_10_fu_1171_p4);

assign p_Val2_8_fu_1194_p3 = ((p_Result_s_reg_2159[0:0] === 1'b1) ? result_V_1_fu_1188_p2 : p_Val2_7_fu_1181_p3);

assign r_V_1_fu_1153_p2 = zext_ln682_fu_1133_p1 << zext_ln1287_fu_1143_p1;

assign r_V_fu_1147_p2 = mantissa_V_fu_1124_p4 >> sext_ln1311_2_fu_1140_p1;

assign result_V_1_fu_1188_p2 = (32'd0 - p_Val2_7_fu_1181_p3);

assign ret_fu_1379_p3 = ((and_ln37_1_fu_1369_p2[0:0] === 1'b1) ? add_ln38_fu_1374_p2 : p_Val2_8_reg_2186);

assign row_2_fu_1632_p2 = (4'd1 + ap_phi_mux_row1_0_phi_fu_1003_p4);

assign row_fu_1471_p2 = (4'd1 + ap_phi_mux_row_0_phi_fu_970_p4);

assign select_ln275_1_fu_1485_p3 = ((icmp_ln276_fu_1455_p2[0:0] === 1'b1) ? ap_phi_mux_row_0_phi_fu_970_p4 : row_fu_1471_p2);

assign select_ln275_fu_1477_p3 = ((icmp_ln276_fu_1455_p2[0:0] === 1'b1) ? col_0_reg_977 : 31'd0);

assign select_ln288_1_fu_1646_p3 = ((icmp_ln286_fu_1616_p2[0:0] === 1'b1) ? ap_phi_mux_row1_0_phi_fu_1003_p4 : row_2_fu_1632_p2);

assign select_ln288_fu_1638_p3 = ((icmp_ln286_fu_1616_p2[0:0] === 1'b1) ? col2_0_reg_1010 : 7'd0);

assign sext_ln1311_1_fu_1137_p1 = ush_reg_2175;

assign sext_ln1311_2_fu_1140_p1 = ush_reg_2175;

assign sext_ln1311_fu_1106_p1 = $signed(sub_ln1311_fu_1100_p2);

assign sext_ln261_fu_1262_p1 = ddr_channel_ptr_reg_2198;

assign sext_ln263_fu_1296_p1 = $signed(ddr_channel_ptr_1_fu_1289_p3);

assign sext_ln267_fu_1052_p0 = H_fmap_out;

assign sext_ln279_fu_1522_p1 = $signed(add_ln279_fu_1517_p2);

assign sext_ln288_1_fu_1719_p1 = $signed(add_ln288_1_fu_1714_p2);

assign sext_ln288_fu_1680_p1 = $signed(grp_fu_2114_p3);

assign sext_ln321_1_fu_1414_p1 = $signed(add_ln321_reg_2266);

assign sext_ln321_fu_1395_p1 = $signed(mul_ln271_1_reg_2261);

assign sext_ln414_1_fu_1565_p1 = $signed(add_ln414_1_fu_1560_p2);

assign sext_ln414_2_fu_1726_p1 = $signed(add_ln414_2_reg_2408_pp2_iter3_reg);

assign sext_ln414_fu_1556_p1 = $signed(add_ln414_reg_2351);

assign shl_ln269_fu_1408_p2 = ret_reg_2247 << 32'd3;

assign sub_ln1311_fu_1100_p2 = (8'd127 - tmp_V_fu_1068_p4);

assign sub_ln261_1_fu_1234_p2 = (28'd0 - zext_ln261_fu_1230_p1);

assign sub_ln261_fu_1214_p2 = (32'd0 - out_channel_start);

assign sub_ln263_fu_1284_p2 = ($signed(ddr_channel_ptr_reg_2198) - $signed(zext_ln263_fu_1275_p1));

assign sub_ln288_fu_1705_p2 = (tmp_15_fu_1687_p3 - zext_ln288_2_fu_1701_p1);

assign sub_ln414_fu_1545_p2 = (tmp_13_fu_1527_p3 - zext_ln414_1_fu_1541_p1);

assign tmp_10_fu_1171_p4 = {{r_V_1_fu_1153_p2[55:24]}};

assign tmp_11_fu_1444_p3 = {{ret_reg_2247}, {3'd0}};

assign tmp_12_fu_1159_p3 = r_V_fu_1147_p2[32'd24];

assign tmp_13_fu_1527_p3 = {{select_ln275_1_reg_2316_pp1_iter3_reg}, {5'd0}};

assign tmp_14_fu_1534_p3 = {{select_ln275_1_reg_2316_pp1_iter3_reg}, {2'd0}};

assign tmp_15_fu_1687_p3 = {{select_ln288_1_reg_2375_pp2_iter1_reg}, {5'd0}};

assign tmp_16_fu_1694_p3 = {{select_ln288_1_reg_2375_pp2_iter1_reg}, {2'd0}};

assign tmp_4_fu_1323_p4 = {{bitcast_ln37_fu_1320_p1[30:23]}};

assign tmp_7_fu_1206_p3 = out_channel_start[32'd31];

assign tmp_9_fu_1240_p4 = {{out_channel_start[31:5]}};

assign tmp_V_1_fu_1078_p1 = p_Val2_1_fu_1057_p1[22:0];

assign tmp_V_fu_1068_p4 = {{p_Val2_1_fu_1057_p1[30:23]}};

assign tmp_s_fu_1220_p4 = {{sub_ln261_fu_1214_p2[31:5]}};

assign trunc_ln263_4_fu_1265_p4 = {{in_channels[10:5]}};

assign trunc_ln288_fu_1654_p1 = select_ln288_fu_1638_p3[1:0];

assign trunc_ln37_fu_1333_p1 = bitcast_ln37_fu_1320_p1[22:0];

assign trunc_ln414_fu_1493_p1 = select_ln275_fu_1477_p3[8:0];

assign ush_fu_1110_p3 = ((isNeg_fu_1092_p3[0:0] === 1'b1) ? sext_ln1311_fu_1106_p1 : add_ln339_fu_1086_p2);

assign zext_ln1287_fu_1143_p1 = $unsigned(sext_ln1311_1_fu_1137_p1);

assign zext_ln261_1_fu_1250_p1 = tmp_9_fu_1240_p4;

assign zext_ln261_fu_1230_p1 = tmp_s_fu_1220_p4;

assign zext_ln263_fu_1275_p1 = trunc_ln263_4_fu_1265_p4;

assign zext_ln269_fu_1424_p1 = ap_phi_mux_i_0_phi_fu_947_p4;

assign zext_ln271_fu_1439_p1 = i_0_reg_943_pp0_iter1_reg;

assign zext_ln275_1_fu_1514_p1 = select_ln275_reg_2311_pp1_iter2_reg;

assign zext_ln276_fu_1451_p1 = col_0_reg_977;

assign zext_ln286_fu_1612_p1 = col2_0_reg_1010;

assign zext_ln288_2_fu_1701_p1 = tmp_16_fu_1694_p3;

assign zext_ln288_3_fu_1677_p1 = tmp_17_reg_2388;

assign zext_ln321_fu_1398_p1 = DDR_buf_V_offset;

assign zext_ln339_fu_1082_p1 = tmp_V_fu_1068_p4;

assign zext_ln414_1_fu_1541_p1 = tmp_14_fu_1534_p3;

assign zext_ln662_fu_1167_p1 = tmp_12_fu_1159_p3;

assign zext_ln682_fu_1133_p1 = mantissa_V_fu_1124_p4;

always @ (posedge ap_clk) begin
    shl_ln269_reg_2271[2:0] <= 3'b000;
    tmp_11_reg_2297[2:0] <= 3'b000;
    bound4_reg_2356[2:0] <= 3'b000;
    zext_ln288_3_reg_2398[8:5] <= 4'b0000;
end

endmodule //load_shortcut
