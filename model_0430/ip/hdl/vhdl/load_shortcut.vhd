-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load_shortcut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_buf_sc_0_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_0_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_0_V_we0 : OUT STD_LOGIC;
    out_buf_sc_0_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_1_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_1_V_we0 : OUT STD_LOGIC;
    out_buf_sc_1_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_2_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_2_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_2_V_we0 : OUT STD_LOGIC;
    out_buf_sc_2_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_3_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_3_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_3_V_we0 : OUT STD_LOGIC;
    out_buf_sc_3_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_4_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_4_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_4_V_we0 : OUT STD_LOGIC;
    out_buf_sc_4_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_5_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_5_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_5_V_we0 : OUT STD_LOGIC;
    out_buf_sc_5_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_6_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_6_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_6_V_we0 : OUT STD_LOGIC;
    out_buf_sc_6_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_7_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_7_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_7_V_we0 : OUT STD_LOGIC;
    out_buf_sc_7_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_8_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_8_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_8_V_we0 : OUT STD_LOGIC;
    out_buf_sc_8_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_9_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_9_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_9_V_we0 : OUT STD_LOGIC;
    out_buf_sc_9_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_10_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_10_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_10_V_we0 : OUT STD_LOGIC;
    out_buf_sc_10_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_11_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_11_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_11_V_we0 : OUT STD_LOGIC;
    out_buf_sc_11_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_12_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_12_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_12_V_we0 : OUT STD_LOGIC;
    out_buf_sc_12_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_13_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_13_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_13_V_we0 : OUT STD_LOGIC;
    out_buf_sc_13_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_14_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_14_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_14_V_we0 : OUT STD_LOGIC;
    out_buf_sc_14_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_15_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_15_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_15_V_we0 : OUT STD_LOGIC;
    out_buf_sc_15_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_16_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_16_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_16_V_we0 : OUT STD_LOGIC;
    out_buf_sc_16_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_17_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_17_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_17_V_we0 : OUT STD_LOGIC;
    out_buf_sc_17_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_18_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_18_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_18_V_we0 : OUT STD_LOGIC;
    out_buf_sc_18_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_19_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_19_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_19_V_we0 : OUT STD_LOGIC;
    out_buf_sc_19_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_20_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_20_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_20_V_we0 : OUT STD_LOGIC;
    out_buf_sc_20_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_21_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_21_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_21_V_we0 : OUT STD_LOGIC;
    out_buf_sc_21_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_22_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_22_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_22_V_we0 : OUT STD_LOGIC;
    out_buf_sc_22_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_23_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_23_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_23_V_we0 : OUT STD_LOGIC;
    out_buf_sc_23_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_24_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_24_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_24_V_we0 : OUT STD_LOGIC;
    out_buf_sc_24_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_25_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_25_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_25_V_we0 : OUT STD_LOGIC;
    out_buf_sc_25_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_26_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_26_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_26_V_we0 : OUT STD_LOGIC;
    out_buf_sc_26_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_27_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_27_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_27_V_we0 : OUT STD_LOGIC;
    out_buf_sc_27_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_28_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_28_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_28_V_we0 : OUT STD_LOGIC;
    out_buf_sc_28_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_29_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_29_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_29_V_we0 : OUT STD_LOGIC;
    out_buf_sc_29_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_30_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_30_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_30_V_we0 : OUT STD_LOGIC;
    out_buf_sc_30_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_buf_sc_31_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_buf_sc_31_V_ce0 : OUT STD_LOGIC;
    out_buf_sc_31_V_we0 : OUT STD_LOGIC;
    out_buf_sc_31_V_d0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_AWVALID : OUT STD_LOGIC;
    m_axi_DDR_buf_V_AWREADY : IN STD_LOGIC;
    m_axi_DDR_buf_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DDR_buf_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DDR_buf_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDR_buf_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDR_buf_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_WVALID : OUT STD_LOGIC;
    m_axi_DDR_buf_V_WREADY : IN STD_LOGIC;
    m_axi_DDR_buf_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_DDR_buf_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_DDR_buf_V_WLAST : OUT STD_LOGIC;
    m_axi_DDR_buf_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_ARVALID : OUT STD_LOGIC;
    m_axi_DDR_buf_V_ARREADY : IN STD_LOGIC;
    m_axi_DDR_buf_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DDR_buf_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_DDR_buf_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDR_buf_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DDR_buf_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DDR_buf_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_RVALID : IN STD_LOGIC;
    m_axi_DDR_buf_V_RREADY : OUT STD_LOGIC;
    m_axi_DDR_buf_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_DDR_buf_V_RLAST : IN STD_LOGIC;
    m_axi_DDR_buf_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_BVALID : IN STD_LOGIC;
    m_axi_DDR_buf_V_BREADY : OUT STD_LOGIC;
    m_axi_DDR_buf_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DDR_buf_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_DDR_buf_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    DDR_buf_V_offset : IN STD_LOGIC_VECTOR (25 downto 0);
    H_fmap_out : IN STD_LOGIC_VECTOR (7 downto 0);
    in_channels : IN STD_LOGIC_VECTOR (11 downto 0);
    out_channel_start : IN STD_LOGIC_VECTOR (31 downto 0);
    row_tile_start : IN STD_LOGIC_VECTOR (31 downto 0);
    switch_bank : IN STD_LOGIC_VECTOR (0 downto 0);
    ddr_stage_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_stage_V_ce0 : OUT STD_LOGIC;
    ddr_stage_V_we0 : OUT STD_LOGIC;
    ddr_stage_V_d0 : OUT STD_LOGIC_VECTOR (511 downto 0);
    ddr_stage_V_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    ddr_tmp_V_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_tmp_V_0_ce0 : OUT STD_LOGIC;
    ddr_tmp_V_0_we0 : OUT STD_LOGIC;
    ddr_tmp_V_0_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_0_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_tmp_V_1_ce0 : OUT STD_LOGIC;
    ddr_tmp_V_1_we0 : OUT STD_LOGIC;
    ddr_tmp_V_1_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_1_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_tmp_V_2_ce0 : OUT STD_LOGIC;
    ddr_tmp_V_2_we0 : OUT STD_LOGIC;
    ddr_tmp_V_2_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_2_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ddr_tmp_V_3_ce0 : OUT STD_LOGIC;
    ddr_tmp_V_3_we0 : OUT STD_LOGIC;
    ddr_tmp_V_3_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ddr_tmp_V_3_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of load_shortcut is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (51 downto 0) := "0000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (51 downto 0) := "0000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (51 downto 0) := "0000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (51 downto 0) := "0000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (51 downto 0) := "0000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (51 downto 0) := "0000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (51 downto 0) := "0001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (51 downto 0) := "0010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (51 downto 0) := "0100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (51 downto 0) := "1000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv29_20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv9_1D : STD_LOGIC_VECTOR (8 downto 0) := "000011101";
    constant ap_const_lv11_71 : STD_LOGIC_VECTOR (10 downto 0) := "00001110001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal DDR_buf_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal DDR_buf_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln269_reg_2283 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_943 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_943_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state47_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_reg_955 : STD_LOGIC_VECTOR (34 downto 0);
    signal row_0_reg_966 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_0_reg_977 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten7_reg_988 : STD_LOGIC_VECTOR (10 downto 0);
    signal row1_0_reg_999 : STD_LOGIC_VECTOR (3 downto 0);
    signal col2_0_reg_1010 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2143 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1044_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_2148 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_2153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal p_Result_s_reg_2159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_V_1_fu_1078_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_2164 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_1092_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_2170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_1110_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_2175 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln37_2_fu_1118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_2_reg_2181 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_1194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_reg_2186 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln37_3_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_3_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_channel_ptr_fu_1254_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal ddr_channel_ptr_reg_2198 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ddr_channel_ptr_3_fu_1306_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ddr_channel_ptr_3_reg_2206 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_2211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln37_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_2227 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_1_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_1_reg_2232 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_1349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln271_reg_2242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_fu_1379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_reg_2247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln271_fu_1386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln271_reg_2256 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln271_1_reg_2261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal add_ln321_fu_1402_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln321_reg_2266 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal shl_ln269_fu_1408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln269_reg_2271 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln269_fu_1428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln269_reg_2283_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_1433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_2287 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal DDR_buf_V_addr_read_reg_2292 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_11_fu_1444_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_11_reg_2297 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln275_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_2302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state51_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state55_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln275_reg_2302_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_2302_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_2302_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln275_fu_1465_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln275_fu_1477_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln275_reg_2311 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln275_reg_2311_pp1_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln275_reg_2311_pp1_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln275_1_fu_1485_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln275_1_reg_2316 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln275_1_reg_2316_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln275_1_reg_2316_pp1_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln275_1_reg_2316_pp1_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_fu_1493_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln414_reg_2325 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln414_reg_2325_pp1_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln414_reg_2325_pp1_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln414_reg_2325_pp1_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal col_fu_1497_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln275_reg_2341 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2107_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln414_reg_2351 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal bound4_fu_1605_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal bound4_reg_2356 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_ln285_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state57_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state59_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state60_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state61_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln285_reg_2361_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2361_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln285_reg_2361_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln285_fu_1626_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln288_fu_1638_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln288_reg_2370 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln288_reg_2370_pp2_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln288_1_fu_1646_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln288_1_reg_2375 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln288_1_reg_2375_pp2_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln288_fu_1654_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln288_reg_2384 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln288_reg_2384_pp2_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln288_reg_2384_pp2_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_reg_2388 : STD_LOGIC_VECTOR (4 downto 0);
    signal col_1_fu_1668_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln288_3_fu_1677_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln288_3_reg_2398 : STD_LOGIC_VECTOR (8 downto 0);
    signal ddr_tmp_V_0_addr_1_reg_2403 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2123_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln414_2_reg_2408 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal add_ln414_2_reg_2408_pp2_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state47 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state51 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state57 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_947_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_row_0_phi_fu_970_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_row1_0_phi_fu_1003_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln271_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln279_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln414_fu_1556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln414_1_fu_1565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln288_fu_1680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln288_1_fu_1719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln414_2_fu_1726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln321_1_fu_1414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_1049_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln267_fu_1052_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_1057_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_1068_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_1082_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_1086_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_1100_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_1106_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_1124_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1311_1_fu_1137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_1140_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_1133_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_1143_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_1147_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_12_fu_1159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1153_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_1167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1171_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_1181_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_1_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln261_fu_1214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1220_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln261_fu_1230_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_9_fu_1240_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_7_fu_1206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln261_1_fu_1234_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln261_1_fu_1250_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln263_4_fu_1265_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln263_fu_1275_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln263_fu_1279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln263_fu_1284_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ddr_channel_ptr_1_fu_1289_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln263_fu_1296_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ddr_channel_ptr_2_fu_1300_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln261_fu_1262_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal H_fmap_out_cast1_fu_1314_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln37_fu_1320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln37_fu_1333_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1349_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln37_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_1_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_1_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_1374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln321_fu_1398_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln321_fu_1395_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln269_fu_1424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln276_fu_1451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln276_fu_1455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_1471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1506_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln275_1_fu_1514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln279_fu_1517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_1534_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_1527_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln414_1_fu_1541_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln414_fu_1545_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln414_1_fu_1560_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bound4_fu_1605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln286_fu_1612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln286_fu_1616_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln286_fu_1616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_2_fu_1632_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2114_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_1694_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_1687_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln288_2_fu_1701_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln288_fu_1705_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln288_1_fu_1714_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2107_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2107_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2114_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2114_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2114_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_2123_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2123_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_2123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_1349_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1506_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2107_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2114_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2114_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2123_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_2123_p20 : STD_LOGIC_VECTOR (10 downto 0);

    component FracNet_sitofp_32lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_fptrunc_6mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_fcmp_32nsncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FracNet_dmul_64nsocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FracNet_sitodp_32pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component FracNet_mul_8ns_2qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_mul_32s_3rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_mul_32s_4sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FracNet_mac_muladtde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component FracNet_mac_muladudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component FracNet_mac_muladvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    FracNet_sitofp_32lbW_U780 : component FracNet_sitofp_32lbW
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_8_reg_2186,
        ce => ap_const_logic_1,
        dout => grp_fu_1034_p1);

    FracNet_fptrunc_6mb6_U781 : component FracNet_fptrunc_6mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_2148,
        ce => ap_const_logic_1,
        dout => grp_fu_1037_p1);

    FracNet_fcmp_32nsncg_U782 : component FracNet_fcmp_32nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_2211,
        din1 => x_assign_reg_2153,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_1040_p2);

    FracNet_dmul_64nsocq_U783 : component FracNet_dmul_64nsocq
    generic map (
        ID => 1,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_2143,
        din1 => ap_const_lv64_3FD0000000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_1044_p2);

    FracNet_sitodp_32pcA_U784 : component FracNet_sitodp_32pcA
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1049_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1049_p1);

    FracNet_mul_8ns_2qcK_U785 : component FracNet_mul_8ns_2qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 29,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1349_p0,
        din1 => ddr_channel_ptr_3_reg_2206,
        ce => ap_const_logic_1,
        dout => grp_fu_1349_p2);

    FracNet_mul_32s_3rcU_U786 : component FracNet_mul_32s_3rcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln271_reg_2256,
        din1 => ret_reg_2247,
        ce => ap_const_logic_1,
        dout => grp_fu_1391_p2);

    FracNet_mul_32s_4sc4_U787 : component FracNet_mul_32s_4sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_reg_2247,
        din1 => grp_fu_1506_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1506_p2);

    FracNet_mac_muladtde_U788 : component FracNet_mac_muladtde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 4,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_2107_p0,
        din1 => grp_fu_2107_p1,
        din2 => trunc_ln414_reg_2325_pp1_iter2_reg,
        dout => grp_fu_2107_p3);

    FracNet_mac_muladudo_U789 : component FracNet_mac_muladudo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 4,
        din2_WIDTH => 5,
        dout_WIDTH => 9)
    port map (
        din0 => grp_fu_2114_p0,
        din1 => grp_fu_2114_p1,
        din2 => grp_fu_2114_p2,
        dout => grp_fu_2114_p3);

    FracNet_mac_muladvdy_U790 : component FracNet_mac_muladvdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_2123_p0,
        din1 => grp_fu_2123_p1,
        din2 => grp_fu_2123_p2,
        dout => grp_fu_2123_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state47);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state51)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state51);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state57) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state57)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state57);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                    ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter3 = ap_const_logic_1))) then
                if (((trunc_ln288_reg_2384_pp2_iter2_reg = ap_const_lv2_3) and (icmp_ln285_reg_2361_pp2_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_3_q0;
                elsif (((trunc_ln288_reg_2384_pp2_iter2_reg = ap_const_lv2_2) and (icmp_ln285_reg_2361_pp2_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_2_q0;
                elsif (((trunc_ln288_reg_2384_pp2_iter2_reg = ap_const_lv2_1) and (icmp_ln285_reg_2361_pp2_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_1_q0;
                elsif (((trunc_ln288_reg_2384_pp2_iter2_reg = ap_const_lv2_0) and (icmp_ln285_reg_2361_pp2_iter2_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ddr_tmp_V_0_q0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021;
                end if;
            end if; 
        end if;
    end process;

    col2_0_reg_1010_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                col2_0_reg_1010 <= col_1_fu_1668_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                col2_0_reg_1010 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    col_0_reg_977_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                col_0_reg_977 <= col_fu_1497_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                col_0_reg_977 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_0_reg_943_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln269_reg_2283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_943 <= i_reg_2287;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                i_0_reg_943 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_988_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten7_reg_988 <= add_ln285_fu_1626_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                indvar_flatten7_reg_988 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_955_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_955 <= add_ln275_fu_1465_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                indvar_flatten_reg_955 <= ap_const_lv35_0;
            end if; 
        end if;
    end process;

    row1_0_reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                row1_0_reg_999 <= select_ln288_1_reg_2375;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                row1_0_reg_999 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row_0_reg_966_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                row_0_reg_966 <= select_ln275_1_reg_2316;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                row_0_reg_966 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln269_reg_2283 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                DDR_buf_V_addr_read_reg_2292 <= m_axi_DDR_buf_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln271_reg_2256 <= add_ln271_fu_1386_p2;
                ret_reg_2247 <= ret_fu_1379_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                add_ln321_reg_2266 <= add_ln321_fu_1402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
                add_ln414_2_reg_2408 <= grp_fu_2123_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln414_2_reg_2408_pp2_iter3_reg <= add_ln414_2_reg_2408;
                icmp_ln285_reg_2361_pp2_iter2_reg <= icmp_ln285_reg_2361_pp2_iter1_reg;
                icmp_ln285_reg_2361_pp2_iter3_reg <= icmp_ln285_reg_2361_pp2_iter2_reg;
                trunc_ln288_reg_2384_pp2_iter2_reg <= trunc_ln288_reg_2384_pp2_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then
                add_ln414_reg_2351 <= grp_fu_2107_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter1_ddr_tt_V_reg_1021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp2_iter3_ddr_tt_V_reg_1021 <= ap_phi_reg_pp2_iter2_ddr_tt_V_reg_1021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                    bound4_reg_2356(10 downto 3) <= bound4_fu_1605_p3(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                ddr_channel_ptr_3_reg_2206 <= ddr_channel_ptr_3_fu_1306_p3;
                tmp_3_reg_2211 <= grp_fu_1034_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                ddr_channel_ptr_reg_2198 <= ddr_channel_ptr_fu_1254_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ddr_tmp_V_0_addr_1_reg_2403 <= sext_ln288_fu_1680_p1(8 - 1 downto 0);
                    zext_ln288_3_reg_2398(4 downto 0) <= zext_ln288_3_fu_1677_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_943_pp0_iter1_reg <= i_0_reg_943;
                icmp_ln269_reg_2283 <= icmp_ln269_fu_1428_p2;
                icmp_ln269_reg_2283_pp0_iter1_reg <= icmp_ln269_reg_2283;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_2287 <= i_fu_1433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln275_reg_2302 <= icmp_ln275_fu_1460_p2;
                icmp_ln275_reg_2302_pp1_iter1_reg <= icmp_ln275_reg_2302;
                select_ln275_1_reg_2316_pp1_iter1_reg <= select_ln275_1_reg_2316;
                select_ln275_reg_2311_pp1_iter1_reg <= select_ln275_reg_2311;
                trunc_ln414_reg_2325_pp1_iter1_reg <= trunc_ln414_reg_2325;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln275_reg_2302_pp1_iter2_reg <= icmp_ln275_reg_2302_pp1_iter1_reg;
                icmp_ln275_reg_2302_pp1_iter3_reg <= icmp_ln275_reg_2302_pp1_iter2_reg;
                select_ln275_1_reg_2316_pp1_iter2_reg <= select_ln275_1_reg_2316_pp1_iter1_reg;
                select_ln275_1_reg_2316_pp1_iter3_reg <= select_ln275_1_reg_2316_pp1_iter2_reg;
                select_ln275_reg_2311_pp1_iter2_reg <= select_ln275_reg_2311_pp1_iter1_reg;
                trunc_ln414_reg_2325_pp1_iter2_reg <= trunc_ln414_reg_2325_pp1_iter1_reg;
                trunc_ln414_reg_2325_pp1_iter3_reg <= trunc_ln414_reg_2325_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln285_reg_2361 <= icmp_ln285_fu_1621_p2;
                icmp_ln285_reg_2361_pp2_iter1_reg <= icmp_ln285_reg_2361;
                select_ln288_1_reg_2375_pp2_iter1_reg <= select_ln288_1_reg_2375;
                select_ln288_reg_2370_pp2_iter1_reg <= select_ln288_reg_2370;
                trunc_ln288_reg_2384_pp2_iter1_reg <= trunc_ln288_reg_2384;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                icmp_ln37_1_reg_2232 <= icmp_ln37_1_fu_1343_p2;
                icmp_ln37_reg_2227 <= icmp_ln37_fu_1337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                icmp_ln37_2_reg_2181 <= icmp_ln37_2_fu_1118_p2;
                isNeg_reg_2170 <= add_ln339_fu_1086_p2(8 downto 8);
                p_Result_s_reg_2159 <= p_Val2_1_fu_1057_p1(31 downto 31);
                tmp_V_1_reg_2164 <= tmp_V_1_fu_1078_p1;
                ush_reg_2175 <= ush_fu_1110_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln37_3_reg_2193 <= icmp_ln37_3_fu_1201_p2;
                p_Val2_8_reg_2186 <= p_Val2_8_fu_1194_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                mul_ln271_1_reg_2261 <= grp_fu_1391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                mul_ln271_reg_2242 <= grp_fu_1349_p2;
                tmp_8_reg_2237 <= grp_fu_1040_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter1_reg = ap_const_lv1_0))) then
                mul_ln275_reg_2341 <= grp_fu_1506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln275_1_reg_2316 <= select_ln275_1_fu_1485_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln275_reg_2311 <= select_ln275_fu_1477_p3;
                trunc_ln414_reg_2325 <= trunc_ln414_fu_1493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln288_1_reg_2375 <= select_ln288_1_fu_1646_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln288_reg_2370 <= select_ln288_fu_1638_p3;
                tmp_17_reg_2388 <= select_ln288_fu_1638_p3(6 downto 2);
                trunc_ln288_reg_2384 <= trunc_ln288_fu_1654_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_DDR_buf_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    shl_ln269_reg_2271(31 downto 3) <= shl_ln269_fu_1408_p2(31 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                    tmp_11_reg_2297(34 downto 3) <= tmp_11_fu_1444_p3(34 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_1_reg_2148 <= grp_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_reg_2143 <= grp_fu_1049_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                x_assign_reg_2153 <= grp_fu_1037_p1;
            end if;
        end if;
    end process;
    shl_ln269_reg_2271(2 downto 0) <= "000";
    tmp_11_reg_2297(2 downto 0) <= "000";
    bound4_reg_2356(2 downto 0) <= "000";
    zext_ln288_3_reg_2398(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_DDR_buf_V_ARREADY, ap_CS_fsm_state40, ap_enable_reg_pp0_iter1, icmp_ln269_fu_1428_p2, ap_enable_reg_pp0_iter0, icmp_ln275_fu_1460_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, icmp_ln285_fu_1621_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((m_axi_DDR_buf_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln269_fu_1428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln269_fu_1428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln275_fu_1460_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln285_fu_1621_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DDR_buf_V_blk_n_AR_assign_proc : process(m_axi_DDR_buf_V_ARREADY, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            DDR_buf_V_blk_n_AR <= m_axi_DDR_buf_V_ARREADY;
        else 
            DDR_buf_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DDR_buf_V_blk_n_R_assign_proc : process(m_axi_DDR_buf_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln269_reg_2283)
    begin
        if (((icmp_ln269_reg_2283 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            DDR_buf_V_blk_n_R <= m_axi_DDR_buf_V_RVALID;
        else 
            DDR_buf_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    H_fmap_out_cast1_fu_1314_p0 <= H_fmap_out;
    add_ln271_fu_1386_p2 <= std_logic_vector(unsigned(mul_ln271_reg_2242) + unsigned(row_tile_start));
    add_ln275_fu_1465_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_955) + unsigned(ap_const_lv35_1));
    add_ln279_fu_1517_p2 <= std_logic_vector(unsigned(zext_ln275_1_fu_1514_p1) + unsigned(mul_ln275_reg_2341));
    add_ln285_fu_1626_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_988) + unsigned(ap_const_lv11_1));
    add_ln288_1_fu_1714_p2 <= std_logic_vector(unsigned(zext_ln288_3_reg_2398) + unsigned(sub_ln288_fu_1705_p2));
    add_ln321_fu_1402_p2 <= std_logic_vector(unsigned(zext_ln321_fu_1398_p1) + unsigned(sext_ln321_fu_1395_p1));
    add_ln339_fu_1086_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_1082_p1));
    add_ln38_fu_1374_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(p_Val2_8_reg_2186));
    add_ln414_1_fu_1560_p2 <= std_logic_vector(unsigned(trunc_ln414_reg_2325_pp1_iter3_reg) + unsigned(sub_ln414_fu_1545_p2));
    and_ln37_1_fu_1369_p2 <= (tmp_8_reg_2237 and and_ln37_fu_1363_p2);
    and_ln37_fu_1363_p2 <= (or_ln37_fu_1355_p2 and or_ln37_1_fu_1359_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(48);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(50);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state50 <= ap_CS_fsm(47);
    ap_CS_fsm_state56 <= ap_CS_fsm(49);
    ap_CS_fsm_state62 <= ap_CS_fsm(51);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_DDR_buf_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln269_reg_2283)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln269_reg_2283 = ap_const_lv1_1) and (m_axi_DDR_buf_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_DDR_buf_V_RVALID, ap_enable_reg_pp0_iter1, icmp_ln269_reg_2283)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln269_reg_2283 = ap_const_lv1_1) and (m_axi_DDR_buf_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state48_pp0_stage0_iter1_assign_proc : process(m_axi_DDR_buf_V_RVALID, icmp_ln269_reg_2283)
    begin
                ap_block_state48_pp0_stage0_iter1 <= ((icmp_ln269_reg_2283 = ap_const_lv1_1) and (m_axi_DDR_buf_V_RVALID = ap_const_logic_0));
    end process;

        ap_block_state49_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state47_assign_proc : process(icmp_ln269_fu_1428_p2)
    begin
        if ((icmp_ln269_fu_1428_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state51_assign_proc : process(icmp_ln275_fu_1460_p2)
    begin
        if ((icmp_ln275_fu_1460_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state57_assign_proc : process(icmp_ln285_fu_1621_p2)
    begin
        if ((icmp_ln285_fu_1621_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state57 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state57 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state62)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state62) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_947_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln269_reg_2283, i_0_reg_943, i_reg_2287)
    begin
        if (((icmp_ln269_reg_2283 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_947_p4 <= i_reg_2287;
        else 
            ap_phi_mux_i_0_phi_fu_947_p4 <= i_0_reg_943;
        end if; 
    end process;


    ap_phi_mux_row1_0_phi_fu_1003_p4_assign_proc : process(row1_0_reg_999, icmp_ln285_reg_2361, ap_CS_fsm_pp2_stage0, select_ln288_1_reg_2375, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln285_reg_2361 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_row1_0_phi_fu_1003_p4 <= select_ln288_1_reg_2375;
        else 
            ap_phi_mux_row1_0_phi_fu_1003_p4 <= row1_0_reg_999;
        end if; 
    end process;


    ap_phi_mux_row_0_phi_fu_970_p4_assign_proc : process(row_0_reg_966, icmp_ln275_reg_2302, ap_CS_fsm_pp1_stage0, select_ln275_1_reg_2316, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln275_reg_2302 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_row_0_phi_fu_970_p4 <= select_ln275_1_reg_2316;
        else 
            ap_phi_mux_row_0_phi_fu_970_p4 <= row_0_reg_966;
        end if; 
    end process;

    ap_phi_reg_pp2_iter0_ddr_tt_V_reg_1021 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state62)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln37_fu_1320_p1 <= tmp_3_reg_2211;
    bound4_fu_1605_p1 <= H_fmap_out;
    bound4_fu_1605_p3 <= (bound4_fu_1605_p1 & ap_const_lv3_0);
    col_1_fu_1668_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln288_fu_1638_p3));
    col_fu_1497_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(select_ln275_fu_1477_p3));
    ddr_channel_ptr_1_fu_1289_p3 <= 
        ddr_channel_ptr_reg_2198 when (icmp_ln263_fu_1279_p2(0) = '1') else 
        sub_ln263_fu_1284_p2;
    ddr_channel_ptr_2_fu_1300_p2 <= std_logic_vector(unsigned(ap_const_lv29_20) + unsigned(sext_ln263_fu_1296_p1));
    ddr_channel_ptr_3_fu_1306_p3 <= 
        ddr_channel_ptr_2_fu_1300_p2 when (switch_bank(0) = '1') else 
        sext_ln261_fu_1262_p1;
    ddr_channel_ptr_fu_1254_p3 <= 
        sub_ln261_1_fu_1234_p2 when (tmp_7_fu_1206_p3(0) = '1') else 
        zext_ln261_1_fu_1250_p1;

    ddr_stage_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0, zext_ln271_fu_1439_p1, sext_ln279_fu_1522_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            ddr_stage_V_address0 <= sext_ln279_fu_1522_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ddr_stage_V_address0 <= zext_ln271_fu_1439_p1(8 - 1 downto 0);
        else 
            ddr_stage_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ddr_stage_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            ddr_stage_V_ce0 <= ap_const_logic_1;
        else 
            ddr_stage_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_stage_V_d0 <= DDR_buf_V_addr_read_reg_2292;

    ddr_stage_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln269_reg_2283_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln269_reg_2283_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ddr_stage_V_we0 <= ap_const_logic_1;
        else 
            ddr_stage_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_tmp_V_0_address0_assign_proc : process(ddr_tmp_V_0_addr_1_reg_2403, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln414_fu_1556_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ddr_tmp_V_0_address0 <= ddr_tmp_V_0_addr_1_reg_2403;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_0_address0 <= sext_ln414_fu_1556_p1(8 - 1 downto 0);
        else 
            ddr_tmp_V_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ddr_tmp_V_0_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            ddr_tmp_V_0_ce0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_tmp_V_0_d0 <= ddr_stage_V_q0(128 - 1 downto 0);

    ddr_tmp_V_0_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln275_reg_2302_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_0_we0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_tmp_V_1_address0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln414_1_fu_1565_p1, sext_ln288_1_fu_1719_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ddr_tmp_V_1_address0 <= sext_ln288_1_fu_1719_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_1_address0 <= sext_ln414_1_fu_1565_p1(8 - 1 downto 0);
        else 
            ddr_tmp_V_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ddr_tmp_V_1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            ddr_tmp_V_1_ce0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_tmp_V_1_d0 <= ddr_stage_V_q0(255 downto 128);

    ddr_tmp_V_1_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln275_reg_2302_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_1_we0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_tmp_V_2_address0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln414_1_fu_1565_p1, sext_ln288_1_fu_1719_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ddr_tmp_V_2_address0 <= sext_ln288_1_fu_1719_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_2_address0 <= sext_ln414_1_fu_1565_p1(8 - 1 downto 0);
        else 
            ddr_tmp_V_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ddr_tmp_V_2_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            ddr_tmp_V_2_ce0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_tmp_V_2_d0 <= ddr_stage_V_q0(383 downto 256);

    ddr_tmp_V_2_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln275_reg_2302_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_2_we0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ddr_tmp_V_3_address0_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0, sext_ln414_1_fu_1565_p1, sext_ln288_1_fu_1719_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            ddr_tmp_V_3_address0 <= sext_ln288_1_fu_1719_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_3_address0 <= sext_ln414_1_fu_1565_p1(8 - 1 downto 0);
        else 
            ddr_tmp_V_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    ddr_tmp_V_3_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)))) then 
            ddr_tmp_V_3_ce0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ddr_tmp_V_3_d0 <= ddr_stage_V_q0(511 downto 384);

    ddr_tmp_V_3_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln275_reg_2302_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln275_reg_2302_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ddr_tmp_V_3_we0 <= ap_const_logic_1;
        else 
            ddr_tmp_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1049_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln267_fu_1052_p0),32));

    grp_fu_1349_p0 <= grp_fu_1349_p00(8 - 1 downto 0);
    grp_fu_1349_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(H_fmap_out_cast1_fu_1314_p0),32));
    grp_fu_1506_p1 <= grp_fu_1506_p10(4 - 1 downto 0);
    grp_fu_1506_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln275_1_reg_2316),32));
    grp_fu_2107_p0 <= ap_const_lv9_1D(6 - 1 downto 0);
    grp_fu_2107_p1 <= grp_fu_2107_p10(4 - 1 downto 0);
    grp_fu_2107_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln275_1_reg_2316_pp1_iter2_reg),9));
    grp_fu_2114_p0 <= ap_const_lv9_1D(6 - 1 downto 0);
    grp_fu_2114_p1 <= grp_fu_2114_p10(4 - 1 downto 0);
    grp_fu_2114_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln288_1_reg_2375),9));
    grp_fu_2114_p2 <= grp_fu_2114_p20(5 - 1 downto 0);
    grp_fu_2114_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_2388),9));
    grp_fu_2123_p0 <= ap_const_lv11_71(8 - 1 downto 0);
    grp_fu_2123_p1 <= grp_fu_2123_p10(4 - 1 downto 0);
    grp_fu_2123_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln288_1_reg_2375_pp2_iter1_reg),11));
    grp_fu_2123_p2 <= grp_fu_2123_p20(7 - 1 downto 0);
    grp_fu_2123_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln288_reg_2370_pp2_iter1_reg),11));
    i_fu_1433_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_947_p4) + unsigned(ap_const_lv31_1));
    icmp_ln263_fu_1279_p2 <= "1" when (signed(ddr_channel_ptr_reg_2198) < signed(zext_ln263_fu_1275_p1)) else "0";
    icmp_ln269_fu_1428_p2 <= "1" when (signed(zext_ln269_fu_1424_p1) < signed(shl_ln269_reg_2271)) else "0";
    icmp_ln275_fu_1460_p2 <= "1" when (indvar_flatten_reg_955 = tmp_11_reg_2297) else "0";
    icmp_ln276_fu_1455_p2 <= "1" when (signed(zext_ln276_fu_1451_p1) < signed(ret_reg_2247)) else "0";
    icmp_ln285_fu_1621_p2 <= "1" when (indvar_flatten7_reg_988 = bound4_reg_2356) else "0";
    icmp_ln286_fu_1616_p1 <= H_fmap_out;
    icmp_ln286_fu_1616_p2 <= "1" when (signed(zext_ln286_fu_1612_p1) < signed(icmp_ln286_fu_1616_p1)) else "0";
    icmp_ln37_1_fu_1343_p2 <= "1" when (trunc_ln37_fu_1333_p1 = ap_const_lv23_0) else "0";
    icmp_ln37_2_fu_1118_p2 <= "0" when (tmp_V_fu_1068_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_3_fu_1201_p2 <= "1" when (tmp_V_1_reg_2164 = ap_const_lv23_0) else "0";
    icmp_ln37_fu_1337_p2 <= "0" when (tmp_4_fu_1323_p4 = ap_const_lv8_FF) else "1";
    isNeg_fu_1092_p3 <= add_ln339_fu_1086_p2(8 downto 8);
    m_axi_DDR_buf_V_ARADDR <= sext_ln321_1_fu_1414_p1(32 - 1 downto 0);
    m_axi_DDR_buf_V_ARBURST <= ap_const_lv2_0;
    m_axi_DDR_buf_V_ARCACHE <= ap_const_lv4_0;
    m_axi_DDR_buf_V_ARID <= ap_const_lv1_0;
    m_axi_DDR_buf_V_ARLEN <= std_logic_vector(shift_left(unsigned(ret_reg_2247),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    m_axi_DDR_buf_V_ARLOCK <= ap_const_lv2_0;
    m_axi_DDR_buf_V_ARPROT <= ap_const_lv3_0;
    m_axi_DDR_buf_V_ARQOS <= ap_const_lv4_0;
    m_axi_DDR_buf_V_ARREGION <= ap_const_lv4_0;
    m_axi_DDR_buf_V_ARSIZE <= ap_const_lv3_0;
    m_axi_DDR_buf_V_ARUSER <= ap_const_lv1_0;

    m_axi_DDR_buf_V_ARVALID_assign_proc : process(m_axi_DDR_buf_V_ARREADY, ap_CS_fsm_state40)
    begin
        if (((m_axi_DDR_buf_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            m_axi_DDR_buf_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_DDR_buf_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_DDR_buf_V_AWADDR <= ap_const_lv32_0;
    m_axi_DDR_buf_V_AWBURST <= ap_const_lv2_0;
    m_axi_DDR_buf_V_AWCACHE <= ap_const_lv4_0;
    m_axi_DDR_buf_V_AWID <= ap_const_lv1_0;
    m_axi_DDR_buf_V_AWLEN <= ap_const_lv32_0;
    m_axi_DDR_buf_V_AWLOCK <= ap_const_lv2_0;
    m_axi_DDR_buf_V_AWPROT <= ap_const_lv3_0;
    m_axi_DDR_buf_V_AWQOS <= ap_const_lv4_0;
    m_axi_DDR_buf_V_AWREGION <= ap_const_lv4_0;
    m_axi_DDR_buf_V_AWSIZE <= ap_const_lv3_0;
    m_axi_DDR_buf_V_AWUSER <= ap_const_lv1_0;
    m_axi_DDR_buf_V_AWVALID <= ap_const_logic_0;
    m_axi_DDR_buf_V_BREADY <= ap_const_logic_0;

    m_axi_DDR_buf_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln269_reg_2283, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln269_reg_2283 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_DDR_buf_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_DDR_buf_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_DDR_buf_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_DDR_buf_V_WID <= ap_const_lv1_0;
    m_axi_DDR_buf_V_WLAST <= ap_const_logic_0;
    m_axi_DDR_buf_V_WSTRB <= ap_const_lv64_0;
    m_axi_DDR_buf_V_WUSER <= ap_const_lv1_0;
    m_axi_DDR_buf_V_WVALID <= ap_const_logic_0;
    mantissa_V_fu_1124_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_2164) & ap_const_lv1_0);
    or_ln37_1_fu_1359_p2 <= (icmp_ln37_3_reg_2193 or icmp_ln37_2_reg_2181);
    or_ln37_fu_1355_p2 <= (icmp_ln37_reg_2227 or icmp_ln37_1_reg_2232);
    out_buf_sc_0_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_0_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_0_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_0_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(4 - 1 downto 0);

    out_buf_sc_0_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_0_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_10_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_10_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_10_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_10_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(43 downto 40);

    out_buf_sc_10_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_10_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_11_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_11_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_11_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_11_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(47 downto 44);

    out_buf_sc_11_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_11_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_12_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_12_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_12_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_12_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(51 downto 48);

    out_buf_sc_12_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_12_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_13_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_13_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_13_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_13_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(55 downto 52);

    out_buf_sc_13_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_13_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_14_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_14_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_14_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_14_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(59 downto 56);

    out_buf_sc_14_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_14_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_15_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_15_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_15_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_15_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(63 downto 60);

    out_buf_sc_15_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_15_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_15_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_16_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_16_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_16_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_16_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_16_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(67 downto 64);

    out_buf_sc_16_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_16_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_16_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_17_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_17_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_17_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_17_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(71 downto 68);

    out_buf_sc_17_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_17_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_17_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_18_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_18_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_18_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_18_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_18_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(75 downto 72);

    out_buf_sc_18_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_18_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_18_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_19_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_19_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_19_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_19_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_19_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(79 downto 76);

    out_buf_sc_19_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_19_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_19_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_1_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_1_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_1_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_1_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(7 downto 4);

    out_buf_sc_1_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_1_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_20_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_20_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_20_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_20_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_20_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(83 downto 80);

    out_buf_sc_20_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_20_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_20_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_21_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_21_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_21_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_21_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_21_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(87 downto 84);

    out_buf_sc_21_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_21_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_21_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_22_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_22_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_22_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_22_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_22_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(91 downto 88);

    out_buf_sc_22_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_22_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_22_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_23_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_23_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_23_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_23_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_23_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(95 downto 92);

    out_buf_sc_23_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_23_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_23_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_24_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_24_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_24_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_24_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_24_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(99 downto 96);

    out_buf_sc_24_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_24_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_24_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_25_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_25_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_25_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_25_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_25_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(103 downto 100);

    out_buf_sc_25_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_25_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_25_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_26_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_26_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_26_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_26_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_26_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(107 downto 104);

    out_buf_sc_26_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_26_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_26_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_27_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_27_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_27_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_27_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_27_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(111 downto 108);

    out_buf_sc_27_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_27_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_27_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_28_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_28_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_28_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_28_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_28_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(115 downto 112);

    out_buf_sc_28_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_28_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_28_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_29_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_29_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_29_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_29_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_29_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(119 downto 116);

    out_buf_sc_29_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_29_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_29_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_2_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_2_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_2_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_2_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(11 downto 8);

    out_buf_sc_2_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_2_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_30_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_30_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_30_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_30_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_30_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(123 downto 120);

    out_buf_sc_30_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_30_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_30_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_31_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_31_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_31_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_31_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_31_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(127 downto 124);

    out_buf_sc_31_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_31_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_31_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_3_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_3_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_3_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_3_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(15 downto 12);

    out_buf_sc_3_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_3_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_4_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_4_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_4_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_4_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(19 downto 16);

    out_buf_sc_4_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_4_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_5_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_5_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_5_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_5_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(23 downto 20);

    out_buf_sc_5_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_5_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_6_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_6_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_6_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_6_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(27 downto 24);

    out_buf_sc_6_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_6_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_7_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_7_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_7_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_7_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(31 downto 28);

    out_buf_sc_7_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_7_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_8_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_8_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_8_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_8_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(35 downto 32);

    out_buf_sc_8_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_8_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_9_V_address0 <= sext_ln414_2_fu_1726_p1(10 - 1 downto 0);

    out_buf_sc_9_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_9_V_ce0 <= ap_const_logic_1;
        else 
            out_buf_sc_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_buf_sc_9_V_d0 <= ap_phi_reg_pp2_iter4_ddr_tt_V_reg_1021(39 downto 36);

    out_buf_sc_9_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln285_reg_2361_pp2_iter3_reg, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln285_reg_2361_pp2_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_1))) then 
            out_buf_sc_9_V_we0 <= ap_const_logic_1;
        else 
            out_buf_sc_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_fu_1057_p1 <= x_assign_reg_2153;
    p_Val2_7_fu_1181_p3 <= 
        zext_ln662_fu_1167_p1 when (isNeg_reg_2170(0) = '1') else 
        tmp_10_fu_1171_p4;
    p_Val2_8_fu_1194_p3 <= 
        result_V_1_fu_1188_p2 when (p_Result_s_reg_2159(0) = '1') else 
        p_Val2_7_fu_1181_p3;
    r_V_1_fu_1153_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_1133_p1),to_integer(unsigned('0' & zext_ln1287_fu_1143_p1(31-1 downto 0)))));
    r_V_fu_1147_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_1124_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_1140_p1(25-1 downto 0)))));
    result_V_1_fu_1188_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_7_fu_1181_p3));
    ret_fu_1379_p3 <= 
        add_ln38_fu_1374_p2 when (and_ln37_1_fu_1369_p2(0) = '1') else 
        p_Val2_8_reg_2186;
    row_2_fu_1632_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_row1_0_phi_fu_1003_p4));
    row_fu_1471_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_row_0_phi_fu_970_p4));
    select_ln275_1_fu_1485_p3 <= 
        ap_phi_mux_row_0_phi_fu_970_p4 when (icmp_ln276_fu_1455_p2(0) = '1') else 
        row_fu_1471_p2;
    select_ln275_fu_1477_p3 <= 
        col_0_reg_977 when (icmp_ln276_fu_1455_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln288_1_fu_1646_p3 <= 
        ap_phi_mux_row1_0_phi_fu_1003_p4 when (icmp_ln286_fu_1616_p2(0) = '1') else 
        row_2_fu_1632_p2;
    select_ln288_fu_1638_p3 <= 
        col2_0_reg_1010 when (icmp_ln286_fu_1616_p2(0) = '1') else 
        ap_const_lv7_0;
        sext_ln1311_1_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_2175),32));

        sext_ln1311_2_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_2175),25));

        sext_ln1311_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1100_p2),9));

        sext_ln261_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ddr_channel_ptr_reg_2198),29));

        sext_ln263_fu_1296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ddr_channel_ptr_1_fu_1289_p3),29));

    sext_ln267_fu_1052_p0 <= H_fmap_out;
        sext_ln279_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln279_fu_1517_p2),64));

        sext_ln288_1_fu_1719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln288_1_fu_1714_p2),64));

        sext_ln288_fu_1680_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2114_p3),64));

        sext_ln321_1_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln321_reg_2266),64));

        sext_ln321_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln271_1_reg_2261),33));

        sext_ln414_1_fu_1565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln414_1_fu_1560_p2),64));

        sext_ln414_2_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln414_2_reg_2408_pp2_iter3_reg),64));

        sext_ln414_fu_1556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln414_reg_2351),64));

    shl_ln269_fu_1408_p2 <= std_logic_vector(shift_left(unsigned(ret_reg_2247),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    sub_ln1311_fu_1100_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_1068_p4));
    sub_ln261_1_fu_1234_p2 <= std_logic_vector(unsigned(ap_const_lv28_0) - unsigned(zext_ln261_fu_1230_p1));
    sub_ln261_fu_1214_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(out_channel_start));
    sub_ln263_fu_1284_p2 <= std_logic_vector(signed(ddr_channel_ptr_reg_2198) - signed(zext_ln263_fu_1275_p1));
    sub_ln288_fu_1705_p2 <= std_logic_vector(unsigned(tmp_15_fu_1687_p3) - unsigned(zext_ln288_2_fu_1701_p1));
    sub_ln414_fu_1545_p2 <= std_logic_vector(unsigned(tmp_13_fu_1527_p3) - unsigned(zext_ln414_1_fu_1541_p1));
    tmp_10_fu_1171_p4 <= r_V_1_fu_1153_p2(55 downto 24);
    tmp_11_fu_1444_p3 <= (ret_reg_2247 & ap_const_lv3_0);
    tmp_12_fu_1159_p3 <= r_V_fu_1147_p2(24 downto 24);
    tmp_13_fu_1527_p3 <= (select_ln275_1_reg_2316_pp1_iter3_reg & ap_const_lv5_0);
    tmp_14_fu_1534_p3 <= (select_ln275_1_reg_2316_pp1_iter3_reg & ap_const_lv2_0);
    tmp_15_fu_1687_p3 <= (select_ln288_1_reg_2375_pp2_iter1_reg & ap_const_lv5_0);
    tmp_16_fu_1694_p3 <= (select_ln288_1_reg_2375_pp2_iter1_reg & ap_const_lv2_0);
    tmp_4_fu_1323_p4 <= bitcast_ln37_fu_1320_p1(30 downto 23);
    tmp_7_fu_1206_p3 <= out_channel_start(31 downto 31);
    tmp_9_fu_1240_p4 <= out_channel_start(31 downto 5);
    tmp_V_1_fu_1078_p1 <= p_Val2_1_fu_1057_p1(23 - 1 downto 0);
    tmp_V_fu_1068_p4 <= p_Val2_1_fu_1057_p1(30 downto 23);
    tmp_s_fu_1220_p4 <= sub_ln261_fu_1214_p2(31 downto 5);
    trunc_ln263_4_fu_1265_p4 <= in_channels(10 downto 5);
    trunc_ln288_fu_1654_p1 <= select_ln288_fu_1638_p3(2 - 1 downto 0);
    trunc_ln37_fu_1333_p1 <= bitcast_ln37_fu_1320_p1(23 - 1 downto 0);
    trunc_ln414_fu_1493_p1 <= select_ln275_fu_1477_p3(9 - 1 downto 0);
    ush_fu_1110_p3 <= 
        sext_ln1311_fu_1106_p1 when (isNeg_fu_1092_p3(0) = '1') else 
        add_ln339_fu_1086_p2;
    zext_ln1287_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_1137_p1),79));
    zext_ln261_1_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_1240_p4),28));
    zext_ln261_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1220_p4),28));
    zext_ln263_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln263_4_fu_1265_p4),28));
    zext_ln269_fu_1424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_947_p4),32));
    zext_ln271_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_943_pp0_iter1_reg),64));
    zext_ln275_1_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln275_reg_2311_pp1_iter2_reg),32));
    zext_ln276_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_reg_977),32));
    zext_ln286_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_0_reg_1010),8));
    zext_ln288_2_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1694_p3),9));
    zext_ln288_3_fu_1677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_2388),9));
    zext_ln321_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DDR_buf_V_offset),33));
    zext_ln339_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_1068_p4),9));
    zext_ln414_1_fu_1541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1534_p3),9));
    zext_ln662_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1159_p3),32));
    zext_ln682_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_1124_p4),79));
end behav;
